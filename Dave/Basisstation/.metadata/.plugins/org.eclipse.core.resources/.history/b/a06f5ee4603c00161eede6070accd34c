   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_vadc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_VADC_GROUP_ExternalMuxControlInit,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_VADC_GROUP_ExternalMuxControlInit:
  25              	.LFB172:
  26              	 .file 1 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc_vadc.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @file xmc_vadc.h
   3:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @date 2016-03-09
   4:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** ***************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-02-15:
  40:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Initial <br>
  41:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *      
  42:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-02-20:
  43:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Revised for XMC1201 device.<br>
  44:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   
  45:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-04-27:
  46:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added new APIs for SHS.<br>
  47:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added New APIs for trigger edge selection.<BR>
  48:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  51:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-06-20:
  52:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-06-25:
  54:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - BFL configuration in channel initialization fixed.
  55:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  56:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-07-28:
  57:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  58:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  59:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  60:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - New APIs Created.
  61:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  62:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  63:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetAlias
  64:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_GetInputClass
  65:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  66:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  67:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  68:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  69:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  70:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-12-01:
  71:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Added:
  72:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - XMC4300 device supported
  73:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  74:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Fixed:
  75:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_TriggerEvent API updated. OR operation removed. 
  76:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - XMC_VADC_GLOBAL_ClearEvent API updated. Multiple events triggering on clearing the event i
  77:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Wrong MACRO name defined in xmc_vadc_map.h file corrected for XMC4200/4100 devices.
  78:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *       XMC_VADC_G3_SAMPLE renamed to XMC_VADC_G1_SAMPLE
  79:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  80:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2015-12-01:
  81:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - New APIs Created.
  82:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled
  83:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *           - XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled
  84:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  85:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  86:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  87:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2016-03-09:
  88:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Optimization of write only registers
  89:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  90:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * 2016-03-18:
  91:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     - Fixed XMC_VADC_GLOBAL_SHS_IsConverterReady(): API checks the STEPCFG register for the read
  92:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *       SHSCFG SFR. 
  93:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  94:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @endcond 
  95:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
  96:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
  97:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
  98:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #ifndef XMC_VADC_H
  99:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_H
 100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
 101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
 102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * HEADER FILES
 103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
 104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #include <xmc_common.h>
 105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #include <xmc_scu.h>
 106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #include <xmc_vadc_map.h>
 107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @addtogroup XMClib XMC Peripheral Library
 110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @{
 111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
 113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @addtogroup VADC
 115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @brief Versatile Analog to Digital Converter (VADC) driver for XMC microcontroller family.
 116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The XMC microcontroller provides a series of analog input channels connected to a cluster of Ana
 118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Converters using the Successive Approximation Register (SAR) principle to convert analog input v
 119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to discrete digital values.
 120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \if XMC1
 121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The XMC1x is based on Sample & Hold converters, where a cluster contains 2 Sample&Hold units whi
 122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * converter.
 123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \endif
 124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each converter of the ADC cluster can operate independent of the others, controlled by a dedicat
 126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * registers and triggered by a dedicated group request source. The results of each channel can be 
 127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * dedicated channel-specific result register or in a group-specific result register.<BR>
 128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The Versatile Analog to Digital Converter module (VADC) of the XMC comprises a set of converter 
 130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * can be operated either independently or via a common request source that emulates a background c
 131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each converter block is equipped with a dedicated input multiplexer and dedicated request source
 132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * which together build separate groups.
 133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \if XMC4
 135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc4x.png"
 136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \else
 137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @image html "vadc_overview_xmc1x.png"
 138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \endif
 139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The VADC LLD is split into GLOBAL and GROUP related APIs.<BR>
 141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <B>GLOBAL: </B><BR>
 142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <UL>
 143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Global APIs act on the entire ADC module. Configures global configuration registers</LI>
 144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Allows configuration of the background request source of the VADC.</LI>
 145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>The clock related configurations for the VADC module are configured in the Global APIs/</LI>
 146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>The Global API names are prefixed by the \b XMC_VADC_GLOBAL_ and they accept ::XMC_VADC_GLOB
 147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the background request source of the VADC. The APIs which act on the background r
 149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_Background</LI>
 150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the sample and hold unit of the VADC. The APIs which act on the SHS related regis
 151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GLOBAL_SHS_</LI>
 152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * </UL><BR>
 153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
 154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <B>GROUP: </B><BR>
 155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <UL>
 156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Group APIs act on a VADC group. Configures the group configuration registers</LI>
 157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the queue request source of the VADC. The APIs which act on the queue related reg
 158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Queue</LI>
 159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configures the scan request source of the VADC. The APIs which act on the scan related regis
 160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     are prefixed by \b XMC_VADC_GROUP_Scan</LI>
 161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>Configuration of the channels of each group are done by the API which have a prefix as
 162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     \b XMC_VADC_GROUP_Channel.</LI>
 163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <LI>The Group API names are prefixed by the \b XMC_VADC_GROUP_ and they accept ::XMC_VADC_GROUP_
 164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     one of its arguments.</LI>
 165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * </UL><BR>
 166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @{
 167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
 169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
 170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * MACROS
 171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
 172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if ((UC_SERIES == XMC42)||(UC_SERIES == XMC41) || (UC_SERIES == XMC43))
 174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC44 || UC_SERIES == XMC47 || UC_SERIES == XMC48)
 190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC45)
 206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (4U) /*  Defines the maximum number of groups available in
 214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC14 || UC_SERIES == XMC13 || UC_SERIES == XMC12)
 222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (1U) /*  Defines the availability of group resource in a d
 223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (1U) /*  Defines the availability of scan request resource
 224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (1U) /*  Defines the availability of queue request resourc
 225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (1U) /*  Defines the availability of external multiplexer 
 226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (1U) /*  Defines the availability of boundary check suppor
 228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (1U) /*  Defines the availability of synchronous request s
 229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (1U) /*  Defines the availability of boundary flags in a d
 231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (1U) /*  Defines the external multiplexer channel selectio
 232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (1U) /* Defines the availability of sample and hold module
 234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (1U) /* Define the availability of a source specific resul
 235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (UC_SERIES == XMC11)
 238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_AVAILABLE         (0U) /*  Defines the availability of group resource in a d
 239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GSCAN_AVAILABLE         (0U) /*  Defines the availability of scan request resource
 240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_QUEUE_AVAILABLE         (0U) /*  Defines the availability of queue request resourc
 241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_AVAILABLE          (0U) /*  Defines the availability of external multiplexer 
 242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     device*/
 243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_AVAILABLE      (0U) /*  Defines the availability of boundary check suppor
 244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MULTIPLE_SLAVEGROUPS    (0U) /*  Defines the availability of synchronous request s
 245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_MAXIMUM_NUM_GROUPS      (2U) /*  Defines the maximum number of groups available in
 246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_BOUNDARY_FLAG_SELECT    (0U) /*  Defines the availability of boundary flags in a d
 247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_START_UP_CAL_ACTIVE (3U) /*  Defines the need for SHS startup calibration acti
 248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     XMC1100 devices */
 249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_CONV_ENABLE_FOR_XMC11   (*(uint32_t*) 0x40010500UL) /*  Defines the additional err
 250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     XMC1100 device for effective working*/ 
 251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_EMUX_CH_SEL_STYLE       (0U) /*  Defines the external multiplexer channel selectio
 252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     operation for a particular device*/
 253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_SHS_AVAILABLE           (0U) /* Defines the availability of sample and hold module
 254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_GROUP_SRCREG_AVAILABLE  (0U) /* Define the availability of a source specific resul
 255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_NUM_PORTS               (16U) /* Defines the number of hardware ports that can be 
 258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     as triggers and gating signals */
 259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_NUM_RESULT_REGISTERS    (16U) /* Defines the number of result holding registers pe
 261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #define XMC_VADC_NUM_CHANNELS_PER_GROUP  (8U)  /**< Defines the number of ADC channels per group */
 263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
 265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * ENUMS
 266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
 267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef uint16_t XMC_VADC_RESULT_SIZE_t; /**< Type defined the converted result size to unsigned 16
 268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef VADC_GLOBAL_TypeDef XMC_VADC_GLOBAL_t; /**< Type defined the device header file vadc global
 269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                              type to VADC type*/
 270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_AVAILABLE == 1U)
 272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef VADC_G_TypeDef XMC_VADC_GROUP_t; /**< Type defined the device header file vadc group regist
 273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                              type to VADC Group type*/
 274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef SHS_Type XMC_VADC_GLOBAL_SHS_t; /**< Type defined the sample and hold register structure*/
 278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the return status after execution of VADC specific API's. Use @ref XMC_VADC_STATUS_t fo
 281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_STATUS
 283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STATUS_SUCCESS = 0,   /**< Returned when the API has been able to fulfill the callers re
 285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STATUS_ERROR          /**< Returned when the API cannot fulfill the request */
 286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_STATUS_t;
 287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the various service requests lines. Each group can raise up to 4 service requests indep
 290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  all groups together have the possibility of raising 4 module wide service requests. Use @ref XM
 291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  enumeration.
 292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SR
 294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR0 = 0, /**< Group specific Service Request-0 */
 296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR1,     /**< Group specific Service Request-1 */
 297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR2,     /**< Group specific Service Request-2 */
 298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_GROUP_SR3,     /**< Group specific Service Request-3 */
 299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR0,    /**< Module Wide Common Service Request-0 */
 300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR1,    /**< Module Wide Common Service Request-1 */
 301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR2,    /**< Module Wide Common Service Request-2 */
 302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SR_SHARED_SR3    /**< Module Wide Common Service Request-3 */
 303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SR_t;
 304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the mode of operation of a channel, when an ongoing conversion gets interrupted in betw
 307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_STARTMODE_t for this enumeration.
 308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_STARTMODE
 310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_WFS = 0, /**< An ongoing conversion completes without interruption */
 312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CIR,     /**< An ongoing conversion can be interrupted and resumed later*/
 313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_STARTMODE_CNR     /**< An ongoing conversion can be interrupted and never resumed */
 314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_STARTMODE_t;
 315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the edge sensitivity of the trigger signal which can assert a conversion.
 318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_EDGE_t for this enumeration.
 319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_EDGE
 321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_NONE = 0, /**< No external trigger. Conversion request can be asserted by s
 323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_FALLING,  /**< The falling edge of the external trigger can assert conversi
 324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_RISING,   /**< The rising edge of the external trigger can assert conversio
 325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_TRIGGER_EDGE_ANY       /**< Both the edges can assert conversion request */
 326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_EDGE_t;
 327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the external trigger input selection possibilities, to assert a conversion. Refer the V
 330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  section of the reference manual for details of peripherals which can be used. Also refer xmc_va
 331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  detailed definitions of the peripherals which can take the control of these enumeration items.
 332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Use @ref XMC_VADC_TRIGGER_INPUT_SELECT_t for this enumeration.
 333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_TRIGGER_INPUT_SELECT
 335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_A = 0, /**< Trigger select signal A */
 337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_B,     /**< Trigger select signal B */
 338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_C,     /**< Trigger select signal C */
 339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_D,     /**< Trigger select signal D */
 340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_E,     /**< Trigger select signal E */
 341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_F,     /**< Trigger select signal F */
 342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_G,     /**< Trigger select signal G */
 343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_H,     /**< Trigger select signal H */
 344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_I,     /**< Trigger select signal I */
 345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_J,     /**< Trigger select signal J */
 346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_K,     /**< Trigger select signal K */
 347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_L,     /**< Trigger select signal L */
 348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_M,     /**< Trigger select signal M */
 349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_N,     /**< Trigger select signal N */
 350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_O,     /**< Trigger select signal O */
 351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_TR_P      /**< Trigger select signal P */
 352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   
 353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_TRIGGER_INPUT_SELECT_t;
 354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the external gating input selection possibilities, to gate the conversion requests. Ref
 357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  interconnects section of the reference manual for details of peripherals which can be used. Als
 358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  xmc_vadc_map.h file for detailed definitions of the peripherals which can take the control of t
 359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  items. Use @ref XMC_VADC_GATE_INPUT_SELECT_t for this enumeration.
 360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GATE_INPUT_SELECT
 362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_A = 0, /**< Gating select signal A */
 364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_B,     /**< Gating select signal B */
 365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_C,     /**< Gating select signal C */
 366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_D,     /**< Gating select signal D */
 367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_E,     /**< Gating select signal E */
 368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_F,     /**< Gating select signal F */
 369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_G,     /**< Gating select signal G */
 370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_H,     /**< Gating select signal H */
 371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_I,     /**< Gating select signal I */
 372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_J,     /**< Gating select signal J */
 373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_K,     /**< Gating select signal K */
 374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_L,     /**< Gating select signal L */
 375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_M,     /**< Gating select signal M */
 376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_N,     /**< Gating select signal N */
 377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_O,     /**< Gating select signal O */
 378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_REQ_GT_P      /**< Gating select signal P */
 379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   
 380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GATE_INPUT_SELECT_t;
 381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the condition for gating the conversion requests. It can be used to set the ENGT field
 384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * of ASMR/BSMR/QMR register respectively for auto_scan/background_scan/queue request sources.
 385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Use @ref XMC_VADC_GATEMODE_t for this enumeration.
 386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GATEMODE
 388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_BLOCK = 0,  /**< External triggers are permanently blocked */
 390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_IGNORE,     /**< External triggers are unconditionally passed */
 391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVEHIGH, /**< External trigger is passed only if the gate signal is high */
 392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GATEMODE_ACTIVELOW  /**< External trigger is passed only if the gate signal is low */
 393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GATEMODE_t;
 394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the conversion result handling mode. Use @ref XMC_VADC_DMM_t for this enumeration.
 397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_DMM
 399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_DMM_REDUCTION_MODE = 0, /**< Standard Data reduction mode*/
 401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_DMM_FILTERING_MODE,     /**< Provide option to select Finite Impulse Response Filter (FI
 402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                         Infinite Impulse Response Filter (IIR)*/
 403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_DMM_DIFFERENCE_MODE,    /**< Difference mode is selected*/
 404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_DMM_t;
 405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the conversion mode. It defines the resolution of conversion. Use XMC_VADC_CONVMODE_t f
 408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CONVMODE
 410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_12BIT       = 0,  /**< Results of conversion are 12bits wide */
 412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_10BIT       = 1,  /**< Results of conversion are 10bits wide */
 413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_8BIT        = 2,  /**< Results of conversion are 8bits wide */
 414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CONVMODE_FASTCOMPARE = 5  /**< Input signal compared with a preset range */
 415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CONVMODE_t;
 416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the output of a fast compare mode. Use @ref XMC_VADC_FAST_COMPARE_t for
 419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  this enumeration.
 420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_FAST_COMPARE
 422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_LOW = 0, /**< Input lower than than programmed reference */
 424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_HIGH ,   /**< Input higher than than programmed reference */
 425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_FAST_COMPARE_UNKNOWN  /**< Unknown, Conversion probably still ongoing */
 426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_FAST_COMPARE_t;
 427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
 428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the type of scan request source to be used. It can choose between auto scan and backgrou
 430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * source methods. Use @ref XMC_VADC_SCAN_TYPE_t for this enumeration.
 431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_TYPE
 433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_GROUPSCAN = 0, /**< Auto scan mode of operation selected. Also called as Group
 435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_TYPE_BACKGROUND    /**< Background scan mode of operation selected. Also called as 
 436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SCAN_TYPE_t;
 437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the behavior of load event for the scan request source. Use @ref XMC_VADC_SCAN_LOAD_t fo
 440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SCAN_LOAD
 442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_OVERWRITE = 0, /**< The old set of channels is discarded in favor of the new s
 444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          awaiting conversion */
 445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SCAN_LOAD_COMBINE       /**< The new set of channels are combined with the pending chann
 446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          previous set */
 447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SCAN_LOAD_t;
 448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the conversion classes that can be selected for each channel. The enumeration members ho
 451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * global classes. The conversion classes decides the properties of conversion, like resolution, sa
 452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Use @ref XMC_VADC_CHANNEL_CONV_t for this enumeration.
 453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_CONV
 456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 = 0, /**< Conversion property set-0 specific to the group */
 458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GROUP_CLASS1,     /**< Conversion property set-1 specific to the group */
 459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS0,    /**< Conversion property set-0, Module wide */
 460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1    /**< Conversion property set-1, Module wide */
 461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONV_t;
 462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the references to boundary values used for limit checking feature. Each of these can be 
 465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * either an upper bound or a lower bound. Use @ref XMC_VADC_CHANNEL_BOUNDARY_t for this enumeratio
 466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY
 469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 = 0, /**< Group specific Boundary-0 value */
 471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1,     /**< Group specific Boundary-1 value */
 472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0,    /**< Module wide Boundary-0 value */
 473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1    /**< Module wide Boundary-1 value */
 474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_t;
 475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the voltage which the capacitor is charged to. Used in Broken wire detection feature. Us
 478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @ref XMC_VADC_CHANNEL_BWDCH_t for this enumeration.
 479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BWDCH
 481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAGND = 0, /**< Capacitor pre-charged to ground*/
 483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BWDCH_VAREF     /**< Capacitor pre-charged to reference voltage*/
 484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BWDCH_t;
 485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Defines the criteria for event generation by the channel. Use @ref XMC_VADC_CHANNEL_EVGEN_t fo
 488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_EVGEN
 490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_NEVER     = 0,  /**< No event generated */
 492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_INBOUND   = 1U, /**< Event generated when the result is within the normal 
 493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPHIGH  = 1U, /**< Event generated when the result of fast compare opera
 494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_OUTBOUND  = 2U, /**< Event generated when the result is outside the normal
 495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_COMPLOW   = 2U, /**< Event generated when the result result of fast compar
 496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_EVGEN_ALWAYS    = 3U /**< Event generated always after conversion - unconditiona
 497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_EVGEN_t;
 498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the reference voltage selection for conversion. Use @ref XMC_VADC_CHANNEL_REF_t for this
 501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_REF
 503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_INTREF = 0, /**< Internal VARef */
 505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_REF_ALT_CH0    /**< External voltage available on Channel-0 of the perticular gr
 506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_REF_t;
 507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
 508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the criteria for boundary flag assertion. Use @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t
 510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * enumeration.
 511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_BOUNDARY_CONDITION
 513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_ABOVE_BAND = 0, /**< Set Boundary condition criteria to asser
 515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_BOUNDARY_CONDITION_BELOW_BAND     /**< Set Boundary condition criteria to assert
 516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_BOUNDARY_CONDITION_t;
 517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
 518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the event which can lead to a global service request assertion. Use @ref XMC_VADC_GLOBAL
 520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * enumeration.
 521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_EVENT
 523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE = VADC_GLOBEFLAG_SEVGLB_Msk, /**< Background scan request sourc
 525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_EVENT_RESULT      = VADC_GLOBEFLAG_REVGLB_Msk  /**< Global result event */
 526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_EVENT_t;
 527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
 528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the power modes of a VADC Group. Use @ref XMC_VADC_GROUP_POWERMODE_t for this enumeratio
 530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_POWERMODE
 532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_OFF       = 0, /**< Group is powered down */
 534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED1,     /**< Reserved */
 535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_RESERVED2,     /**< Reserved */
 536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_POWERMODE_NORMAL        /**< Group is powered up */
 537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_POWERMODE_t;
 538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the status of a VADC group (also known as kernel). Use @ref XMC_VADC_GROUP_STATE_t for 
 541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_STATE
 543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_IDLE = 0, /**< Idle and can convert if requested */
 545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_STATE_BUSY      /**< Busy with an ongoing conversion */
 546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_STATE_t;
 547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the reference to sample time and conversion mode settings. Use @ref XMC_VADC_GROUP_CONV
 550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  enumeration.
 551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_CONV
 553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_STD = 0, /**< Settings pertaining to channels directly attached to VADC modul
 555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_CONV_EMUX    /**< Settings pertaining to channels connected to VADC via EMUX */
 556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONV_t;
 557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the request source arbiter behavior. Use @ref XMC_VADC_GROUP_ARBMODE_t for this enumera
 560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_ARBMODE
 562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ALWAYS = 0, /**< Arbiter runs all the time */
 564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_ARBMODE_ONDEMAND    /**< Arbiter runs only if a conversion request is asserted by 
 565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                           request sources */
 566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_ARBMODE_t;
 567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the EMUX mode of operation. Use @ref XMC_VADC_GROUP_EMUXMODE_t for this enumeration.
 570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXMODE
 572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SWCTRL = 0,     /**< Perform EMUX in Software control mode*/
 574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_STEADYMODE,     /**< Perform EMUX in Steady mode (Use EMUX set value)*/
 575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SINGLEMODE,     /**< Perform EMUX in Single step mode*/
 576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXMODE_SEQUENCEMODE,   /**< Perform EMUX in Sequence mode*/
 577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXMODE_t;
 578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the EMUX channel selection encoding scheme. Use @ref XMC_VADC_GROUP_EMUXCODE_t for this
 581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_EMUXCODE
 583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_BINARY = 0, /**< A linearly incrementing code serves are MUX-SEL */
 585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_EMUXCODE_GRAY       /**< The MUX-SEL is gray encoded */
 586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCODE_t;
 587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the service request set used. Use @ref XMC_VADC_GROUP_IRQ_t for this enumeration.
 590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_IRQ
 592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_KERNEL = 0, /**< Refers to Group specific service request */
 594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_IRQ_SHARED     /**< Refers to Module wide service request */
 595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_IRQ_t;
 596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the alignment of the converted result. Use @ref XMC_VADC_RESULT_ALIGN_t for this enumer
 599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_ALIGN
 601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_LEFT = 0,  /**< Always align result to left */
 603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_ALIGN_RIGHT      /**< Always align result to right */
 604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_RESULT_ALIGN_t;
 605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_RESULT_SUBTRATION 
 607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_LEFT_ALIGN  = 0U,  /**< Always align result to left */
 609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_12BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_LEFT_ALIGN  = 2U,  /**< Always align result to left */
 611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_10BIT_RIGHT_ALIGN = 0U,  /**< Always align result to right */
 612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_LEFT_ALIGN   = 4U,  /**< Always align result to left */
 613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_RESULT_SUBTRATION_8BIT_RIGHT_ALIGN  = 0U,  /**< Always align result to right */
 614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_RESULT_SUBTRATION_t;
 615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the request source arbitration priority. Use @ref XMC_VADC_GROUP_RS_PRIORITY_t for this
 618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_RS_PRIORITY
 620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_0 = 0, /**< Lowest priority for the request source*/
 622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_1,     /**< Second lowest priority for the request source*/
 623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_2,     /**< Second highest priority for the request source*/
 624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_RS_PRIORITY_3,     /**< Highest priority for the request source*/
 625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GROUP_RS_PRIORITY_t;
 626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the various modes for the boundary flag. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t f
 629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_BOUNDARY_FLAG_MODE
 631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_DISABLED = 0,       /**< Disable boundary flag*/
 633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED,            /**< Always enable boundary*/
 634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_LOW, /**< Enable boundary flag when gate level
 635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_ENABLED_ACTIVE_HIGH /**< Enable boundary flag when gate level
 636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t;
 637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Defines the boundary select for Channel. Use @ref XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_t for this 
 641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_SELECT
 643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_LOWER_BOUND = 0U,       /**< Select the lower boundary*/
 645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_SELECT_UPPER_BOUND = 2U        /**< Selects the upper boundary*/
 646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_SELECT_t;
 647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the group indices. Use @ref XMC_VADC_GROUP_INDEX_t for this enumeration.
 651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GROUP_INDEX
 653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_0   = 0,
 655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_1,
 656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS > 2U)
 657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_2,
 658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_INDEX_3
 659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GROUP_INDEX_t;
 661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** * Defines channel alias.
 664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** * All enum items are available for channels 0 and 1. Other Channels can accept only XMC_VADC_CHANNE
 665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** */
 666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_CHANNEL_ALIAS
 667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_DISABLED = -1,
 669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH0 = 0,
 670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH1 = 1,
 671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH2 = 2,
 672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH3 = 3,
 673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH4 = 4,
 674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH5 = 5,
 675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH6 = 6,
 676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_CHANNEL_ALIAS_CH7 = 7
 677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_ALIAS_t;
 678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the gain calibration selection.
 682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_GAIN_LEVEL
 684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_0 = SHS_CALOC0_CALOFFVAL0_Pos, /**< Select the calibration value for gain
 686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_1 = SHS_CALOC0_CALOFFVAL1_Pos, /**< Select the calibration value for gain
 687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_2 = SHS_CALOC0_CALOFFVAL2_Pos, /**< Select the calibration value for gain
 688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_GAIN_LEVEL_3 = SHS_CALOC0_CALOFFVAL3_Pos  /**< Select the calibration value for gain
 689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_SHS_GAIN_LEVEL_t;
 690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Defines the Delta sigma loop.
 693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_SHS_LOOP_CH
 695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_0 = SHS_LOOP_LPCH0_Pos, /**< Select Delta-sigma loop 0*/
 697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_SHS_LOOP_CH_1 = SHS_LOOP_LPCH1_Pos /**< Select Delta-sigma loop 1*/
 698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_SHS_LOOP_CH_t;
 699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Provides the order in which the SHS should do the calibration
 702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER
 704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_POST_CONV = 0, /**< Calibration occur after conversion take
 706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_PRE_CONV   /**< Calibration occur before conversion takes p
 707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t;
 708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Provides possible routing values for the boundary flag.
 713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef enum XMC_VADC_BOUNDARY_NODE
 715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_0 = 0U, /**<Route the Group boundary flag to Common b
 717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_1,      /**<Route the Group boundary flag to Common b
 718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_2,      /**<Route the Group boundary flag to Common b
 719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_BOUNDARY_FLAG_3,      /**<Route the Group boundary flag to Common b
 720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_0,  /**<Route the Group boundary flag to Common Service Req
 721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_1,  /**<Route the Group boundary flag to Common Service Req
 722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_2,  /**<Route the Group boundary flag to Common Service Req
 723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_BOUNDARY_NODE_COMMON_SR_LINE_3   /**<Route the Group boundary flag to Common Service Req
 724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_BOUNDARY_NODE_t;
 725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
 727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * DATA STRUCTURES
 728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
 729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /*Anonymous structure/union guard start*/
 730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if defined(__CC_ARM)
 731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma push
 732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma anon_unions
 733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #elif defined(__TASKING__)
 734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma warning 586
 735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure initializing the VADC scan request source. Use type @ref XMC_VADC_SCAN_CONFIG_t for t
 739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_SCAN_CONFIG
 741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          group. This field determines how scan request source would
 744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter. If the Conversion
 746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          selected as Cancel inject repeat/Never mode then this fiel
 747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          priority of scan request source. Uses @ref XMC_VADC_GROUP_
 748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Use any one Group related result register as 
 754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_INPUT_SELECT_t enumeration*/
 762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal. Uses @ref
 764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_TRIGGER_EDGE_t */
 765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_GATE_INPUT_SELECT_t */
 768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 8;
 769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Decides whether timer mode for equi-distant s
 770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       activated or not.*/
 771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 3;
 772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t asctrl;
 774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                    : 2;
 780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversions be initiated by external hardware trig
 781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t req_src_interrupt  : 1;  /**< Request source event can be generated after a conv
 782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t enable_auto_scan   : 1;  /**< Enables the continuous conversion mode. Conversion
 783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                  of the last channel in a scan sequence will cause 
 784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t load_mode          : 1;  /**< Selects load event mode. Uses @ref XMC_VADC_SCAN_L
 785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                    : 26;
 786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t asmr;
 788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_SCAN_CONFIG_t;
 790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef XMC_VADC_SCAN_CONFIG_t XMC_VADC_BACKGROUND_CONFIG_t; /**< Type defined the scan configurati
 793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                  structure for background Request S
 794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure initializing the VADC channel. Use type XMC_VADC_CHANNEL_CONFIG_t for this enumeratio
 797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_CHANNEL_CONFIG
 799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t input_class                : 2;  /**< Input conversion class selection.
 805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_CONV_t */
 806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                            : 2;
 807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t lower_boundary_select      : 2;  /**< Which boundary register serves as lower bo
 808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t upper_boundary_select      : 2;  /**< Which boundary register serves as upper bo
 810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Accepts enum @ref XMC_VADC_CHANNEL_BOUNDAR
 811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t event_gen_criteria         : 2;  /**< When should an event be generated?
 812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_EVGEN_t */
 813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sync_conversion            : 1;  /**< Enables synchronous conversion for the con
 814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t alternate_reference        : 1;  /**< Input reference voltage selection either V
 815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_REF_t*/
 816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                            : 4;
 817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t result_reg_number          : 4;  /**< Group result register number */
 818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t use_global_result          : 1;  /**< Use global result register for background 
 819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t result_alignment           : 1;  /**< Alignment of the results read in the resul
 820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_RESULT_ALIGN_t */
 821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                            : 6;
 822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t broken_wire_detect_channel : 2;  /**< Source to be used to charge the capacitor 
 823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BWDCH_t. */
 824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t broken_wire_detect         : 1;  /**< Configures extra phase before the capacito
 825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t chctr;
 827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 8;
 833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch0 : 1; /**< Condition for which the boundary flag should
 835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                        Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDITIO
 836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch1 : 1; /**< Condition for which the boundary flag should
 837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch2 : 1; /**< Condition for which the boundary flag should
 839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t flag_output_condition_ch3 : 1; /**< Condition for which the boundary flag should
 841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          Uses @ref XMC_VADC_CHANNEL_BOUNDARY_CONDIT
 842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 4;
 844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 4;
 846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch0  : 1; /**< Inverts boundary flag output.*/
 848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch1  : 1; /**< Inverts boundary flag output.*/
 849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch2  : 1; /**< Inverts boundary flag output.*/
 850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t invert_boundary_flag_ch3  : 1; /**< Inverts boundary flag output.*/
 851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch0  : 1; /**< Enable the boundary flag output on the speci
 854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch1  : 1; /**< Enable the boundary flag output on the speci
 855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch2  : 1; /**< Enable the boundary flag output on the speci
 856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary_flag_output_ch3  : 1; /**< Enable the boundary flag output on the speci
 857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 12;
 859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t bfl;
 861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
 863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch0    : 4; /**< Specify the basic operation of boundary flag 
 868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch1    : 4; /**< Specify the basic operation of boundary flag 
 870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch2    : 4; /**< Specify the basic operation of boundary flag 
 872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t boundary_flag_mode_ch3    : 4; /**< Specify the basic operation of boundary flag 
 874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref  XMC_VADC_GROUP_BOUNDARY_FLAG_MODE_
 875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****          uint32_t                           : 16;
 876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t bflc;
 878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     bool    channel_priority;  /**< Only non priority channels can be converted by Background Reque
 881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     int8_t  alias_channel;     /**< Specifies the channel which has to be aliased with CH0/CH1 (whi
 882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                     Force the value to \b(int8_t)-1 to bypass alias feature.
 883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                     Uses @ref XMC_VADC_CHANNEL_ALIAS_t  for configuration.*/
 884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_CHANNEL_CONFIG_t;
 885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure to initialize a queue entry. Use type @ref XMC_VADC_QUEUE_ENTRY_t.
 888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_ENTRY
 890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t channel_num        : 5;  /**< Channel number associated with this queue entry.<B
 896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t refill_needed      : 1;  /**< Conversion completed channel gets inserted back in
 897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t generate_interrupt : 1;  /**< Generates a queue request source event */
 898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t external_trigger   : 1;  /**< Conversion requests are raised on an external trig
 899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                    : 24;
 900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t qinr0;
 903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_QUEUE_ENTRY_t;
 905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure initializing a VADC queue request source. Use type @ref XMC_VADC_QUEUE_CONFIG_t.
 908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_QUEUE_CONFIG
 910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t conv_start_mode  : 2;  /**< One converter is shared between the queue and scan request
 912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          group. This field determines how queue request source woul
 913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                          conversion. Uses @ref XMC_VADC_STARTMODE_t */
 914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t req_src_priority : 2;  /**< Request source priority for the arbiter.Uses @ref XMC_VADC
 915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_GROUP_SRCREG_AVAILABLE == (1U))
 920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t src_specific_result_reg : 4;  /**< Uses any one Group related result register as
 921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     for all conversions results. To use the  indivi
 922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                     from each channel configuration, configure this
 923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
 927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_signal          : 4;  /**< Select one of the 16 possibilities for trigge
 928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_INPUT_SELECT_t */
 929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t trigger_edge            : 2;  /**< Edge selection for trigger signal.
 931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_TRIGGER_EDGE_t */
 932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 1;
 933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t gate_signal             : 4;  /**< Select one of the 16 possibilities for gating
 934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GATE_INPUT_SELECT_t */
 935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 8;
 936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t timer_mode              : 1;  /**< Timer mode for equi-distant sampling shall be
 937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 3;
 938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t qctrl0;
 940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                   : 2;
 946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t external_trigger  : 1;  /**< Are external triggers supported? */
 947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                   : 29;
 948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t qmr0;
 950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_QUEUE_CONFIG_t;
 952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure to initialize the global input class configuration. Configured parameters are sample 
 956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  conversion Mode.
 957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLASS
 959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
 965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
 967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
 968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
 970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
 972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
 973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
 974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
 975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
 976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
 977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
 978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 16;
 979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
 980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
 981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globiclass;
 982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
 983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLASS_t;
 984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
 986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
 987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Structure to initialize converter and arbiter clock configuration
 988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
 989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CLOCK
 990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
 992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
 993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
 994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
 995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
 996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t analog_clock_divider     : 5;  /**< Clock for the converter. <BR>Range: [0x0 to 
 997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 2;
 998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t msb_conversion_clock     : 1;  /**< Additional clock cycle for analog converter 
 999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t arbiter_clock_divider    : 2;  /**< Request source arbiter clock divider. <BR>Ra
1000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 5;
1001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 17;
1002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globcfg;
1004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CLOCK_t;
1006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1008:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1009:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1010:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Structure to initialize the VADC Global functions
1011:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1012:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_CONFIG
1013:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1014:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1015:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1016:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1017:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1018:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1019:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1020:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1021:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1022:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1023:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globbound;
1024:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1025:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE != 0U)
1026:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLOCK_t clock_config; /**< ADC clock configurations*/
1027:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1028:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class0;      /**< ADC input conversion configurations for GLOBICLASS[0
1029:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GLOBAL_CLASS_t  class1;      /**< ADC input conversion configurations for GLOBICLASS[1
1030:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1031:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1032:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1033:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1034:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 16;
1035:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Data reduction stages */
1036:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
1037:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Results of the next conversion will not be ov
1038:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       result register until the previous value is r
1039:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 6;
1040:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1041:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1042:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t globrcr;
1043:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1044:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1045:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1046:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1047:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1048:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t module_disable              : 1;  /**< Disables the module clock.*/
1049:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                             : 2;
1050:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t disable_sleep_mode_control  : 1;  /**< Set it to true in order to disable the Sl
1051:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                             : 28;
1052:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1053:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t clc;
1054:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1055:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GLOBAL_CONFIG_t;
1056:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1057:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1058:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1059:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Structure to initialize the group input class configuration. Configured parameters are sample t
1060:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  conversion Mode.
1061:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1062:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CLASS
1063:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1064:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1065:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1066:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1067:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1068:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sample_time_std_conv            : 5;  /**< Sample time for channels directly con
1069:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1070:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
1071:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_standard        : 3;  /**< Conversion mode for channels directly
1072:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1073:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
1074:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t sampling_phase_emux_channel     : 5;  /**< Sample time for channels connected vi
1075:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               <BR>Range: [0x0 to 0x1F] */
1076:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 3;
1077:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t conversion_mode_emux            : 3;  /**< Conversion mode for channels connecte
1078:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               Uses @ref XMC_VADC_CONVMODE_t */
1079:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                                 : 5;
1080:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1081:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_iclass0;
1082:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1083:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_CLASS_t;
1084:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1085:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1086:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1087:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  EMUX related configuration structure.
1088:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1089:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_EMUXCFG
1090:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1091:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1092:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1093:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1094:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1095:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t starting_external_channel : 3;  /**< External channel number to which the VADC w
1096:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         generate a control signal (needed to select
1097:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         the analog multiplexer)*/
1098:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 13;
1099:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t connected_channel         : 10; /**< The Channel to which the EMUX is connected.
1101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
1102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t connected_channel         : 5;  /**< The Channel to which the EMUX is connected.
1103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 5;
1104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t emux_mode                 : 2;  /**< Selects the external multiplexer modes: Ste
1106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         Uses @ref XMC_VADC_GROUP_EMUXMODE_t*/
1107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t emux_coding               : 1;  /**< Select Binary or Gray coding. Uses @ref XMC
1108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t stce_usage                : 1;  /**< Use STCE for each conversion of an external
1109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
1110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t emux_channel_select_style : 1;  /**< Selects the style of configuring the \b con
1111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                         (Each bit represents the channel or entire 
1112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 1;
1113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
1114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                           : 2;
1115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_emuxctr;
1118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_EMUXCFG_t;
1120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Group Configuration Data Structures
1124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GROUP_CONFIG
1127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_EMUXCFG_t emux_config;    /**< External multiplexer related configurations */
1129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class0;           /**< ADC input conversion configurations for GxICLASS[
1130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     XMC_VADC_GROUP_CLASS_t class1;           /**< ADC input conversion configurations for GxICLASS[
1131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary0  : 12;  /**< Boundary value for results comparison*/
1136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t boundary1  : 12;  /**< Boundary value for results comparison*/
1138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t            : 4;
1139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_bound;
1141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 4;
1147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t arbitration_round_length : 2;  /**< Number of arbiter slots to be considered */
1148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 1;
1149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t arbiter_mode             : 1;  /**< Arbiter mode - Select either Continuous mode
1150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_ARBMODE_t */
1151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                          : 24;
1152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_arbcfg;
1154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_GROUP_CONFIG_t;
1156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   Structure to initialize VADC Group result register.
1159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_RESULT_CONFIG
1162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     union
1164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        struct
1166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        {
1167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 16;
1168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t data_reduction_control  : 4;  /**< Configures the data reduction stages */
1169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t post_processing_mode    : 2;  /**< Result data processing mode. Uses @ref  XMC_V
1170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       For normal operation select
1171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_DMM_t::XMC_VADC_DMM_REDUCTION_MODE
1172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       and data_reduction_control as 0*/
1173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 2;
1174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t wait_for_read_mode      : 1;  /**< Allow the conversion only after previous resu
1175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t part_of_fifo            : 2;  /**< Make the result register a part of Result FIF
1176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t                         : 4;
1177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****           uint32_t event_gen_enable        : 1;  /**< Generates an event on availability of new res
1178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        };
1179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****        uint32_t g_rcr;
1180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** } XMC_VADC_RESULT_CONFIG_t;
1182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Structure to initialize the Stepper configurations
1186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_STEP_CONFIG
1188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   union
1190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   {
1191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     struct
1192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step0            :3;  /**< Select a Sample and hold unit for the stepper's s
1194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step0             :1;  /**< Should the step be added to the sequence */
1196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step1            :3;  /**< Select a Sample and hold unit for the stepper's s
1197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step1             :1;  /**< Should the step be added to the sequence */
1199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step2            :3;  /**< Select a Sample and hold unit for the stepper's s
1200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step2             :1;  /**< Should the step be added to the sequence */
1202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step3            :3;  /**< Select a Sample and hold unit for the stepper's s
1203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step3             :1;  /**< Should the step be added to the sequence */
1205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step4            :3;  /**< Select a Sample and hold unit for the stepper's s
1206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step4             :1;  /**< Should the step be added to the sequence */
1208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step5            :3;  /**< Select a Sample and hold unit for the stepper's s
1209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step5             :1;  /**< Should the step be added to the sequence */
1211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step6            :3;  /**< Select a Sample and hold unit for the stepper's s
1212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step6             :1;  /**< Should the step be added to the sequence */
1214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t sh_unit_step7            :3;  /**< Select a Sample and hold unit for the stepper's s
1215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       Uses @ref XMC_VADC_GROUP_INDEX_t*/
1216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t enable_step7             :1;  /**< Should the step be added to the sequence */
1217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t stepcfg;
1220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   };
1221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t;
1222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sample and hold Initialization structure
1225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** typedef struct XMC_VADC_GLOBAL_SHS_CONFIG
1227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   union
1229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   {
1230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     struct
1231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t shs_clock_divider        :4; /**< The divider value for the SHS clock. Range: [0x0 t
1233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t                          :6;
1234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t analog_reference_select  :2; /**< It is possible to different reference voltage for 
1235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                  */
1236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t                          :20;
1237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t shscfg;
1239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   };
1240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GLOBAL_SHS_CALIBRATION_ORDER_t calibration_order; /**< order in which the calibration sh
1242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_GLOBAL_SHS_CONFIG_t;
1244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Detailed result structure
1248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  typedef struct XMC_VADC_DETAILED_RESULT
1250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   union
1252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   {
1253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     struct
1254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     {
1255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t result                   :16;  /**< Result of the Analog to digital conversion*/
1256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t data_reduction_counter   :4;   /**< Results reduction counter value*/
1257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t channel_number           :5;   /**< Converted channel number*/
1258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t emux_channel_number      :3;   /**< Converted external multiplexer channel number.
1259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                  Only applicable for GxRES[0] result register*/
1260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t converted_request_source :2;   /**< Converted request source*/
1261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t fast_compare_result      :1;   /**< Fast compare result if conversion mode is fast c
1262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****       uint32_t vaild_result             :1;   /**< Valid flag is set when a new result is available
1263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     };
1264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     uint32_t res;
1265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   };
1266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }XMC_VADC_DETAILED_RESULT_t;
1267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
1268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /*Anonymous structure/union guard end*/
1270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if defined(__CC_ARM)
1271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma pop
1272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #elif defined(__TASKING__)
1273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   #pragma warning restore
1274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
1276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * static inline functions
1277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
1278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U) 
1280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_CHECK_GROUP_PTR(XMC_VADC_GROUP_t *const group_ptr)
1281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
1283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1) || (group_ptr == VADC_G2) || (group_ptr =
1284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #else
1285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return((group_ptr == VADC_G0) || (group_ptr == VADC_G1));
1286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**************************************************************************************************
1290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * API Prototypes
1291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  **************************************************************************************************
1292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #ifdef __cplusplus
1294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** extern "C" {
1295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param None
1299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the VADC module.<BR>\n
1304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would ungate the clock to the VADC module (if applicable). Also this API would bring
1305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the VADC module out of reset state(if applicable), by asserting the appropriate registers.
1306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_UngatePeripheralClock() and XMC_SCU_RESET_DeassertPeripheral
1307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * if needed. Directly accessed register is  COMPARATOR.ORCCTRL (Refer to the errata for XMC1100).
1308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableModule().
1311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_EnableModule(void);
1313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param None
1316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the VADC module.<BR>\n
1321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would gate the clock to the VADC module (if applicable). Also this API would put
1322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the VADC module into the reset state(if applicable) by asserting the appropriate registers.
1323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would invoke XMC_SCU_CLOCK_GatePeripheralClock() and XMC_SCU_RESET_AssertPeripheralRese
1324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModule().
1327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_DisableModule(void);
1329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module.
1333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config Pointer to initialization data structure
1334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the VADC global module with the associated configuration structure pointed by \a con
1339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * enables the global access to registers by configuring reset and clock un-gating for selected dev
1340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * initializes global class, boundary , result resources by setting GLOBICLASS,GLOBBOUND,GLOBRCR re
1341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * configures the global analog and digital clock dividers by setting GLOBCFG register. Refer relat
1342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the configurations later in the program.
1343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_ClockInit()<BR>
1346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
1348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the VADC module clock.\n\n Call this API before any further configuration of VADC. It se
1357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * register to enable.
1358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Enable:Wrong Module Pointer", (global_ptr == VADC))
1366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_DISR_Msk);
1367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the VADC module clock.\n\n After this API call, no conversion will occur. Call
1377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableModuleClock() to enable the VADC module later in the program.
1378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_Init()
1381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableModuleClock(XMC_VADC_GLOBAL_t *const global_ptr)
1384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_Disable:Wrong Module Pointer", (global_ptr == VADC))
1386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_DISR_Pos);
1387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables VADC module to sleep if a sleep request comes.\n\n
1397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * It resets the EDIS bit of CLC register for enabling the sleep mode.
1398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableSleepMode().
1401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC &= ~((uint32_t)VADC_CLC_EDIS_Msk);
1406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr    Constant pointer to the VADC module.
1411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Ignores the sleep mode request for the VADC.\n\n
1416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * With the sleep feature enabled, the module will respond to sleep
1417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * requests by going into a low power mode. It resets the EDIS bit of CLC register for enabling the
1418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnableSleepMode().
1421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableSleepMode(XMC_VADC_GLOBAL_t *const global_ptr)
1423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableSleepMode:Wrong Module Pointer", (global_ptr == VADC))
1425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->CLC |= (uint32_t) ((uint32_t)1 <<  VADC_CLC_EDIS_Pos);
1426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  Pointer to the data structure containing clock configuration data
1433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the VADC clock.<BR>\n
1438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up the clock configuration of the VADC module using the config structure pointed by \a conf
1439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The clock to the analog converter and to the request source arbiter is configured by setting the
1440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClockInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_
1446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClockInit:Wrong Module Pointer", (global_ptr == VADC))
1448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Write the Clock configuration into the GLOBCFG register */
1450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG = (uint32_t)(config->globcfg | (VADC_GLOBCFG_DIVWC_Msk));
1451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  Conversion class parameter structure
1458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param conv_type configure the input call for either standard conversion or EMUX related convers
1459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
1460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                Range: [0x0, 0x1]
1461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the ADC conversion settings like sample time and resolution.<BR>\n
1464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc global resource associated with \a config structure. It
1465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
1466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the GLOBALICLASS register specified by \a set_num with the required settings.
1467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
1475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
1476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC global module
1480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  Pointer to result configuration data structure
1481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes global result register.<BR>\n
1486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes Global Result Register with specified settings configured in the \a config structure
1487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * results in configuration of GLOBRCR register. This helps in configuring the Data reduction mode,
1488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * , wait for read mode on the GLOBRES register.
1489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_ResultInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
1497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  {
1498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ResultInit:Wrong Module Pointer", (global_ptr == VADC))
1499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Configure GLOBRCR*/
1501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBRCR = config->g_rcr;
1502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  }
1503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  
1504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of G
1512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * enable the startup calibration feature. After turning it on, it loops until all active groups fi
1513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call XMC_VADC_GLOBAL_Enable() and XMC_VADC_GLOBAL_ClockInit() before calling this API in sequenc
1514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisableStartupCalibration() can disable the calibration feature at runtime.
1515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr);
1522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr  Constant pointer to the VADC module.
1527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the startup calibration feature of the VADC module.\n\n It configures the SUCAL bit of 
1532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * disable the startup calibration feature. Calling the API XMC_VADC_GLOBAL_EnsableStartupCalibrati
1533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * calibration feature at runtime.
1534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisableStartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
1540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisableStartupCalibration:Wrong Module Pointer", (global_ptr == VADC)
1542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= ~((uint32_t)VADC_GLOBCFG_SUCAL_Msk);
1543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
1546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be disabled. <BR>
1550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the post calibration for a particular group specified as \a group_number.\n\n It config
1556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * of GLOBCFG register to disable the post calibration feature. Call XMC_VADC_GLOBAL_Enable() and
1557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit() before calling this API in sequence. Calling the API
1558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_EnablePostCalibration() can enable back the calibration feature at runtime.
1559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_Enable()<BR>
1562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_ClockInit()<BR>
1563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, ui
1568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_numbe
1572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_number  group number whose post calibration feature is to be enabled. <BR>
1578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                      Range[0x0 to 0x3] Accepts the enum ::XMC_VADC_GROUP_INDEX_t
1579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the post calibration for a particular group specified as \a group_number.\n\n It configu
1584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * of GLOBCFG register to enable the post calibration feature. Calling the API XMC_VADC_GLOBAL_Disa
1585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * can disable the calibration feature at runtime.
1586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
1589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_EnablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uin
1592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_EnablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))
1594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBCFG &= (~ (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_nu
1596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
1600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>Range[0 - 4095]
1604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>Range[0 - 4095]
1605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
1610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * absolute boundaries. They define a range against which the result of a conversion can be compare
1611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
1612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
1613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * GLOBBOUND1 who will derive their values from this palette.
1614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t boundary0, c
1620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
1625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary_value  Boundary Value<BR>Range[0 - 4095]
1626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs either the boundary 0 or boundary 1 for result comparison.\n\n This defines a range aga
1631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
1632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * capability to a compare value.
1633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
1639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
1640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                            const uint16_t boundary_value); 
1641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_AVAILABLE== 1U)
1644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr   Constant pointer to the VADC module
1647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param emuxif       The EMUX interface<BR>Range[0x0 - 0x1]
1648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group        The VADC group which must be bound to the desired emux
1649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Binds a VADC \a group to an EMUX interface specified in \a emuxif.<BR>\n
1654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects which group's scan request source will control the EMUX interface (set of control select
1655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * By passing \b group it would configure that group's scan request source to control the EMUX sele
1656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \b emuxif.
1657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
1662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
1663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return uint32_t Complete global result register value GLOBRES
1669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Retrieves the complete result from the global result register associated with the \a global_ptr.
1672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the result register GLOBRES for the validity of the data. If the validity is assured, data is fi
1673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the global result register, cached locally next and subsequently returned to the caller.
1674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetResult()
1677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GLOBAL_GetDetailedResult(XMC_VADC_GLOBAL_t *const global_ptr)
1679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetDetailedResult:Wrong Module Pointer", (global_ptr == VADC))
1681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  return(global_ptr->GLOBRES);
1683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module.
1688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return XMC_VADC_RESULT_SIZE_t 16 bit result register value.<BR>
1690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *         Range[0x0 - 0X0FFF]
1691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Retrieves the conversion result from the global result register associated with the \a global_pt
1694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * lightweight version of XMC_VADC_GLOBAL_GetDetailedResult(). The behavior is exactly the same, ju
1695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * only the 16 bit numeric result returned back to the application instead of the complete GLOBRES 
1696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_GetDetailedResult()
1699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GLOBAL_GetResult(XMC_VADC_GLOBAL_t *const global_pt
1701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetResult:Wrong Module Pointer", (global_ptr == VADC))
1703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return ((XMC_VADC_RESULT_SIZE_t)global_ptr->GLOBRES);
1705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param compare_val Compare value which the result of a conversion will be compared against.
1711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *         <BR>Range[0x0 - 0X0FFF]
1712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Set compare value in the global result register for fast compare mode.\n\n The result of a conve
1717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * be compared to the compare value entered as part of \a compare_val. The prerequisite is that the
1718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * with this global register must select an ICLASS which has the conversion mode configured as fast
1719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @ref XMC_VADC_GLOBAL_GetCompareResult() after this API to
1720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
1725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return compare high or low. Refer @ref XMC_VADC_FAST_COMPARE_t enum
1730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determines the result of fast compare operation.\n\n This API returns the result of fast compare
1735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the valid flag in the global result register GLOBRES is set.
1736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr);
1741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr         Constant pointer to the VADC module
1745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param event_type   Desired event that must be manually asserted
1746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Manually asserts an event that can lead to an interrupt.\n\n This API manually asserts the reque
1751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * (Background request source event or a global result event) by setting the GLOBEVFLAG register wi
1752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \a event_type.
1753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_TriggerEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32
1759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Module Pointer", (global_ptr == VADC))
1761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_TriggerEvent:Wrong Global Event", 
1762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = event_type;
1765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param event_type Event that must be acknowledged
1771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    Use the enum ::XMC_VADC_GLOBAL_EVENT_t to create a mask to be used with this 
1772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Acknowledges an event that has been asserted manually or automatically.\n\n This API acknowledge
1777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * by clearing GLOBEFLAG sticky flag.
1778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
1781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_ClearEvent(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t
1783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Module Pointer", (global_ptr == VADC))
1785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_ClearEvent:Wrong Global Event", 
1786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****             ((XMC_VADC_GLOBAL_EVENT_BKGNDSOURCE == event_type) || (XMC_VADC_GLOBAL_EVENT_RESULT == 
1787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG = ((uint32_t)(event_type << (uint32_t)16));
1789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr The service request to which the global result event is connected. Refer @ref XMC_VADC
1795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  Binds the global result event to one of the 4 shared service requests.\n\n This API binds the g
1800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  to one of the 4 module wide shared service requests .Sets GLOBEVNP register with the correspond
1801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode()
1804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
1806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Constant pointer to the VADC module
1810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr The service request to which the global request source event is connected. Refer @ref 
1811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Binds the background request source event to one of the 4 shared service requests.\n\n This API 
1816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request source event to one of the 4 module wide shared service requests. Sets GLOBEVNP register
1817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * corresponding \a sr line.
1818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SetResultEventInterruptNode()
1821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
1823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
1825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  config Struct consisting of various SHS related configurations.
1828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure the basic SHS parameters.<BR>\n
1833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would initialize the clock divider configuration, the analog reference selection and
1834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the calibration order for the Sample and Hold unit.
1835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONF
1840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  /**
1842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * @param  config Struct consisting of various step configurations.
1844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * @return None
1846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * Configures the stepper sequence for the converter.<BR>\n
1849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * Stepper of the SHS can be configured to take up a specific sequence of groups for conversion.
1850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * The stepper sequence is configured using this API.
1851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * None.
1854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   */
1855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetStepperSequence(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                              const XMC_VADC_GLOBAL_SHS_STEP_CONFIG_
1857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  {
1858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong SHS Pointer",
1859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_StepperInit:Wrong config pointer",
1861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (config == (XMC_VADC_GLOBAL_SHS_STEP_CONFIG_t*)NULL))
1862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->STEPCFG = (uint32_t) config->stepcfg;
1864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  }
1865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  /**
1868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * @param shs_ptr Constant pointer to the VADC Sample and hold module
1869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * @return bool returns true if the analog converter is operable
1871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   *              returns false if the analog converter is powered down
1872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Description:</b><br>
1874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * Returns the converter status.<BR>\n
1875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * Returns the ANRDY bit field of the SHSCFG register.
1876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   *
1877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><BR>
1878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * None.
1879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   */
1880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  __STATIC_INLINE bool XMC_VADC_GLOBAL_SHS_IsConverterReady(XMC_VADC_GLOBAL_SHS_t *const shs_ptr)
1881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  {
1882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_IsConverterReady:Wrong SHS Pointer",(shs_ptr == (XMC_VADC_GLOBAL_
1883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return((bool)((shs_ptr->SHSCFG >> (uint32_t)SHS_SHSCFG_ANRDY_Pos) & (uint32_t)0x1));
1885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  }
1886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * this mode the ADC module will convert the input depending on the value stored in the SST bit of 
1898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would configure the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP_
1904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be disabled.<BR>Range: [0x
1908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the Accelerated timing mode.<BR>\n
1913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is needed when a switch from accelerated mode to compatible mode of conversion is neede
1914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would clear the accelerated mode in the SHS0_TIMCFG0 and SHS0_TIMCFG1 registers.
1915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,XMC_VADC_GROUP
1920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_num group number for which the accelerated mode needs to be enabled.<BR>Range: [0x0
1924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sst_value Value of short sample time that needs to be configured.<BR>
1925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                  Range: [0x0 to 0x3F]
1926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the Accelerated timing mode sample time.<BR>\n
1931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is needed when a switch from compatible mode to accelerated mode of conversion is neede
1932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Accelerated mode the ADC module will convert the input depending on the value stored in the SST 
1933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  SHS0_TIMCFGx. This API would configure the shot sample time either in SHS0_TIMCFG0.SST or SHS0_
1934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                             XMC_VADC_GROUP_INDEX_t group_num,
1940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                             uint8_t sst_value);
1941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  divs_value The clock divider value that is possible
1946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    <BR>Range:[0x0 to 0xF]
1947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure Sample and hold clock divider value.<BR>\n
1951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would initialize the clock divider configuration. This determines the frequency of conversio
1952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * of the Sample and hold converter.
1953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetClockDivider(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, uint
1958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
1959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong SHS Pointer",
1960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetClockDivider:Wrong divide factor selected",
1962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (divs_value < (uint32_t)0x10))
1963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->SHSCFG =  (shs_ptr->SHSCFG & (~(uint32_t)SHS_SHSCFG_DIVS_Msk)) | (uint32_t)SHS_SHSCFG_SC
1965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->SHSCFG |=  ((uint32_t)divs_value << SHS_SHSCFG_DIVS_Pos) | (uint32_t)SHS_SHSCFG_SCWC_Msk
1966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
1967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  gain_value gain value possible
1971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                    Range:[0x0 to 0x3]
1972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
1973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  ch_num The channel number for which the gain has to be configured
1974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure the gain value for SHS.<BR>\n
1978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would set the gain factor for a selected channel.
1979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
1981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
1982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
1983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                        uint8_t gain_value,
1985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                        XMC_VADC_GROUP_INDEX_t group_num,
1986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                        uint8_t ch_num);
1987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
1989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
1990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
1991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  max_calibration_time calibration time
1992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                              Range:[0x0 to 0x3F]
1993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
1994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
1995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
1996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configure the Maximum calibration timing.<BR>\n
1997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * API would initialize the Maximum time after which the calibration should occur. If no adc conver
1998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * occur during this duration then the calibration would run irrespective of conversions. The max t
1999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * converter can go without a calibration is set in this API.
2000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
2003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_SetMaxCalTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                        uint32_t max_calibration_time)
2006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetMaxCalTime:Wrong SHS Pointer",
2008:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2009:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2010:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALMAX_Msk);
2011:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->CALCTR |=  ((uint32_t)max_calibration_time << SHS_CALCTR_CALMAX_Pos);
2012:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2013:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2014:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2015:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2016:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2017:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2018:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2019:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2020:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2021:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enable the Gain and offset calibration.<BR>\n
2022:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enable the gain and offset calibration for all the Sample and hold units.
2023:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2024:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2025:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations()<BR>.
2026:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2027:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2028:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                          XMC_VADC_GROUP_INDEX_t group_num);
2029:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2030:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2031:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2032:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2033:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2034:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2035:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2036:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the Gain and offset calibration.<BR>\n
2037:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the gain and offset calibration for all the Sample and hold units.
2038:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2039:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2040:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2041:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2042:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2043:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                           XMC_VADC_GROUP_INDEX_t group_num);
2044:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2045:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2046:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2047:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2048:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2049:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2050:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2051:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2052:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Read the calibration value for the selected gain level.<BR>\n
2053:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would return the offset calibration val
2054:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * selected gain level. This is applicable for all the channels in the group that use the particula
2055:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2056:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2057:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue()<BR>.
2058:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2059:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2060:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
2061:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level);
2062:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2063:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2064:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2065:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2066:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  gain_level The gain level whose calibration value has to read.
2067:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  offset_calibration_value The offset calibration value to be set.
2068:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2069:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2070:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2071:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Set the calibration value for the selected gain level.<BR>\n
2072:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Each gain value has a offset calibration value, this API would set the offset value of the selec
2073:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2074:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2075:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue()<BR>.
2076:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2077:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2078:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
2079:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
2080:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                    uint8_t offset_calibration_value);
2081:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2082:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2083:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2084:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_num The Group number for which the configurations applies
2085:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2086:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  ch_num Channel number for which the configurations applies
2087:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2088:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2089:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2090:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the delta sigma loop of the SHS.<BR>\n
2091:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * There are 2 Delta-Sigma loops that can be configured. This API would configure the loop (loop_se
2092:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * with the appropriate group_num and channel_num.
2093:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the SHS_LOOP bit fields.
2094:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2095:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2096:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop()<BR>.
2097:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2098:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2099:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                            XMC_VADC_GROUP_INDEX_t group_num,
2100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
2101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                            uint8_t ch_num);
2102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enable the selected Delta-Sigma loop.<BR>\n
2110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
2117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                               XMC_VADC_SHS_LOOP_CH_t loop_select)
2118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong SHS Pointer",
2120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->LOOP |= (uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select;
2125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param shs_ptr Constant pointer to the VADC Sample and hold module
2129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  loop_select The delta sigma loop number for which the configurations applies
2130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the selected delta sigma loop.<BR>\n
2134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the SHS_LOOP.LPENx bit field.
2135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop()<BR>.
2138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations()<BR>.
2139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr
2141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                XMC_VADC_SHS_LOOP_CH_t loop_select)
2142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong SHS Pointer",
2144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
2145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableSigmaDeltaLoop:Wrong Delta sigma loop selected",
2146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
2147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   shs_ptr->LOOP &= ~((uint32_t)SHS_LOOP_LPEN0_Msk << (uint32_t)loop_select);
2149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
2153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
2154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the VADC group.
2157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config Pointer to the initialization data structure
2158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the VADC group module with the associated configuration structure pointed by \a conf
2163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * initializes the group specified as part of the \a group_ptr. It initializes group conversion cla
2164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * configuration , boundary configuration by setting GxICLASS,GxARBCFG,GxBOUND, registers. It also
2165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * configures the EMUX control register if applicable. Refer related API's to change the configurat
2166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  program.
2167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_InputClassInit()<BR>
2170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetPowerMode()<BR>
2171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_SetBoundaries()<BR>
2172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ExternalMuxControlInit()<BR>
2173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_Init(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config);
2175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group.
2179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config  group related conversion class parameter structure
2180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param conv_type Use direct channels or EMUX channels. Refer @ref XMC_VADC_GROUP_CONV_t enum
2181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param set_num Conversion class set<BR>
2182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                Range[0x0, 0x1]
2183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up the conversion settings for vadc group resource associated with \a config structure. It 
2188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * conversion class properties like sampling time and resolution for selected \a conv_type channels
2189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the G_ICLASS register specified by \a set_num with the required settings.
2190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_Init()
2194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
2197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                    const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num);
2198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC Group which must be set as a slave
2202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param master_grp The master group number<BR>
2203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param slave_group The slave group number<BR>
2205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x3]
2206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures a VADC Group as a slave group.\n\n Conversion of identically numbered channels across
2211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is the
2213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * master group while Groups-0 and 3 are the slave groups. It uses the SYNCCTR register for the con
2214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_SetSyncMaster()<BR>
2217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR>
2218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_EnableChannelSyncRequest()<BR>
2219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
2222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC Group.
2226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param power_mode  Desired power mode
2227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the power mode of a VADC group.\n\n For a VADC group to actually convert an analog si
2232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * converter must be turned on.
2233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
2238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures a VADC Group as a master group.<BR>\n
2247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Conversion of identically numbered channels across groups can be
2248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * synchronized. For example, when the trigger to convert CH-1 of Group-2 is received, it is possib
2249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request conversion of CH-1 of Group-0 and Group-3. Group-2 in this example is therefore the mast
2250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Groups-0 and 3 are the slave groups.
2251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr);
2256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                     <BR>Range: [0x0 to 0x3]
2262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures the ready signal for master group.<BR>\n
2266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would read the \b slave_group number and determine which EVAL configuration to apply fo
2267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * slave set. Checks the readiness of slaves in synchronized conversions. Conversion of identically
2268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * across groups can be synchronized. For example, when the trigger to convert CH-1 of Group-2 is r
2269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * possible to simultaneously request conversion of CH-1 of Group-0 and Group-3. Group-2 in this ex
2270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * therefore the master group while Groups-0 and 3 are the slave groups. Before the master can requ
2271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * for synchronized conversion, it has the option of checking the readiness of the slaves.
2272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_IgnoreSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()
2275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant Pointer to the master VADC Group
2281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param slave_group  The slave VADC Group number
2282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Clears the ready signal for master group.<BR>\n
2286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Ignores the readiness of slaves in synchronized conversions.This API would read the \b slave_gro
2287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * determine which EVAL configuration to apply for the given master slave set. Then clears the conf
2288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API is called when the master should issue the conversion request without waiting for the s
2289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * assert a ready signal. The ready signal is asserted by the slave group(s) when the conversion is
2290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * in these channels.
2291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_CheckSlaveReadiness()<BR> XMC_VADC_GROUP_SetSyncMaster()<BR>
2294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group);
2296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr   Constant pointer to the master VADC Group
2300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num  Channel whose conversion triggers conversion in slave groups
2301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Sets up a channel for synchronized conversion.\n\n Conversion of identically numbered channels a
2305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * can be synchronized. For example, when the trigger to
2306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * convert CH-1 of Group-2 is received, it is possible to simultaneously request conversion of CH-1
2307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Group-3. Group-2 in this example is therefore the master group while Groups-0 and 3 are the slav
2308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Before the master can request its slaves for synchronized conversion, it has the option of check
2309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * of the slaves.
2310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
2315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr       Pointer to the master VADC Group
2319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     Channel whose conversion triggers conversion in slave groups
2320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disable the synchronization request for the particular channel specified as ch_num. To enable th
2324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * call the API @ref XMC_VADC_GROUP_EnableChannelSyncRequest().
2325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
2330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group.
2334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return retuns IDLE if converter is free else returns busy. Refer @ref XMC_VADC_GROUP_STATE_t en
2336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Checks the live status of the analog to digital converter. The converter can either idle doing n
2339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sampling + converting.
2340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr);
2345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group whose global boundary registers are to be pr
2349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary0  Boundary-0 Value<BR>
2350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary1  Boundary-1 Value<BR>
2352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Range: [0x0 - 0x0FFF]
2353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs the boundaries with \a boundary0 and boundary1 for result comparison.\n\n These two bou
2358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * absolute boundaries. They defines a range against which the result of a conversion can be compar
2359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * fast compare mode, the two boundaries provide hysteresis capability to a compare value. In any c
2360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * values entered here form a boundary pallete. There are dedicated upper and lower boundary regist
2361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * G_BOUND1 who will derive their values from this palette.
2362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, 
2368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                   const uint32_t boundary0, 
2369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                   const uint32_t boundary1);
2370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param selection The boundary value selected for \b boundary_value.
2374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary_value Select the boundary value.
2375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Programs the boundary with \a boundary_value for result comparison.\n\n This defines a range aga
2380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the result of a conversion can be compared. In the fast compare mode, the two boundaries provide
2381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * capability to a compare value.
2382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
2385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
2387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
2388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const uint16_t boundary_value); 
2389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr_num   The service request number (0 through 3)
2393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param type     IRQ type (Kernel specific interrupt vs Module wide shared interrupt )
2394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Activates a Service Request line(manually trigger).<BR>\n
2398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * VADC provides few SR lines for each group and a few more which is shared across all the groups.
2399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * These SR lines can be connected to an NVIC node which in-turn would generate an interrupt.
2400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API would manually trigger the given SR line. Could be used for evaluation and testing purp
2401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr, 
2406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const uint32_t sr_num, 
2407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                           const XMC_VADC_GROUP_IRQ_t type);
2408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group
2412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param emux_cfg   EMUX configuration structure
2413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Configures group EMUX parameters associated with the \a emux_cfg configuration structure.\n\n An
2417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * interface allows additional channels to be connected to a VADC group. The conversion properties
2418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * of such channels can be different from the standard channels which are directly connected to the
2419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API configures conversion properties of channels connected via EMUX interface.
2420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None
2423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
2425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                            const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
2426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
  27              	 .loc 1 2426 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 85B0     	 sub sp,sp,#20
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 24
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
2427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   uint32_t   emux_config;
2428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_P
  44              	 .loc 1 2431 0
  45 000a 3B78     	 ldrb r3,[r7]
  46 000c C3F30203 	 ubfx r3,r3,#0,#3
  47 0010 DBB2     	 uxtb r3,r3
  48 0012 1A46     	 mov r2,r3
2432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  49              	 .loc 1 2432 0
  50 0014 BB78     	 ldrb r3,[r7,#2]
  51 0016 C3F30403 	 ubfx r3,r3,#0,#5
  52 001a DBB2     	 uxtb r3,r3
  53 001c 1B04     	 lsls r3,r3,#16
2431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****               ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
  54              	 .loc 1 2431 0
  55 001e 1343     	 orrs r3,r3,r2
  56 0020 FB60     	 str r3,[r7,#12]
2433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->EMUXCTR  = emux_config;
  57              	 .loc 1 2434 0
  58 0022 7B68     	 ldr r3,[r7,#4]
  59 0024 FA68     	 ldr r2,[r7,#12]
  60 0026 C3F8F021 	 str r2,[r3,#496]
2435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  61              	 .loc 1 2435 0
  62 002a FB78     	 ldrb r3,[r7,#3]
  63 002c C3F30013 	 ubfx r3,r3,#4,#1
  64 0030 DBB2     	 uxtb r3,r3
  65 0032 1A07     	 lsls r2,r3,#28
2436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
  66              	 .loc 1 2436 0
  67 0034 FB78     	 ldrb r3,[r7,#3]
  68 0036 C3F38103 	 ubfx r3,r3,#2,#2
  69 003a DBB2     	 uxtb r3,r3
  70 003c 9B06     	 lsls r3,r3,#26
2435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  71              	 .loc 1 2435 0
  72 003e 1A43     	 orrs r2,r2,r3
2437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                 ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
  73              	 .loc 1 2437 0
  74 0040 FB78     	 ldrb r3,[r7,#3]
  75 0042 C3F34013 	 ubfx r3,r3,#5,#1
  76 0046 DBB2     	 uxtb r3,r3
  77 0048 5B07     	 lsls r3,r3,#29
2435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
  78              	 .loc 1 2435 0
  79 004a 1343     	 orrs r3,r3,r2
  80 004c FB60     	 str r3,[r7,#12]
2438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
2440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_P
2441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
2442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
  81              	 .loc 1 2442 0
  82 004e 7B68     	 ldr r3,[r7,#4]
  83 0050 D3F8F021 	 ldr r2,[r3,#496]
  84 0054 FB68     	 ldr r3,[r7,#12]
  85 0056 1343     	 orrs r3,r3,r2
  86 0058 43F00042 	 orr r2,r3,#-2147483648
  87 005c 7B68     	 ldr r3,[r7,#4]
  88 005e C3F8F021 	 str r2,[r3,#496]
2443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
  89              	 .loc 1 2443 0
  90 0062 1437     	 adds r7,r7,#20
  91              	.LCFI3:
  92              	 .cfi_def_cfa_offset 4
  93 0064 BD46     	 mov sp,r7
  94              	.LCFI4:
  95              	 .cfi_def_cfa_register 13
  96              	 
  97 0066 5DF8047B 	 ldr r7,[sp],#4
  98              	.LCFI5:
  99              	 .cfi_restore 7
 100              	 .cfi_def_cfa_offset 0
 101 006a 7047     	 bx lr
 102              	 .cfi_endproc
 103              	.LFE172:
 105              	 .section .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot,"ax",%progbits
 106              	 .align 2
 107              	 .thumb
 108              	 .thumb_func
 110              	XMC_VADC_GROUP_ScanEnableArbitrationSlot:
 111              	.LFB175:
2444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
2446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param boundary_flag_num The Boundary flag for which the interrupt node needs to be configured.
2450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                          Range: [0x0 to 0x3]
2451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param node    Service Request node Id
2452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Connects the boundary event to the SR line of VADC or to a common boundary flag.<BR>\n
2457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a boundary event. Hence to get a interrupt o
2458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * field GxBFLNP.BFLxNP.
2460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
2465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                   const uint8_t boundary_flag_num,
2466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                   const XMC_VADC_BOUNDARY_NODE_t node);
2467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
2468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    uint32_t The complete GxALIAS register
2473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the ALIAS values.\n The ALIAS value that is configured for Channel-0 and channel-1 are r
2476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE uint32_t XMC_VADC_GROUP_GetAlias(XMC_VADC_GROUP_t *const group_ptr)
2481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetAliasWrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return (group_ptr->ALIAS);
2484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param conv_class  conversion property to be extracted
2489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    XMC_VADC_GROUP_CLASS_t The complete GxICLASSy register
2491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the input class configuration values.\n
2494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This returns the sampling time configuration and resolution configured in the appropriate group 
2495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \b conv_class. A call to this API would return the register GxICLASSy.
2496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE XMC_VADC_GROUP_CLASS_t XMC_VADC_GROUP_GetInputClass(XMC_VADC_GROUP_t *const group_p
2501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                     const XMC_VADC_CHANNEL_CONV_t c
2502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_VADC_GROUP_CLASS_t input_value;
2504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
2505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_GetInputClass:Wrong conv_class selected", 
2506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              (XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLA
2507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   input_value.g_iclass0 = (uint32_t) 0xFFFFFFFF;
2509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   if ((XMC_VADC_CHANNEL_CONV_GROUP_CLASS0 == conv_class) || (XMC_VADC_CHANNEL_CONV_GROUP_CLASS1 == 
2510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   {
2511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     input_value.g_iclass0 = group_ptr->ICLASS[(uint32_t)conv_class];
2512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   }
2513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return (input_value);
2515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif /* XMC_VADC_GROUP_AVAILABLE */
2517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)
2519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
2521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config     Pointer to Scan configuration
2522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return None
2523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the VADC SCAN functional block.<BR>\n
2526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The GROUP SCAN request source functional block converts channels sequentially starting with the 
2527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * channel to the lowest. Channels must register themselves as being part of the the scan sequence.
2528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_ScanEnableA
2529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
2530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_ScanDisableArbi
2531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxASCTRL, GxASMR needed scan request s
2532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR> XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanSelectGating()<BR>
2536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
2538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables arbitration slot of the scan request source.<BR>\n
2546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the scan slot. Thus this must be enabled if any conversion need to take place.
2549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR>
2553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 112              	 .loc 1 2555 0
 113              	 .cfi_startproc
 114              	 
 115              	 
 116              	 
 117 0000 80B4     	 push {r7}
 118              	.LCFI6:
 119              	 .cfi_def_cfa_offset 4
 120              	 .cfi_offset 7,-4
 121 0002 83B0     	 sub sp,sp,#12
 122              	.LCFI7:
 123              	 .cfi_def_cfa_offset 16
 124 0004 00AF     	 add r7,sp,#0
 125              	.LCFI8:
 126              	 .cfi_def_cfa_register 7
 127 0006 7860     	 str r0,[r7,#4]
2556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN1_Msk;
 128              	 .loc 1 2557 0
 129 0008 7B68     	 ldr r3,[r7,#4]
 130 000a D3F88430 	 ldr r3,[r3,#132]
 131 000e 43F00072 	 orr r2,r3,#33554432
 132 0012 7B68     	 ldr r3,[r7,#4]
 133 0014 C3F88420 	 str r2,[r3,#132]
2558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
 134              	 .loc 1 2558 0
 135 0018 0C37     	 adds r7,r7,#12
 136              	.LCFI9:
 137              	 .cfi_def_cfa_offset 4
 138 001a BD46     	 mov sp,r7
 139              	.LCFI10:
 140              	 .cfi_def_cfa_register 13
 141              	 
 142 001c 5DF8047B 	 ldr r7,[sp],#4
 143              	.LCFI11:
 144              	 .cfi_restore 7
 145              	 .cfi_def_cfa_offset 0
 146 0020 7047     	 bx lr
 147              	 .cfi_endproc
 148              	.LFE175:
 150 0022 00BF     	 .section .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot,"ax",%progbits
 151              	 .align 2
 152              	 .thumb
 153              	 .thumb_func
 155              	XMC_VADC_GROUP_ScanDisableArbitrationSlot:
 156              	.LFB176:
2559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables arbitration slot of the scan request source.<BR>\n
2567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the scan slot.A call to this API will lead to all conversions request by scan to be blocked.
2570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN1.
2571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot()<BR>
2574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
2576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 157              	 .loc 1 2576 0
 158              	 .cfi_startproc
 159              	 
 160              	 
 161              	 
 162 0000 80B4     	 push {r7}
 163              	.LCFI12:
 164              	 .cfi_def_cfa_offset 4
 165              	 .cfi_offset 7,-4
 166 0002 83B0     	 sub sp,sp,#12
 167              	.LCFI13:
 168              	 .cfi_def_cfa_offset 16
 169 0004 00AF     	 add r7,sp,#0
 170              	.LCFI14:
 171              	 .cfi_def_cfa_register 7
 172 0006 7860     	 str r0,[r7,#4]
2577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN1_Msk);
 173              	 .loc 1 2578 0
 174 0008 7B68     	 ldr r3,[r7,#4]
 175 000a D3F88430 	 ldr r3,[r3,#132]
 176 000e 23F00072 	 bic r2,r3,#33554432
 177 0012 7B68     	 ldr r3,[r7,#4]
 178 0014 C3F88420 	 str r2,[r3,#132]
2579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
 179              	 .loc 1 2579 0
 180 0018 0C37     	 adds r7,r7,#12
 181              	.LCFI15:
 182              	 .cfi_def_cfa_offset 4
 183 001a BD46     	 mov sp,r7
 184              	.LCFI16:
 185              	 .cfi_def_cfa_register 13
 186              	 
 187 001c 5DF8047B 	 ldr r7,[sp],#4
 188              	.LCFI17:
 189              	 .cfi_restore 7
 190              	 .cfi_def_cfa_offset 0
 191 0020 7047     	 bx lr
 192              	 .cfi_endproc
 193              	.LFE176:
 195 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot,"ax",%progbits
 196              	 .align 2
 197              	 .thumb
 198              	 .thumb_func
 200              	XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:
 201              	.LFB190:
2580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
2585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the arbitration status of the scan request source.<BR>\n
2588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the scan request source must have its conversion request considered by the arbiter, it must p
2589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the scan channel can only be converted when 
2590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the scan slot. A call to this API would return the status of the arbitration slot of scan.
2591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
2592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_ScanDisableArbitrationSlot()<BR
2595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr)
2597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GROU
2599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN1_Msk) >> VADC_G_ARBPR_ASEN1_Pos);
2601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_input  Choice of the input earmarked as a trigger line
2606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal for scan request source.<BR>\n
2611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
2613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
2615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTSEL.
2616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectGating()<BR> XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
2621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_edge  Trigger edge selection
2626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the trigger edge for scan request source.<BR>\n
2631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A scan request source will raise conversion request only if there were either a request from app
2632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible trigger edges. This is
2633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the scan request source.
2634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASCTRL.XTMODE.
2635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
2640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param gating_input  Module input signal meant to be selected as gating input
2644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Gating signal for scan request source.<BR>\n
2649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
2650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the scan request source o
2651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxASMR.ENGT has to be config
2652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxAS
2653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR>
2656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
2658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the scan request source
2662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the gating mode of scan request source.<BR>\n
2667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
2668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
2669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
2670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
2672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectGating();
2673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_G
2675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE
2678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
2680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR &= (uint32_t) (~((uint32_t)VADC_G_ASMR_ENGT_Msk));
2681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Set the new gating mode */
2682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)((uint32_t)mode_sel << VADC_G_ASMR_ENGT_Pos);
2683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
2692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. Every request source event will cause a load event to occur. A call to this API would 
2697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanDisableContinuousMode()<BR>
2701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_SCAN_Msk;
2706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
2715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a scan request source to generate conversion request, either a hardware trigger or
2716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
2717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a scan request s
2718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
2719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. By invoking this feature the Autoscan mode of operations is disabled. A call to this A
2720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the register bit field GxASMR.SCAN.
2721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableContinuousMode()<BR>
2724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableContinuousMode(XMC_VADC_GROUP_t *const group_ptr)
2726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableContinuousMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_SCAN_Msk);
2729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
2738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
2739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the s
2740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxASMR.LD
2741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
2746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
2748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_LDEV_Msk;
2749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Aborts an ongoing scan sequence conversion.<BR>\n
2758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
2759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
2760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
2761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxASMR, GxASCTRL, GxARBPR to achieve the sequen
2762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr);
2767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The channel meant to be added to scan sequence
2771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds a channel to the scan sequence.<BR>\n
2777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the scan request source. This will be added to
2778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
2779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddMultipleChannels()<BR>
2783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddChannelToSequence(XMC_VADC_GROUP_t *const group_ptr, con
2785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("VADC_GSCAN_AddSingleChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
2787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddChannelToSequence:Wrong Channel Number", 
2788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
2789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASSEL |= (uint32_t)((uint32_t)1 << ch_num);
2790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
2795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
2796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
2797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the selected channels
2798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
2799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
2804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
2805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
2806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of GxASSEL.
2807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanAddChannelToSequence()<BR>
2810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanAddMultipleChannels(XMC_VADC_GROUP_t *const group_ptr, cons
2812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanAddMultipleChannels:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR
2814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASSEL = ch_mask;
2815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
2820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
2821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
2823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determine if the channel is pending for conversion.<BR>\n
2826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
2827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
2829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the channel is found in the pending register (GxASPND).
2830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanGetNumChannelsPending()<BR>
2833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanIsChannelPending(XMC_VADC_GROUP_t *const group_ptr, const u
2835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanIsChannelPending:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_C
2839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return( (bool)((uint32_t)(group_ptr->ASPND >> ch_num) & 1U));
2841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param  group_ptr     Constant pointer to the VADC group
2845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return  <BR>
2846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
2847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to 0x8]
2848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the total number of pending channels.<BR>\n
2851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
2852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
2853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
2854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * return the total number of channels pending (GxASPND).
2855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanIsChannelPending()<BR>
2858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr);
2860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
2868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will set the request source event for scan. This will trigger a interrupt if the
2869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
2870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
2874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanTriggerReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanTriggerReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
2878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->SEFLAG    |= (uint32_t)VADC_G_SEFLAG_SEV1_Msk;
2879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Acknowledges the scan conversion complete request source event.<BR>\n
2888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
2889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxSEFLAG.SEV1.
2890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanTriggerReqSrcEvent()<BR>
2893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
2895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
2897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV1_Msk;
2898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
2904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
2905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
2908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will get the status of the scan request source event. Will return a true
2909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the event has occurred for scan. A call to this API would access the register bit field GxSEF
2910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_ScanGetReqSrcEventStatus(XMC_VADC_GROUP_t *const group_ptr)
2915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GSCAN_GetRSEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
2917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return( (bool)(group_ptr->SEFLAG & (uint32_t)VADC_G_SEFLAG_SEV1_Msk));
2918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group
2922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param sr    Service Request Id
2923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Connects the scan request source event to the SR line of VADC.<BR>\n
2928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will connect a Service Request line(SR) to a scan request source event. Hence to get a 
2929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Service request line one has to enable the required NVIC node.  A call to this API would configu
2930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * field GxSEVNP.SEV1NP .
2931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
2936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the trigger for scan request source.<BR>\n
2944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API, the trigger signal will be activated for the scan request source. The trigger
2945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * edge will be selected from the ASCTRL register. The Selection of a input will be done by
2946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_ScanSelectTrigger(). A call to this API would configure the register bit field Gx
2947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanSelectTrigger()<BR> XMC_VADC_GROUP_ScanDisableExternalTrigger()<BR>
2950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanEnableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanEnableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
2954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_ENTR_Msk;
2956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the trigger for scan request source.<BR>
2965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the scan request source.
2966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the scan request source. If any configuration were
2967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to select the trigger input in GxASCTRL, it will be not be effected by this API.
2968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxASMR.ENTR.
2969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_ScanEnableExternalTrigger()<BR>
2972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_ScanDisableExternalTrigger(XMC_VADC_GROUP_t *const group_ptr)
2974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
2975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_ScanDisableExternalTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
2976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENTR_Msk);
2978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
2979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
2982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param channel_num   channel number to be removed from the scan sequence.
2983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
2984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
2985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
2987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Removes a channel from the scan sequence.<BR>
2988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the it is possible to remove a single channel from the conversion sequence.
2989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The remaining channels will continue however they are.
2990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register GxASSEL.
2991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
2992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
2993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
2994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
2995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
2996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
2997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
2998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
2999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr Pointer to the VADC module
3000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes the Background scan functional block.<BR>\n
3004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The BACKGROUND SCAN request source functional block converts channels of all VADC groups that ha
3005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * been assigned as a priority channel (priority channels can be converted only by queue and scan).
3006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request source converts the unprioritized channels. Unprioritized channels however can also be u
3007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * and scan. But a channel which is prioritized can not be used with background request source.
3008:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3009:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3010:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR> XMC_VADC_GROUP_BackgroundDisableArbitratio
3011:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundSelectGating()<BR>
3012:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3013:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
3014:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3015:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
3016:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3017:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Constant pointer to the VADC group which may receive a
3018:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                  conversion request from background request source
3019:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3020:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3021:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3022:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3023:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3024:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables arbitration slot of the Background request source.<BR>\n
3025:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3026:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3027:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * comes to the Background slot. Thus this must be enabled if any conversion need to take place.
3028:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2.
3029:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3030:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3031:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
3032:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3033:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_p
3034:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 202              	 .loc 1 3034 0
 203              	 .cfi_startproc
 204              	 
 205              	 
 206              	 
 207 0000 80B4     	 push {r7}
 208              	.LCFI18:
 209              	 .cfi_def_cfa_offset 4
 210              	 .cfi_offset 7,-4
 211 0002 83B0     	 sub sp,sp,#12
 212              	.LCFI19:
 213              	 .cfi_def_cfa_offset 16
 214 0004 00AF     	 add r7,sp,#0
 215              	.LCFI20:
 216              	 .cfi_def_cfa_register 7
 217 0006 7860     	 str r0,[r7,#4]
3035:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_
3036:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 218              	 .loc 1 3036 0
 219 0008 7B68     	 ldr r3,[r7,#4]
 220 000a D3F88430 	 ldr r3,[r3,#132]
 221 000e 43F08062 	 orr r2,r3,#67108864
 222 0012 7B68     	 ldr r3,[r7,#4]
 223 0014 C3F88420 	 str r2,[r3,#132]
3037:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
 224              	 .loc 1 3037 0
 225 0018 0C37     	 adds r7,r7,#12
 226              	.LCFI21:
 227              	 .cfi_def_cfa_offset 4
 228 001a BD46     	 mov sp,r7
 229              	.LCFI22:
 230              	 .cfi_def_cfa_register 13
 231              	 
 232 001c 5DF8047B 	 ldr r7,[sp],#4
 233              	.LCFI23:
 234              	 .cfi_restore 7
 235              	 .cfi_def_cfa_offset 0
 236 0020 7047     	 bx lr
 237              	 .cfi_endproc
 238              	.LFE190:
 240 0022 00BF     	 .section .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot,"ax",%progbits
 241              	 .align 2
 242              	 .thumb
 243              	 .thumb_func
 245              	XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:
 246              	.LFB191:
3038:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3039:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3040:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr  Constant pointer to the VADC group which may receive a conversion request
3041:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                     from background request source
3042:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3043:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3044:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3045:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3046:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables arbitration slot of the Background request source.<BR>\n
3047:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the Background request source must have its conversion request considered by the arbiter, it 
3048:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the Background channel can only be converted
3049:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * comes to the Background slot.A call to this API will lead to all conversions request by Backgrou
3050:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN2
3051:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3052:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3053:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
3054:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3055:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_
3056:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 247              	 .loc 1 3056 0
 248              	 .cfi_startproc
 249              	 
 250              	 
 251              	 
 252 0000 80B4     	 push {r7}
 253              	.LCFI24:
 254              	 .cfi_def_cfa_offset 4
 255              	 .cfi_offset 7,-4
 256 0002 83B0     	 sub sp,sp,#12
 257              	.LCFI25:
 258              	 .cfi_def_cfa_offset 16
 259 0004 00AF     	 add r7,sp,#0
 260              	.LCFI26:
 261              	 .cfi_def_cfa_register 7
 262 0006 7860     	 str r0,[r7,#4]
3057:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK
3058:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 263              	 .loc 1 3058 0
 264 0008 7B68     	 ldr r3,[r7,#4]
 265 000a D3F88430 	 ldr r3,[r3,#132]
 266 000e 23F08062 	 bic r2,r3,#67108864
 267 0012 7B68     	 ldr r3,[r7,#4]
 268 0014 C3F88420 	 str r2,[r3,#132]
3059:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
 269              	 .loc 1 3059 0
 270 0018 0C37     	 adds r7,r7,#12
 271              	.LCFI27:
 272              	 .cfi_def_cfa_offset 4
 273 001a BD46     	 mov sp,r7
 274              	.LCFI28:
 275              	 .cfi_def_cfa_register 13
 276              	 
 277 001c 5DF8047B 	 ldr r7,[sp],#4
 278              	.LCFI29:
 279              	 .cfi_restore 7
 280              	 .cfi_def_cfa_offset 0
 281 0020 7047     	 bx lr
 282              	 .cfi_endproc
 283              	.LFE191:
 285 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot,"ax",%progbits
 286              	 .align 2
 287              	 .thumb
 288              	 .thumb_func
 290              	XMC_VADC_GROUP_QueueEnableArbitrationSlot:
 291              	.LFB204:
3060:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #endif
3061:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3062:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3063:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3064:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3065:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_TRIGGER_INPUT_SELECT_t
3066:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3067:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3068:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3069:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3070:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal for Background request source.<BR>\n
3071:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3072:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3073:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3074:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3075:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTSEL.
3076:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3077:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3078:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3079:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3080:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
3081:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3082:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3083:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3084:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3085:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_edge  Select the trigger edge
3086:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3087:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3088:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3089:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3090:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger edge for Background request source.<BR>\n
3091:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A Background request source will raise conversion request only if there were either a request fr
3092:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 possible values for the trigger 
3093:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the Background request source.
3094:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSCTRL.XTMODE.
3095:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3096:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3097:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectGating()<BR> XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<
3098:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3099:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VAD
3100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Module input signal meant to be selected as gating input
3104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Accepts enum ::XMC_VADC_GATE_INPUT_SELECT_t
3105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Gating signal for Background request source.<BR>\n
3110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the Background request so
3112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxBRSMR.ENGT has to be confi
3113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field BRSC
3114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR>
3117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
3119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the background scan request source
3123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the gating mode of background request source.<BR>\n
3128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field BRSMR.ENGT.
3132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectGating();
3135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundSetGatingMode(XMC_VADC_GLOBAL_t *const global_ptr,
3137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                             XMC_VADC_GATEMODE_t mode_sel)
3138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong Module Pointer", (global_ptr == VADC))
3140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_G
3141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR &= (uint32_t)(~((uint32_t)VADC_BRSMR_ENGT_Msk));
3144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Configure the new gating mode*/
3145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)((uint32_t)mode_sel << VADC_BRSMR_ENGT_Pos);
3146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables continuous conversion mode.<BR>\n
3156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is needed. Using autoscan (continuous conversion)feature it is possible to start the con
3158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * once and allow the sequence to repeat without any further triggers. Once all channels belonging 
3159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request source have been converted, a request source completion event is generated. Generation o
3160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * can restart the Background configure sequence. Every request source event will cause a load even
3161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would access the register bit field BRSMR.SCAN.
3162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_BackgroundDisableContinuousMode()<BR>
3165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableContinuousMode(XMC_VADC_GLOBAL_t *const global
3167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableContinuousMode:Wrong Module Pointer", (global_ptr == 
3169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_SCAN_Msk;
3170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables continuous conversion mode.<BR>\n
3179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Typically for a Background request source to generate conversion request, either a hardware trig
3180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * request is a pre-requisite. Using autoscan feature it is possible to start the conversion once a
3181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence to repeat without any further triggers. Once all channels belonging to a Background req
3182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * been converted, a request source completion event is generated. Generation of this event can res
3183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. By invoking this API the Autoscan mode of operations is disabled. A call to this API w
3184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * register bit field BRSMR.SCAN.
3185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableContinuousMode()<BR>
3188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableContinuousMode(XMC_VADC_GLOBAL_t *const globa
3190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableContinuousMode:Wrong Module Pointer", (global_ptr ==
3192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_SCAN_Msk);
3193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>\n
3202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the scan unit to generate a conversion request to the analog converter. It is assumed that the b
3204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * has already been filled up with entries. A call to this API would set the register bit field BRS
3205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
3208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_pt
3210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VAD
3212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
3213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Aborts an ongoing background scan conversion(sequence).<BR>\n
3222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * An ongoing sequence can be aborted at any time. The scan unit picks the pending channels one by 
3223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * pending register and requests for their conversion. This API essentially clears the channel pend
3224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * creating an illusion that there are no more channels left in the sequence.
3225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers BRSMR, BRSCTRL, GxARBPR(if group is available) 
3226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * current scan sequence.
3227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
3230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr);
3232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Request source
3237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The unprioritized channel meant to be added to the scan sequence
3238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds a channel to the background scan sequence.<BR>\n
3244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a new single channel into the background scan request source. This will 
3245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channel will be part of the conversion sequence when the next load event occ
3246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
3250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global
3252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                     const uint32_t grp_num,
3253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                     const uint32_t ch_num)
3254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == 
3256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_V
3257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
3258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
3261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_mask    Mask word indicating channels which form part of scan conversion sequence
3267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Bit location 0/1/2/3/4/5/6/7 represents channels-0/1/2/3/4/5/6/7 respectively.
3268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   To Add the channel to the scan sequence enable the respective bit.
3269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   Passing a 0x0 will clear all the previously selected channels
3270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0xFF]
3271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Adds multiple channels to the scan sequence.<BR>\n
3276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Call this API to insert a multiple channels into the scan request source. This will be added to 
3277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * sequence. The added channels will be a part of the conversion sequence when the next load event 
3278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit fields of BRSSEL.
3279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundAddChannelToSequence()<BR>
3282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgndAddMultipleChannels(XMC_VADC_GLOBAL_t *const global_ptr
3284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t ch_mask)
3286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Module Pointer", (global_ptr == VADC
3288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgndAddMultipleChannels:Wrong Group Number",   ((grp_num) < XMC_VA
3289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSSEL[grp_num] |= ch_mask;
3290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param grp_num    ID of the VADC group whose unprioritized channels have been assigned to backgr
3295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param ch_num     The channel being audited for completion of conversion
3296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *                   <BR>Range: [0x0 to 0x7]
3297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *     bool   returns true if the channel is pending conversion else returns false
3299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determine if the channel is pending.<BR>\n
3302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will check if the Channel in question is awaiting conversion in the current arbitration
3303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. This API would return true
3305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the channel is found in the pending register (BRSPND[\b grp_num]).
3306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending()<BR>
3309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundIsChannelPending(XMC_VADC_GLOBAL_t *const global_ptr
3311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t grp_num,
3312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                                                 const uint32_t ch_num)
3313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Module Pointer", (global_ptr == VADC
3315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Group Number",   ((grp_num) < XMC_VA
3316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundIsChannelPending:Wrong Channel Number",
3317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
3318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return( (bool)(global_ptr->BRSPND[grp_num] & (uint32_t)((uint32_t)1 << ch_num)));
3320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * @return  <BR>
3325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   uint32_t   Returns the total channels pending for conversion.
3326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *              <BR>Range: [0x0 to (0x8*number of groups)]
3327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the number of pending channels.<BR>\n
3330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will read the pending channels register and will return the number of channels that are
3331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * When a load event occurs the scan sequence is pushed to a pending conversion register.
3332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * From the pending register the channels are taken up by the converter. When the API is called it 
3333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * return the total number of channels pending (BRSPND[\b grp_num]).
3334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundIsChannelPending()<BR>
3337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr);
3339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Manually asserts the conversion complete request source event.<BR>\n
3347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will set the request source event for background scan. This will trigger a interrupt if
3348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * service node pointer for the scan has been configured.
3349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB.
3350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * None.
3353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent(XMC_VADC_GLOBAL_t *const global_p
3355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent:Wrong Module Pointer", (global_ptr == VA
3357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk;
3358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Acknowledges the background scan conversion complete request source event.<BR>\n
3367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will clear the request source event that occurred. This will clear a interrupt if it wa
3368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GLOBEFLAG.SEVGLB
3369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundTriggerReqSrcEvent()<BR>
3372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent(XMC_VADC_GLOBAL_t *const global_ptr
3374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundClearReqSrcEvent:Wrong Module Pointer", (global_ptr == VADC
3376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->GLOBEFLAG |= (uint32_t)VADC_GLOBEFLAG_SEVGLBCLR_Msk;
3377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *   bool   returns true if the service request event is raised.
3383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *          returns false if the service request event was not raised.
3384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Determines if the request source event is asserted.<BR>
3387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will get the status of the background scan request source event. Will return a true
3388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * if the event has occurred for background scan. A call to this API would configure the register
3389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * bit field GLOBEFLAG.SEVGLB.
3390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  None.
3393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus(XMC_VADC_GLOBAL_t *const global
3395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetReqSrcEventStatus:Wrong Module Pointer", (global_ptr == 
3397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return((bool)(global_ptr->GLOBEFLAG & (uint32_t)VADC_GLOBEFLAG_SEVGLB_Msk));
3398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables the trigger for background scan request source.<BR>\n
3407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the trigger will be activated for the scan request source. The trigger signal 
3408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * edge will be selected from the BRSCTRL register. The Selection of a input will be done by
3409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GLOBAL_BackgroundSelectTrigger(). A call to this API would configure the register bit f
3410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundSelectTrigger()<BR> XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(
3413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger(XMC_VADC_GLOBAL_t *const globa
3415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger:Wrong Group Pointer", (global_ptr == 
3417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_ENTR_Msk;
3419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param global_ptr       Pointer to the VADC module
3423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables the trigger for background scan request source.<BR>
3428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * By using this API the trigger will be deactivated for the background scan request source.
3429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This will just deactivate the H/W trigger for the background scan request source. If any configu
3430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to select the trigger input in BRSCTRL will be not be effected. A call to this API would configu
3431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * bit field BRSMR.ENTR.
3432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   * \par<b>Related APIs:</b><br>
3434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GLOBAL_BackgroundEnableExternalTrigger()<BR>
3435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger(XMC_VADC_GLOBAL_t *const glob
3437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundDisableExternalTrigger:Wrong Group Pointer", (global_ptr ==
3439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   global_ptr->BRSMR &= ~((uint32_t)VADC_BRSMR_ENTR_Msk);
3441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)
3444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr Pointer to the VADC group
3446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param config     Pointer to initialization data structure
3447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Initializes VADC QUEUE functional block.<BR>\n
3452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The QUEUE request source functional block converts channels stored in a queue. The first channel
3453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * queue is converted first. A channel once converted, can be placed back into the queue if desired
3454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API will first disable the arbitration slot for queue (XMC_VADC_GROUP_QueueEnable
3455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * and then it would configure all the related registers with the required configuration values.
3456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The arbitration slot is re-enabled at the end of init by invoking XMC_VADC_GROUP_QueueDisableArb
3457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxARBPR, GxQCTRL0, GxQMR0 to configure the queu
3458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * source.
3459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR> XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR
3462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR> XMC_VADC_GROUP_QueueSelectGating()<BR>
3463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
3465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Enables arbitration slot of the queue request source.<BR>\n
3473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the queue slot. Thus this must be enabled if any conversion need to take place.
3476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
3480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 292              	 .loc 1 3482 0
 293              	 .cfi_startproc
 294              	 
 295              	 
 296              	 
 297 0000 80B4     	 push {r7}
 298              	.LCFI30:
 299              	 .cfi_def_cfa_offset 4
 300              	 .cfi_offset 7,-4
 301 0002 83B0     	 sub sp,sp,#12
 302              	.LCFI31:
 303              	 .cfi_def_cfa_offset 16
 304 0004 00AF     	 add r7,sp,#0
 305              	.LCFI32:
 306              	 .cfi_def_cfa_register 7
 307 0006 7860     	 str r0,[r7,#4]
3483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
3484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 308              	 .loc 1 3484 0
 309 0008 7B68     	 ldr r3,[r7,#4]
 310 000a D3F88430 	 ldr r3,[r3,#132]
 311 000e 43F08072 	 orr r2,r3,#16777216
 312 0012 7B68     	 ldr r3,[r7,#4]
 313 0014 C3F88420 	 str r2,[r3,#132]
3485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
 314              	 .loc 1 3485 0
 315 0018 0C37     	 adds r7,r7,#12
 316              	.LCFI33:
 317              	 .cfi_def_cfa_offset 4
 318 001a BD46     	 mov sp,r7
 319              	.LCFI34:
 320              	 .cfi_def_cfa_register 13
 321              	 
 322 001c 5DF8047B 	 ldr r7,[sp],#4
 323              	.LCFI35:
 324              	 .cfi_restore 7
 325              	 .cfi_def_cfa_offset 0
 326 0020 7047     	 bx lr
 327              	 .cfi_endproc
 328              	.LFE204:
 330 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot,"ax",%progbits
 331              	 .align 2
 332              	 .thumb
 333              	 .thumb_func
 335              	XMC_VADC_GROUP_QueueDisableArbitrationSlot:
 336              	.LFB205:
3486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Disables arbitration slot of the queue request source.<BR>\n
3494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the QUEUE request source must have its conversion request considered by the arbiter, it must 
3495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the queue slot.A call to this API will lead to all conversions request by queue to be blocked
3497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxARBPR.ASEN0.
3498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
3501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
3503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 337              	 .loc 1 3503 0
 338              	 .cfi_startproc
 339              	 
 340              	 
 341              	 
 342 0000 80B4     	 push {r7}
 343              	.LCFI36:
 344              	 .cfi_def_cfa_offset 4
 345              	 .cfi_offset 7,-4
 346 0002 83B0     	 sub sp,sp,#12
 347              	.LCFI37:
 348              	 .cfi_def_cfa_offset 16
 349 0004 00AF     	 add r7,sp,#0
 350              	.LCFI38:
 351              	 .cfi_def_cfa_register 7
 352 0006 7860     	 str r0,[r7,#4]
3504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
3505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 353              	 .loc 1 3505 0
 354 0008 7B68     	 ldr r3,[r7,#4]
 355 000a D3F88430 	 ldr r3,[r3,#132]
 356 000e 23F08072 	 bic r2,r3,#16777216
 357 0012 7B68     	 ldr r3,[r7,#4]
 358 0014 C3F88420 	 str r2,[r3,#132]
3506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
 359              	 .loc 1 3506 0
 360 0018 0C37     	 adds r7,r7,#12
 361              	.LCFI39:
 362              	 .cfi_def_cfa_offset 4
 363 001a BD46     	 mov sp,r7
 364              	.LCFI40:
 365              	 .cfi_def_cfa_register 13
 366              	 
 367 001c 5DF8047B 	 ldr r7,[sp],#4
 368              	.LCFI41:
 369              	 .cfi_restore 7
 370              	 .cfi_def_cfa_offset 0
 371 0020 7047     	 bx lr
 372              	 .cfi_endproc
 373              	.LFE205:
 375 0022 00BF     	 .section .text.XMC_VADC_GROUP_QueueFlushEntries,"ax",%progbits
 376              	 .align 2
 377              	 .thumb
 378              	 .thumb_func
 380              	XMC_VADC_GROUP_QueueFlushEntries:
 381              	.LFB209:
3507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    bool  returns true if the arbitration is enabled else returns false.
3513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the arbitration status of the queue request source.<BR>\n
3516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If the queue request source must have its conversion request considered by the arbiter, it must 
3517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the arbitration rounds. Even if a load event occurs the queue channel can only be converted when
3518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to the queue slot. A call to this API would return the status of the arbitration slot of queue.
3519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would read the register bit field GxARBPR.ASEN1.
3520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueEnableArbitrationSlot(),<BR>  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<
3523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE bool XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled(XMC_VADC_GROUP_t *const group_ptr
3525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueIsArbitrationSlotEnabled:Wrong Group Pointer", XMC_VADC_CHECK_GRO
3527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   return ((group_ptr->ARBPR & (uint32_t)VADC_G_ARBPR_ASEN0_Msk) >> VADC_G_ARBPR_ASEN0_Pos);
3529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as a trigger line
3534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal for queue request source.<BR>\n
3539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 16 input lines as a trigger line. 
3541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTSEL.
3544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, 
3549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num);
3550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param trigger_edge  Choice of the trigger edge
3554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Trigger signal edge for queue request source.<BR>\n
3559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A queue request source will raise conversion request only if there were either a request from ap
3560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * occurrence of a hardware trigger. This API selects one of the 4 trigger edges. This is
3561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * needed when a hardware trigger is needed for the conversion of the queue request source.
3562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Refer to the reference manual to determine the signal that needs to be connected.
3563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQCTRL0.XTMODE.
3564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectGating()<BR> XMC_VADC_GROUP_QueueEnableExternalTrigger()<BR>
3567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
3569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param input_num  Choice of the input earmarked as the gating line
3573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Select Gating signal for queue request source.<BR>\n
3578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal. Any on
3579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * lines can be chosen as a gating signal. Trigger signal can be given to the queue request source 
3580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * when the gating signal's active level is detected. Additionally the GxQMR0.ENGT has to be config
3581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the gating signal's active level. A call to this API would configure the register bit field GxQC
3582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueSelectTrigger()<BR>
3585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
3587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param mode_sel  Select how the gating is applied to the queue request source
3591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <b>Details of function</b><br>
3595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Selects the gating mode of queue request source.<BR>\n
3596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Passage of the trigger input to the request source can be controlled via a gating signal.
3597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API determines how the gating signal behaves, either active low or active high.
3598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If gating signal needs to ignored XMC_VADC_GATEMODE_IGNORE should be used as the \a mode_sel.
3599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the register bit field GxQMR0.ENGT.
3600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><BR>
3602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * XMC_VADC_GROUP_QueueSelectGating();
3603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_
3605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
3607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMOD
3608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Clear the existing gate configuration */
3610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
3611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Set the new gating mode */
3612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
3613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Generates conversion request (Software initiated conversion).<BR>
3623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A conversion request can be raised either upon detection of a hardware trigger, or by software. 
3624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the queue unit to generate a conversion request to the analog converter. It is assumed that the 
3625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * been filled up with entries. A call to this API would configure the register bit field GxQMR0.TR
3626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Note:</b><br>
3628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * The conversion of queue entry will start immediately after the entry has been loaded into GxQINR
3629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This happens only if the queue entry has been loaded into the register without the need for the 
3630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * If a H/W Trigger is selected while loading the entry, the conversion will occur in one of the 2 
3631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <ul>
3632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <li> The H/W generates a trigger needed for the queue request source.
3633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * <li> The Conversion is triggered manually by calling this API.
3634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * </ul>
3635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueTriggerConversion(XMC_VADC_GROUP_t *const group_ptr)
3640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
3641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   XMC_ASSERT("XMC_VADC_GROUP_QueueTriggerConversion:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
3642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_TREV_Pos);
3643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
3644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    uint32_t returns the total number of channels.
3649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *             <BR>Range: [0x0 to 0x8]
3650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Returns the number of channels present in the queue.<BR>\n
3653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will return the queue buffer size. This buffer will be consisting of valid queue entrie
3654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * will be converted when a trigger event occurs. All the entries that are loaded onto the GxQINR0 
3655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * be added to the queue buffer. Hence if an application needs to get the number of valid queue ent
3656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * this API would provide the interface. A call to this API would access the registers GxQBUR0, GxQ
3657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * to determine the queue length.
3658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueInsertChannel()<BR>
3661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr);
3663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Aborts an ongoing conversion by flushing the queue.<BR>\n
3671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will flush the queue buffer. Ongoing conversion of the Queue request source will
3672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers GxQCTRL0, GxQMR0, GxARBPR in order to abort
3674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * the queue sequence.
3675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueFlushEntries() <BR>
3678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr);
3680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** /**
3682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @param group_ptr     Constant pointer to the VADC group
3683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * @return
3684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *    None
3685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Description:</b><br>
3687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * Flushing the queue Entry.<BR>\n
3688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * This API will flush one entry in the queue buffer. Ongoing conversion of the Queue request sourc
3689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * not be effected by this API. This would clear all the contents that are present in the queue buf
3690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * A call to this API would configure the registers  GxQMR0. This is a Blocking API, i.e will only 
3691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * all the entries are removed from the queue.
3692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *
3693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  * \par<b>Related APIs:</b><br>
3694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
3695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****  */
3696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** __STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
3697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** {
 382              	 .loc 1 3697 0
 383              	 .cfi_startproc
 384              	 
 385              	 
 386              	 
 387 0000 80B4     	 push {r7}
 388              	.LCFI42:
 389              	 .cfi_def_cfa_offset 4
 390              	 .cfi_offset 7,-4
 391 0002 83B0     	 sub sp,sp,#12
 392              	.LCFI43:
 393              	 .cfi_def_cfa_offset 16
 394 0004 00AF     	 add r7,sp,#0
 395              	.LCFI44:
 396              	 .cfi_def_cfa_register 7
 397 0006 7860     	 str r0,[r7,#4]
3698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   /* Initiate flushing of the queue */
3699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 398              	 .loc 1 3699 0
 399 0008 7B68     	 ldr r3,[r7,#4]
 400 000a D3F80431 	 ldr r3,[r3,#260]
 401 000e 43F48062 	 orr r2,r3,#1024
 402 0012 7B68     	 ldr r3,[r7,#4]
 403 0014 C3F80421 	 str r2,[r3,#260]
3700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** 
3701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 404              	 .loc 1 3701 0
 405 0018 00BF     	 nop
 406              	.L9:
 407              	 .loc 1 3701 0 is_stmt 0 discriminator 1
 408 001a 7B68     	 ldr r3,[r7,#4]
 409 001c D3F80831 	 ldr r3,[r3,#264]
 410 0020 03F02003 	 and r3,r3,#32
 411 0024 002B     	 cmp r3,#0
 412 0026 F8D0     	 beq .L9
3702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   {
3703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****     /* Wait until the queue is indeed flushed */
3704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h ****   }
3705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_vadc.h **** }
 413              	 .loc 1 3705 0 is_stmt 1
 414 0028 0C37     	 adds r7,r7,#12
 415              	.LCFI45:
 416              	 .cfi_def_cfa_offset 4
 417 002a BD46     	 mov sp,r7
 418              	.LCFI46:
 419              	 .cfi_def_cfa_register 13
 420              	 
 421 002c 5DF8047B 	 ldr r7,[sp],#4
 422              	.LCFI47:
 423              	 .cfi_restore 7
 424              	 .cfi_def_cfa_offset 0
 425 0030 7047     	 bx lr
 426              	 .cfi_endproc
 427              	.LFE209:
 429 0032 00BF     	 .section .rodata.g_xmc_vadc_group_array,"a",%progbits
 430              	 .align 2
 433              	g_xmc_vadc_group_array:
 434 0000 00440040 	 .word 1073759232
 435 0004 00480040 	 .word 1073760256
 436 0008 004C0040 	 .word 1073761280
 437 000c 00500040 	 .word 1073762304
 438              	 .section .text.XMC_VADC_GLOBAL_EnableModule,"ax",%progbits
 439              	 .align 2
 440              	 .global XMC_VADC_GLOBAL_EnableModule
 441              	 .thumb
 442              	 .thumb_func
 444              	XMC_VADC_GLOBAL_EnableModule:
 445              	.LFB227:
 446              	 .file 2 "../Libraries/XMCLib/src/xmc_vadc.c"
   1:../Libraries/XMCLib/src/xmc_vadc.c **** /**
   2:../Libraries/XMCLib/src/xmc_vadc.c ****  * @file xmc_vadc.c
   3:../Libraries/XMCLib/src/xmc_vadc.c ****  * @date 2015-12-01
   4:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   5:../Libraries/XMCLib/src/xmc_vadc.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_vadc.c **** ***************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_vadc.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_vadc.c ****  *
   9:../Libraries/XMCLib/src/xmc_vadc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_vadc.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_vadc.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  18:../Libraries/XMCLib/src/xmc_vadc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_vadc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_vadc.c ****  * 
  21:../Libraries/XMCLib/src/xmc_vadc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_vadc.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_vadc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_vadc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_vadc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_vadc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_vadc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_vadc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_vadc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_vadc.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_vadc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_vadc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  36:../Libraries/XMCLib/src/xmc_vadc.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_vadc.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  39:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-15:
  40:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_vadc.c ****  *      
  42:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-02-20:
  43:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised for XMC1201 device.<br>
  44:../Libraries/XMCLib/src/xmc_vadc.c ****  *   
  45:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-04-27:
  46:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for SHS.<br>
  47:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added New APIs for trigger edge selection.<BR>
  48:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Added new APIs for Queue flush entries, boundary selection, Boundary node pointer.<BR>
  49:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Revised GatingMode APIs and EMUX Control Init API.<BR>
  50:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  51:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-20:
  52:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  53:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  54:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-06-25:
  55:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - BFL configuration in channel initialization fixed.
  56:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  57:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-07-28:
  58:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - CLOCK_GATING_SUPPORTED and PERIPHERAL_RESET_SUPPORTED macros used
  59:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC13 XMC12 and XMC14
  60:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Clubbed the macro definitions for XMC44 XMC47 and XMC48
  61:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - New APIs Created.
  62:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GLOBAL_SetIndividualBoundary
  63:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetIndividualBoundary
  64:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetAlias
  65:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_GetInputClass
  66:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelSetIclass
  67:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetResultAlignment
  68:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_ChannelGetInputClass
  69:../Libraries/XMCLib/src/xmc_vadc.c ****  *           - XMC_VADC_GROUP_SetResultSubtractionValue
  70:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  71:../Libraries/XMCLib/src/xmc_vadc.c ****  * 2015-12-01:
  72:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the analog calibration voltage for XMC1100 to external reference upper supply range.
  73:../Libraries/XMCLib/src/xmc_vadc.c ****  *     - Fixed the XMC_VADC_GLOBAL_StartupCalibration() for XMC1100.
  74:../Libraries/XMCLib/src/xmc_vadc.c ****  * @endcond 
  75:../Libraries/XMCLib/src/xmc_vadc.c ****  *
  76:../Libraries/XMCLib/src/xmc_vadc.c ****  */
  77:../Libraries/XMCLib/src/xmc_vadc.c **** 
  78:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  79:../Libraries/XMCLib/src/xmc_vadc.c ****  * HEADER FILES
  80:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  81:../Libraries/XMCLib/src/xmc_vadc.c **** #include <xmc_vadc.h>
  82:../Libraries/XMCLib/src/xmc_vadc.c **** 
  83:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  84:../Libraries/XMCLib/src/xmc_vadc.c ****  * MACROS
  85:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  86:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_MAX_ICLASS_SET          (2U)  /**< Defines the maximum number of conversion parame
  87:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_NUM_EMUX_INTERFACES     (2U)  /**< Defines the maximum number of external multiple
  88:../Libraries/XMCLib/src/xmc_vadc.c **** 
  89:../Libraries/XMCLib/src/xmc_vadc.c **** #define XMC_VADC_RESULT_LEFT_ALIGN_10BIT (2U)  /**< Defines the 10 bit converted result register le
  90:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     is used in the XMC_VADC_GLOBAL_SetCompareValue(
  91:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  92:../Libraries/XMCLib/src/xmc_vadc.c ****  * ENUMS
  93:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  94:../Libraries/XMCLib/src/xmc_vadc.c **** 
  95:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
  96:../Libraries/XMCLib/src/xmc_vadc.c ****  * DATA STRUCTURES
  97:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
  98:../Libraries/XMCLib/src/xmc_vadc.c **** 
  99:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 100:../Libraries/XMCLib/src/xmc_vadc.c ****  * GLOBAL DATA
 101:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 102:../Libraries/XMCLib/src/xmc_vadc.c **** 
 103:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 104:../Libraries/XMCLib/src/xmc_vadc.c **** 
 105:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U) 
 106:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 107:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 108:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 109:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 110:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 111:../Libraries/XMCLib/src/xmc_vadc.c **** static VADC_G_TypeDef *const g_xmc_vadc_group_array[XMC_VADC_MAXIMUM_NUM_GROUPS] = {(VADC_G_TypeDef
 112:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                                     (VADC_G_TypeDef
 113:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 114:../Libraries/XMCLib/src/xmc_vadc.c **** 
 115:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 116:../Libraries/XMCLib/src/xmc_vadc.c **** 
 117:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 118:../Libraries/XMCLib/src/xmc_vadc.c ****  * LOCAL ROUTINES
 119:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 120:../Libraries/XMCLib/src/xmc_vadc.c **** 
 121:../Libraries/XMCLib/src/xmc_vadc.c **** /**************************************************************************************************
 122:../Libraries/XMCLib/src/xmc_vadc.c ****  * API IMPLEMENTATION
 123:../Libraries/XMCLib/src/xmc_vadc.c ****  **************************************************************************************************
 124:../Libraries/XMCLib/src/xmc_vadc.c **** 
 125:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to enable the VADC Module*/
 126:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_EnableModule(void)
 127:../Libraries/XMCLib/src/xmc_vadc.c **** {
 447              	 .loc 2 127 0
 448              	 .cfi_startproc
 449              	 
 450              	 
 451 0000 80B5     	 push {r7,lr}
 452              	.LCFI48:
 453              	 .cfi_def_cfa_offset 8
 454              	 .cfi_offset 7,-8
 455              	 .cfi_offset 14,-4
 456 0002 00AF     	 add r7,sp,#0
 457              	.LCFI49:
 458              	 .cfi_def_cfa_register 7
 128:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
 129:../Libraries/XMCLib/src/xmc_vadc.c ****    * Enable Out of Range Comparator for ADC channels pins P2.2to P2.9. This hack is applicable only
 130:../Libraries/XMCLib/src/xmc_vadc.c ****    * and in particular the G11 step.
 131:../Libraries/XMCLib/src/xmc_vadc.c ****    *
 132:../Libraries/XMCLib/src/xmc_vadc.c ****    * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additona
 133:../Libraries/XMCLib/src/xmc_vadc.c ****    * function
 134:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 135:../Libraries/XMCLib/src/xmc_vadc.c **** 
 136:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined (COMPARATOR)
 137:../Libraries/XMCLib/src/xmc_vadc.c ****   COMPARATOR->ORCCTRL = (uint32_t)0xFF;
 138:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 139:../Libraries/XMCLib/src/xmc_vadc.c **** 
 140:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 141:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 142:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 143:../Libraries/XMCLib/src/xmc_vadc.c **** 
 144:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 145:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 146:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC )
 459              	 .loc 2 146 0
 460 0004 0120     	 movs r0,#1
 461 0006 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 147:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 148:../Libraries/XMCLib/src/xmc_vadc.c **** }
 462              	 .loc 2 148 0
 463 000a 80BD     	 pop {r7,pc}
 464              	 .cfi_endproc
 465              	.LFE227:
 467              	 .section .text.XMC_VADC_GLOBAL_DisableModule,"ax",%progbits
 468              	 .align 2
 469              	 .global XMC_VADC_GLOBAL_DisableModule
 470              	 .thumb
 471              	 .thumb_func
 473              	XMC_VADC_GLOBAL_DisableModule:
 474              	.LFB228:
 149:../Libraries/XMCLib/src/xmc_vadc.c **** 
 150:../Libraries/XMCLib/src/xmc_vadc.c **** /*API to Disable the VADC Module*/
 151:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_DisableModule(void)
 152:../Libraries/XMCLib/src/xmc_vadc.c **** {
 475              	 .loc 2 152 0
 476              	 .cfi_startproc
 477              	 
 478              	 
 479 0000 80B5     	 push {r7,lr}
 480              	.LCFI50:
 481              	 .cfi_def_cfa_offset 8
 482              	 .cfi_offset 7,-8
 483              	 .cfi_offset 14,-4
 484 0002 00AF     	 add r7,sp,#0
 485              	.LCFI51:
 486              	 .cfi_def_cfa_register 7
 153:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 154:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Reset the Hardware */
 155:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_RESET_AssertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 487              	 .loc 2 155 0
 488 0004 0120     	 movs r0,#1
 489 0006 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 156:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 157:../Libraries/XMCLib/src/xmc_vadc.c **** 
 158:../Libraries/XMCLib/src/xmc_vadc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 159:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 160:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 161:../Libraries/XMCLib/src/xmc_vadc.c **** 
 162:../Libraries/XMCLib/src/xmc_vadc.c **** }
 490              	 .loc 2 162 0
 491 000a 80BD     	 pop {r7,pc}
 492              	 .cfi_endproc
 493              	.LFE228:
 495              	 .section .text.XMC_VADC_GLOBAL_Init,"ax",%progbits
 496              	 .align 2
 497              	 .global XMC_VADC_GLOBAL_Init
 498              	 .thumb
 499              	 .thumb_func
 501              	XMC_VADC_GLOBAL_Init:
 502              	.LFB229:
 163:../Libraries/XMCLib/src/xmc_vadc.c **** 
 164:../Libraries/XMCLib/src/xmc_vadc.c **** 
 165:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize global resources */
 166:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *conf
 167:../Libraries/XMCLib/src/xmc_vadc.c **** {
 503              	 .loc 2 167 0
 504              	 .cfi_startproc
 505              	 
 506              	 
 507 0000 80B5     	 push {r7,lr}
 508              	.LCFI52:
 509              	 .cfi_def_cfa_offset 8
 510              	 .cfi_offset 7,-8
 511              	 .cfi_offset 14,-4
 512 0002 82B0     	 sub sp,sp,#8
 513              	.LCFI53:
 514              	 .cfi_def_cfa_offset 16
 515 0004 00AF     	 add r7,sp,#0
 516              	.LCFI54:
 517              	 .cfi_def_cfa_register 7
 518 0006 7860     	 str r0,[r7,#4]
 519 0008 3960     	 str r1,[r7]
 168:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 169:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
 170:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 171:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))
 172:../Libraries/XMCLib/src/xmc_vadc.c **** 
 173:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the VADC module*/
 174:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GLOBAL_EnableModule();
 520              	 .loc 2 174 0
 521 000a FFF7FEFF 	 bl XMC_VADC_GLOBAL_EnableModule
 175:../Libraries/XMCLib/src/xmc_vadc.c **** 
 176:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->CLC = (uint32_t)(config->clc);
 522              	 .loc 2 176 0
 523 000e 3B68     	 ldr r3,[r7]
 524 0010 5A69     	 ldr r2,[r3,#20]
 525 0012 7B68     	 ldr r3,[r7,#4]
 526 0014 1A60     	 str r2,[r3]
 177:../Libraries/XMCLib/src/xmc_vadc.c **** 
 178:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Clock configuration */
 179:../Libraries/XMCLib/src/xmc_vadc.c **** 
 180:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 181:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Ms
 527              	 .loc 2 181 0
 528 0016 3B68     	 ldr r3,[r7]
 529 0018 5B68     	 ldr r3,[r3,#4]
 530 001a 43F40042 	 orr r2,r3,#32768
 531 001e 7B68     	 ldr r3,[r7,#4]
 532 0020 C3F88020 	 str r2,[r3,#128]
 182:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 183:../Libraries/XMCLib/src/xmc_vadc.c **** 
 184:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-0 configuration */
 185:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 533              	 .loc 2 185 0
 534 0024 3B68     	 ldr r3,[r7]
 535 0026 9A68     	 ldr r2,[r3,#8]
 536 0028 7B68     	 ldr r3,[r7,#4]
 537 002a C3F8A020 	 str r2,[r3,#160]
 186:../Libraries/XMCLib/src/xmc_vadc.c **** 
 187:../Libraries/XMCLib/src/xmc_vadc.c ****   /* ICLASS-1 configuration */
 188:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 538              	 .loc 2 188 0
 539 002e 3B68     	 ldr r3,[r7]
 540 0030 DA68     	 ldr r2,[r3,#12]
 541 0032 7B68     	 ldr r3,[r7,#4]
 542 0034 C3F8A420 	 str r2,[r3,#164]
 189:../Libraries/XMCLib/src/xmc_vadc.c **** 
 190:../Libraries/XMCLib/src/xmc_vadc.c **** 
 191:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Result generation related configuration */
 192:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 543              	 .loc 2 192 0
 544 0038 3B68     	 ldr r3,[r7]
 545 003a 1A69     	 ldr r2,[r3,#16]
 546 003c 7B68     	 ldr r3,[r7,#4]
 547 003e C3F88022 	 str r2,[r3,#640]
 193:../Libraries/XMCLib/src/xmc_vadc.c **** 
 194:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 195:../Libraries/XMCLib/src/xmc_vadc.c **** 
 196:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Boundaries */
 197:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 548              	 .loc 2 197 0
 549 0042 3B68     	 ldr r3,[r7]
 550 0044 1A68     	 ldr r2,[r3]
 551 0046 7B68     	 ldr r3,[r7,#4]
 552 0048 C3F8B820 	 str r2,[r3,#184]
 198:../Libraries/XMCLib/src/xmc_vadc.c **** 
 199:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 200:../Libraries/XMCLib/src/xmc_vadc.c **** 
 201:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Configure the SHS register that are needed for XMC11xx devices*/
 202:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 0U)
 203:../Libraries/XMCLib/src/xmc_vadc.c **** 
 204:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enabling the Analog part of the converter*/
 205:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = SHS0->SHSCFG  | SHS_SHSCFG_SCWC_Msk;
 206:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(SHS_SHSCFG_ANOFF_Msk);
 207:../Libraries/XMCLib/src/xmc_vadc.c ****   SHS0->SHSCFG = reg;
 208:../Libraries/XMCLib/src/xmc_vadc.c **** 
 209:../Libraries/XMCLib/src/xmc_vadc.c ****   /* From the Errata sheet of XMC1100 V1.7*/
 210:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
 211:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 212:../Libraries/XMCLib/src/xmc_vadc.c **** 
 213:../Libraries/XMCLib/src/xmc_vadc.c **** }
 553              	 .loc 2 213 0
 554 004c 0837     	 adds r7,r7,#8
 555              	.LCFI55:
 556              	 .cfi_def_cfa_offset 8
 557 004e BD46     	 mov sp,r7
 558              	.LCFI56:
 559              	 .cfi_def_cfa_register 13
 560              	 
 561 0050 80BD     	 pop {r7,pc}
 562              	 .cfi_endproc
 563              	.LFE229:
 565 0052 00BF     	 .section .text.XMC_VADC_GLOBAL_InputClassInit,"ax",%progbits
 566              	 .align 2
 567              	 .global XMC_VADC_GLOBAL_InputClassInit
 568              	 .thumb
 569              	 .thumb_func
 571              	XMC_VADC_GLOBAL_InputClassInit:
 572              	.LFB230:
 214:../Libraries/XMCLib/src/xmc_vadc.c **** 
 215:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Set the Global IClass registers*/
 216:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLAS
 217:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 218:../Libraries/XMCLib/src/xmc_vadc.c **** {
 573              	 .loc 2 218 0
 574              	 .cfi_startproc
 575              	 
 576              	 
 577              	 
 578 0000 80B4     	 push {r7}
 579              	.LCFI57:
 580              	 .cfi_def_cfa_offset 4
 581              	 .cfi_offset 7,-4
 582 0002 85B0     	 sub sp,sp,#20
 583              	.LCFI58:
 584              	 .cfi_def_cfa_offset 24
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI59:
 587              	 .cfi_def_cfa_register 7
 588 0006 F860     	 str r0,[r7,#12]
 589 0008 B960     	 str r1,[r7,#8]
 590 000a 3B60     	 str r3,[r7]
 591 000c 1346     	 mov r3,r2
 592 000e FB71     	 strb r3,[r7,#7]
 219:../Libraries/XMCLib/src/xmc_vadc.c **** 
 220:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
 221:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP
 222:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLA
 223:../Libraries/XMCLib/src/xmc_vadc.c **** 
 224:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 225:../Libraries/XMCLib/src/xmc_vadc.c ****   if (conv_type == XMC_VADC_GROUP_CONV_STD )
 593              	 .loc 2 225 0
 594 0010 FB79     	 ldrb r3,[r7,#7]
 595 0012 002B     	 cmp r3,#0
 596 0014 09D1     	 bne .L14
 226:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 227:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 228:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass &
 597              	 .loc 2 228 0
 598 0016 BA68     	 ldr r2,[r7,#8]
 599 0018 40F21F73 	 movw r3,#1823
 600 001c 1340     	 ands r3,r3,r2
 601 001e FA68     	 ldr r2,[r7,#12]
 602 0020 3968     	 ldr r1,[r7]
 603 0022 2831     	 adds r1,r1,#40
 604 0024 42F82130 	 str r3,[r2,r1,lsl#2]
 605 0028 07E0     	 b .L13
 606              	.L14:
 229:../Libraries/XMCLib/src/xmc_vadc.c ****                                       (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk
 230:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_EMUX_AVAILABLE == 1U)
 231:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 232:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 233:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 234:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC
 607              	 .loc 2 234 0
 608 002a BA68     	 ldr r2,[r7,#8]
 609 002c 054B     	 ldr r3,.L16
 610 002e 1340     	 ands r3,r3,r2
 611 0030 FA68     	 ldr r2,[r7,#12]
 612 0032 3968     	 ldr r1,[r7]
 613 0034 2831     	 adds r1,r1,#40
 614 0036 42F82130 	 str r3,[r2,r1,lsl#2]
 615              	.L13:
 235:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 236:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 237:../Libraries/XMCLib/src/xmc_vadc.c **** }
 616              	 .loc 2 237 0
 617 003a 1437     	 adds r7,r7,#20
 618              	.LCFI60:
 619              	 .cfi_def_cfa_offset 4
 620 003c BD46     	 mov sp,r7
 621              	.LCFI61:
 622              	 .cfi_def_cfa_register 13
 623              	 
 624 003e 5DF8047B 	 ldr r7,[sp],#4
 625              	.LCFI62:
 626              	 .cfi_restore 7
 627              	 .cfi_def_cfa_offset 0
 628 0042 7047     	 bx lr
 629              	.L17:
 630              	 .align 2
 631              	.L16:
 632 0044 00001F07 	 .word 119472128
 633              	 .cfi_endproc
 634              	.LFE230:
 636              	 .section .text.XMC_VADC_GLOBAL_StartupCalibration,"ax",%progbits
 637              	 .align 2
 638              	 .global XMC_VADC_GLOBAL_StartupCalibration
 639              	 .thumb
 640              	 .thumb_func
 642              	XMC_VADC_GLOBAL_StartupCalibration:
 643              	.LFB231:
 238:../Libraries/XMCLib/src/xmc_vadc.c **** 
 239:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable startup calibration feature */
 240:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
 241:../Libraries/XMCLib/src/xmc_vadc.c **** {
 644              	 .loc 2 241 0
 645              	 .cfi_startproc
 646              	 
 647              	 
 648              	 
 649 0000 80B4     	 push {r7}
 650              	.LCFI63:
 651              	 .cfi_def_cfa_offset 4
 652              	 .cfi_offset 7,-4
 653 0002 85B0     	 sub sp,sp,#20
 654              	.LCFI64:
 655              	 .cfi_def_cfa_offset 24
 656 0004 00AF     	 add r7,sp,#0
 657              	.LCFI65:
 658              	 .cfi_def_cfa_register 7
 659 0006 7860     	 str r0,[r7,#4]
 242:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 243:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
 244:../Libraries/XMCLib/src/xmc_vadc.c ****   VADC_G_TypeDef *group_ptr;
 245:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 246:../Libraries/XMCLib/src/xmc_vadc.c ****   
 247:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))
 248:../Libraries/XMCLib/src/xmc_vadc.c **** 
 249:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 660              	 .loc 2 249 0
 661 0008 7B68     	 ldr r3,[r7,#4]
 662 000a D3F88030 	 ldr r3,[r3,#128]
 663 000e 43F00042 	 orr r2,r3,#-2147483648
 664 0012 7B68     	 ldr r3,[r7,#4]
 665 0014 C3F88020 	 str r2,[r3,#128]
 250:../Libraries/XMCLib/src/xmc_vadc.c **** 
 251:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)
 252:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until all active groups finish calibration */
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 666              	 .loc 2 253 0
 667 0018 0023     	 movs r3,#0
 668 001a FB73     	 strb r3,[r7,#15]
 669 001c 16E0     	 b .L19
 670              	.L22:
 254:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 255:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr = g_xmc_vadc_group_array[i];
 671              	 .loc 2 255 0
 672 001e FB7B     	 ldrb r3,[r7,#15]
 673 0020 0E4A     	 ldr r2,.L23
 674 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 675 0026 BB60     	 str r3,[r7,#8]
 256:../Libraries/XMCLib/src/xmc_vadc.c ****     if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 676              	 .loc 2 256 0
 677 0028 BB68     	 ldr r3,[r7,#8]
 678 002a D3F88030 	 ldr r3,[r3,#128]
 679 002e 03F44033 	 and r3,r3,#196608
 680 0032 002B     	 cmp r3,#0
 681 0034 07D0     	 beq .L20
 257:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 258:../Libraries/XMCLib/src/xmc_vadc.c ****       /* This group is active. Loop until it finishes calibration */
 259:../Libraries/XMCLib/src/xmc_vadc.c ****       while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 682              	 .loc 2 259 0
 683 0036 00BF     	 nop
 684              	.L21:
 685              	 .loc 2 259 0 is_stmt 0 discriminator 1
 686 0038 BB68     	 ldr r3,[r7,#8]
 687 003a D3F88030 	 ldr r3,[r3,#128]
 688 003e 03F08053 	 and r3,r3,#268435456
 689 0042 002B     	 cmp r3,#0
 690 0044 F8D1     	 bne .L21
 691              	.L20:
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 692              	 .loc 2 253 0 is_stmt 1 discriminator 2
 693 0046 FB7B     	 ldrb r3,[r7,#15]
 694 0048 0133     	 adds r3,r3,#1
 695 004a FB73     	 strb r3,[r7,#15]
 696              	.L19:
 253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 697              	 .loc 2 253 0 is_stmt 0 discriminator 1
 698 004c FB7B     	 ldrb r3,[r7,#15]
 699 004e 032B     	 cmp r3,#3
 700 0050 E5D9     	 bls .L22
 260:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 261:../Libraries/XMCLib/src/xmc_vadc.c ****         /* NOP */
 262:../Libraries/XMCLib/src/xmc_vadc.c ****       }
 263:../Libraries/XMCLib/src/xmc_vadc.c ****     }
 264:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 265:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 266:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop until it finishes calibration */
 267:../Libraries/XMCLib/src/xmc_vadc.c ****   while ((((SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) >> (uint32_t)SHS_SHSCFG_STATE_Pos) ==
 268:../Libraries/XMCLib/src/xmc_vadc.c ****          XMC_VADC_SHS_START_UP_CAL_ACTIVE )
 269:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 270:../Libraries/XMCLib/src/xmc_vadc.c ****     /* NOP */
 271:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 272:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 273:../Libraries/XMCLib/src/xmc_vadc.c **** }
 701              	 .loc 2 273 0 is_stmt 1
 702 0052 1437     	 adds r7,r7,#20
 703              	.LCFI66:
 704              	 .cfi_def_cfa_offset 4
 705 0054 BD46     	 mov sp,r7
 706              	.LCFI67:
 707              	 .cfi_def_cfa_register 13
 708              	 
 709 0056 5DF8047B 	 ldr r7,[sp],#4
 710              	.LCFI68:
 711              	 .cfi_restore 7
 712              	 .cfi_def_cfa_offset 0
 713 005a 7047     	 bx lr
 714              	.L24:
 715              	 .align 2
 716              	.L23:
 717 005c 00000000 	 .word g_xmc_vadc_group_array
 718              	 .cfi_endproc
 719              	.LFE231:
 721              	 .section .text.XMC_VADC_GLOBAL_SetBoundaries,"ax",%progbits
 722              	 .align 2
 723              	 .global XMC_VADC_GLOBAL_SetBoundaries
 724              	 .thumb
 725              	 .thumb_func
 727              	XMC_VADC_GLOBAL_SetBoundaries:
 728              	.LFB232:
 274:../Libraries/XMCLib/src/xmc_vadc.c **** 
 275:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boudaries for result of conversion. Should the boundaries be violated, interrupts are
 276:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)
 277:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetBoundaries(XMC_VADC_GLOBAL_t *const global_ptr,
 278:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary0,
 279:../Libraries/XMCLib/src/xmc_vadc.c ****                                    const uint32_t boundary1)
 280:../Libraries/XMCLib/src/xmc_vadc.c **** {
 729              	 .loc 2 280 0
 730              	 .cfi_startproc
 731              	 
 732              	 
 733              	 
 734 0000 80B4     	 push {r7}
 735              	.LCFI69:
 736              	 .cfi_def_cfa_offset 4
 737              	 .cfi_offset 7,-4
 738 0002 87B0     	 sub sp,sp,#28
 739              	.LCFI70:
 740              	 .cfi_def_cfa_offset 32
 741 0004 00AF     	 add r7,sp,#0
 742              	.LCFI71:
 743              	 .cfi_def_cfa_register 7
 744 0006 F860     	 str r0,[r7,#12]
 745 0008 B960     	 str r1,[r7,#8]
 746 000a 7A60     	 str r2,[r7,#4]
 281:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 282:../Libraries/XMCLib/src/xmc_vadc.c **** 
 283:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 284:../Libraries/XMCLib/src/xmc_vadc.c **** 
 285:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = 0U;
 747              	 .loc 2 285 0
 748 000c 0023     	 movs r3,#0
 749 000e 7B61     	 str r3,[r7,#20]
 286:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary0 << VADC_GLOBBOUND_BOUNDARY0_Pos);
 750              	 .loc 2 286 0
 751 0010 7A69     	 ldr r2,[r7,#20]
 752 0012 BB68     	 ldr r3,[r7,#8]
 753 0014 1343     	 orrs r3,r3,r2
 754 0016 7B61     	 str r3,[r7,#20]
 287:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound |= (uint32_t) (boundary1 << VADC_GLOBBOUND_BOUNDARY1_Pos);
 755              	 .loc 2 287 0
 756 0018 7B68     	 ldr r3,[r7,#4]
 757 001a 1B04     	 lsls r3,r3,#16
 758 001c 7A69     	 ldr r2,[r7,#20]
 759 001e 1343     	 orrs r3,r3,r2
 760 0020 7B61     	 str r3,[r7,#20]
 288:../Libraries/XMCLib/src/xmc_vadc.c **** 
 289:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 761              	 .loc 2 289 0
 762 0022 FB68     	 ldr r3,[r7,#12]
 763 0024 7A69     	 ldr r2,[r7,#20]
 764 0026 C3F8B820 	 str r2,[r3,#184]
 290:../Libraries/XMCLib/src/xmc_vadc.c **** }
 765              	 .loc 2 290 0
 766 002a 1C37     	 adds r7,r7,#28
 767              	.LCFI72:
 768              	 .cfi_def_cfa_offset 4
 769 002c BD46     	 mov sp,r7
 770              	.LCFI73:
 771              	 .cfi_def_cfa_register 13
 772              	 
 773 002e 5DF8047B 	 ldr r7,[sp],#4
 774              	.LCFI74:
 775              	 .cfi_restore 7
 776              	 .cfi_def_cfa_offset 0
 777 0032 7047     	 bx lr
 778              	 .cfi_endproc
 779              	.LFE232:
 781              	 .section .text.XMC_VADC_GLOBAL_SetIndividualBoundary,"ax",%progbits
 782              	 .align 2
 783              	 .global XMC_VADC_GLOBAL_SetIndividualBoundary
 784              	 .thumb
 785              	 .thumb_func
 787              	XMC_VADC_GLOBAL_SetIndividualBoundary:
 788              	.LFB233:
 291:../Libraries/XMCLib/src/xmc_vadc.c **** 
 292:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 293:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetIndividualBoundary(XMC_VADC_GLOBAL_t *const global_ptr,
 294:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 295:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint16_t boundary_value)
 296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 789              	 .loc 2 296 0
 790              	 .cfi_startproc
 791              	 
 792              	 
 793              	 
 794 0000 80B4     	 push {r7}
 795              	.LCFI75:
 796              	 .cfi_def_cfa_offset 4
 797              	 .cfi_offset 7,-4
 798 0002 85B0     	 sub sp,sp,#20
 799              	.LCFI76:
 800              	 .cfi_def_cfa_offset 24
 801 0004 00AF     	 add r7,sp,#0
 802              	.LCFI77:
 803              	 .cfi_def_cfa_register 7
 804 0006 7860     	 str r0,[r7,#4]
 805 0008 0B46     	 mov r3,r1
 806 000a FB70     	 strb r3,[r7,#3]
 807 000c 1346     	 mov r3,r2
 808 000e 3B80     	 strh r3,[r7]
 297:../Libraries/XMCLib/src/xmc_vadc.c **** 
 298:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t globbound;
 299:../Libraries/XMCLib/src/xmc_vadc.c **** 
 300:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Module Pointer", (global_ptr == VADC))
 301:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetBoundaries:Wrong Boundary Selection",
 302:../Libraries/XMCLib/src/xmc_vadc.c ****              ((XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection) ||
 303:../Libraries/XMCLib/src/xmc_vadc.c ****               (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)))
 304:../Libraries/XMCLib/src/xmc_vadc.c **** 
 305:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 306:../Libraries/XMCLib/src/xmc_vadc.c ****   globbound = global_ptr->GLOBBOUND;
 809              	 .loc 2 306 0
 810 0010 7B68     	 ldr r3,[r7,#4]
 811 0012 D3F8B830 	 ldr r3,[r3,#184]
 812 0016 FB60     	 str r3,[r7,#12]
 307:../Libraries/XMCLib/src/xmc_vadc.c **** 
 308:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND0 == selection)
 813              	 .loc 2 308 0
 814 0018 FB78     	 ldrb r3,[r7,#3]
 815 001a 022B     	 cmp r3,#2
 816 001c 0AD1     	 bne .L27
 309:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 310:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY0_Msk);
 817              	 .loc 2 310 0
 818 001e FB68     	 ldr r3,[r7,#12]
 819 0020 23F47F63 	 bic r3,r3,#4080
 820 0024 23F00F03 	 bic r3,r3,#15
 821 0028 FB60     	 str r3,[r7,#12]
 311:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY0_Pos);
 822              	 .loc 2 311 0
 823 002a 3B88     	 ldrh r3,[r7]
 824 002c FA68     	 ldr r2,[r7,#12]
 825 002e 1343     	 orrs r3,r3,r2
 826 0030 FB60     	 str r3,[r7,#12]
 827 0032 0DE0     	 b .L28
 828              	.L27:
 312:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 313:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GLOBAL_BOUND1 == selection)
 829              	 .loc 2 313 0
 830 0034 FB78     	 ldrb r3,[r7,#3]
 831 0036 032B     	 cmp r3,#3
 832 0038 0AD1     	 bne .L28
 314:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 315:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound &= ~((uint32_t) VADC_GLOBBOUND_BOUNDARY1_Msk);
 833              	 .loc 2 315 0
 834 003a FB68     	 ldr r3,[r7,#12]
 835 003c 23F07F63 	 bic r3,r3,#267386880
 836 0040 23F47023 	 bic r3,r3,#983040
 837 0044 FB60     	 str r3,[r7,#12]
 316:../Libraries/XMCLib/src/xmc_vadc.c ****     globbound |= (uint32_t) ((uint32_t) boundary_value << VADC_GLOBBOUND_BOUNDARY1_Pos);
 838              	 .loc 2 316 0
 839 0046 3B88     	 ldrh r3,[r7]
 840 0048 1B04     	 lsls r3,r3,#16
 841 004a FA68     	 ldr r2,[r7,#12]
 842 004c 1343     	 orrs r3,r3,r2
 843 004e FB60     	 str r3,[r7,#12]
 844              	.L28:
 317:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 318:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 319:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 320:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 321:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 322:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBBOUND = globbound;
 845              	 .loc 2 322 0
 846 0050 7B68     	 ldr r3,[r7,#4]
 847 0052 FA68     	 ldr r2,[r7,#12]
 848 0054 C3F8B820 	 str r2,[r3,#184]
 323:../Libraries/XMCLib/src/xmc_vadc.c **** 
 324:../Libraries/XMCLib/src/xmc_vadc.c **** }
 849              	 .loc 2 324 0
 850 0058 1437     	 adds r7,r7,#20
 851              	.LCFI78:
 852              	 .cfi_def_cfa_offset 4
 853 005a BD46     	 mov sp,r7
 854              	.LCFI79:
 855              	 .cfi_def_cfa_register 13
 856              	 
 857 005c 5DF8047B 	 ldr r7,[sp],#4
 858              	.LCFI80:
 859              	 .cfi_restore 7
 860              	 .cfi_def_cfa_offset 0
 861 0060 7047     	 bx lr
 862              	 .cfi_endproc
 863              	.LFE233:
 865 0062 00BF     	 .section .text.XMC_VADC_GLOBAL_SetCompareValue,"ax",%progbits
 866              	 .align 2
 867              	 .global XMC_VADC_GLOBAL_SetCompareValue
 868              	 .thumb
 869              	 .thumb_func
 871              	XMC_VADC_GLOBAL_SetCompareValue:
 872              	.LFB234:
 325:../Libraries/XMCLib/src/xmc_vadc.c **** 
 326:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 327:../Libraries/XMCLib/src/xmc_vadc.c **** 
 328:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set compare value for the result register. Result of conversion is compared against this 
 329:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetCompareValue(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_RESULT_SIZ
 330:../Libraries/XMCLib/src/xmc_vadc.c **** {
 873              	 .loc 2 330 0
 874              	 .cfi_startproc
 875              	 
 876              	 
 877              	 
 878 0000 80B4     	 push {r7}
 879              	.LCFI81:
 880              	 .cfi_def_cfa_offset 4
 881              	 .cfi_offset 7,-4
 882 0002 83B0     	 sub sp,sp,#12
 883              	.LCFI82:
 884              	 .cfi_def_cfa_offset 16
 885 0004 00AF     	 add r7,sp,#0
 886              	.LCFI83:
 887              	 .cfi_def_cfa_register 7
 888 0006 7860     	 str r0,[r7,#4]
 889 0008 0B46     	 mov r3,r1
 890 000a 7B80     	 strh r3,[r7,#2]
 331:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetCompareValue:Wrong Module Pointer", (global_ptr == VADC))
 332:../Libraries/XMCLib/src/xmc_vadc.c **** 
 333:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES &= ~((uint32_t)VADC_GLOBRES_RESULT_Msk);
 891              	 .loc 2 333 0
 892 000c 7B68     	 ldr r3,[r7,#4]
 893 000e D3F80033 	 ldr r3,[r3,#768]
 894 0012 1B0C     	 lsrs r3,r3,#16
 895 0014 1B04     	 lsls r3,r3,#16
 896 0016 7A68     	 ldr r2,[r7,#4]
 897 0018 C2F80033 	 str r3,[r2,#768]
 334:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBRES |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 898              	 .loc 2 334 0
 899 001c 7B68     	 ldr r3,[r7,#4]
 900 001e D3F80023 	 ldr r2,[r3,#768]
 901 0022 7B88     	 ldrh r3,[r7,#2]
 902 0024 9B00     	 lsls r3,r3,#2
 903 0026 1A43     	 orrs r2,r2,r3
 904 0028 7B68     	 ldr r3,[r7,#4]
 905 002a C3F80023 	 str r2,[r3,#768]
 335:../Libraries/XMCLib/src/xmc_vadc.c **** }
 906              	 .loc 2 335 0
 907 002e 0C37     	 adds r7,r7,#12
 908              	.LCFI84:
 909              	 .cfi_def_cfa_offset 4
 910 0030 BD46     	 mov sp,r7
 911              	.LCFI85:
 912              	 .cfi_def_cfa_register 13
 913              	 
 914 0032 5DF8047B 	 ldr r7,[sp],#4
 915              	.LCFI86:
 916              	 .cfi_restore 7
 917              	 .cfi_def_cfa_offset 0
 918 0036 7047     	 bx lr
 919              	 .cfi_endproc
 920              	.LFE234:
 922              	 .section .text.XMC_VADC_GLOBAL_GetCompareResult,"ax",%progbits
 923              	 .align 2
 924              	 .global XMC_VADC_GLOBAL_GetCompareResult
 925              	 .thumb
 926              	 .thumb_func
 928              	XMC_VADC_GLOBAL_GetCompareResult:
 929              	.LFB235:
 336:../Libraries/XMCLib/src/xmc_vadc.c **** 
 337:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of comparison */
 338:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GLOBAL_GetCompareResult(XMC_VADC_GLOBAL_t *const global_ptr)
 339:../Libraries/XMCLib/src/xmc_vadc.c **** {
 930              	 .loc 2 339 0
 931              	 .cfi_startproc
 932              	 
 933              	 
 934              	 
 935 0000 80B4     	 push {r7}
 936              	.LCFI87:
 937              	 .cfi_def_cfa_offset 4
 938              	 .cfi_offset 7,-4
 939 0002 85B0     	 sub sp,sp,#20
 940              	.LCFI88:
 941              	 .cfi_def_cfa_offset 24
 942 0004 00AF     	 add r7,sp,#0
 943              	.LCFI89:
 944              	 .cfi_def_cfa_register 7
 945 0006 7860     	 str r0,[r7,#4]
 340:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
 341:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
 342:../Libraries/XMCLib/src/xmc_vadc.c **** 
 343:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_GetCompareResult:Wrong Module Pointer", (global_ptr == VADC))
 344:../Libraries/XMCLib/src/xmc_vadc.c **** 
 345:../Libraries/XMCLib/src/xmc_vadc.c ****   res = global_ptr->GLOBRES;
 946              	 .loc 2 345 0
 947 0008 7B68     	 ldr r3,[r7,#4]
 948 000a D3F80033 	 ldr r3,[r3,#768]
 949 000e BB60     	 str r3,[r7,#8]
 346:../Libraries/XMCLib/src/xmc_vadc.c **** 
 347:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_GLOBRES_VF_Msk)
 950              	 .loc 2 347 0
 951 0010 BB68     	 ldr r3,[r7,#8]
 952 0012 002B     	 cmp r3,#0
 953 0014 06DA     	 bge .L31
 348:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 349:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_GLOBRES_FCR_Pos) & (uint32_
 954              	 .loc 2 349 0
 955 0016 BB68     	 ldr r3,[r7,#8]
 956 0018 9B0F     	 lsrs r3,r3,#30
 957 001a DBB2     	 uxtb r3,r3
 958 001c 03F00103 	 and r3,r3,#1
 959 0020 FB73     	 strb r3,[r7,#15]
 960 0022 01E0     	 b .L32
 961              	.L31:
 350:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 351:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 352:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 353:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 962              	 .loc 2 353 0
 963 0024 0223     	 movs r3,#2
 964 0026 FB73     	 strb r3,[r7,#15]
 965              	.L32:
 354:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 355:../Libraries/XMCLib/src/xmc_vadc.c **** 
 356:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 966              	 .loc 2 356 0
 967 0028 FB7B     	 ldrb r3,[r7,#15]
 357:../Libraries/XMCLib/src/xmc_vadc.c **** }
 968              	 .loc 2 357 0
 969 002a 1846     	 mov r0,r3
 970 002c 1437     	 adds r7,r7,#20
 971              	.LCFI90:
 972              	 .cfi_def_cfa_offset 4
 973 002e BD46     	 mov sp,r7
 974              	.LCFI91:
 975              	 .cfi_def_cfa_register 13
 976              	 
 977 0030 5DF8047B 	 ldr r7,[sp],#4
 978              	.LCFI92:
 979              	 .cfi_restore 7
 980              	 .cfi_def_cfa_offset 0
 981 0034 7047     	 bx lr
 982              	 .cfi_endproc
 983              	.LFE235:
 985 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BindGroupToEMux,"ax",%progbits
 986              	 .align 2
 987              	 .global XMC_VADC_GLOBAL_BindGroupToEMux
 988              	 .thumb
 989              	 .thumb_func
 991              	XMC_VADC_GLOBAL_BindGroupToEMux:
 992              	.LFB236:
 358:../Libraries/XMCLib/src/xmc_vadc.c **** 
 359:../Libraries/XMCLib/src/xmc_vadc.c **** /* Bind one of the four groups to one of the two EMUX interfaces */
 360:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_EMUX_AVAILABLE == 1U)
 361:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BindGroupToEMux(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t emuxif, co
 362:../Libraries/XMCLib/src/xmc_vadc.c **** {
 993              	 .loc 2 362 0
 994              	 .cfi_startproc
 995              	 
 996              	 
 997              	 
 998 0000 80B4     	 push {r7}
 999              	.LCFI93:
 1000              	 .cfi_def_cfa_offset 4
 1001              	 .cfi_offset 7,-4
 1002 0002 87B0     	 sub sp,sp,#28
 1003              	.LCFI94:
 1004              	 .cfi_def_cfa_offset 32
 1005 0004 00AF     	 add r7,sp,#0
 1006              	.LCFI95:
 1007              	 .cfi_def_cfa_register 7
 1008 0006 F860     	 str r0,[r7,#12]
 1009 0008 B960     	 str r1,[r7,#8]
 1010 000a 7A60     	 str r2,[r7,#4]
 363:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
 364:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
 365:../Libraries/XMCLib/src/xmc_vadc.c **** 
 366:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong Module Pointer", (global_ptr == VADC))
 367:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong EMUX Group", (emuxif < XMC_VADC_NUM_EMUX_INTERF
 368:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BindGroupToEMux:Wrong VADC Group", (group < XMC_VADC_MAXIMUM_NUM_GROU
 369:../Libraries/XMCLib/src/xmc_vadc.c **** 
 370:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == emuxif)
 1011              	 .loc 2 370 0
 1012 000c BB68     	 ldr r3,[r7,#8]
 1013 000e 002B     	 cmp r3,#0
 1014 0010 04D1     	 bne .L35
 371:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 372:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Pos;
 1015              	 .loc 2 372 0
 1016 0012 0023     	 movs r3,#0
 1017 0014 3B61     	 str r3,[r7,#16]
 373:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP0_Msk;
 1018              	 .loc 2 373 0
 1019 0016 0F23     	 movs r3,#15
 1020 0018 7B61     	 str r3,[r7,#20]
 1021 001a 03E0     	 b .L36
 1022              	.L35:
 374:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 375:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 376:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 377:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Pos;
 1023              	 .loc 2 377 0
 1024 001c 0423     	 movs r3,#4
 1025 001e 3B61     	 str r3,[r7,#16]
 378:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)VADC_EMUXSEL_EMUXGRP1_Msk;
 1026              	 .loc 2 378 0
 1027 0020 F023     	 movs r3,#240
 1028 0022 7B61     	 str r3,[r7,#20]
 1029              	.L36:
 379:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 380:../Libraries/XMCLib/src/xmc_vadc.c **** 
 381:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL &= ~(mask);
 1030              	 .loc 2 381 0
 1031 0024 FB68     	 ldr r3,[r7,#12]
 1032 0026 D3F8F023 	 ldr r2,[r3,#1008]
 1033 002a 7B69     	 ldr r3,[r7,#20]
 1034 002c DB43     	 mvns r3,r3
 1035 002e 1A40     	 ands r2,r2,r3
 1036 0030 FB68     	 ldr r3,[r7,#12]
 1037 0032 C3F8F023 	 str r2,[r3,#1008]
 382:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->EMUXSEL |= (uint32_t) (group << pos);
 1038              	 .loc 2 382 0
 1039 0036 FB68     	 ldr r3,[r7,#12]
 1040 0038 D3F8F023 	 ldr r2,[r3,#1008]
 1041 003c 3B69     	 ldr r3,[r7,#16]
 1042 003e 7968     	 ldr r1,[r7,#4]
 1043 0040 01FA03F3 	 lsl r3,r1,r3
 1044 0044 1A43     	 orrs r2,r2,r3
 1045 0046 FB68     	 ldr r3,[r7,#12]
 1046 0048 C3F8F023 	 str r2,[r3,#1008]
 383:../Libraries/XMCLib/src/xmc_vadc.c **** 
 384:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1047              	 .loc 2 384 0
 1048 004c 1C37     	 adds r7,r7,#28
 1049              	.LCFI96:
 1050              	 .cfi_def_cfa_offset 4
 1051 004e BD46     	 mov sp,r7
 1052              	.LCFI97:
 1053              	 .cfi_def_cfa_register 13
 1054              	 
 1055 0050 5DF8047B 	 ldr r7,[sp],#4
 1056              	.LCFI98:
 1057              	 .cfi_restore 7
 1058              	 .cfi_def_cfa_offset 0
 1059 0054 7047     	 bx lr
 1060              	 .cfi_endproc
 1061              	.LFE236:
 1063 0056 00BF     	 .section .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode,"ax",%progbits
 1064              	 .align 2
 1065              	 .global XMC_VADC_GLOBAL_SetResultEventInterruptNode
 1066              	 .thumb
 1067              	 .thumb_func
 1069              	XMC_VADC_GLOBAL_SetResultEventInterruptNode:
 1070              	.LFB237:
 385:../Libraries/XMCLib/src/xmc_vadc.c **** #endif 
 386:../Libraries/XMCLib/src/xmc_vadc.c **** 
 387:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind result event with a service request line */
 388:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SetResultEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t
 389:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1071              	 .loc 2 389 0
 1072              	 .cfi_startproc
 1073              	 
 1074              	 
 1075              	 
 1076 0000 80B4     	 push {r7}
 1077              	.LCFI99:
 1078              	 .cfi_def_cfa_offset 4
 1079              	 .cfi_offset 7,-4
 1080 0002 85B0     	 sub sp,sp,#20
 1081              	.LCFI100:
 1082              	 .cfi_def_cfa_offset 24
 1083 0004 00AF     	 add r7,sp,#0
 1084              	.LCFI101:
 1085              	 .cfi_def_cfa_register 7
 1086 0006 7860     	 str r0,[r7,#4]
 1087 0008 0B46     	 mov r3,r1
 1088 000a FB70     	 strb r3,[r7,#3]
 390:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 391:../Libraries/XMCLib/src/xmc_vadc.c ****   
 392:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong Module Pointer", (global_ptr == VAD
 393:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SetResultEventInterruptNode:Wrong SR Number", (sr <= XMC_VADC_SR_SHAR
 394:../Libraries/XMCLib/src/xmc_vadc.c **** 
 395:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1089              	 .loc 2 395 0
 1090 000c FB78     	 ldrb r3,[r7,#3]
 1091 000e 032B     	 cmp r3,#3
 1092 0010 03D9     	 bls .L38
 396:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 397:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1093              	 .loc 2 397 0
 1094 0012 FB78     	 ldrb r3,[r7,#3]
 1095 0014 043B     	 subs r3,r3,#4
 1096 0016 FB60     	 str r3,[r7,#12]
 1097 0018 01E0     	 b .L39
 1098              	.L38:
 398:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 399:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 400:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 401:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1099              	 .loc 2 401 0
 1100 001a FB78     	 ldrb r3,[r7,#3]
 1101 001c FB60     	 str r3,[r7,#12]
 1102              	.L39:
 402:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 403:../Libraries/XMCLib/src/xmc_vadc.c **** 
 404:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_REV0NP_Msk);
 1103              	 .loc 2 404 0
 1104 001e 7B68     	 ldr r3,[r7,#4]
 1105 0020 D3F84031 	 ldr r3,[r3,#320]
 1106 0024 23F47022 	 bic r2,r3,#983040
 1107 0028 7B68     	 ldr r3,[r7,#4]
 1108 002a C3F84021 	 str r2,[r3,#320]
 405:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
 1109              	 .loc 2 405 0
 1110 002e 7B68     	 ldr r3,[r7,#4]
 1111 0030 D3F84021 	 ldr r2,[r3,#320]
 1112 0034 FB68     	 ldr r3,[r7,#12]
 1113 0036 1B04     	 lsls r3,r3,#16
 1114 0038 1A43     	 orrs r2,r2,r3
 1115 003a 7B68     	 ldr r3,[r7,#4]
 1116 003c C3F84021 	 str r2,[r3,#320]
 406:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1117              	 .loc 2 406 0
 1118 0040 1437     	 adds r7,r7,#20
 1119              	.LCFI102:
 1120              	 .cfi_def_cfa_offset 4
 1121 0042 BD46     	 mov sp,r7
 1122              	.LCFI103:
 1123              	 .cfi_def_cfa_register 13
 1124              	 
 1125 0044 5DF8047B 	 ldr r7,[sp],#4
 1126              	.LCFI104:
 1127              	 .cfi_restore 7
 1128              	 .cfi_def_cfa_offset 0
 1129 0048 7047     	 bx lr
 1130              	 .cfi_endproc
 1131              	.LFE237:
 1133 004a 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode,"ax",%progbits
 1134              	 .align 2
 1135              	 .global XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
 1136              	 .thumb
 1137              	 .thumb_func
 1139              	XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:
 1140              	.LFB238:
 407:../Libraries/XMCLib/src/xmc_vadc.c **** 
 408:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind request source event with a service request line */
 409:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC
 410:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1141              	 .loc 2 410 0
 1142              	 .cfi_startproc
 1143              	 
 1144              	 
 1145              	 
 1146 0000 80B4     	 push {r7}
 1147              	.LCFI105:
 1148              	 .cfi_def_cfa_offset 4
 1149              	 .cfi_offset 7,-4
 1150 0002 85B0     	 sub sp,sp,#20
 1151              	.LCFI106:
 1152              	 .cfi_def_cfa_offset 24
 1153 0004 00AF     	 add r7,sp,#0
 1154              	.LCFI107:
 1155              	 .cfi_def_cfa_register 7
 1156 0006 7860     	 str r0,[r7,#4]
 1157 0008 0B46     	 mov r3,r1
 1158 000a FB70     	 strb r3,[r7,#3]
 411:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t node;
 412:../Libraries/XMCLib/src/xmc_vadc.c ****   
 413:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_
 414:../Libraries/XMCLib/src/xmc_vadc.c **** 
 415:../Libraries/XMCLib/src/xmc_vadc.c ****   if (sr >= XMC_VADC_SR_SHARED_SR0)
 1159              	 .loc 2 415 0
 1160 000c FB78     	 ldrb r3,[r7,#3]
 1161 000e 032B     	 cmp r3,#3
 1162 0010 03D9     	 bls .L41
 416:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 417:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 1163              	 .loc 2 417 0
 1164 0012 FB78     	 ldrb r3,[r7,#3]
 1165 0014 043B     	 subs r3,r3,#4
 1166 0016 FB60     	 str r3,[r7,#12]
 1167 0018 01E0     	 b .L42
 1168              	.L41:
 418:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 419:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 421:../Libraries/XMCLib/src/xmc_vadc.c ****     node = (uint32_t)sr;
 1169              	 .loc 2 421 0
 1170 001a FB78     	 ldrb r3,[r7,#3]
 1171 001c FB60     	 str r3,[r7,#12]
 1172              	.L42:
 422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 423:../Libraries/XMCLib/src/xmc_vadc.c **** 
 424:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 1173              	 .loc 2 424 0
 1174 001e 7B68     	 ldr r3,[r7,#4]
 1175 0020 D3F84031 	 ldr r3,[r3,#320]
 1176 0024 23F00F02 	 bic r2,r3,#15
 1177 0028 7B68     	 ldr r3,[r7,#4]
 1178 002a C3F84021 	 str r2,[r3,#320]
 425:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 1179              	 .loc 2 425 0
 1180 002e 7B68     	 ldr r3,[r7,#4]
 1181 0030 D3F84021 	 ldr r2,[r3,#320]
 1182 0034 FB68     	 ldr r3,[r7,#12]
 1183 0036 1A43     	 orrs r2,r2,r3
 1184 0038 7B68     	 ldr r3,[r7,#4]
 1185 003a C3F84021 	 str r2,[r3,#320]
 426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1186              	 .loc 2 426 0
 1187 003e 1437     	 adds r7,r7,#20
 1188              	.LCFI108:
 1189              	 .cfi_def_cfa_offset 4
 1190 0040 BD46     	 mov sp,r7
 1191              	.LCFI109:
 1192              	 .cfi_def_cfa_register 13
 1193              	 
 1194 0042 5DF8047B 	 ldr r7,[sp],#4
 1195              	.LCFI110:
 1196              	 .cfi_restore 7
 1197              	 .cfi_def_cfa_offset 0
 1198 0046 7047     	 bx lr
 1199              	 .cfi_endproc
 1200              	.LFE238:
 1202              	 .section .text.XMC_VADC_GROUP_Init,"ax",%progbits
 1203              	 .align 2
 1204              	 .global XMC_VADC_GROUP_Init
 1205              	 .thumb
 1206              	 .thumb_func
 1208              	XMC_VADC_GROUP_Init:
 1209              	.LFB239:
 427:../Libraries/XMCLib/src/xmc_vadc.c **** 
 428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize an instance of group of VADC hardware */
 429:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE == 1U)  
 430:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
 431:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1210              	 .loc 2 431 0
 1211              	 .cfi_startproc
 1212              	 
 1213              	 
 1214 0000 80B5     	 push {r7,lr}
 1215              	.LCFI111:
 1216              	 .cfi_def_cfa_offset 8
 1217              	 .cfi_offset 7,-8
 1218              	 .cfi_offset 14,-4
 1219 0002 82B0     	 sub sp,sp,#8
 1220              	.LCFI112:
 1221              	 .cfi_def_cfa_offset 16
 1222 0004 00AF     	 add r7,sp,#0
 1223              	.LCFI113:
 1224              	 .cfi_def_cfa_register 7
 1225 0006 7860     	 str r0,[r7,#4]
 1226 0008 3960     	 str r1,[r7]
 432:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
 433:../Libraries/XMCLib/src/xmc_vadc.c **** 
 434:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the input classes */
 435:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 1227              	 .loc 2 435 0
 1228 000a 3B68     	 ldr r3,[r7]
 1229 000c 7868     	 ldr r0,[r7,#4]
 1230 000e 5968     	 ldr r1,[r3,#4]
 1231 0010 0022     	 movs r2,#0
 1232 0012 0023     	 movs r3,#0
 1233 0014 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 436:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 1234              	 .loc 2 436 0
 1235 0018 3B68     	 ldr r3,[r7]
 1236 001a 7868     	 ldr r0,[r7,#4]
 1237 001c 5968     	 ldr r1,[r3,#4]
 1238 001e 0122     	 movs r2,#1
 1239 0020 0023     	 movs r3,#0
 1240 0022 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 437:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 1241              	 .loc 2 437 0
 1242 0026 3B68     	 ldr r3,[r7]
 1243 0028 7868     	 ldr r0,[r7,#4]
 1244 002a 9968     	 ldr r1,[r3,#8]
 1245 002c 0022     	 movs r2,#0
 1246 002e 0123     	 movs r3,#1
 1247 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 438:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 1248              	 .loc 2 438 0
 1249 0034 3B68     	 ldr r3,[r7]
 1250 0036 7868     	 ldr r0,[r7,#4]
 1251 0038 9968     	 ldr r1,[r3,#8]
 1252 003a 0122     	 movs r2,#1
 1253 003c 0123     	 movs r3,#1
 1254 003e FFF7FEFF 	 bl XMC_VADC_GROUP_InputClassInit
 439:../Libraries/XMCLib/src/xmc_vadc.c **** 
 440:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = config->g_arbcfg;
 1255              	 .loc 2 440 0
 1256 0042 3B68     	 ldr r3,[r7]
 1257 0044 1A69     	 ldr r2,[r3,#16]
 1258 0046 7B68     	 ldr r3,[r7,#4]
 1259 0048 C3F88020 	 str r2,[r3,#128]
 441:../Libraries/XMCLib/src/xmc_vadc.c **** 
 442:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = config->g_bound;
 1260              	 .loc 2 442 0
 1261 004c 3B68     	 ldr r3,[r7]
 1262 004e DA68     	 ldr r2,[r3,#12]
 1263 0050 7B68     	 ldr r3,[r7,#4]
 1264 0052 C3F8B820 	 str r2,[r3,#184]
 443:../Libraries/XMCLib/src/xmc_vadc.c **** 
 444:../Libraries/XMCLib/src/xmc_vadc.c ****   /* External mux configuration */
 445:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 1265              	 .loc 2 445 0
 1266 0056 3B68     	 ldr r3,[r7]
 1267 0058 7868     	 ldr r0,[r7,#4]
 1268 005a 1968     	 ldr r1,[r3]
 1269 005c FFF7FEFF 	 bl XMC_VADC_GROUP_ExternalMuxControlInit
 446:../Libraries/XMCLib/src/xmc_vadc.c **** 
 447:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1270              	 .loc 2 447 0
 1271 0060 0837     	 adds r7,r7,#8
 1272              	.LCFI114:
 1273              	 .cfi_def_cfa_offset 8
 1274 0062 BD46     	 mov sp,r7
 1275              	.LCFI115:
 1276              	 .cfi_def_cfa_register 13
 1277              	 
 1278 0064 80BD     	 pop {r7,pc}
 1279              	 .cfi_endproc
 1280              	.LFE239:
 1282 0066 00BF     	 .section .text.XMC_VADC_GROUP_InputClassInit,"ax",%progbits
 1283              	 .align 2
 1284              	 .global XMC_VADC_GROUP_InputClassInit
 1285              	 .thumb
 1286              	 .thumb_func
 1288              	XMC_VADC_GROUP_InputClassInit:
 1289              	.LFB240:
 448:../Libraries/XMCLib/src/xmc_vadc.c **** 
 449:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to program conversion characteristics */
 450:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t 
 451:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set
 452:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1290              	 .loc 2 452 0
 1291              	 .cfi_startproc
 1292              	 
 1293              	 
 1294              	 
 1295 0000 80B4     	 push {r7}
 1296              	.LCFI116:
 1297              	 .cfi_def_cfa_offset 4
 1298              	 .cfi_offset 7,-4
 1299 0002 8DB0     	 sub sp,sp,#52
 1300              	.LCFI117:
 1301              	 .cfi_def_cfa_offset 56
 1302 0004 00AF     	 add r7,sp,#0
 1303              	.LCFI118:
 1304              	 .cfi_def_cfa_register 7
 1305 0006 F860     	 str r0,[r7,#12]
 1306 0008 B960     	 str r1,[r7,#8]
 1307 000a 3B60     	 str r3,[r7]
 1308 000c 1346     	 mov r3,r2
 1309 000e FB71     	 strb r3,[r7,#7]
 453:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_class;
 454:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_pos;
 455:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_pos;
 456:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        conv_mode_mask;
 457:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time_mask;
 458:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        sample_time;
 459:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_CONVMODE_t conv_mode;
 460:../Libraries/XMCLib/src/xmc_vadc.c **** 
 461:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
 462:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_
 463:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLAS
 464:../Libraries/XMCLib/src/xmc_vadc.c **** 
 465:../Libraries/XMCLib/src/xmc_vadc.c ****   /* 
 466:../Libraries/XMCLib/src/xmc_vadc.c ****    * Obtain the mask and position macros of the parameters based on what is being requested - Stand
 467:../Libraries/XMCLib/src/xmc_vadc.c ****    * external mux channels.
 468:../Libraries/XMCLib/src/xmc_vadc.c ****    */
 469:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_CONV_STD == conv_type)
 1310              	 .loc 2 469 0
 1311 0010 FB79     	 ldrb r3,[r7,#7]
 1312 0012 002B     	 cmp r3,#0
 1313 0014 13D1     	 bne .L45
 470:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 471:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 1314              	 .loc 2 471 0
 1315 0016 0823     	 movs r3,#8
 1316 0018 FB62     	 str r3,[r7,#44]
 472:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 1317              	 .loc 2 472 0
 1318 001a 4FF4E063 	 mov r3,#1792
 1319 001e 7B62     	 str r3,[r7,#36]
 473:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 1320              	 .loc 2 473 0
 1321 0020 0023     	 movs r3,#0
 1322 0022 BB62     	 str r3,[r7,#40]
 474:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 1323              	 .loc 2 474 0
 1324 0024 1F23     	 movs r3,#31
 1325 0026 3B62     	 str r3,[r7,#32]
 475:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sample_time_std_conv;
 1326              	 .loc 2 475 0
 1327 0028 3B7A     	 ldrb r3,[r7,#8]
 1328 002a C3F30403 	 ubfx r3,r3,#0,#5
 1329 002e DBB2     	 uxtb r3,r3
 1330 0030 FB61     	 str r3,[r7,#28]
 476:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 1331              	 .loc 2 476 0
 1332 0032 7B7A     	 ldrb r3,[r7,#9]
 1333 0034 C3F30203 	 ubfx r3,r3,#0,#3
 1334 0038 DBB2     	 uxtb r3,r3
 1335 003a FB76     	 strb r3,[r7,#27]
 1336 003c 13E0     	 b .L46
 1337              	.L45:
 477:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 478:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 479:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 480:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 1338              	 .loc 2 480 0
 1339 003e 1823     	 movs r3,#24
 1340 0040 FB62     	 str r3,[r7,#44]
 481:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 1341              	 .loc 2 481 0
 1342 0042 4FF0E063 	 mov r3,#117440512
 1343 0046 7B62     	 str r3,[r7,#36]
 482:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 1344              	 .loc 2 482 0
 1345 0048 1023     	 movs r3,#16
 1346 004a BB62     	 str r3,[r7,#40]
 483:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 1347              	 .loc 2 483 0
 1348 004c 4FF4F813 	 mov r3,#2031616
 1349 0050 3B62     	 str r3,[r7,#32]
 484:../Libraries/XMCLib/src/xmc_vadc.c ****     sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 1350              	 .loc 2 484 0
 1351 0052 BB7A     	 ldrb r3,[r7,#10]
 1352 0054 C3F30403 	 ubfx r3,r3,#0,#5
 1353 0058 DBB2     	 uxtb r3,r3
 1354 005a FB61     	 str r3,[r7,#28]
 485:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 1355              	 .loc 2 485 0
 1356 005c FB7A     	 ldrb r3,[r7,#11]
 1357 005e C3F30203 	 ubfx r3,r3,#0,#3
 1358 0062 DBB2     	 uxtb r3,r3
 1359 0064 FB76     	 strb r3,[r7,#27]
 1360              	.L46:
 486:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 487:../Libraries/XMCLib/src/xmc_vadc.c **** 
 488:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the class */
 489:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class  = group_ptr->ICLASS[set_num];
 1361              	 .loc 2 489 0
 1362 0066 FB68     	 ldr r3,[r7,#12]
 1363 0068 3A68     	 ldr r2,[r7]
 1364 006a 2832     	 adds r2,r2,#40
 1365 006c 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1366 0070 7B61     	 str r3,[r7,#20]
 490:../Libraries/XMCLib/src/xmc_vadc.c **** 
 491:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the class register */
 492:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(conv_mode_mask);
 1367              	 .loc 2 492 0
 1368 0072 7B6A     	 ldr r3,[r7,#36]
 1369 0074 DB43     	 mvns r3,r3
 1370 0076 7A69     	 ldr r2,[r7,#20]
 1371 0078 1340     	 ands r3,r3,r2
 1372 007a 7B61     	 str r3,[r7,#20]
 493:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 1373              	 .loc 2 493 0
 1374 007c FA7E     	 ldrb r2,[r7,#27]
 1375 007e FB6A     	 ldr r3,[r7,#44]
 1376 0080 02FA03F3 	 lsl r3,r2,r3
 1377 0084 7A69     	 ldr r2,[r7,#20]
 1378 0086 1343     	 orrs r3,r3,r2
 1379 0088 7B61     	 str r3,[r7,#20]
 494:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class &= ~(sample_time_mask);
 1380              	 .loc 2 494 0
 1381 008a 3B6A     	 ldr r3,[r7,#32]
 1382 008c DB43     	 mvns r3,r3
 1383 008e 7A69     	 ldr r2,[r7,#20]
 1384 0090 1340     	 ands r3,r3,r2
 1385 0092 7B61     	 str r3,[r7,#20]
 495:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 1386              	 .loc 2 495 0
 1387 0094 BB6A     	 ldr r3,[r7,#40]
 1388 0096 FA69     	 ldr r2,[r7,#28]
 1389 0098 02FA03F3 	 lsl r3,r2,r3
 1390 009c 7A69     	 ldr r2,[r7,#20]
 1391 009e 1343     	 orrs r3,r3,r2
 1392 00a0 7B61     	 str r3,[r7,#20]
 496:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ICLASS[set_num] = conv_class;
 1393              	 .loc 2 496 0
 1394 00a2 FB68     	 ldr r3,[r7,#12]
 1395 00a4 3A68     	 ldr r2,[r7]
 1396 00a6 2832     	 adds r2,r2,#40
 1397 00a8 7969     	 ldr r1,[r7,#20]
 1398 00aa 43F82210 	 str r1,[r3,r2,lsl#2]
 497:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1399              	 .loc 2 497 0
 1400 00ae 3437     	 adds r7,r7,#52
 1401              	.LCFI119:
 1402              	 .cfi_def_cfa_offset 4
 1403 00b0 BD46     	 mov sp,r7
 1404              	.LCFI120:
 1405              	 .cfi_def_cfa_register 13
 1406              	 
 1407 00b2 5DF8047B 	 ldr r7,[sp],#4
 1408              	.LCFI121:
 1409              	 .cfi_restore 7
 1410              	 .cfi_def_cfa_offset 0
 1411 00b6 7047     	 bx lr
 1412              	 .cfi_endproc
 1413              	.LFE240:
 1415              	 .section .text.XMC_VADC_GROUP_SetPowerMode,"ax",%progbits
 1416              	 .align 2
 1417              	 .global XMC_VADC_GROUP_SetPowerMode
 1418              	 .thumb
 1419              	 .thumb_func
 1421              	XMC_VADC_GROUP_SetPowerMode:
 1422              	.LFB241:
 498:../Libraries/XMCLib/src/xmc_vadc.c **** 
 499:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which sets the power mode of analog converter of a VADC group */
 500:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_
 501:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1423              	 .loc 2 501 0
 1424              	 .cfi_startproc
 1425              	 
 1426              	 
 1427              	 
 1428 0000 80B4     	 push {r7}
 1429              	.LCFI122:
 1430              	 .cfi_def_cfa_offset 4
 1431              	 .cfi_offset 7,-4
 1432 0002 85B0     	 sub sp,sp,#20
 1433              	.LCFI123:
 1434              	 .cfi_def_cfa_offset 24
 1435 0004 00AF     	 add r7,sp,#0
 1436              	.LCFI124:
 1437              	 .cfi_def_cfa_register 7
 1438 0006 7860     	 str r0,[r7,#4]
 1439 0008 0B46     	 mov r3,r1
 1440 000a FB70     	 strb r3,[r7,#3]
 502:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t arbcfg;
 503:../Libraries/XMCLib/src/xmc_vadc.c **** 
 504:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 505:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMOD
 506:../Libraries/XMCLib/src/xmc_vadc.c **** 
 507:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = group_ptr->ARBCFG;
 1441              	 .loc 2 507 0
 1442 000c 7B68     	 ldr r3,[r7,#4]
 1443 000e D3F88030 	 ldr r3,[r3,#128]
 1444 0012 FB60     	 str r3,[r7,#12]
 508:../Libraries/XMCLib/src/xmc_vadc.c **** 
 509:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 1445              	 .loc 2 509 0
 1446 0014 FB68     	 ldr r3,[r7,#12]
 1447 0016 23F00303 	 bic r3,r3,#3
 1448 001a FB60     	 str r3,[r7,#12]
 510:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg |= (uint32_t)power_mode;
 1449              	 .loc 2 510 0
 1450 001c FB78     	 ldrb r3,[r7,#3]
 1451 001e FA68     	 ldr r2,[r7,#12]
 1452 0020 1343     	 orrs r3,r3,r2
 1453 0022 FB60     	 str r3,[r7,#12]
 511:../Libraries/XMCLib/src/xmc_vadc.c **** 
 512:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBCFG = arbcfg;
 1454              	 .loc 2 512 0
 1455 0024 7B68     	 ldr r3,[r7,#4]
 1456 0026 FA68     	 ldr r2,[r7,#12]
 1457 0028 C3F88020 	 str r2,[r3,#128]
 513:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1458              	 .loc 2 513 0
 1459 002c 1437     	 adds r7,r7,#20
 1460              	.LCFI125:
 1461              	 .cfi_def_cfa_offset 4
 1462 002e BD46     	 mov sp,r7
 1463              	.LCFI126:
 1464              	 .cfi_def_cfa_register 13
 1465              	 
 1466 0030 5DF8047B 	 ldr r7,[sp],#4
 1467              	.LCFI127:
 1468              	 .cfi_restore 7
 1469              	 .cfi_def_cfa_offset 0
 1470 0034 7047     	 bx lr
 1471              	 .cfi_endproc
 1472              	.LFE241:
 1474 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetSyncSlave,"ax",%progbits
 1475              	 .align 2
 1476              	 .global XMC_VADC_GROUP_SetSyncSlave
 1477              	 .thumb
 1478              	 .thumb_func
 1480              	XMC_VADC_GROUP_SetSyncSlave:
 1481              	.LFB242:
 514:../Libraries/XMCLib/src/xmc_vadc.c **** 
 515:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a slave group during sync conversions */
 516:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncSlave(XMC_VADC_GROUP_t *const group_ptr, uint32_t master_grp, uint32_t s
 517:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1482              	 .loc 2 517 0
 1483              	 .cfi_startproc
 1484              	 
 1485              	 
 1486              	 
 1487 0000 80B4     	 push {r7}
 1488              	.LCFI128:
 1489              	 .cfi_def_cfa_offset 4
 1490              	 .cfi_offset 7,-4
 1491 0002 87B0     	 sub sp,sp,#28
 1492              	.LCFI129:
 1493              	 .cfi_def_cfa_offset 32
 1494 0004 00AF     	 add r7,sp,#0
 1495              	.LCFI130:
 1496              	 .cfi_def_cfa_register 7
 1497 0006 F860     	 str r0,[r7,#12]
 1498 0008 B960     	 str r1,[r7,#8]
 1499 000a 7A60     	 str r2,[r7,#4]
 518:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 519:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 520:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 521:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncSlave:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr)
 522:../Libraries/XMCLib/src/xmc_vadc.c ****   
 523:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_MULTIPLE_SLAVEGROUPS == 1U )
 524:../Libraries/XMCLib/src/xmc_vadc.c **** 
 525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Determine the coding of SYNCTR */
 526:../Libraries/XMCLib/src/xmc_vadc.c ****   if (slave_grp > master_grp)
 1500              	 .loc 2 526 0
 1501 000c 7A68     	 ldr r2,[r7,#4]
 1502 000e BB68     	 ldr r3,[r7,#8]
 1503 0010 9A42     	 cmp r2,r3
 1504 0012 02D9     	 bls .L49
 527:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 528:../Libraries/XMCLib/src/xmc_vadc.c ****     master_grp = master_grp + 1U;
 1505              	 .loc 2 528 0
 1506 0014 BB68     	 ldr r3,[r7,#8]
 1507 0016 0133     	 adds r3,r3,#1
 1508 0018 BB60     	 str r3,[r7,#8]
 1509              	.L49:
 529:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 530:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
 531:../Libraries/XMCLib/src/xmc_vadc.c ****   
 532:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program SYNCTR */
 533:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1510              	 .loc 2 533 0
 1511 001a FB68     	 ldr r3,[r7,#12]
 1512 001c D3F8C030 	 ldr r3,[r3,#192]
 1513 0020 7B61     	 str r3,[r7,#20]
 534:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1514              	 .loc 2 534 0
 1515 0022 7B69     	 ldr r3,[r7,#20]
 1516 0024 23F00303 	 bic r3,r3,#3
 1517 0028 7B61     	 str r3,[r7,#20]
 535:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   |= master_grp;
 1518              	 .loc 2 535 0
 1519 002a 7A69     	 ldr r2,[r7,#20]
 1520 002c BB68     	 ldr r3,[r7,#8]
 1521 002e 1343     	 orrs r3,r3,r2
 1522 0030 7B61     	 str r3,[r7,#20]
 536:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1523              	 .loc 2 536 0
 1524 0032 FB68     	 ldr r3,[r7,#12]
 1525 0034 7A69     	 ldr r2,[r7,#20]
 1526 0036 C3F8C020 	 str r2,[r3,#192]
 537:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1527              	 .loc 2 537 0
 1528 003a 1C37     	 adds r7,r7,#28
 1529              	.LCFI131:
 1530              	 .cfi_def_cfa_offset 4
 1531 003c BD46     	 mov sp,r7
 1532              	.LCFI132:
 1533              	 .cfi_def_cfa_register 13
 1534              	 
 1535 003e 5DF8047B 	 ldr r7,[sp],#4
 1536              	.LCFI133:
 1537              	 .cfi_restore 7
 1538              	 .cfi_def_cfa_offset 0
 1539 0042 7047     	 bx lr
 1540              	 .cfi_endproc
 1541              	.LFE242:
 1543              	 .section .text.XMC_VADC_GROUP_SetSyncMaster,"ax",%progbits
 1544              	 .align 2
 1545              	 .global XMC_VADC_GROUP_SetSyncMaster
 1546              	 .thumb
 1547              	 .thumb_func
 1549              	XMC_VADC_GROUP_SetSyncMaster:
 1550              	.LFB243:
 538:../Libraries/XMCLib/src/xmc_vadc.c **** 
 539:../Libraries/XMCLib/src/xmc_vadc.c **** /* API which programs a group as a master group during sync conversions */
 540:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetSyncMaster(XMC_VADC_GROUP_t *const group_ptr)
 541:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1551              	 .loc 2 541 0
 1552              	 .cfi_startproc
 1553              	 
 1554              	 
 1555              	 
 1556 0000 80B4     	 push {r7}
 1557              	.LCFI134:
 1558              	 .cfi_def_cfa_offset 4
 1559              	 .cfi_offset 7,-4
 1560 0002 85B0     	 sub sp,sp,#20
 1561              	.LCFI135:
 1562              	 .cfi_def_cfa_offset 24
 1563 0004 00AF     	 add r7,sp,#0
 1564              	.LCFI136:
 1565              	 .cfi_def_cfa_register 7
 1566 0006 7860     	 str r0,[r7,#4]
 542:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 543:../Libraries/XMCLib/src/xmc_vadc.c **** 
 544:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetSyncMaster:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 545:../Libraries/XMCLib/src/xmc_vadc.c **** 
 546:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr = group_ptr->SYNCTR;
 1567              	 .loc 2 546 0
 1568 0008 7B68     	 ldr r3,[r7,#4]
 1569 000a D3F8C030 	 ldr r3,[r3,#192]
 1570 000e FB60     	 str r3,[r7,#12]
 547:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr   &= ~((uint32_t)VADC_G_SYNCTR_STSEL_Msk);
 1571              	 .loc 2 547 0
 1572 0010 FB68     	 ldr r3,[r7,#12]
 1573 0012 23F00303 	 bic r3,r3,#3
 1574 0016 FB60     	 str r3,[r7,#12]
 548:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR = synctr;
 1575              	 .loc 2 548 0
 1576 0018 7B68     	 ldr r3,[r7,#4]
 1577 001a FA68     	 ldr r2,[r7,#12]
 1578 001c C3F8C020 	 str r2,[r3,#192]
 549:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1579              	 .loc 2 549 0
 1580 0020 1437     	 adds r7,r7,#20
 1581              	.LCFI137:
 1582              	 .cfi_def_cfa_offset 4
 1583 0022 BD46     	 mov sp,r7
 1584              	.LCFI138:
 1585              	 .cfi_def_cfa_register 13
 1586              	 
 1587 0024 5DF8047B 	 ldr r7,[sp],#4
 1588              	.LCFI139:
 1589              	 .cfi_restore 7
 1590              	 .cfi_def_cfa_offset 0
 1591 0028 7047     	 bx lr
 1592              	 .cfi_endproc
 1593              	.LFE243:
 1595 002a 00BF     	 .section .text.XMC_VADC_GROUP_CheckSlaveReadiness,"ax",%progbits
 1596              	 .align 2
 1597              	 .global XMC_VADC_GROUP_CheckSlaveReadiness
 1598              	 .thumb
 1599              	 .thumb_func
 1601              	XMC_VADC_GROUP_CheckSlaveReadiness:
 1602              	.LFB244:
 550:../Libraries/XMCLib/src/xmc_vadc.c **** 
 551:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable checking of readiness of slaves before a synchronous conversion request is issued 
 552:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_CheckSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 553:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1603              	 .loc 2 553 0
 1604              	 .cfi_startproc
 1605              	 
 1606              	 
 1607              	 
 1608 0000 80B4     	 push {r7}
 1609              	.LCFI140:
 1610              	 .cfi_def_cfa_offset 4
 1611              	 .cfi_offset 7,-4
 1612 0002 87B0     	 sub sp,sp,#28
 1613              	.LCFI141:
 1614              	 .cfi_def_cfa_offset 32
 1615 0004 00AF     	 add r7,sp,#0
 1616              	.LCFI142:
 1617              	 .cfi_def_cfa_register 7
 1618 0006 7860     	 str r0,[r7,#4]
 1619 0008 3960     	 str r1,[r7]
 554:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 555:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 556:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 557:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 558:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 559:../Libraries/XMCLib/src/xmc_vadc.c ****  
 560:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_CheckSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
 561:../Libraries/XMCLib/src/xmc_vadc.c ****  
 562:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 563:../Libraries/XMCLib/src/xmc_vadc.c ****  
 564:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel  =  slave_group;
 1620              	 .loc 2 564 0
 1621 000a 3B68     	 ldr r3,[r7]
 1622 000c FB60     	 str r3,[r7,#12]
 565:../Libraries/XMCLib/src/xmc_vadc.c **** 
 566:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 1623              	 .loc 2 566 0
 1624 000e FB68     	 ldr r3,[r7,#12]
 1625 0010 002B     	 cmp r3,#0
 1626 0012 02D1     	 bne .L52
 567:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 568:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 1627              	 .loc 2 568 0
 1628 0014 0123     	 movs r3,#1
 1629 0016 7B61     	 str r3,[r7,#20]
 1630 0018 01E0     	 b .L53
 1631              	.L52:
 569:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 570:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 571:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 572:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 1632              	 .loc 2 572 0
 1633 001a FB68     	 ldr r3,[r7,#12]
 1634 001c 7B61     	 str r3,[r7,#20]
 1635              	.L53:
 573:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 574:../Libraries/XMCLib/src/xmc_vadc.c **** 
 575:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 1636              	 .loc 2 575 0
 1637 001e 7B69     	 ldr r3,[r7,#20]
 1638 0020 012B     	 cmp r3,#1
 1639 0022 02D1     	 bne .L54
 576:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 577:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 1640              	 .loc 2 577 0
 1641 0024 0423     	 movs r3,#4
 1642 0026 FB74     	 strb r3,[r7,#19]
 1643 0028 07E0     	 b .L55
 1644              	.L54:
 578:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 579:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 1645              	 .loc 2 579 0
 1646 002a 7B69     	 ldr r3,[r7,#20]
 1647 002c 022B     	 cmp r3,#2
 1648 002e 02D1     	 bne .L56
 580:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 581:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 1649              	 .loc 2 581 0
 1650 0030 0523     	 movs r3,#5
 1651 0032 FB74     	 strb r3,[r7,#19]
 1652 0034 01E0     	 b .L55
 1653              	.L56:
 582:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 583:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 584:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 585:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 1654              	 .loc 2 585 0
 1655 0036 0623     	 movs r3,#6
 1656 0038 FB74     	 strb r3,[r7,#19]
 1657              	.L55:
 586:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 587:../Libraries/XMCLib/src/xmc_vadc.c **** 
 588:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= (uint32_t)((uint32_t)1 << ready_pos);
 1658              	 .loc 2 588 0
 1659 003a 7B68     	 ldr r3,[r7,#4]
 1660 003c D3F8C020 	 ldr r2,[r3,#192]
 1661 0040 FB7C     	 ldrb r3,[r7,#19]
 1662 0042 0121     	 movs r1,#1
 1663 0044 01FA03F3 	 lsl r3,r1,r3
 1664 0048 1A43     	 orrs r2,r2,r3
 1665 004a 7B68     	 ldr r3,[r7,#4]
 1666 004c C3F8C020 	 str r2,[r3,#192]
 589:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 590:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR |= ((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 591:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 592:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1667              	 .loc 2 592 0
 1668 0050 1C37     	 adds r7,r7,#28
 1669              	.LCFI143:
 1670              	 .cfi_def_cfa_offset 4
 1671 0052 BD46     	 mov sp,r7
 1672              	.LCFI144:
 1673              	 .cfi_def_cfa_register 13
 1674              	 
 1675 0054 5DF8047B 	 ldr r7,[sp],#4
 1676              	.LCFI145:
 1677              	 .cfi_restore 7
 1678              	 .cfi_def_cfa_offset 0
 1679 0058 7047     	 bx lr
 1680              	 .cfi_endproc
 1681              	.LFE244:
 1683 005a 00BF     	 .section .text.XMC_VADC_GROUP_IgnoreSlaveReadiness,"ax",%progbits
 1684              	 .align 2
 1685              	 .global XMC_VADC_GROUP_IgnoreSlaveReadiness
 1686              	 .thumb
 1687              	 .thumb_func
 1689              	XMC_VADC_GROUP_IgnoreSlaveReadiness:
 1690              	.LFB245:
 593:../Libraries/XMCLib/src/xmc_vadc.c **** 
 594:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable checking of readiness of slaves during synchronous conversions */
 595:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_IgnoreSlaveReadiness(XMC_VADC_GROUP_t *const group_ptr, uint32_t slave_group)
 596:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1691              	 .loc 2 596 0
 1692              	 .cfi_startproc
 1693              	 
 1694              	 
 1695              	 
 1696 0000 80B4     	 push {r7}
 1697              	.LCFI146:
 1698              	 .cfi_def_cfa_offset 4
 1699              	 .cfi_offset 7,-4
 1700 0002 87B0     	 sub sp,sp,#28
 1701              	.LCFI147:
 1702              	 .cfi_def_cfa_offset 32
 1703 0004 00AF     	 add r7,sp,#0
 1704              	.LCFI148:
 1705              	 .cfi_def_cfa_register 7
 1706 0006 7860     	 str r0,[r7,#4]
 1707 0008 3960     	 str r1,[r7]
 597:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 598:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t slave_kernel;
 599:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t adc_ready;
 600:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t ready_pos;
 601:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 602:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IgnoreSlaveReadiness:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
 603:../Libraries/XMCLib/src/xmc_vadc.c **** 
 604:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_MAXIMUM_NUM_GROUPS == 4U)
 605:../Libraries/XMCLib/src/xmc_vadc.c ****   slave_kernel = slave_group;
 1708              	 .loc 2 605 0
 1709 000a 3B68     	 ldr r3,[r7]
 1710 000c FB60     	 str r3,[r7,#12]
 606:../Libraries/XMCLib/src/xmc_vadc.c **** 
 607:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == slave_kernel)
 1711              	 .loc 2 607 0
 1712 000e FB68     	 ldr r3,[r7,#12]
 1713 0010 002B     	 cmp r3,#0
 1714 0012 02D1     	 bne .L58
 608:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 609:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = 1U;
 1715              	 .loc 2 609 0
 1716 0014 0123     	 movs r3,#1
 1717 0016 7B61     	 str r3,[r7,#20]
 1718 0018 01E0     	 b .L59
 1719              	.L58:
 610:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 611:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 612:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 613:../Libraries/XMCLib/src/xmc_vadc.c ****     adc_ready = slave_kernel;
 1720              	 .loc 2 613 0
 1721 001a FB68     	 ldr r3,[r7,#12]
 1722 001c 7B61     	 str r3,[r7,#20]
 1723              	.L59:
 614:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 615:../Libraries/XMCLib/src/xmc_vadc.c **** 
 616:../Libraries/XMCLib/src/xmc_vadc.c ****   if (1U == adc_ready)
 1724              	 .loc 2 616 0
 1725 001e 7B69     	 ldr r3,[r7,#20]
 1726 0020 012B     	 cmp r3,#1
 1727 0022 02D1     	 bne .L60
 617:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 618:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR1_Pos;
 1728              	 .loc 2 618 0
 1729 0024 0423     	 movs r3,#4
 1730 0026 FB74     	 strb r3,[r7,#19]
 1731 0028 07E0     	 b .L61
 1732              	.L60:
 619:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 620:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (2U == adc_ready)
 1733              	 .loc 2 620 0
 1734 002a 7B69     	 ldr r3,[r7,#20]
 1735 002c 022B     	 cmp r3,#2
 1736 002e 02D1     	 bne .L62
 621:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 622:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR2_Pos;
 1737              	 .loc 2 622 0
 1738 0030 0523     	 movs r3,#5
 1739 0032 FB74     	 strb r3,[r7,#19]
 1740 0034 01E0     	 b .L61
 1741              	.L62:
 623:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 624:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 625:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 626:../Libraries/XMCLib/src/xmc_vadc.c ****     ready_pos = (uint8_t)VADC_G_SYNCTR_EVALR3_Pos;
 1742              	 .loc 2 626 0
 1743 0036 0623     	 movs r3,#6
 1744 0038 FB74     	 strb r3,[r7,#19]
 1745              	.L61:
 627:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 628:../Libraries/XMCLib/src/xmc_vadc.c **** 
 629:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)((uint32_t)1 << ready_pos));
 1746              	 .loc 2 629 0
 1747 003a 7B68     	 ldr r3,[r7,#4]
 1748 003c D3F8C020 	 ldr r2,[r3,#192]
 1749 0040 FB7C     	 ldrb r3,[r7,#19]
 1750 0042 0121     	 movs r1,#1
 1751 0044 01FA03F3 	 lsl r3,r1,r3
 1752 0048 DB43     	 mvns r3,r3
 1753 004a 1A40     	 ands r2,r2,r3
 1754 004c 7B68     	 ldr r3,[r7,#4]
 1755 004e C3F8C020 	 str r2,[r3,#192]
 630:../Libraries/XMCLib/src/xmc_vadc.c **** #else
 631:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SYNCTR &= ~((uint32_t)VADC_G_SYNCTR_EVALR1_Msk);
 632:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
 633:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1756              	 .loc 2 633 0
 1757 0052 1C37     	 adds r7,r7,#28
 1758              	.LCFI149:
 1759              	 .cfi_def_cfa_offset 4
 1760 0054 BD46     	 mov sp,r7
 1761              	.LCFI150:
 1762              	 .cfi_def_cfa_register 13
 1763              	 
 1764 0056 5DF8047B 	 ldr r7,[sp],#4
 1765              	.LCFI151:
 1766              	 .cfi_restore 7
 1767              	 .cfi_def_cfa_offset 0
 1768 005a 7047     	 bx lr
 1769              	 .cfi_endproc
 1770              	.LFE245:
 1772              	 .section .text.XMC_VADC_GROUP_EnableChannelSyncRequest,"ax",%progbits
 1773              	 .align 2
 1774              	 .global XMC_VADC_GROUP_EnableChannelSyncRequest
 1775              	 .thumb
 1776              	 .thumb_func
 1778              	XMC_VADC_GROUP_EnableChannelSyncRequest:
 1779              	.LFB246:
 634:../Libraries/XMCLib/src/xmc_vadc.c **** 
 635:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the synchronous conversion feature - Applicable only to kernel configured as maste
 636:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_EnableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_n
 637:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1780              	 .loc 2 637 0
 1781              	 .cfi_startproc
 1782              	 
 1783              	 
 1784              	 
 1785 0000 80B4     	 push {r7}
 1786              	.LCFI152:
 1787              	 .cfi_def_cfa_offset 4
 1788              	 .cfi_offset 7,-4
 1789 0002 85B0     	 sub sp,sp,#20
 1790              	.LCFI153:
 1791              	 .cfi_def_cfa_offset 24
 1792 0004 00AF     	 add r7,sp,#0
 1793              	.LCFI154:
 1794              	 .cfi_def_cfa_register 7
 1795 0006 7860     	 str r0,[r7,#4]
 1796 0008 3960     	 str r1,[r7]
 638:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t synctr;
 639:../Libraries/XMCLib/src/xmc_vadc.c **** 
 640:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
 641:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_EnableChannelSyncRequest:Wrong Channel Number",
 642:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 643:../Libraries/XMCLib/src/xmc_vadc.c **** 
 644:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1797              	 .loc 2 644 0
 1798 000a 7B68     	 ldr r3,[r7,#4]
 1799 000c D3F8C030 	 ldr r3,[r3,#192]
 1800 0010 FB60     	 str r3,[r7,#12]
 645:../Libraries/XMCLib/src/xmc_vadc.c **** 
 646:../Libraries/XMCLib/src/xmc_vadc.c ****   if (!(synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk))
 1801              	 .loc 2 646 0
 1802 0012 FB68     	 ldr r3,[r7,#12]
 1803 0014 03F00303 	 and r3,r3,#3
 1804 0018 002B     	 cmp r3,#0
 1805 001a 0BD1     	 bne .L63
 647:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 648:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] |= (uint32_t)((uint32_t)1 << VADC_G_CHCTR_SYNC_Pos);
 1806              	 .loc 2 648 0
 1807 001c 7B68     	 ldr r3,[r7,#4]
 1808 001e 3A68     	 ldr r2,[r7]
 1809 0020 8032     	 adds r2,r2,#128
 1810 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1811 0026 43F48061 	 orr r1,r3,#1024
 1812 002a 7B68     	 ldr r3,[r7,#4]
 1813 002c 3A68     	 ldr r2,[r7]
 1814 002e 8032     	 adds r2,r2,#128
 1815 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1816              	.L63:
 649:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 650:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1817              	 .loc 2 650 0
 1818 0034 1437     	 adds r7,r7,#20
 1819              	.LCFI155:
 1820              	 .cfi_def_cfa_offset 4
 1821 0036 BD46     	 mov sp,r7
 1822              	.LCFI156:
 1823              	 .cfi_def_cfa_register 13
 1824              	 
 1825 0038 5DF8047B 	 ldr r7,[sp],#4
 1826              	.LCFI157:
 1827              	 .cfi_restore 7
 1828              	 .cfi_def_cfa_offset 0
 1829 003c 7047     	 bx lr
 1830              	 .cfi_endproc
 1831              	.LFE246:
 1833 003e 00BF     	 .section .text.XMC_VADC_GROUP_DisableChannelSyncRequest,"ax",%progbits
 1834              	 .align 2
 1835              	 .global XMC_VADC_GROUP_DisableChannelSyncRequest
 1836              	 .thumb
 1837              	 .thumb_func
 1839              	XMC_VADC_GROUP_DisableChannelSyncRequest:
 1840              	.LFB247:
 651:../Libraries/XMCLib/src/xmc_vadc.c **** 
 652:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable synchronous conversion feature */
 653:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_DisableChannelSyncRequest(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_
 654:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1841              	 .loc 2 654 0
 1842              	 .cfi_startproc
 1843              	 
 1844              	 
 1845              	 
 1846 0000 80B4     	 push {r7}
 1847              	.LCFI158:
 1848              	 .cfi_def_cfa_offset 4
 1849              	 .cfi_offset 7,-4
 1850 0002 85B0     	 sub sp,sp,#20
 1851              	.LCFI159:
 1852              	 .cfi_def_cfa_offset 24
 1853 0004 00AF     	 add r7,sp,#0
 1854              	.LCFI160:
 1855              	 .cfi_def_cfa_register 7
 1856 0006 7860     	 str r0,[r7,#4]
 1857 0008 3960     	 str r1,[r7]
 655:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    synctr;
 656:../Libraries/XMCLib/src/xmc_vadc.c **** 
 657:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
 658:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_DisableChannelSyncRequest:Wrong Channel Number",
 659:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
 660:../Libraries/XMCLib/src/xmc_vadc.c **** 
 661:../Libraries/XMCLib/src/xmc_vadc.c ****   synctr  = group_ptr->SYNCTR;
 1858              	 .loc 2 661 0
 1859 000a 7B68     	 ldr r3,[r7,#4]
 1860 000c D3F8C030 	 ldr r3,[r3,#192]
 1861 0010 FB60     	 str r3,[r7,#12]
 662:../Libraries/XMCLib/src/xmc_vadc.c **** 
 663:../Libraries/XMCLib/src/xmc_vadc.c ****   if (synctr &  (uint32_t)VADC_G_SYNCTR_STSEL_Msk)
 1862              	 .loc 2 663 0
 1863 0012 FB68     	 ldr r3,[r7,#12]
 1864 0014 03F00303 	 and r3,r3,#3
 1865 0018 002B     	 cmp r3,#0
 1866 001a 0BD0     	 beq .L65
 664:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 665:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_SYNC_Msk);
 1867              	 .loc 2 665 0
 1868 001c 7B68     	 ldr r3,[r7,#4]
 1869 001e 3A68     	 ldr r2,[r7]
 1870 0020 8032     	 adds r2,r2,#128
 1871 0022 53F82230 	 ldr r3,[r3,r2,lsl#2]
 1872 0026 23F48061 	 bic r1,r3,#1024
 1873 002a 7B68     	 ldr r3,[r7,#4]
 1874 002c 3A68     	 ldr r2,[r7]
 1875 002e 8032     	 adds r2,r2,#128
 1876 0030 43F82210 	 str r1,[r3,r2,lsl#2]
 1877              	.L65:
 666:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 667:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1878              	 .loc 2 667 0
 1879 0034 1437     	 adds r7,r7,#20
 1880              	.LCFI161:
 1881              	 .cfi_def_cfa_offset 4
 1882 0036 BD46     	 mov sp,r7
 1883              	.LCFI162:
 1884              	 .cfi_def_cfa_register 13
 1885              	 
 1886 0038 5DF8047B 	 ldr r7,[sp],#4
 1887              	.LCFI163:
 1888              	 .cfi_restore 7
 1889              	 .cfi_def_cfa_offset 0
 1890 003c 7047     	 bx lr
 1891              	 .cfi_endproc
 1892              	.LFE247:
 1894 003e 00BF     	 .section .text.XMC_VADC_GROUP_IsConverterBusy,"ax",%progbits
 1895              	 .align 2
 1896              	 .global XMC_VADC_GROUP_IsConverterBusy
 1897              	 .thumb
 1898              	 .thumb_func
 1900              	XMC_VADC_GROUP_IsConverterBusy:
 1901              	.LFB248:
 668:../Libraries/XMCLib/src/xmc_vadc.c **** 
 669:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the converter state - Idle vs Busy */ 
 670:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_GROUP_STATE_t XMC_VADC_GROUP_IsConverterBusy(XMC_VADC_GROUP_t *const group_ptr)
 671:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1902              	 .loc 2 671 0
 1903              	 .cfi_startproc
 1904              	 
 1905              	 
 1906              	 
 1907 0000 80B4     	 push {r7}
 1908              	.LCFI164:
 1909              	 .cfi_def_cfa_offset 4
 1910              	 .cfi_offset 7,-4
 1911 0002 85B0     	 sub sp,sp,#20
 1912              	.LCFI165:
 1913              	 .cfi_def_cfa_offset 24
 1914 0004 00AF     	 add r7,sp,#0
 1915              	.LCFI166:
 1916              	 .cfi_def_cfa_register 7
 1917 0006 7860     	 str r0,[r7,#4]
 672:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      arbcfg;
 673:../Libraries/XMCLib/src/xmc_vadc.c **** 
 674:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsConverterBusy:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
 675:../Libraries/XMCLib/src/xmc_vadc.c **** 
 676:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg  = group_ptr->ARBCFG;
 1918              	 .loc 2 676 0
 1919 0008 7B68     	 ldr r3,[r7,#4]
 1920 000a D3F88030 	 ldr r3,[r3,#128]
 1921 000e FB60     	 str r3,[r7,#12]
 677:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg &= (uint32_t)VADC_G_ARBCFG_BUSY_Msk;
 1922              	 .loc 2 677 0
 1923 0010 FB68     	 ldr r3,[r7,#12]
 1924 0012 03F08043 	 and r3,r3,#1073741824
 1925 0016 FB60     	 str r3,[r7,#12]
 678:../Libraries/XMCLib/src/xmc_vadc.c ****   arbcfg = arbcfg >> VADC_G_ARBCFG_BUSY_Pos;
 1926              	 .loc 2 678 0
 1927 0018 FB68     	 ldr r3,[r7,#12]
 1928 001a 9B0F     	 lsrs r3,r3,#30
 1929 001c FB60     	 str r3,[r7,#12]
 679:../Libraries/XMCLib/src/xmc_vadc.c **** 
 680:../Libraries/XMCLib/src/xmc_vadc.c ****   return( (XMC_VADC_GROUP_STATE_t)arbcfg);
 1930              	 .loc 2 680 0
 1931 001e FB68     	 ldr r3,[r7,#12]
 1932 0020 DBB2     	 uxtb r3,r3
 681:../Libraries/XMCLib/src/xmc_vadc.c **** }
 1933              	 .loc 2 681 0
 1934 0022 1846     	 mov r0,r3
 1935 0024 1437     	 adds r7,r7,#20
 1936              	.LCFI167:
 1937              	 .cfi_def_cfa_offset 4
 1938 0026 BD46     	 mov sp,r7
 1939              	.LCFI168:
 1940              	 .cfi_def_cfa_register 13
 1941              	 
 1942 0028 5DF8047B 	 ldr r7,[sp],#4
 1943              	.LCFI169:
 1944              	 .cfi_restore 7
 1945              	 .cfi_def_cfa_offset 0
 1946 002c 7047     	 bx lr
 1947              	 .cfi_endproc
 1948              	.LFE248:
 1950 002e 00BF     	 .section .text.XMC_VADC_GROUP_SetBoundaries,"ax",%progbits
 1951              	 .align 2
 1952              	 .global XMC_VADC_GROUP_SetBoundaries
 1953              	 .thumb
 1954              	 .thumb_func
 1956              	XMC_VADC_GROUP_SetBoundaries:
 1957              	.LFB249:
 682:../Libraries/XMCLib/src/xmc_vadc.c **** 
 683:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set boundaries for conversion results */
 684:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaries(XMC_VADC_GROUP_t *const group_ptr, const uint32_t boundary0, cons
 685:../Libraries/XMCLib/src/xmc_vadc.c **** {
 1958              	 .loc 2 685 0
 1959              	 .cfi_startproc
 1960              	 
 1961              	 
 1962              	 
 1963 0000 80B4     	 push {r7}
 1964              	.LCFI170:
 1965              	 .cfi_def_cfa_offset 4
 1966              	 .cfi_offset 7,-4
 1967 0002 87B0     	 sub sp,sp,#28
 1968              	.LCFI171:
 1969              	 .cfi_def_cfa_offset 32
 1970 0004 00AF     	 add r7,sp,#0
 1971              	.LCFI172:
 1972              	 .cfi_def_cfa_register 7
 1973 0006 F860     	 str r0,[r7,#12]
 1974 0008 B960     	 str r1,[r7,#8]
 1975 000a 7A60     	 str r2,[r7,#4]
 686:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 687:../Libraries/XMCLib/src/xmc_vadc.c **** 
 688:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaries:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr
 689:../Libraries/XMCLib/src/xmc_vadc.c **** 
 690:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 691:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 1976              	 .loc 2 691 0
 1977 000c FB68     	 ldr r3,[r7,#12]
 1978 000e D3F8B830 	 ldr r3,[r3,#184]
 1979 0012 7B61     	 str r3,[r7,#20]
 692:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 1980              	 .loc 2 692 0
 1981 0014 7B69     	 ldr r3,[r7,#20]
 1982 0016 23F47F63 	 bic r3,r3,#4080
 1983 001a 23F00F03 	 bic r3,r3,#15
 1984 001e 7B61     	 str r3,[r7,#20]
 693:../Libraries/XMCLib/src/xmc_vadc.c ****   bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 1985              	 .loc 2 693 0
 1986 0020 7B69     	 ldr r3,[r7,#20]
 1987 0022 23F07F63 	 bic r3,r3,#267386880
 1988 0026 23F47023 	 bic r3,r3,#983040
 1989 002a 7B61     	 str r3,[r7,#20]
 694:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary0 << VADC_G_BOUND_BOUNDARY0_Pos);
 1990              	 .loc 2 694 0
 1991 002c 7A69     	 ldr r2,[r7,#20]
 1992 002e BB68     	 ldr r3,[r7,#8]
 1993 0030 1343     	 orrs r3,r3,r2
 1994 0032 7B61     	 str r3,[r7,#20]
 695:../Libraries/XMCLib/src/xmc_vadc.c ****   bound |= (uint32_t) ((uint32_t) boundary1 << VADC_G_BOUND_BOUNDARY1_Pos);
 1995              	 .loc 2 695 0
 1996 0034 7B68     	 ldr r3,[r7,#4]
 1997 0036 1B04     	 lsls r3,r3,#16
 1998 0038 7A69     	 ldr r2,[r7,#20]
 1999 003a 1343     	 orrs r3,r3,r2
 2000 003c 7B61     	 str r3,[r7,#20]
 696:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2001              	 .loc 2 696 0
 2002 003e FB68     	 ldr r3,[r7,#12]
 2003 0040 7A69     	 ldr r2,[r7,#20]
 2004 0042 C3F8B820 	 str r2,[r3,#184]
 697:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2005              	 .loc 2 697 0
 2006 0046 1C37     	 adds r7,r7,#28
 2007              	.LCFI173:
 2008              	 .cfi_def_cfa_offset 4
 2009 0048 BD46     	 mov sp,r7
 2010              	.LCFI174:
 2011              	 .cfi_def_cfa_register 13
 2012              	 
 2013 004a 5DF8047B 	 ldr r7,[sp],#4
 2014              	.LCFI175:
 2015              	 .cfi_restore 7
 2016              	 .cfi_def_cfa_offset 0
 2017 004e 7047     	 bx lr
 2018              	 .cfi_endproc
 2019              	.LFE249:
 2021              	 .section .text.XMC_VADC_GROUP_SetIndividualBoundary,"ax",%progbits
 2022              	 .align 2
 2023              	 .global XMC_VADC_GROUP_SetIndividualBoundary
 2024              	 .thumb
 2025              	 .thumb_func
 2027              	XMC_VADC_GROUP_SetIndividualBoundary:
 2028              	.LFB250:
 698:../Libraries/XMCLib/src/xmc_vadc.c **** 
 699:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an individual boundary for conversion results */
 700:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetIndividualBoundary(XMC_VADC_GROUP_t *const group_ptr,
 701:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_CHANNEL_BOUNDARY_t selection,
 702:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint16_t boundary_value)
 703:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2029              	 .loc 2 703 0
 2030              	 .cfi_startproc
 2031              	 
 2032              	 
 2033              	 
 2034 0000 80B4     	 push {r7}
 2035              	.LCFI176:
 2036              	 .cfi_def_cfa_offset 4
 2037              	 .cfi_offset 7,-4
 2038 0002 85B0     	 sub sp,sp,#20
 2039              	.LCFI177:
 2040              	 .cfi_def_cfa_offset 24
 2041 0004 00AF     	 add r7,sp,#0
 2042              	.LCFI178:
 2043              	 .cfi_def_cfa_register 7
 2044 0006 7860     	 str r0,[r7,#4]
 2045 0008 0B46     	 mov r3,r1
 2046 000a FB70     	 strb r3,[r7,#3]
 2047 000c 1346     	 mov r3,r2
 2048 000e 3B80     	 strh r3,[r7]
 704:../Libraries/XMCLib/src/xmc_vadc.c **** 
 705:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t bound;
 706:../Libraries/XMCLib/src/xmc_vadc.c **** 
 707:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 708:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetIndividualBoundary:Wrong Boundary Selection",
 709:../Libraries/XMCLib/src/xmc_vadc.c ****                ((XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection) ||
 710:../Libraries/XMCLib/src/xmc_vadc.c ****                 (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)))
 711:../Libraries/XMCLib/src/xmc_vadc.c **** 
 712:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the Boundary registers */
 713:../Libraries/XMCLib/src/xmc_vadc.c ****   bound  = group_ptr->BOUND;
 2049              	 .loc 2 713 0
 2050 0010 7B68     	 ldr r3,[r7,#4]
 2051 0012 D3F8B830 	 ldr r3,[r3,#184]
 2052 0016 FB60     	 str r3,[r7,#12]
 714:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND0 == selection)
 2053              	 .loc 2 714 0
 2054 0018 FB78     	 ldrb r3,[r7,#3]
 2055 001a 002B     	 cmp r3,#0
 2056 001c 0AD1     	 bne .L71
 715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 716:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY0_Msk);
 2057              	 .loc 2 716 0
 2058 001e FB68     	 ldr r3,[r7,#12]
 2059 0020 23F47F63 	 bic r3,r3,#4080
 2060 0024 23F00F03 	 bic r3,r3,#15
 2061 0028 FB60     	 str r3,[r7,#12]
 717:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY0_Pos);
 2062              	 .loc 2 717 0
 2063 002a 3B88     	 ldrh r3,[r7]
 2064 002c FA68     	 ldr r2,[r7,#12]
 2065 002e 1343     	 orrs r3,r3,r2
 2066 0030 FB60     	 str r3,[r7,#12]
 2067 0032 0DE0     	 b .L72
 2068              	.L71:
 718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 719:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (XMC_VADC_CHANNEL_BOUNDARY_GROUP_BOUND1 == selection)
 2069              	 .loc 2 719 0
 2070 0034 FB78     	 ldrb r3,[r7,#3]
 2071 0036 012B     	 cmp r3,#1
 2072 0038 0AD1     	 bne .L72
 720:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 721:../Libraries/XMCLib/src/xmc_vadc.c ****     bound &= ~((uint32_t) VADC_G_BOUND_BOUNDARY1_Msk);
 2073              	 .loc 2 721 0
 2074 003a FB68     	 ldr r3,[r7,#12]
 2075 003c 23F07F63 	 bic r3,r3,#267386880
 2076 0040 23F47023 	 bic r3,r3,#983040
 2077 0044 FB60     	 str r3,[r7,#12]
 722:../Libraries/XMCLib/src/xmc_vadc.c ****     bound |= (uint32_t) ((uint32_t) boundary_value << VADC_G_BOUND_BOUNDARY1_Pos);
 2078              	 .loc 2 722 0
 2079 0046 3B88     	 ldrh r3,[r7]
 2080 0048 1B04     	 lsls r3,r3,#16
 2081 004a FA68     	 ldr r2,[r7,#12]
 2082 004c 1343     	 orrs r3,r3,r2
 2083 004e FB60     	 str r3,[r7,#12]
 2084              	.L72:
 723:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 724:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 725:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 726:../Libraries/XMCLib/src/xmc_vadc.c ****     /* For MISRA*/
 727:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 728:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BOUND = bound;
 2085              	 .loc 2 728 0
 2086 0050 7B68     	 ldr r3,[r7,#4]
 2087 0052 FA68     	 ldr r2,[r7,#12]
 2088 0054 C3F8B820 	 str r2,[r3,#184]
 729:../Libraries/XMCLib/src/xmc_vadc.c **** 
 730:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2089              	 .loc 2 730 0
 2090 0058 1437     	 adds r7,r7,#20
 2091              	.LCFI179:
 2092              	 .cfi_def_cfa_offset 4
 2093 005a BD46     	 mov sp,r7
 2094              	.LCFI180:
 2095              	 .cfi_def_cfa_register 13
 2096              	 
 2097 005c 5DF8047B 	 ldr r7,[sp],#4
 2098              	.LCFI181:
 2099              	 .cfi_restore 7
 2100              	 .cfi_def_cfa_offset 0
 2101 0060 7047     	 bx lr
 2102              	 .cfi_endproc
 2103              	.LFE250:
 2105 0062 00BF     	 .section .text.XMC_VADC_GROUP_TriggerServiceRequest,"ax",%progbits
 2106              	 .align 2
 2107              	 .global XMC_VADC_GROUP_TriggerServiceRequest
 2108              	 .thumb
 2109              	 .thumb_func
 2111              	XMC_VADC_GROUP_TriggerServiceRequest:
 2112              	.LFB251:
 731:../Libraries/XMCLib/src/xmc_vadc.c **** 
 732:../Libraries/XMCLib/src/xmc_vadc.c **** /* Manually assert service request (Interrupt) to NVIC */
 733:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_TriggerServiceRequest(XMC_VADC_GROUP_t *const group_ptr,
 734:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const uint32_t sr_num,
 735:../Libraries/XMCLib/src/xmc_vadc.c ****                                           const XMC_VADC_GROUP_IRQ_t type)
 736:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2113              	 .loc 2 736 0
 2114              	 .cfi_startproc
 2115              	 
 2116              	 
 2117              	 
 2118 0000 80B4     	 push {r7}
 2119              	.LCFI182:
 2120              	 .cfi_def_cfa_offset 4
 2121              	 .cfi_offset 7,-4
 2122 0002 87B0     	 sub sp,sp,#28
 2123              	.LCFI183:
 2124              	 .cfi_def_cfa_offset 32
 2125 0004 00AF     	 add r7,sp,#0
 2126              	.LCFI184:
 2127              	 .cfi_def_cfa_register 7
 2128 0006 F860     	 str r0,[r7,#12]
 2129 0008 B960     	 str r1,[r7,#8]
 2130 000a 1346     	 mov r3,r2
 2131 000c FB71     	 strb r3,[r7,#7]
 737:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sract;
 738:../Libraries/XMCLib/src/xmc_vadc.c **** 
 739:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
 740:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR number", (sr_num <= XMC_VADC_SR_SHARED_
 741:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_TriggerServiceRequest:Wrong SR type", ((type)<= XMC_VADC_GROUP_IRQ_SHA
 742:../Libraries/XMCLib/src/xmc_vadc.c **** 
 743:../Libraries/XMCLib/src/xmc_vadc.c ****   sract = group_ptr->SRACT;
 2132              	 .loc 2 743 0
 2133 000e FB68     	 ldr r3,[r7,#12]
 2134 0010 D3F8C831 	 ldr r3,[r3,#456]
 2135 0014 7B61     	 str r3,[r7,#20]
 744:../Libraries/XMCLib/src/xmc_vadc.c **** 
 745:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_GROUP_IRQ_KERNEL == type)
 2136              	 .loc 2 745 0
 2137 0016 FB79     	 ldrb r3,[r7,#7]
 2138 0018 002B     	 cmp r3,#0
 2139 001a 07D1     	 bne .L74
 746:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 747:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << sr_num);
 2140              	 .loc 2 747 0
 2141 001c BB68     	 ldr r3,[r7,#8]
 2142 001e 0122     	 movs r2,#1
 2143 0020 02FA03F3 	 lsl r3,r2,r3
 2144 0024 7A69     	 ldr r2,[r7,#20]
 2145 0026 1343     	 orrs r3,r3,r2
 2146 0028 7B61     	 str r3,[r7,#20]
 2147 002a 07E0     	 b .L75
 2148              	.L74:
 748:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 749:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 750:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 751:../Libraries/XMCLib/src/xmc_vadc.c ****     sract |= (uint32_t)((uint32_t)1 << (sr_num + (uint32_t)8));
 2149              	 .loc 2 751 0
 2150 002c BB68     	 ldr r3,[r7,#8]
 2151 002e 0833     	 adds r3,r3,#8
 2152 0030 1A46     	 mov r2,r3
 2153 0032 0123     	 movs r3,#1
 2154 0034 9340     	 lsls r3,r3,r2
 2155 0036 7A69     	 ldr r2,[r7,#20]
 2156 0038 1343     	 orrs r3,r3,r2
 2157 003a 7B61     	 str r3,[r7,#20]
 2158              	.L75:
 752:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 753:../Libraries/XMCLib/src/xmc_vadc.c **** 
 754:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SRACT = sract;
 2159              	 .loc 2 754 0
 2160 003c FB68     	 ldr r3,[r7,#12]
 2161 003e 7A69     	 ldr r2,[r7,#20]
 2162 0040 C3F8C821 	 str r2,[r3,#456]
 755:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2163              	 .loc 2 755 0
 2164 0044 1C37     	 adds r7,r7,#28
 2165              	.LCFI185:
 2166              	 .cfi_def_cfa_offset 4
 2167 0046 BD46     	 mov sp,r7
 2168              	.LCFI186:
 2169              	 .cfi_def_cfa_register 13
 2170              	 
 2171 0048 5DF8047B 	 ldr r7,[sp],#4
 2172              	.LCFI187:
 2173              	 .cfi_restore 7
 2174              	 .cfi_def_cfa_offset 0
 2175 004c 7047     	 bx lr
 2176              	 .cfi_endproc
 2177              	.LFE251:
 2179 004e 00BF     	 .section .text.XMC_VADC_GROUP_ScanInit,"ax",%progbits
 2180              	 .align 2
 2181              	 .global XMC_VADC_GROUP_ScanInit
 2182              	 .thumb
 2183              	 .thumb_func
 2185              	XMC_VADC_GROUP_ScanInit:
 2186              	.LFB252:
 756:../Libraries/XMCLib/src/xmc_vadc.c **** 
 757:../Libraries/XMCLib/src/xmc_vadc.c **** #if XMC_VADC_BOUNDARY_FLAG_SELECT == 1U
 758:../Libraries/XMCLib/src/xmc_vadc.c **** 
 759:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the SR line for the Boundary flag node pointer*/
 760:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetBoundaryEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
 761:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const uint8_t boundary_flag_num,
 762:../Libraries/XMCLib/src/xmc_vadc.c ****                                                                   const XMC_VADC_BOUNDARY_NODE_t sr
 763:../Libraries/XMCLib/src/xmc_vadc.c **** {
 764:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t flag_pos;
 765:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetBoundaryEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GRO
 766:../Libraries/XMCLib/src/xmc_vadc.c **** 
 767:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the GxBFLNP */
 768:../Libraries/XMCLib/src/xmc_vadc.c ****   flag_pos = (uint32_t)boundary_flag_num << (uint32_t)2;
 769:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP &= ~((uint32_t)VADC_G_BFLNP_BFL0NP_Msk << flag_pos);
 770:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLNP |= (uint32_t)sr << flag_pos;
 771:../Libraries/XMCLib/src/xmc_vadc.c **** }
 772:../Libraries/XMCLib/src/xmc_vadc.c **** 
 773:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_BOUNDARY_FLAG_SELECT */
 774:../Libraries/XMCLib/src/xmc_vadc.c **** 
 775:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GROUP_AVAILABLE */
 776:../Libraries/XMCLib/src/xmc_vadc.c **** 
 777:../Libraries/XMCLib/src/xmc_vadc.c **** #if(XMC_VADC_SHS_AVAILABLE == 1U)
 778:../Libraries/XMCLib/src/xmc_vadc.c **** 
 779:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to Initialize the Sample and hold features*/
 780:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_Init(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, const XMC_VADC_GLOBAL_SHS_CONFI
 781:../Libraries/XMCLib/src/xmc_vadc.c **** {
 782:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(voi
 783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_Init:Wrong Index number",(config == (XMC_VADC_GLOBAL_SHS_CONFIG_t
 784:../Libraries/XMCLib/src/xmc_vadc.c **** 
 785:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Initialize the SHS Configuration register*/
 786:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->SHSCFG = (uint32_t)((uint32_t)config->shscfg | (uint32_t)SHS_SHSCFG_SCWC_Msk);
 787:../Libraries/XMCLib/src/xmc_vadc.c **** 
 788:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Select the Calibration order*/
 789:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR &= ~((uint32_t)SHS_CALCTR_CALORD_Msk);
 790:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->CALCTR |=  (uint32_t) ((uint32_t)config->calibration_order << SHS_CALCTR_CALORD_Pos);
 791:../Libraries/XMCLib/src/xmc_vadc.c **** }
 792:../Libraries/XMCLib/src/xmc_vadc.c **** 
 793:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the accelerated mode of conversion */
 794:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROUP
 795:../Libraries/XMCLib/src/xmc_vadc.c **** {
 796:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
 797:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 798:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_
 799:../Libraries/XMCLib/src/xmc_vadc.c **** 
 800:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 801:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 802:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 803:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
 804:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 805:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 806:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 807:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
 808:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 809:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 810:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 811:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 812:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 813:../Libraries/XMCLib/src/xmc_vadc.c **** }
 814:../Libraries/XMCLib/src/xmc_vadc.c **** 
 815:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to disable the accelerated mode of conversion */
 816:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode(XMC_VADC_GLOBAL_SHS_t *const shs_ptr, XMC_VADC_GROU
 817:../Libraries/XMCLib/src/xmc_vadc.c **** {
 818:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong SHS Pointer",
 819:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 820:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC
 821:../Libraries/XMCLib/src/xmc_vadc.c **** 
 822:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the converted to Accelerated mode from compatible mode*/
 823:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 824:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 825:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~(uint32_t)SHS_TIMCFG0_AT_Msk;
 826:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 827:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 828:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 829:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~(uint32_t)SHS_TIMCFG1_AT_Msk;
 830:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 831:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 832:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 833:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 834:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 835:../Libraries/XMCLib/src/xmc_vadc.c **** }
 836:../Libraries/XMCLib/src/xmc_vadc.c **** 
 837:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the Short sample time of the Sample and hold module*/
 838:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetShortSampleTime(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 839:../Libraries/XMCLib/src/xmc_vadc.c ****                                             XMC_VADC_GROUP_INDEX_t group_num,
 840:../Libraries/XMCLib/src/xmc_vadc.c ****                                             uint8_t sst_value)
 841:../Libraries/XMCLib/src/xmc_vadc.c **** {
 842:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SHS Pointer",
 843:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 844:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong Index number",(group_num <= XMC_VADC_GRO
 845:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetShortSampleTime:Wrong SST value",(sst_value < 64U))
 846:../Libraries/XMCLib/src/xmc_vadc.c **** 
 847:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set the short sample time for the Accelerated mode of operation*/
 848:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 849:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 850:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 &= ~((uint32_t)SHS_TIMCFG0_SST_Msk);
 851:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG0 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG0_SST_Pos );
 852:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 853:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 854:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 855:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 &= ~((uint32_t)SHS_TIMCFG1_SST_Msk);
 856:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->TIMCFG1 |= (uint32_t)((uint32_t)sst_value << SHS_TIMCFG1_SST_Pos );
 857:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 858:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 859:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 860:../Libraries/XMCLib/src/xmc_vadc.c ****   /* for MISRA*/
 861:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 862:../Libraries/XMCLib/src/xmc_vadc.c **** }
 863:../Libraries/XMCLib/src/xmc_vadc.c **** 
 864:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the gain factor of the Sample and hold module*/
 865:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetGainFactor(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 866:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t gain_value,
 867:../Libraries/XMCLib/src/xmc_vadc.c ****                                        XMC_VADC_GROUP_INDEX_t group_num,
 868:../Libraries/XMCLib/src/xmc_vadc.c ****                                        uint8_t ch_num)
 869:../Libraries/XMCLib/src/xmc_vadc.c **** {
 870:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_mask;
 871:../Libraries/XMCLib/src/xmc_vadc.c **** 
 872:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong SHS Pointer", (shs_ptr == (XMC_VADC_GLOBAL_SH
 873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetGainFactor:Wrong Index number",(group_num <= XMC_VADC_GROUP_IN
 874:../Libraries/XMCLib/src/xmc_vadc.c **** 
 875:../Libraries/XMCLib/src/xmc_vadc.c ****   /*Calculate location of channel bit-field*/
 876:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_mask = ((uint32_t)ch_num << (uint32_t)2);
 877:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_num == XMC_VADC_GROUP_INDEX_0 )
 878:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 879:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 &= ~((uint32_t)SHS_GNCTR00_GAIN0_Msk << ch_mask) ;
 880:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR00 |=  ((uint32_t)gain_value << ch_mask);
 881:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 882:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (group_num == XMC_VADC_GROUP_INDEX_1 )
 883:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 884:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 &= ~((uint32_t)SHS_GNCTR10_GAIN0_Msk << ch_mask);
 885:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->GNCTR10 |=  ((uint32_t)gain_value << ch_mask);
 886:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 887:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 888:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 889:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA*/
 890:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 891:../Libraries/XMCLib/src/xmc_vadc.c **** }
 892:../Libraries/XMCLib/src/xmc_vadc.c **** 
 893:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 894:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 895:../Libraries/XMCLib/src/xmc_vadc.c ****                                                          XMC_VADC_GROUP_INDEX_t group_num)
 896:../Libraries/XMCLib/src/xmc_vadc.c **** {
 897:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong SHS Pointer",
 898:../Libraries/XMCLib/src/xmc_vadc.c ****              (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 899:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableGainAndOffsetCalibrations:Wrong group selected",
 900:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 901:../Libraries/XMCLib/src/xmc_vadc.c **** 
 902:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable gain and offset calibration*/
 903:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 904:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 905:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 &= ~((uint32_t)SHS_CALOC0_DISCAL_Msk);
 906:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 907:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 908:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 909:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 &= ~((uint32_t)SHS_CALOC1_DISCAL_Msk);
 910:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 911:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 912:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 913:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 914:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 915:../Libraries/XMCLib/src/xmc_vadc.c **** }
 916:../Libraries/XMCLib/src/xmc_vadc.c **** 
 917:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to enable the gain and offset calibration of the Sample and hold module*/
 918:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 919:../Libraries/XMCLib/src/xmc_vadc.c ****                                                           XMC_VADC_GROUP_INDEX_t group_num)
 920:../Libraries/XMCLib/src/xmc_vadc.c **** {
 921:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong SHS Pointer",
 922:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 923:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_DisableGainAndOffsetCalibrations:Wrong group selected",
 924:../Libraries/XMCLib/src/xmc_vadc.c ****             (group_num <= (uint32_t)XMC_VADC_GROUP_INDEX_1))
 925:../Libraries/XMCLib/src/xmc_vadc.c **** 
 926:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 927:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 928:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |= (uint32_t)SHS_CALOC0_DISCAL_Msk;
 929:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 930:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 931:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 932:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |= (uint32_t)SHS_CALOC1_DISCAL_Msk;
 933:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 934:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 935:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 936:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 937:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 938:../Libraries/XMCLib/src/xmc_vadc.c **** }
 939:../Libraries/XMCLib/src/xmc_vadc.c **** 
 940:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to get the offset calibration value of the Sample and hold module*/
 941:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 942:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_GROUP_INDEX_t group_num,
 943:../Libraries/XMCLib/src/xmc_vadc.c ****                                                       XMC_VADC_SHS_GAIN_LEVEL_t gain_level)
 944:../Libraries/XMCLib/src/xmc_vadc.c **** {
 945:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t calibration_value;
 946:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong SHS Pointer",
 947:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 948:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong Group number selected",
 949:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 950:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_GetOffsetCalibrationValue:Wrong gain level selected",
 951:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 952:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 953:../Libraries/XMCLib/src/xmc_vadc.c **** 
 954:../Libraries/XMCLib/src/xmc_vadc.c ****   calibration_value = 0U;
 955:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 956:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 957:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC0 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC0_CALOFFVAL0
 958:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 959:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 960:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 961:../Libraries/XMCLib/src/xmc_vadc.c ****     calibration_value = (shs_ptr->CALOC1 >> (uint32_t)gain_level) & (uint32_t)SHS_CALOC1_CALOFFVAL0
 962:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 963:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 964:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 965:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 966:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 967:../Libraries/XMCLib/src/xmc_vadc.c ****   return ((uint8_t)calibration_value);
 968:../Libraries/XMCLib/src/xmc_vadc.c **** }
 969:../Libraries/XMCLib/src/xmc_vadc.c **** 
 970:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the offset calibration value of the Sample and hold module*/
 971:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
 972:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_GROUP_INDEX_t group_num,
 973:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    XMC_VADC_SHS_GAIN_LEVEL_t gain_level,
 974:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    uint8_t offset_calibration_value)
 975:../Libraries/XMCLib/src/xmc_vadc.c **** {
 976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong SHS Pointer",
 977:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
 978:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong Group number selected",
 979:../Libraries/XMCLib/src/xmc_vadc.c ****              (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
 980:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetOffsetCalibrationValue:Wrong gain level selected",
 981:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_0)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_1)||
 982:../Libraries/XMCLib/src/xmc_vadc.c ****              (gain_level == XMC_VADC_SHS_GAIN_LEVEL_2)||(gain_level == XMC_VADC_SHS_GAIN_LEVEL_3))
 983:../Libraries/XMCLib/src/xmc_vadc.c **** 
 984:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( XMC_VADC_GROUP_INDEX_0 == group_num)
 985:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 986:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 = (shs_ptr->CALOC0  & ~((uint32_t)SHS_CALOC0_CALOFFVAL0_Msk << (uint32_t)gain_l
 987:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC0_OFFWC_Msk;
 988:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC0 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 989:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 990:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( XMC_VADC_GROUP_INDEX_1 == group_num)
 991:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 992:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 = (shs_ptr->CALOC1 & ~((uint32_t)SHS_CALOC1_CALOFFVAL0_Msk << (uint32_t)gain_le
 993:../Libraries/XMCLib/src/xmc_vadc.c ****                       (uint32_t)SHS_CALOC1_OFFWC_Msk;
 994:../Libraries/XMCLib/src/xmc_vadc.c ****     shs_ptr->CALOC1 |=  ((uint32_t)offset_calibration_value << (uint32_t)gain_level) | (uint32_t)SH
 995:../Libraries/XMCLib/src/xmc_vadc.c ****   }
 996:../Libraries/XMCLib/src/xmc_vadc.c ****   else
 997:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 998:../Libraries/XMCLib/src/xmc_vadc.c ****     /* for MISRA */
 999:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1000:../Libraries/XMCLib/src/xmc_vadc.c **** }
1001:../Libraries/XMCLib/src/xmc_vadc.c **** 
1002:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set the values of sigma delta loop of the Sample and hold module*/
1003:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop(XMC_VADC_GLOBAL_SHS_t *const shs_ptr,
1004:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_GROUP_INDEX_t group_num,
1005:../Libraries/XMCLib/src/xmc_vadc.c ****                                            XMC_VADC_SHS_LOOP_CH_t loop_select,
1006:../Libraries/XMCLib/src/xmc_vadc.c ****                                            uint8_t ch_num)
1007:../Libraries/XMCLib/src/xmc_vadc.c **** {
1008:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong SHS Pointer",
1009:../Libraries/XMCLib/src/xmc_vadc.c ****                (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
1010:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Group number selected",
1011:../Libraries/XMCLib/src/xmc_vadc.c ****                (group_num == XMC_VADC_GROUP_INDEX_0)||(group_num == XMC_VADC_GROUP_INDEX_1))
1012:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Delta sigma loop selected",
1013:../Libraries/XMCLib/src/xmc_vadc.c ****              (loop_select == XMC_VADC_SHS_LOOP_CH_0)||(loop_select == XMC_VADC_SHS_LOOP_CH_1))
1014:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_SHS_SetSigmaDeltaLoop:Wrong Channel Number",
1015:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1016:../Libraries/XMCLib/src/xmc_vadc.c **** 
1017:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP &= ~(((uint32_t)SHS_LOOP_LPCH0_Msk | (uint32_t)SHS_LOOP_LPSH0_Msk | (uint32_t)SHS_L
1018:../Libraries/XMCLib/src/xmc_vadc.c ****                      << (uint32_t)loop_select);
1019:../Libraries/XMCLib/src/xmc_vadc.c ****   shs_ptr->LOOP |= ((uint32_t)ch_num | ((uint32_t)group_num << (uint32_t)SHS_LOOP_LPSH0_Pos)) << (u
1020:../Libraries/XMCLib/src/xmc_vadc.c **** 
1021:../Libraries/XMCLib/src/xmc_vadc.c **** }
1022:../Libraries/XMCLib/src/xmc_vadc.c **** 
1023:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_SHS_AVAILABLE */
1024:../Libraries/XMCLib/src/xmc_vadc.c **** 
1025:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GSCAN_AVAILABLE == 1U)   
1026:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize the group scan hardware of a kernel */
1027:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SCAN_CONFIG_t *confi
1028:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2187              	 .loc 2 1028 0
 2188              	 .cfi_startproc
 2189              	 
 2190              	 
 2191 0000 80B5     	 push {r7,lr}
 2192              	.LCFI188:
 2193              	 .cfi_def_cfa_offset 8
 2194              	 .cfi_offset 7,-8
 2195              	 .cfi_offset 14,-4
 2196 0002 84B0     	 sub sp,sp,#16
 2197              	.LCFI189:
 2198              	 .cfi_def_cfa_offset 24
 2199 0004 00AF     	 add r7,sp,#0
 2200              	.LCFI190:
 2201              	 .cfi_def_cfa_register 7
 2202 0006 7860     	 str r0,[r7,#4]
 2203 0008 3960     	 str r1,[r7]
1029:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t      reg;
1030:../Libraries/XMCLib/src/xmc_vadc.c **** 
1031:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1032:../Libraries/XMCLib/src/xmc_vadc.c **** 
1033:../Libraries/XMCLib/src/xmc_vadc.c ****   /* All configurations have to be performed with the arbitration slot disabled */
1034:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2204              	 .loc 2 1034 0
 2205 000a 7868     	 ldr r0,[r7,#4]
 2206 000c FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1035:../Libraries/XMCLib/src/xmc_vadc.c ****   
1036:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Read in the existing contents of arbitration priority register */
1037:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 2207              	 .loc 2 1037 0
 2208 0010 7B68     	 ldr r3,[r7,#4]
 2209 0012 D3F88430 	 ldr r3,[r3,#132]
 2210 0016 FB60     	 str r3,[r7,#12]
1038:../Libraries/XMCLib/src/xmc_vadc.c **** 
1039:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the priority of the request source */
1040:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~(uint32_t)VADC_G_ARBPR_PRIO1_Msk;
 2211              	 .loc 2 1040 0
 2212 0018 FB68     	 ldr r3,[r7,#12]
 2213 001a 23F03003 	 bic r3,r3,#48
 2214 001e FB60     	 str r3,[r7,#12]
1041:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO1_Pos);
 2215              	 .loc 2 1041 0
 2216 0020 3B68     	 ldr r3,[r7]
 2217 0022 1B78     	 ldrb r3,[r3]
 2218 0024 C3F38103 	 ubfx r3,r3,#2,#2
 2219 0028 DBB2     	 uxtb r3,r3
 2220 002a 1B01     	 lsls r3,r3,#4
 2221 002c FA68     	 ldr r2,[r7,#12]
 2222 002e 1343     	 orrs r3,r3,r2
 2223 0030 FB60     	 str r3,[r7,#12]
1042:../Libraries/XMCLib/src/xmc_vadc.c ****   
1043:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the start mode */
1044:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2224              	 .loc 2 1044 0
 2225 0032 3B68     	 ldr r3,[r7]
 2226 0034 1B78     	 ldrb r3,[r3]
 2227 0036 03F00303 	 and r3,r3,#3
 2228 003a DBB2     	 uxtb r3,r3
 2229 003c 002B     	 cmp r3,#0
 2230 003e 03D0     	 beq .L77
1045:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1046:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM1_Msk);
 2231              	 .loc 2 1046 0
 2232 0040 FB68     	 ldr r3,[r7,#12]
 2233 0042 43F08003 	 orr r3,r3,#128
 2234 0046 FB60     	 str r3,[r7,#12]
 2235              	.L77:
1047:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1048:../Libraries/XMCLib/src/xmc_vadc.c **** 
1049:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 2236              	 .loc 2 1049 0
 2237 0048 7B68     	 ldr r3,[r7,#4]
 2238 004a FA68     	 ldr r2,[r7,#12]
 2239 004c C3F88420 	 str r2,[r3,#132]
1050:../Libraries/XMCLib/src/xmc_vadc.c **** 
1051:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL = (uint32_t)(config->asctrl |(VADC_G_ASCTRL_XTWC_Msk) |(VADC_G_ASCTRL_GTWC_Msk)
 2240              	 .loc 2 1051 0
 2241 0050 3B68     	 ldr r3,[r7]
 2242 0052 5B68     	 ldr r3,[r3,#4]
 2243 0054 43F08023 	 orr r3,r3,#-2147450880
 2244 0058 43F40003 	 orr r3,r3,#8388608
 2245 005c 7A68     	 ldr r2,[r7,#4]
 2246 005e C2F82031 	 str r3,[r2,#288]
1052:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  (VADC_G_ASCTRL_TMWC_Msk));
1053:../Libraries/XMCLib/src/xmc_vadc.c **** 
1054:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR  = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 2247              	 .loc 2 1054 0
 2248 0062 3B68     	 ldr r3,[r7]
 2249 0064 9B68     	 ldr r3,[r3,#8]
 2250 0066 43F00102 	 orr r2,r3,#1
 2251 006a 7B68     	 ldr r3,[r7,#4]
 2252 006c C3F82421 	 str r2,[r3,#292]
1055:../Libraries/XMCLib/src/xmc_vadc.c ****   
1056:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2253              	 .loc 2 1056 0
 2254 0070 3B68     	 ldr r3,[r7]
 2255 0072 1B78     	 ldrb r3,[r3]
 2256 0074 03F00303 	 and r3,r3,#3
 2257 0078 DBB2     	 uxtb r3,r3
 2258 007a 022B     	 cmp r3,#2
 2259 007c 07D1     	 bne .L78
1057:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1058:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_RPTDIS_Msk;
 2260              	 .loc 2 1058 0
 2261 007e 7B68     	 ldr r3,[r7,#4]
 2262 0080 D3F82431 	 ldr r3,[r3,#292]
 2263 0084 43F48032 	 orr r2,r3,#65536
 2264 0088 7B68     	 ldr r3,[r7,#4]
 2265 008a C3F82421 	 str r2,[r3,#292]
 2266              	.L78:
1059:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1060:../Libraries/XMCLib/src/xmc_vadc.c ****   
1061:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot now */
1062:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanEnableArbitrationSlot(group_ptr);
 2267              	 .loc 2 1062 0
 2268 008e 7868     	 ldr r0,[r7,#4]
 2269 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanEnableArbitrationSlot
1063:../Libraries/XMCLib/src/xmc_vadc.c ****   
1064:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2270              	 .loc 2 1064 0
 2271 0094 1037     	 adds r7,r7,#16
 2272              	.LCFI191:
 2273              	 .cfi_def_cfa_offset 8
 2274 0096 BD46     	 mov sp,r7
 2275              	.LCFI192:
 2276              	 .cfi_def_cfa_register 13
 2277              	 
 2278 0098 80BD     	 pop {r7,pc}
 2279              	 .cfi_endproc
 2280              	.LFE252:
 2282 009a 00BF     	 .section .text.XMC_VADC_GROUP_ScanSelectTrigger,"ax",%progbits
 2283              	 .align 2
 2284              	 .global XMC_VADC_GROUP_ScanSelectTrigger
 2285              	 .thumb
 2286              	 .thumb_func
 2288              	XMC_VADC_GROUP_ScanSelectTrigger:
 2289              	.LFB253:
1065:../Libraries/XMCLib/src/xmc_vadc.c **** 
1066:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger input for Group Scan request source */
1067:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTrigger(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_TRIGGER_INPUT_SEL
1068:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2290              	 .loc 2 1068 0
 2291              	 .cfi_startproc
 2292              	 
 2293              	 
 2294              	 
 2295 0000 80B4     	 push {r7}
 2296              	.LCFI193:
 2297              	 .cfi_def_cfa_offset 4
 2298              	 .cfi_offset 7,-4
 2299 0002 85B0     	 sub sp,sp,#20
 2300              	.LCFI194:
 2301              	 .cfi_def_cfa_offset 24
 2302 0004 00AF     	 add r7,sp,#0
 2303              	.LCFI195:
 2304              	 .cfi_def_cfa_register 7
 2305 0006 7860     	 str r0,[r7,#4]
 2306 0008 0B46     	 mov r3,r1
 2307 000a FB70     	 strb r3,[r7,#3]
1069:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1070:../Libraries/XMCLib/src/xmc_vadc.c **** 
1071:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1072:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTrigger:Wrong Trigger Port", ((trigger_input)< XMC_VADC_NUM_
1073:../Libraries/XMCLib/src/xmc_vadc.c **** 
1074:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2308              	 .loc 2 1074 0
 2309 000c 7B68     	 ldr r3,[r7,#4]
 2310 000e D3F82031 	 ldr r3,[r3,#288]
 2311 0012 FB60     	 str r3,[r7,#12]
1075:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2312              	 .loc 2 1075 0
 2313 0014 FB68     	 ldr r3,[r7,#12]
 2314 0016 43F40043 	 orr r3,r3,#32768
 2315 001a FB60     	 str r3,[r7,#12]
1076:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTSEL_Msk);
 2316              	 .loc 2 1076 0
 2317 001c FB68     	 ldr r3,[r7,#12]
 2318 001e 23F47063 	 bic r3,r3,#3840
 2319 0022 FB60     	 str r3,[r7,#12]
1077:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_input << VADC_G_ASCTRL_XTSEL_Pos);
 2320              	 .loc 2 1077 0
 2321 0024 FB78     	 ldrb r3,[r7,#3]
 2322 0026 1B02     	 lsls r3,r3,#8
 2323 0028 FA68     	 ldr r2,[r7,#12]
 2324 002a 1343     	 orrs r3,r3,r2
 2325 002c FB60     	 str r3,[r7,#12]
1078:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2326              	 .loc 2 1078 0
 2327 002e 7B68     	 ldr r3,[r7,#4]
 2328 0030 FA68     	 ldr r2,[r7,#12]
 2329 0032 C3F82021 	 str r2,[r3,#288]
1079:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2330              	 .loc 2 1079 0
 2331 0036 1437     	 adds r7,r7,#20
 2332              	.LCFI196:
 2333              	 .cfi_def_cfa_offset 4
 2334 0038 BD46     	 mov sp,r7
 2335              	.LCFI197:
 2336              	 .cfi_def_cfa_register 13
 2337              	 
 2338 003a 5DF8047B 	 ldr r7,[sp],#4
 2339              	.LCFI198:
 2340              	 .cfi_restore 7
 2341              	 .cfi_def_cfa_offset 0
 2342 003e 7047     	 bx lr
 2343              	 .cfi_endproc
 2344              	.LFE253:
 2346              	 .section .text.XMC_VADC_GROUP_ScanSelectTriggerEdge,"ax",%progbits
 2347              	 .align 2
 2348              	 .global XMC_VADC_GROUP_ScanSelectTriggerEdge
 2349              	 .thumb
 2350              	 .thumb_func
 2352              	XMC_VADC_GROUP_ScanSelectTriggerEdge:
 2353              	.LFB254:
1080:../Libraries/XMCLib/src/xmc_vadc.c **** 
1081:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1082:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGER
1083:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2354              	 .loc 2 1083 0
 2355              	 .cfi_startproc
 2356              	 
 2357              	 
 2358              	 
 2359 0000 80B4     	 push {r7}
 2360              	.LCFI199:
 2361              	 .cfi_def_cfa_offset 4
 2362              	 .cfi_offset 7,-4
 2363 0002 85B0     	 sub sp,sp,#20
 2364              	.LCFI200:
 2365              	 .cfi_def_cfa_offset 24
 2366 0004 00AF     	 add r7,sp,#0
 2367              	.LCFI201:
 2368              	 .cfi_def_cfa_register 7
 2369 0006 7860     	 str r0,[r7,#4]
 2370 0008 0B46     	 mov r3,r1
 2371 000a FB70     	 strb r3,[r7,#3]
1084:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1085:../Libraries/XMCLib/src/xmc_vadc.c **** 
1086:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(g
1087:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectTriggerEdge:Wrong Trigger Port", ((trigger_edge)<= XMC_VADC_
1088:../Libraries/XMCLib/src/xmc_vadc.c **** 
1089:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2372              	 .loc 2 1089 0
 2373 000c 7B68     	 ldr r3,[r7,#4]
 2374 000e D3F82031 	 ldr r3,[r3,#288]
 2375 0012 FB60     	 str r3,[r7,#12]
1090:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_G_ASCTRL_XTWC_Msk;
 2376              	 .loc 2 1090 0
 2377 0014 FB68     	 ldr r3,[r7,#12]
 2378 0016 43F40043 	 orr r3,r3,#32768
 2379 001a FB60     	 str r3,[r7,#12]
1091:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_XTMODE_Msk);
 2380              	 .loc 2 1091 0
 2381 001c FB68     	 ldr r3,[r7,#12]
 2382 001e 23F4C043 	 bic r3,r3,#24576
 2383 0022 FB60     	 str r3,[r7,#12]
1092:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_G_ASCTRL_XTMODE_Pos);
 2384              	 .loc 2 1092 0
 2385 0024 FB78     	 ldrb r3,[r7,#3]
 2386 0026 5B03     	 lsls r3,r3,#13
 2387 0028 FA68     	 ldr r2,[r7,#12]
 2388 002a 1343     	 orrs r3,r3,r2
 2389 002c FB60     	 str r3,[r7,#12]
1093:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2390              	 .loc 2 1093 0
 2391 002e 7B68     	 ldr r3,[r7,#4]
 2392 0030 FA68     	 ldr r2,[r7,#12]
 2393 0032 C3F82021 	 str r2,[r3,#288]
1094:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2394              	 .loc 2 1094 0
 2395 0036 1437     	 adds r7,r7,#20
 2396              	.LCFI202:
 2397              	 .cfi_def_cfa_offset 4
 2398 0038 BD46     	 mov sp,r7
 2399              	.LCFI203:
 2400              	 .cfi_def_cfa_register 13
 2401              	 
 2402 003a 5DF8047B 	 ldr r7,[sp],#4
 2403              	.LCFI204:
 2404              	 .cfi_restore 7
 2405              	 .cfi_def_cfa_offset 0
 2406 003e 7047     	 bx lr
 2407              	 .cfi_endproc
 2408              	.LFE254:
 2410              	 .section .text.XMC_VADC_GROUP_ScanSelectGating,"ax",%progbits
 2411              	 .align 2
 2412              	 .global XMC_VADC_GROUP_ScanSelectGating
 2413              	 .thumb
 2414              	 .thumb_func
 2416              	XMC_VADC_GROUP_ScanSelectGating:
 2417              	.LFB255:
1095:../Libraries/XMCLib/src/xmc_vadc.c **** 
1096:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gating input for Group Scan request source */
1097:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSelectGating(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATE_INPUT_SELECT_
1098:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2418              	 .loc 2 1098 0
 2419              	 .cfi_startproc
 2420              	 
 2421              	 
 2422              	 
 2423 0000 80B4     	 push {r7}
 2424              	.LCFI205:
 2425              	 .cfi_def_cfa_offset 4
 2426              	 .cfi_offset 7,-4
 2427 0002 85B0     	 sub sp,sp,#20
 2428              	.LCFI206:
 2429              	 .cfi_def_cfa_offset 24
 2430 0004 00AF     	 add r7,sp,#0
 2431              	.LCFI207:
 2432              	 .cfi_def_cfa_register 7
 2433 0006 7860     	 str r0,[r7,#4]
 2434 0008 0B46     	 mov r3,r1
 2435 000a FB70     	 strb r3,[r7,#3]
1099:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1100:../Libraries/XMCLib/src/xmc_vadc.c **** 
1101:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1102:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSelectGating:Wrong Gating Port", ((gating_input)< XMC_VADC_NUM_POR
1103:../Libraries/XMCLib/src/xmc_vadc.c **** 
1104:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = group_ptr->ASCTRL;
 2436              	 .loc 2 1104 0
 2437 000c 7B68     	 ldr r3,[r7,#4]
 2438 000e D3F82031 	 ldr r3,[r3,#288]
 2439 0012 FB60     	 str r3,[r7,#12]
1105:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)VADC_G_ASCTRL_GTWC_Msk;
 2440              	 .loc 2 1105 0
 2441 0014 FB68     	 ldr r3,[r7,#12]
 2442 0016 43F40003 	 orr r3,r3,#8388608
 2443 001a FB60     	 str r3,[r7,#12]
1106:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_G_ASCTRL_GTSEL_Msk);
 2444              	 .loc 2 1106 0
 2445 001c FB68     	 ldr r3,[r7,#12]
 2446 001e 23F47023 	 bic r3,r3,#983040
 2447 0022 FB60     	 str r3,[r7,#12]
1107:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)gating_input << VADC_G_ASCTRL_GTSEL_Pos);
 2448              	 .loc 2 1107 0
 2449 0024 FB78     	 ldrb r3,[r7,#3]
 2450 0026 1B04     	 lsls r3,r3,#16
 2451 0028 FA68     	 ldr r2,[r7,#12]
 2452 002a 1343     	 orrs r3,r3,r2
 2453 002c FB60     	 str r3,[r7,#12]
1108:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL  = scanctrl;
 2454              	 .loc 2 1108 0
 2455 002e 7B68     	 ldr r3,[r7,#4]
 2456 0030 FA68     	 ldr r2,[r7,#12]
 2457 0032 C3F82021 	 str r2,[r3,#288]
1109:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2458              	 .loc 2 1109 0
 2459 0036 1437     	 adds r7,r7,#20
 2460              	.LCFI208:
 2461              	 .cfi_def_cfa_offset 4
 2462 0038 BD46     	 mov sp,r7
 2463              	.LCFI209:
 2464              	 .cfi_def_cfa_register 13
 2465              	 
 2466 003a 5DF8047B 	 ldr r7,[sp],#4
 2467              	.LCFI210:
 2468              	 .cfi_restore 7
 2469              	 .cfi_def_cfa_offset 0
 2470 003e 7047     	 bx lr
 2471              	 .cfi_endproc
 2472              	.LFE255:
 2474              	 .section .text.XMC_VADC_GROUP_ScanSequenceAbort,"ax",%progbits
 2475              	 .align 2
 2476              	 .global XMC_VADC_GROUP_ScanSequenceAbort
 2477              	 .thumb
 2478              	 .thumb_func
 2480              	XMC_VADC_GROUP_ScanSequenceAbort:
 2481              	.LFB256:
1110:../Libraries/XMCLib/src/xmc_vadc.c **** 
1111:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to stop an ongoing conversion of a sequence */
1112:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSequenceAbort(XMC_VADC_GROUP_t *const group_ptr)
1113:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2482              	 .loc 2 1113 0
 2483              	 .cfi_startproc
 2484              	 
 2485              	 
 2486 0000 80B5     	 push {r7,lr}
 2487              	.LCFI211:
 2488              	 .cfi_def_cfa_offset 8
 2489              	 .cfi_offset 7,-8
 2490              	 .cfi_offset 14,-4
 2491 0002 84B0     	 sub sp,sp,#16
 2492              	.LCFI212:
 2493              	 .cfi_def_cfa_offset 24
 2494 0004 00AF     	 add r7,sp,#0
 2495              	.LCFI213:
 2496              	 .cfi_def_cfa_register 7
 2497 0006 7860     	 str r0,[r7,#4]
1114:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t asctrl;
1115:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1116:../Libraries/XMCLib/src/xmc_vadc.c **** 
1117:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSequenceAbort:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1118:../Libraries/XMCLib/src/xmc_vadc.c **** 
1119:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1120:../Libraries/XMCLib/src/xmc_vadc.c ****   asctrl = group_ptr->ASCTRL;
 2498              	 .loc 2 1120 0
 2499 0008 7B68     	 ldr r3,[r7,#4]
 2500 000a D3F82031 	 ldr r3,[r3,#288]
 2501 000e FB60     	 str r3,[r7,#12]
1121:../Libraries/XMCLib/src/xmc_vadc.c **** 
1122:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(0U | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
 2502              	 .loc 2 1122 0
 2503 0010 7B68     	 ldr r3,[r7,#4]
 2504 0012 1A4A     	 ldr r2,.L83
 2505 0014 C3F82021 	 str r2,[r3,#288]
1123:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
1124:../Libraries/XMCLib/src/xmc_vadc.c **** 
1125:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable Arbitration before abort*/
1126:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN1_Pos) & 1U);
 2506              	 .loc 2 1126 0
 2507 0018 7B68     	 ldr r3,[r7,#4]
 2508 001a D3F88430 	 ldr r3,[r3,#132]
 2509 001e 5B0E     	 lsrs r3,r3,#25
 2510 0020 03F00103 	 and r3,r3,#1
 2511 0024 002B     	 cmp r3,#0
 2512 0026 14BF     	 ite ne
 2513 0028 0123     	 movne r3,#1
 2514 002a 0023     	 moveq r3,#0
 2515 002c FB72     	 strb r3,[r7,#11]
1127:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_ScanDisableArbitrationSlot(group_ptr);
 2516              	 .loc 2 1127 0
 2517 002e 7868     	 ldr r0,[r7,#4]
 2518 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_ScanDisableArbitrationSlot
1128:../Libraries/XMCLib/src/xmc_vadc.c **** 
1129:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR &= ~((uint32_t)VADC_G_ASMR_ENGT_Msk);
 2519              	 .loc 2 1129 0
 2520 0034 7B68     	 ldr r3,[r7,#4]
 2521 0036 D3F82431 	 ldr r3,[r3,#292]
 2522 003a 23F00302 	 bic r2,r3,#3
 2523 003e 7B68     	 ldr r3,[r7,#4]
 2524 0040 C3F82421 	 str r2,[r3,#292]
1130:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASMR |= (uint32_t)VADC_G_ASMR_CLRPND_Msk;
 2525              	 .loc 2 1130 0
 2526 0044 7B68     	 ldr r3,[r7,#4]
 2527 0046 D3F82431 	 ldr r3,[r3,#292]
 2528 004a 43F48072 	 orr r2,r3,#256
 2529 004e 7B68     	 ldr r3,[r7,#4]
 2530 0050 C3F82421 	 str r2,[r3,#292]
1131:../Libraries/XMCLib/src/xmc_vadc.c **** 
1132:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Enable the arbitration slot 1*/
1133:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN1_Pos);
 2531              	 .loc 2 1133 0
 2532 0054 7B68     	 ldr r3,[r7,#4]
 2533 0056 D3F88420 	 ldr r2,[r3,#132]
 2534 005a FB7A     	 ldrb r3,[r7,#11]
 2535 005c 5B06     	 lsls r3,r3,#25
 2536 005e 1A43     	 orrs r2,r2,r3
 2537 0060 7B68     	 ldr r3,[r7,#4]
 2538 0062 C3F88420 	 str r2,[r3,#132]
1134:../Libraries/XMCLib/src/xmc_vadc.c **** 
1135:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1136:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASCTRL =(asctrl | (uint32_t)VADC_G_ASCTRL_XTWC_Msk |
1137:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2539              	 .loc 2 1137 0
 2540 0066 FB68     	 ldr r3,[r7,#12]
 2541 0068 43F08023 	 orr r3,r3,#-2147450880
 2542 006c 43F40003 	 orr r3,r3,#8388608
1136:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_ASCTRL_GTWC_Msk | (uint32_t)VADC_G_ASCTRL_TMWC_M
 2543              	 .loc 2 1136 0
 2544 0070 7A68     	 ldr r2,[r7,#4]
 2545 0072 C2F82031 	 str r3,[r2,#288]
1138:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2546              	 .loc 2 1138 0
 2547 0076 1037     	 adds r7,r7,#16
 2548              	.LCFI214:
 2549              	 .cfi_def_cfa_offset 8
 2550 0078 BD46     	 mov sp,r7
 2551              	.LCFI215:
 2552              	 .cfi_def_cfa_register 13
 2553              	 
 2554 007a 80BD     	 pop {r7,pc}
 2555              	.L84:
 2556              	 .align 2
 2557              	.L83:
 2558 007c 00808080 	 .word -2139062272
 2559              	 .cfi_endproc
 2560              	.LFE256:
 2562              	 .section .text.XMC_VADC_GROUP_ScanGetNumChannelsPending,"ax",%progbits
 2563              	 .align 2
 2564              	 .global XMC_VADC_GROUP_ScanGetNumChannelsPending
 2565              	 .thumb
 2566              	 .thumb_func
 2568              	XMC_VADC_GROUP_ScanGetNumChannelsPending:
 2569              	.LFB257:
1139:../Libraries/XMCLib/src/xmc_vadc.c **** 
1140:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to find out number of channels awaiting conversion */
1141:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_ScanGetNumChannelsPending(XMC_VADC_GROUP_t *const group_ptr)
1142:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2570              	 .loc 2 1142 0
 2571              	 .cfi_startproc
 2572              	 
 2573              	 
 2574              	 
 2575 0000 80B4     	 push {r7}
 2576              	.LCFI216:
 2577              	 .cfi_def_cfa_offset 4
 2578              	 .cfi_offset 7,-4
 2579 0002 87B0     	 sub sp,sp,#28
 2580              	.LCFI217:
 2581              	 .cfi_def_cfa_offset 32
 2582 0004 00AF     	 add r7,sp,#0
 2583              	.LCFI218:
 2584              	 .cfi_def_cfa_register 7
 2585 0006 7860     	 str r0,[r7,#4]
1143:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1144:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1145:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1146:../Libraries/XMCLib/src/xmc_vadc.c **** 
1147:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanGetNumChannelsPending:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1148:../Libraries/XMCLib/src/xmc_vadc.c **** 
1149:../Libraries/XMCLib/src/xmc_vadc.c **** 
1150:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 2586              	 .loc 2 1150 0
 2587 0008 0023     	 movs r3,#0
 2588 000a FB60     	 str r3,[r7,#12]
1151:../Libraries/XMCLib/src/xmc_vadc.c **** 
1152:../Libraries/XMCLib/src/xmc_vadc.c ****   if (group_ptr->ASPND)
 2589              	 .loc 2 1152 0
 2590 000c 7B68     	 ldr r3,[r7,#4]
 2591 000e D3F82C31 	 ldr r3,[r3,#300]
 2592 0012 002B     	 cmp r3,#0
 2593 0014 17D0     	 beq .L86
1153:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1154:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = group_ptr->ASPND;
 2594              	 .loc 2 1154 0
 2595 0016 7B68     	 ldr r3,[r7,#4]
 2596 0018 D3F82C31 	 ldr r3,[r3,#300]
 2597 001c 7B61     	 str r3,[r7,#20]
1155:../Libraries/XMCLib/src/xmc_vadc.c **** 
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i=0U;i<XMC_VADC_NUM_CHANNELS_PER_GROUP;i++)
 2598              	 .loc 2 1156 0
 2599 001e 0023     	 movs r3,#0
 2600 0020 3B61     	 str r3,[r7,#16]
 2601 0022 0DE0     	 b .L87
 2602              	.L89:
1157:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1158:../Libraries/XMCLib/src/xmc_vadc.c ****       if (reg & 1U)
 2603              	 .loc 2 1158 0
 2604 0024 7B69     	 ldr r3,[r7,#20]
 2605 0026 03F00103 	 and r3,r3,#1
 2606 002a 002B     	 cmp r3,#0
 2607 002c 02D0     	 beq .L88
1159:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1160:../Libraries/XMCLib/src/xmc_vadc.c ****         count++;
 2608              	 .loc 2 1160 0
 2609 002e FB68     	 ldr r3,[r7,#12]
 2610 0030 0133     	 adds r3,r3,#1
 2611 0032 FB60     	 str r3,[r7,#12]
 2612              	.L88:
1161:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1162:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = (uint32_t)(reg >> (uint32_t)1);
 2613              	 .loc 2 1162 0 discriminator 2
 2614 0034 7B69     	 ldr r3,[r7,#20]
 2615 0036 5B08     	 lsrs r3,r3,#1
 2616 0038 7B61     	 str r3,[r7,#20]
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2617              	 .loc 2 1156 0 discriminator 2
 2618 003a 3B69     	 ldr r3,[r7,#16]
 2619 003c 0133     	 adds r3,r3,#1
 2620 003e 3B61     	 str r3,[r7,#16]
 2621              	.L87:
1156:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 2622              	 .loc 2 1156 0 is_stmt 0 discriminator 1
 2623 0040 3B69     	 ldr r3,[r7,#16]
 2624 0042 072B     	 cmp r3,#7
 2625 0044 EED9     	 bls .L89
 2626              	.L86:
1163:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1164:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1165:../Libraries/XMCLib/src/xmc_vadc.c **** 
1166:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 2627              	 .loc 2 1166 0 is_stmt 1
 2628 0046 FB68     	 ldr r3,[r7,#12]
1167:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2629              	 .loc 2 1167 0
 2630 0048 1846     	 mov r0,r3
 2631 004a 1C37     	 adds r7,r7,#28
 2632              	.LCFI219:
 2633              	 .cfi_def_cfa_offset 4
 2634 004c BD46     	 mov sp,r7
 2635              	.LCFI220:
 2636              	 .cfi_def_cfa_register 13
 2637              	 
 2638 004e 5DF8047B 	 ldr r7,[sp],#4
 2639              	.LCFI221:
 2640              	 .cfi_restore 7
 2641              	 .cfi_def_cfa_offset 0
 2642 0052 7047     	 bx lr
 2643              	 .cfi_endproc
 2644              	.LFE257:
 2646              	 .section .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode,"ax",%progbits
 2647              	 .align 2
 2648              	 .global XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
 2649              	 .thumb
 2650              	 .thumb_func
 2652              	XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:
 2653              	.LFB258:
1168:../Libraries/XMCLib/src/xmc_vadc.c **** 
1169:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for request source event */
1170:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VA
1171:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2654              	 .loc 2 1171 0
 2655              	 .cfi_startproc
 2656              	 
 2657              	 
 2658              	 
 2659 0000 80B4     	 push {r7}
 2660              	.LCFI222:
 2661              	 .cfi_def_cfa_offset 4
 2662              	 .cfi_offset 7,-4
 2663 0002 85B0     	 sub sp,sp,#20
 2664              	.LCFI223:
 2665              	 .cfi_def_cfa_offset 24
 2666 0004 00AF     	 add r7,sp,#0
 2667              	.LCFI224:
 2668              	 .cfi_def_cfa_register 7
 2669 0006 7860     	 str r0,[r7,#4]
 2670 0008 0B46     	 mov r3,r1
 2671 000a FB70     	 strb r3,[r7,#3]
1172:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1173:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 2672              	 .loc 2 1173 0
 2673 000c 7B68     	 ldr r3,[r7,#4]
 2674 000e D3F8C031 	 ldr r3,[r3,#448]
 2675 0012 FB60     	 str r3,[r7,#12]
1174:../Libraries/XMCLib/src/xmc_vadc.c **** 
1175:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_G
1176:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_
1177:../Libraries/XMCLib/src/xmc_vadc.c **** 
1178:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV1NP_Msk);
 2676              	 .loc 2 1178 0
 2677 0014 FB68     	 ldr r3,[r7,#12]
 2678 0016 23F0F003 	 bic r3,r3,#240
 2679 001a FB60     	 str r3,[r7,#12]
1179:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV1NP_Pos);
 2680              	 .loc 2 1179 0
 2681 001c FB78     	 ldrb r3,[r7,#3]
 2682 001e 1B01     	 lsls r3,r3,#4
 2683 0020 FA68     	 ldr r2,[r7,#12]
 2684 0022 1343     	 orrs r3,r3,r2
 2685 0024 FB60     	 str r3,[r7,#12]
1180:../Libraries/XMCLib/src/xmc_vadc.c **** 
1181:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 2686              	 .loc 2 1181 0
 2687 0026 7B68     	 ldr r3,[r7,#4]
 2688 0028 FA68     	 ldr r2,[r7,#12]
 2689 002a C3F8C021 	 str r2,[r3,#448]
1182:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2690              	 .loc 2 1182 0
 2691 002e 1437     	 adds r7,r7,#20
 2692              	.LCFI225:
 2693              	 .cfi_def_cfa_offset 4
 2694 0030 BD46     	 mov sp,r7
 2695              	.LCFI226:
 2696              	 .cfi_def_cfa_register 13
 2697              	 
 2698 0032 5DF8047B 	 ldr r7,[sp],#4
 2699              	.LCFI227:
 2700              	 .cfi_restore 7
 2701              	 .cfi_def_cfa_offset 0
 2702 0036 7047     	 bx lr
 2703              	 .cfi_endproc
 2704              	.LFE258:
 2706              	 .section .text.XMC_VADC_GROUP_ScanRemoveChannel,"ax",%progbits
 2707              	 .align 2
 2708              	 .global XMC_VADC_GROUP_ScanRemoveChannel
 2709              	 .thumb
 2710              	 .thumb_func
 2712              	XMC_VADC_GROUP_ScanRemoveChannel:
 2713              	.LFB259:
1183:../Libraries/XMCLib/src/xmc_vadc.c **** 
1184:../Libraries/XMCLib/src/xmc_vadc.c **** /* Removes the selected channel from conversion*/
1185:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ScanRemoveChannel(XMC_VADC_GROUP_t *const group_ptr, const uint32_t channel_num
1186:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2714              	 .loc 2 1186 0
 2715              	 .cfi_startproc
 2716              	 
 2717              	 
 2718              	 
 2719 0000 80B4     	 push {r7}
 2720              	.LCFI228:
 2721              	 .cfi_def_cfa_offset 4
 2722              	 .cfi_offset 7,-4
 2723 0002 85B0     	 sub sp,sp,#20
 2724              	.LCFI229:
 2725              	 .cfi_def_cfa_offset 24
 2726 0004 00AF     	 add r7,sp,#0
 2727              	.LCFI230:
 2728              	 .cfi_def_cfa_register 7
 2729 0006 7860     	 str r0,[r7,#4]
 2730 0008 3960     	 str r1,[r7]
1187:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t assel;
1188:../Libraries/XMCLib/src/xmc_vadc.c **** 
1189:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1190:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ScanRemoveChannel:Wrong channel number", ((channel_num)< XMC_VADC_NUM_
1191:../Libraries/XMCLib/src/xmc_vadc.c **** 
1192:../Libraries/XMCLib/src/xmc_vadc.c ****   assel = group_ptr->ASSEL; 
 2731              	 .loc 2 1192 0
 2732 000a 7B68     	 ldr r3,[r7,#4]
 2733 000c D3F82831 	 ldr r3,[r3,#296]
 2734 0010 FB60     	 str r3,[r7,#12]
1193:../Libraries/XMCLib/src/xmc_vadc.c ****   assel &= (~( 1 << channel_num));
 2735              	 .loc 2 1193 0
 2736 0012 3B68     	 ldr r3,[r7]
 2737 0014 0122     	 movs r2,#1
 2738 0016 02FA03F3 	 lsl r3,r2,r3
 2739 001a DB43     	 mvns r3,r3
 2740 001c 1A46     	 mov r2,r3
 2741 001e FB68     	 ldr r3,[r7,#12]
 2742 0020 1340     	 ands r3,r3,r2
 2743 0022 FB60     	 str r3,[r7,#12]
1194:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ASSEL  = assel;
 2744              	 .loc 2 1194 0
 2745 0024 7B68     	 ldr r3,[r7,#4]
 2746 0026 FA68     	 ldr r2,[r7,#12]
 2747 0028 C3F82821 	 str r2,[r3,#296]
1195:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2748              	 .loc 2 1195 0
 2749 002c 1437     	 adds r7,r7,#20
 2750              	.LCFI231:
 2751              	 .cfi_def_cfa_offset 4
 2752 002e BD46     	 mov sp,r7
 2753              	.LCFI232:
 2754              	 .cfi_def_cfa_register 13
 2755              	 
 2756 0030 5DF8047B 	 ldr r7,[sp],#4
 2757              	.LCFI233:
 2758              	 .cfi_restore 7
 2759              	 .cfi_def_cfa_offset 0
 2760 0034 7047     	 bx lr
 2761              	 .cfi_endproc
 2762              	.LFE259:
 2764 0036 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundInit,"ax",%progbits
 2765              	 .align 2
 2766              	 .global XMC_VADC_GLOBAL_BackgroundInit
 2767              	 .thumb
 2768              	 .thumb_func
 2770              	XMC_VADC_GLOBAL_BackgroundInit:
 2771              	.LFB260:
1196:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_GSCAN_AVAILABLE */
1197:../Libraries/XMCLib/src/xmc_vadc.c **** 
1198:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize background scan request source hardware */
1199:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_
1200:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2772              	 .loc 2 1200 0
 2773              	 .cfi_startproc
 2774              	 
 2775              	 
 2776 0000 80B5     	 push {r7,lr}
 2777              	.LCFI234:
 2778              	 .cfi_def_cfa_offset 8
 2779              	 .cfi_offset 7,-8
 2780              	 .cfi_offset 14,-4
 2781 0002 86B0     	 sub sp,sp,#24
 2782              	.LCFI235:
 2783              	 .cfi_def_cfa_offset 32
 2784 0004 00AF     	 add r7,sp,#0
 2785              	.LCFI236:
 2786              	 .cfi_def_cfa_register 7
 2787 0006 7860     	 str r0,[r7,#4]
 2788 0008 3960     	 str r1,[r7]
1201:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1202:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t i;
1203:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1204:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t conv_start_mask;
1205:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1206:../Libraries/XMCLib/src/xmc_vadc.c ****   
1207:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))
1208:../Libraries/XMCLib/src/xmc_vadc.c **** 
1209:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2789              	 .loc 2 1210 0
 2790 000a 0023     	 movs r3,#0
 2791 000c FB75     	 strb r3,[r7,#23]
 2792 000e 09E0     	 b .L94
 2793              	.L95:
1211:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1212:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 2794              	 .loc 2 1212 0 discriminator 3
 2795 0010 FB7D     	 ldrb r3,[r7,#23]
 2796 0012 394A     	 ldr r2,.L102
 2797 0014 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2798 0018 1846     	 mov r0,r3
 2799 001a FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2800              	 .loc 2 1210 0 discriminator 3
 2801 001e FB7D     	 ldrb r3,[r7,#23]
 2802 0020 0133     	 adds r3,r3,#1
 2803 0022 FB75     	 strb r3,[r7,#23]
 2804              	.L94:
1210:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2805              	 .loc 2 1210 0 is_stmt 0 discriminator 1
 2806 0024 FB7D     	 ldrb r3,[r7,#23]
 2807 0026 032B     	 cmp r3,#3
 2808 0028 F2D9     	 bls .L95
1213:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1214:../Libraries/XMCLib/src/xmc_vadc.c ****   
1215:../Libraries/XMCLib/src/xmc_vadc.c ****   conv_start_mask = (uint32_t) 0;
 2809              	 .loc 2 1215 0 is_stmt 1
 2810 002a 0023     	 movs r3,#0
 2811 002c 3B61     	 str r3,[r7,#16]
1216:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 2812              	 .loc 2 1216 0
 2813 002e 3B68     	 ldr r3,[r7]
 2814 0030 1B78     	 ldrb r3,[r3]
 2815 0032 03F00303 	 and r3,r3,#3
 2816 0036 DBB2     	 uxtb r3,r3
 2817 0038 002B     	 cmp r3,#0
 2818 003a 02D0     	 beq .L96
1217:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1218:../Libraries/XMCLib/src/xmc_vadc.c ****     conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 2819              	 .loc 2 1218 0
 2820 003c 4FF40063 	 mov r3,#2048
 2821 0040 3B61     	 str r3,[r7,#16]
 2822              	.L96:
1219:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1220:../Libraries/XMCLib/src/xmc_vadc.c ****   
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2823              	 .loc 2 1221 0
 2824 0042 0023     	 movs r3,#0
 2825 0044 FB75     	 strb r3,[r7,#23]
 2826 0046 21E0     	 b .L97
 2827              	.L98:
1222:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1223:../Libraries/XMCLib/src/xmc_vadc.c ****     reg = g_xmc_vadc_group_array[i]->ARBPR;
 2828              	 .loc 2 1223 0 discriminator 3
 2829 0048 FB7D     	 ldrb r3,[r7,#23]
 2830 004a 2B4A     	 ldr r2,.L102
 2831 004c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2832 0050 D3F88430 	 ldr r3,[r3,#132]
 2833 0054 FB60     	 str r3,[r7,#12]
1224:../Libraries/XMCLib/src/xmc_vadc.c **** 
1225:../Libraries/XMCLib/src/xmc_vadc.c ****     reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 2834              	 .loc 2 1225 0 discriminator 3
 2835 0056 FB68     	 ldr r3,[r7,#12]
 2836 0058 23F44073 	 bic r3,r3,#768
 2837 005c FB60     	 str r3,[r7,#12]
1226:../Libraries/XMCLib/src/xmc_vadc.c **** 
1227:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the priority of the request source */
1228:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 2838              	 .loc 2 1228 0 discriminator 3
 2839 005e 3B68     	 ldr r3,[r7]
 2840 0060 1B78     	 ldrb r3,[r3]
 2841 0062 C3F38103 	 ubfx r3,r3,#2,#2
 2842 0066 DBB2     	 uxtb r3,r3
 2843 0068 1B02     	 lsls r3,r3,#8
 2844 006a FA68     	 ldr r2,[r7,#12]
 2845 006c 1343     	 orrs r3,r3,r2
 2846 006e FB60     	 str r3,[r7,#12]
1229:../Libraries/XMCLib/src/xmc_vadc.c ****   
1230:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Program the start mode */
1231:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= conv_start_mask;
 2847              	 .loc 2 1231 0 discriminator 3
 2848 0070 FA68     	 ldr r2,[r7,#12]
 2849 0072 3B69     	 ldr r3,[r7,#16]
 2850 0074 1343     	 orrs r3,r3,r2
 2851 0076 FB60     	 str r3,[r7,#12]
1232:../Libraries/XMCLib/src/xmc_vadc.c **** 
1233:../Libraries/XMCLib/src/xmc_vadc.c ****     g_xmc_vadc_group_array[i]->ARBPR = reg;
 2852              	 .loc 2 1233 0 discriminator 3
 2853 0078 FB7D     	 ldrb r3,[r7,#23]
 2854 007a 1F4A     	 ldr r2,.L102
 2855 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2856 0080 FA68     	 ldr r2,[r7,#12]
 2857 0082 C3F88420 	 str r2,[r3,#132]
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2858              	 .loc 2 1221 0 discriminator 3
 2859 0086 FB7D     	 ldrb r3,[r7,#23]
 2860 0088 0133     	 adds r3,r3,#1
 2861 008a FB75     	 strb r3,[r7,#23]
 2862              	.L97:
1221:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2863              	 .loc 2 1221 0 is_stmt 0 discriminator 1
 2864 008c FB7D     	 ldrb r3,[r7,#23]
 2865 008e 032B     	 cmp r3,#3
 2866 0090 DAD9     	 bls .L98
1234:../Libraries/XMCLib/src/xmc_vadc.c ****   
1235:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1236:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1237:../Libraries/XMCLib/src/xmc_vadc.c **** 
1238:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSCTRL register */
1239:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VAD
 2867              	 .loc 2 1239 0 is_stmt 1
 2868 0092 3B68     	 ldr r3,[r7]
 2869 0094 5B68     	 ldr r3,[r3,#4]
 2870 0096 43F40003 	 orr r3,r3,#8388608
 2871 009a 43F40043 	 orr r3,r3,#32768
 2872 009e 7A68     	 ldr r2,[r7,#4]
 2873 00a0 C2F80032 	 str r3,[r2,#512]
1240:../Libraries/XMCLib/src/xmc_vadc.c **** 
1241:../Libraries/XMCLib/src/xmc_vadc.c ****   /* program BRSMR register */
1242:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << V
 2874              	 .loc 2 1242 0
 2875 00a4 3B68     	 ldr r3,[r7]
 2876 00a6 9B68     	 ldr r3,[r3,#8]
 2877 00a8 43F00102 	 orr r2,r3,#1
 2878 00ac 7B68     	 ldr r3,[r7,#4]
 2879 00ae C3F80422 	 str r2,[r3,#516]
1243:../Libraries/XMCLib/src/xmc_vadc.c ****   
1244:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1245:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
 2880              	 .loc 2 1245 0
 2881 00b2 3B68     	 ldr r3,[r7]
 2882 00b4 1B78     	 ldrb r3,[r3]
 2883 00b6 03F00303 	 and r3,r3,#3
 2884 00ba DBB2     	 uxtb r3,r3
 2885 00bc 022B     	 cmp r3,#2
 2886 00be 07D1     	 bne .L99
1246:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1247:../Libraries/XMCLib/src/xmc_vadc.c ****     global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 2887              	 .loc 2 1247 0
 2888 00c0 7B68     	 ldr r3,[r7,#4]
 2889 00c2 D3F80432 	 ldr r3,[r3,#516]
 2890 00c6 43F48032 	 orr r2,r3,#65536
 2891 00ca 7B68     	 ldr r3,[r7,#4]
 2892 00cc C3F80422 	 str r2,[r3,#516]
 2893              	.L99:
1248:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1249:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1250:../Libraries/XMCLib/src/xmc_vadc.c ****   
1251:../Libraries/XMCLib/src/xmc_vadc.c ****   #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 2894              	 .loc 2 1252 0
 2895 00d0 0023     	 movs r3,#0
 2896 00d2 FB75     	 strb r3,[r7,#23]
 2897 00d4 09E0     	 b .L100
 2898              	.L101:
1253:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1254:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 2899              	 .loc 2 1254 0 discriminator 3
 2900 00d6 FB7D     	 ldrb r3,[r7,#23]
 2901 00d8 074A     	 ldr r2,.L102
 2902 00da 52F82330 	 ldr r3,[r2,r3,lsl#2]
 2903 00de 1846     	 mov r0,r3
 2904 00e0 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2905              	 .loc 2 1252 0 discriminator 3
 2906 00e4 FB7D     	 ldrb r3,[r7,#23]
 2907 00e6 0133     	 adds r3,r3,#1
 2908 00e8 FB75     	 strb r3,[r7,#23]
 2909              	.L100:
1252:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 2910              	 .loc 2 1252 0 is_stmt 0 discriminator 1
 2911 00ea FB7D     	 ldrb r3,[r7,#23]
 2912 00ec 032B     	 cmp r3,#3
 2913 00ee F2D9     	 bls .L101
1255:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1256:../Libraries/XMCLib/src/xmc_vadc.c ****   #endif
1257:../Libraries/XMCLib/src/xmc_vadc.c ****   
1258:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2914              	 .loc 2 1258 0 is_stmt 1
 2915 00f0 1837     	 adds r7,r7,#24
 2916              	.LCFI237:
 2917              	 .cfi_def_cfa_offset 8
 2918 00f2 BD46     	 mov sp,r7
 2919              	.LCFI238:
 2920              	 .cfi_def_cfa_register 13
 2921              	 
 2922 00f4 80BD     	 pop {r7,pc}
 2923              	.L103:
 2924 00f6 00BF     	 .align 2
 2925              	.L102:
 2926 00f8 00000000 	 .word g_xmc_vadc_group_array
 2927              	 .cfi_endproc
 2928              	.LFE260:
 2930              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger,"ax",%progbits
 2931              	 .align 2
 2932              	 .global XMC_VADC_GLOBAL_BackgroundSelectTrigger
 2933              	 .thumb
 2934              	 .thumb_func
 2936              	XMC_VADC_GLOBAL_BackgroundSelectTrigger:
 2937              	.LFB261:
1259:../Libraries/XMCLib/src/xmc_vadc.c **** 
1260:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger for background scan request source */
1261:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTrigger(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t in
1262:../Libraries/XMCLib/src/xmc_vadc.c **** {
 2938              	 .loc 2 1262 0
 2939              	 .cfi_startproc
 2940              	 
 2941              	 
 2942              	 
 2943 0000 80B4     	 push {r7}
 2944              	.LCFI239:
 2945              	 .cfi_def_cfa_offset 4
 2946              	 .cfi_offset 7,-4
 2947 0002 85B0     	 sub sp,sp,#20
 2948              	.LCFI240:
 2949              	 .cfi_def_cfa_offset 24
 2950 0004 00AF     	 add r7,sp,#0
 2951              	.LCFI241:
 2952              	 .cfi_def_cfa_register 7
 2953 0006 7860     	 str r0,[r7,#4]
 2954 0008 3960     	 str r1,[r7]
1263:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1264:../Libraries/XMCLib/src/xmc_vadc.c **** 
1265:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("VADC_BCKGND_SelectTriggerInput:Wrong Module Pointer", (global_ptr == VADC))
1266:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_N
1267:../Libraries/XMCLib/src/xmc_vadc.c **** 
1268:../Libraries/XMCLib/src/xmc_vadc.c ****   
1269:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 2955              	 .loc 2 1269 0
 2956 000a 7B68     	 ldr r3,[r7,#4]
 2957 000c D3F80032 	 ldr r3,[r3,#512]
 2958 0010 FB60     	 str r3,[r7,#12]
1270:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_XTWC_Msk;
 2959              	 .loc 2 1270 0
 2960 0012 FB68     	 ldr r3,[r7,#12]
 2961 0014 43F40043 	 orr r3,r3,#32768
 2962 0018 FB60     	 str r3,[r7,#12]
1271:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_XTSEL_Msk);
 2963              	 .loc 2 1271 0
 2964 001a FB68     	 ldr r3,[r7,#12]
 2965 001c 23F47063 	 bic r3,r3,#3840
 2966 0020 FB60     	 str r3,[r7,#12]
1272:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_XTSEL_Pos);
 2967              	 .loc 2 1272 0
 2968 0022 3B68     	 ldr r3,[r7]
 2969 0024 1B02     	 lsls r3,r3,#8
 2970 0026 FA68     	 ldr r2,[r7,#12]
 2971 0028 1343     	 orrs r3,r3,r2
 2972 002a FB60     	 str r3,[r7,#12]
1273:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 2973              	 .loc 2 1273 0
 2974 002c 7B68     	 ldr r3,[r7,#4]
 2975 002e FA68     	 ldr r2,[r7,#12]
 2976 0030 C3F80022 	 str r2,[r3,#512]
1274:../Libraries/XMCLib/src/xmc_vadc.c **** }
 2977              	 .loc 2 1274 0
 2978 0034 1437     	 adds r7,r7,#20
 2979              	.LCFI242:
 2980              	 .cfi_def_cfa_offset 4
 2981 0036 BD46     	 mov sp,r7
 2982              	.LCFI243:
 2983              	 .cfi_def_cfa_register 13
 2984              	 
 2985 0038 5DF8047B 	 ldr r7,[sp],#4
 2986              	.LCFI244:
 2987              	 .cfi_restore 7
 2988              	 .cfi_def_cfa_offset 0
 2989 003c 7047     	 bx lr
 2990              	 .cfi_endproc
 2991              	.LFE261:
 2993 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge,"ax",%progbits
 2994              	 .align 2
 2995              	 .global XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
 2996              	 .thumb
 2997              	 .thumb_func
 2999              	XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:
 3000              	.LFB262:
1275:../Libraries/XMCLib/src/xmc_vadc.c **** 
1276:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1277:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge(XMC_VADC_GLOBAL_t *const global_ptr,
1278:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_TRIGGER_EDGE_t trigger_edge)
1279:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3001              	 .loc 2 1279 0
 3002              	 .cfi_startproc
 3003              	 
 3004              	 
 3005              	 
 3006 0000 80B4     	 push {r7}
 3007              	.LCFI245:
 3008              	 .cfi_def_cfa_offset 4
 3009              	 .cfi_offset 7,-4
 3010 0002 85B0     	 sub sp,sp,#20
 3011              	.LCFI246:
 3012              	 .cfi_def_cfa_offset 24
 3013 0004 00AF     	 add r7,sp,#0
 3014              	.LCFI247:
 3015              	 .cfi_def_cfa_register 7
 3016 0006 7860     	 str r0,[r7,#4]
 3017 0008 0B46     	 mov r3,r1
 3018 000a FB70     	 strb r3,[r7,#3]
1280:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1281:../Libraries/XMCLib/src/xmc_vadc.c **** 
1282:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Global Pointer", (global_ptr == VAD
1283:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:Wrong Trigger Port",
1284:../Libraries/XMCLib/src/xmc_vadc.c ****             ((trigger_edge)<= XMC_VADC_TRIGGER_EDGE_ANY))
1285:../Libraries/XMCLib/src/xmc_vadc.c **** 
1286:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      = global_ptr->BRSCTRL;
 3019              	 .loc 2 1286 0
 3020 000c 7B68     	 ldr r3,[r7,#4]
 3021 000e D3F80032 	 ldr r3,[r3,#512]
 3022 0012 FB60     	 str r3,[r7,#12]
1287:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t) VADC_BRSCTRL_XTWC_Msk;
 3023              	 .loc 2 1287 0
 3024 0014 FB68     	 ldr r3,[r7,#12]
 3025 0016 43F40043 	 orr r3,r3,#32768
 3026 001a FB60     	 str r3,[r7,#12]
1288:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     &= ~((uint32_t)VADC_BRSCTRL_XTMODE_Msk);
 3027              	 .loc 2 1288 0
 3028 001c FB68     	 ldr r3,[r7,#12]
 3029 001e 23F4C043 	 bic r3,r3,#24576
 3030 0022 FB60     	 str r3,[r7,#12]
1289:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl     |= (uint32_t)((uint32_t)trigger_edge << VADC_BRSCTRL_XTMODE_Pos);
 3031              	 .loc 2 1289 0
 3032 0024 FB78     	 ldrb r3,[r7,#3]
 3033 0026 5B03     	 lsls r3,r3,#13
 3034 0028 FA68     	 ldr r2,[r7,#12]
 3035 002a 1343     	 orrs r3,r3,r2
 3036 002c FB60     	 str r3,[r7,#12]
1290:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3037              	 .loc 2 1290 0
 3038 002e 7B68     	 ldr r3,[r7,#4]
 3039 0030 FA68     	 ldr r2,[r7,#12]
 3040 0032 C3F80022 	 str r2,[r3,#512]
1291:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3041              	 .loc 2 1291 0
 3042 0036 1437     	 adds r7,r7,#20
 3043              	.LCFI248:
 3044              	 .cfi_def_cfa_offset 4
 3045 0038 BD46     	 mov sp,r7
 3046              	.LCFI249:
 3047              	 .cfi_def_cfa_register 13
 3048              	 
 3049 003a 5DF8047B 	 ldr r7,[sp],#4
 3050              	.LCFI250:
 3051              	 .cfi_restore 7
 3052              	 .cfi_def_cfa_offset 0
 3053 003e 7047     	 bx lr
 3054              	 .cfi_endproc
 3055              	.LFE262:
 3057              	 .section .text.XMC_VADC_GLOBAL_BackgroundSelectGating,"ax",%progbits
 3058              	 .align 2
 3059              	 .global XMC_VADC_GLOBAL_BackgroundSelectGating
 3060              	 .thumb
 3061              	 .thumb_func
 3063              	XMC_VADC_GLOBAL_BackgroundSelectGating:
 3064              	.LFB263:
1292:../Libraries/XMCLib/src/xmc_vadc.c **** 
1293:../Libraries/XMCLib/src/xmc_vadc.c **** 
1294:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 inputs as a trigger gate for background scan request source */
1295:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundSelectGating(XMC_VADC_GLOBAL_t *const global_ptr, const uint32_t inp
1296:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3065              	 .loc 2 1296 0
 3066              	 .cfi_startproc
 3067              	 
 3068              	 
 3069              	 
 3070 0000 80B4     	 push {r7}
 3071              	.LCFI251:
 3072              	 .cfi_def_cfa_offset 4
 3073              	 .cfi_offset 7,-4
 3074 0002 85B0     	 sub sp,sp,#20
 3075              	.LCFI252:
 3076              	 .cfi_def_cfa_offset 24
 3077 0004 00AF     	 add r7,sp,#0
 3078              	.LCFI253:
 3079              	 .cfi_def_cfa_register 7
 3080 0006 7860     	 str r0,[r7,#4]
 3081 0008 3960     	 str r1,[r7]
1297:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t scanctrl;
1298:../Libraries/XMCLib/src/xmc_vadc.c **** 
1299:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Module Pointer", (global_ptr == VADC))
1300:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM
1301:../Libraries/XMCLib/src/xmc_vadc.c **** 
1302:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl       = global_ptr->BRSCTRL;
 3082              	 .loc 2 1302 0
 3083 000a 7B68     	 ldr r3,[r7,#4]
 3084 000c D3F80032 	 ldr r3,[r3,#512]
 3085 0010 FB60     	 str r3,[r7,#12]
1303:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)VADC_BRSCTRL_GTWC_Msk;
 3086              	 .loc 2 1303 0
 3087 0012 FB68     	 ldr r3,[r7,#12]
 3088 0014 43F40003 	 orr r3,r3,#8388608
 3089 0018 FB60     	 str r3,[r7,#12]
1304:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      &= ~((uint32_t)VADC_BRSCTRL_GTSEL_Msk);
 3090              	 .loc 2 1304 0
 3091 001a FB68     	 ldr r3,[r7,#12]
 3092 001c 23F47023 	 bic r3,r3,#983040
 3093 0020 FB60     	 str r3,[r7,#12]
1305:../Libraries/XMCLib/src/xmc_vadc.c ****   scanctrl      |= (uint32_t)(input_num << VADC_BRSCTRL_GTSEL_Pos);
 3094              	 .loc 2 1305 0
 3095 0022 3B68     	 ldr r3,[r7]
 3096 0024 1B04     	 lsls r3,r3,#16
 3097 0026 FA68     	 ldr r2,[r7,#12]
 3098 0028 1343     	 orrs r3,r3,r2
 3099 002a FB60     	 str r3,[r7,#12]
1306:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL  = scanctrl;
 3100              	 .loc 2 1306 0
 3101 002c 7B68     	 ldr r3,[r7,#4]
 3102 002e FA68     	 ldr r2,[r7,#12]
 3103 0030 C3F80022 	 str r2,[r3,#512]
1307:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3104              	 .loc 2 1307 0
 3105 0034 1437     	 adds r7,r7,#20
 3106              	.LCFI254:
 3107              	 .cfi_def_cfa_offset 4
 3108 0036 BD46     	 mov sp,r7
 3109              	.LCFI255:
 3110              	 .cfi_def_cfa_register 13
 3111              	 
 3112 0038 5DF8047B 	 ldr r7,[sp],#4
 3113              	.LCFI256:
 3114              	 .cfi_restore 7
 3115              	 .cfi_def_cfa_offset 0
 3116 003c 7047     	 bx lr
 3117              	 .cfi_endproc
 3118              	.LFE263:
 3120 003e 00BF     	 .section .text.XMC_VADC_GLOBAL_BackgroundAbortSequence,"ax",%progbits
 3121              	 .align 2
 3122              	 .global XMC_VADC_GLOBAL_BackgroundAbortSequence
 3123              	 .thumb
 3124              	 .thumb_func
 3126              	XMC_VADC_GLOBAL_BackgroundAbortSequence:
 3127              	.LFB264:
1308:../Libraries/XMCLib/src/xmc_vadc.c **** 
1309:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a sequence */
1310:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GLOBAL_BackgroundAbortSequence(XMC_VADC_GLOBAL_t *const global_ptr)
1311:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3128              	 .loc 2 1311 0
 3129              	 .cfi_startproc
 3130              	 
 3131              	 
 3132 0000 80B5     	 push {r7,lr}
 3133              	.LCFI257:
 3134              	 .cfi_def_cfa_offset 8
 3135              	 .cfi_offset 7,-8
 3136              	 .cfi_offset 14,-4
 3137 0002 86B0     	 sub sp,sp,#24
 3138              	.LCFI258:
 3139              	 .cfi_def_cfa_offset 32
 3140 0004 00AF     	 add r7,sp,#0
 3141              	.LCFI259:
 3142              	 .cfi_def_cfa_register 7
 3143 0006 7860     	 str r0,[r7,#4]
1312:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t brsctrl;
1313:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1314:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1315:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t grp_asen2_flag[XMC_VADC_MAXIMUM_NUM_GROUPS];
1316:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1317:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAbortSequence:Wrong Module Pointer", (global_ptr == VADC))
1318:../Libraries/XMCLib/src/xmc_vadc.c **** 
1319:../Libraries/XMCLib/src/xmc_vadc.c ****   /* To disable trigger and gating before abort*/
1320:../Libraries/XMCLib/src/xmc_vadc.c ****   brsctrl = global_ptr->BRSCTRL;
 3144              	 .loc 2 1320 0
 3145 0008 7B68     	 ldr r3,[r7,#4]
 3146 000a D3F80032 	 ldr r3,[r3,#512]
 3147 000e 3B61     	 str r3,[r7,#16]
1321:../Libraries/XMCLib/src/xmc_vadc.c **** 
1322:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(0U | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 3148              	 .loc 2 1322 0
 3149 0010 7B68     	 ldr r3,[r7,#4]
 3150 0012 254A     	 ldr r2,.L113
 3151 0014 C3F80022 	 str r2,[r3,#512]
1323:../Libraries/XMCLib/src/xmc_vadc.c **** 
1324:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable Background Request source */
1325:../Libraries/XMCLib/src/xmc_vadc.c **** 
1326:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3152              	 .loc 2 1327 0
 3153 0018 0023     	 movs r3,#0
 3154 001a 7B61     	 str r3,[r7,#20]
 3155 001c 17E0     	 b .L108
 3156              	.L109:
1328:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1329:../Libraries/XMCLib/src/xmc_vadc.c ****     grp_asen2_flag[i] = (uint8_t)(g_xmc_vadc_group_array[i]->ARBPR >> VADC_G_ARBPR_ASEN2_Pos);
 3157              	 .loc 2 1329 0 discriminator 3
 3158 001e 234A     	 ldr r2,.L113+4
 3159 0020 7B69     	 ldr r3,[r7,#20]
 3160 0022 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3161 0026 D3F88430 	 ldr r3,[r3,#132]
 3162 002a 9B0E     	 lsrs r3,r3,#26
 3163 002c D9B2     	 uxtb r1,r3
 3164 002e 07F10C02 	 add r2,r7,#12
 3165 0032 7B69     	 ldr r3,[r7,#20]
 3166 0034 1344     	 add r3,r3,r2
 3167 0036 0A46     	 mov r2,r1
 3168 0038 1A70     	 strb r2,[r3]
1330:../Libraries/XMCLib/src/xmc_vadc.c ****     XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 3169              	 .loc 2 1330 0 discriminator 3
 3170 003a 1C4A     	 ldr r2,.L113+4
 3171 003c 7B69     	 ldr r3,[r7,#20]
 3172 003e 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3173 0042 1846     	 mov r0,r3
 3174 0044 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3175              	 .loc 2 1327 0 discriminator 3
 3176 0048 7B69     	 ldr r3,[r7,#20]
 3177 004a 0133     	 adds r3,r3,#1
 3178 004c 7B61     	 str r3,[r7,#20]
 3179              	.L108:
1327:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3180              	 .loc 2 1327 0 is_stmt 0 discriminator 1
 3181 004e 7B69     	 ldr r3,[r7,#20]
 3182 0050 032B     	 cmp r3,#3
 3183 0052 E4D9     	 bls .L109
1331:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1332:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1333:../Libraries/XMCLib/src/xmc_vadc.c **** 
1334:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Abort the ongoing sequence */
1335:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_CLRPND_Msk;
 3184              	 .loc 2 1335 0 is_stmt 1
 3185 0054 7B68     	 ldr r3,[r7,#4]
 3186 0056 D3F80432 	 ldr r3,[r3,#516]
 3187 005a 43F48072 	 orr r2,r3,#256
 3188 005e 7B68     	 ldr r3,[r7,#4]
 3189 0060 C3F80422 	 str r2,[r3,#516]
1336:../Libraries/XMCLib/src/xmc_vadc.c **** 
1337:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1338:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable Background Request source */
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3190              	 .loc 2 1339 0
 3191 0064 0023     	 movs r3,#0
 3192 0066 7B61     	 str r3,[r7,#20]
 3193 0068 10E0     	 b .L110
 3194              	.L112:
1340:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1341:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint8_t)1 == grp_asen2_flag[i])
 3195              	 .loc 2 1341 0
 3196 006a 07F10C02 	 add r2,r7,#12
 3197 006e 7B69     	 ldr r3,[r7,#20]
 3198 0070 1344     	 add r3,r3,r2
 3199 0072 1B78     	 ldrb r3,[r3]
 3200 0074 012B     	 cmp r3,#1
 3201 0076 06D1     	 bne .L111
1342:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1343:../Libraries/XMCLib/src/xmc_vadc.c ****       XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t*)g_xmc_vadc_group_array[i]);
 3202              	 .loc 2 1343 0
 3203 0078 0C4A     	 ldr r2,.L113+4
 3204 007a 7B69     	 ldr r3,[r7,#20]
 3205 007c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 3206 0080 1846     	 mov r0,r3
 3207 0082 FFF7FEFF 	 bl XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
 3208              	.L111:
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3209              	 .loc 2 1339 0 discriminator 2
 3210 0086 7B69     	 ldr r3,[r7,#20]
 3211 0088 0133     	 adds r3,r3,#1
 3212 008a 7B61     	 str r3,[r7,#20]
 3213              	.L110:
1339:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3214              	 .loc 2 1339 0 is_stmt 0 discriminator 1
 3215 008c 7B69     	 ldr r3,[r7,#20]
 3216 008e 032B     	 cmp r3,#3
 3217 0090 EBD9     	 bls .L112
1344:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1345:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1346:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1347:../Libraries/XMCLib/src/xmc_vadc.c **** 
1348:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Re-enable any disabled trigger and gating*/
1349:../Libraries/XMCLib/src/xmc_vadc.c ****   global_ptr->BRSCTRL =(brsctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk
 3218              	 .loc 2 1349 0 is_stmt 1
 3219 0092 3B69     	 ldr r3,[r7,#16]
 3220 0094 43F40003 	 orr r3,r3,#8388608
 3221 0098 43F40043 	 orr r3,r3,#32768
 3222 009c 7A68     	 ldr r2,[r7,#4]
 3223 009e C2F80032 	 str r3,[r2,#512]
1350:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3224              	 .loc 2 1350 0
 3225 00a2 1837     	 adds r7,r7,#24
 3226              	.LCFI260:
 3227              	 .cfi_def_cfa_offset 8
 3228 00a4 BD46     	 mov sp,r7
 3229              	.LCFI261:
 3230              	 .cfi_def_cfa_register 13
 3231              	 
 3232 00a6 80BD     	 pop {r7,pc}
 3233              	.L114:
 3234              	 .align 2
 3235              	.L113:
 3236 00a8 00808000 	 .word 8421376
 3237 00ac 00000000 	 .word g_xmc_vadc_group_array
 3238              	 .cfi_endproc
 3239              	.LFE264:
 3241              	 .section .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending,"ax",%progbits
 3242              	 .align 2
 3243              	 .global XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
 3244              	 .thumb
 3245              	 .thumb_func
 3247              	XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:
 3248              	.LFB265:
1351:../Libraries/XMCLib/src/xmc_vadc.c **** 
1352:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine how many channels are awaiting conversion */
1353:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending(XMC_VADC_GLOBAL_t *const global_ptr)
1354:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3249              	 .loc 2 1354 0
 3250              	 .cfi_startproc
 3251              	 
 3252              	 
 3253              	 
 3254 0000 80B4     	 push {r7}
 3255              	.LCFI262:
 3256              	 .cfi_def_cfa_offset 4
 3257              	 .cfi_offset 7,-4
 3258 0002 87B0     	 sub sp,sp,#28
 3259              	.LCFI263:
 3260              	 .cfi_def_cfa_offset 32
 3261 0004 00AF     	 add r7,sp,#0
 3262              	.LCFI264:
 3263              	 .cfi_def_cfa_register 7
 3264 0006 7860     	 str r0,[r7,#4]
1355:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t reg;
1356:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
1357:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t j;
1358:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t count;
1359:../Libraries/XMCLib/src/xmc_vadc.c **** 
1360:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:Wrong Module Pointer", (global_ptr ==
1361:../Libraries/XMCLib/src/xmc_vadc.c **** 
1362:../Libraries/XMCLib/src/xmc_vadc.c ****   count = 0U;
 3265              	 .loc 2 1362 0
 3266 0008 0023     	 movs r3,#0
 3267 000a BB60     	 str r3,[r7,#8]
1363:../Libraries/XMCLib/src/xmc_vadc.c ****   
1364:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Loop through all groups and find out who is awaiting conversion */
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   for(i = 0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 3268              	 .loc 2 1365 0
 3269 000c 0023     	 movs r3,#0
 3270 000e 3B61     	 str r3,[r7,#16]
 3271 0010 23E0     	 b .L116
 3272              	.L121:
1366:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1367:../Libraries/XMCLib/src/xmc_vadc.c ****     if (global_ptr->BRSSEL[i])
 3273              	 .loc 2 1367 0
 3274 0012 7B68     	 ldr r3,[r7,#4]
 3275 0014 3A69     	 ldr r2,[r7,#16]
 3276 0016 6032     	 adds r2,r2,#96
 3277 0018 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3278 001c 002B     	 cmp r3,#0
 3279 001e 19D0     	 beq .L117
1368:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1369:../Libraries/XMCLib/src/xmc_vadc.c ****       reg = global_ptr->BRSPND[i];
 3280              	 .loc 2 1369 0
 3281 0020 7B68     	 ldr r3,[r7,#4]
 3282 0022 3A69     	 ldr r2,[r7,#16]
 3283 0024 7032     	 adds r2,r2,#112
 3284 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 3285 002a 7B61     	 str r3,[r7,#20]
1370:../Libraries/XMCLib/src/xmc_vadc.c **** 
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       for(j=0U;j<XMC_VADC_NUM_CHANNELS_PER_GROUP;j++)
 3286              	 .loc 2 1371 0
 3287 002c 0023     	 movs r3,#0
 3288 002e FB60     	 str r3,[r7,#12]
 3289 0030 0DE0     	 b .L118
 3290              	.L120:
1372:../Libraries/XMCLib/src/xmc_vadc.c ****       {
1373:../Libraries/XMCLib/src/xmc_vadc.c ****         if (reg & 1U)
 3291              	 .loc 2 1373 0
 3292 0032 7B69     	 ldr r3,[r7,#20]
 3293 0034 03F00103 	 and r3,r3,#1
 3294 0038 002B     	 cmp r3,#0
 3295 003a 02D0     	 beq .L119
1374:../Libraries/XMCLib/src/xmc_vadc.c ****         {
1375:../Libraries/XMCLib/src/xmc_vadc.c ****           count++;
 3296              	 .loc 2 1375 0
 3297 003c BB68     	 ldr r3,[r7,#8]
 3298 003e 0133     	 adds r3,r3,#1
 3299 0040 BB60     	 str r3,[r7,#8]
 3300              	.L119:
1376:../Libraries/XMCLib/src/xmc_vadc.c ****         }
1377:../Libraries/XMCLib/src/xmc_vadc.c **** 
1378:../Libraries/XMCLib/src/xmc_vadc.c ****         reg = reg >> 1U;
 3301              	 .loc 2 1378 0 discriminator 2
 3302 0042 7B69     	 ldr r3,[r7,#20]
 3303 0044 5B08     	 lsrs r3,r3,#1
 3304 0046 7B61     	 str r3,[r7,#20]
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3305              	 .loc 2 1371 0 discriminator 2
 3306 0048 FB68     	 ldr r3,[r7,#12]
 3307 004a 0133     	 adds r3,r3,#1
 3308 004c FB60     	 str r3,[r7,#12]
 3309              	.L118:
1371:../Libraries/XMCLib/src/xmc_vadc.c ****       {
 3310              	 .loc 2 1371 0 is_stmt 0 discriminator 1
 3311 004e FB68     	 ldr r3,[r7,#12]
 3312 0050 072B     	 cmp r3,#7
 3313 0052 EED9     	 bls .L120
 3314              	.L117:
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3315              	 .loc 2 1365 0 is_stmt 1 discriminator 2
 3316 0054 3B69     	 ldr r3,[r7,#16]
 3317 0056 0133     	 adds r3,r3,#1
 3318 0058 3B61     	 str r3,[r7,#16]
 3319              	.L116:
1365:../Libraries/XMCLib/src/xmc_vadc.c ****   {
 3320              	 .loc 2 1365 0 is_stmt 0 discriminator 1
 3321 005a 3B69     	 ldr r3,[r7,#16]
 3322 005c 032B     	 cmp r3,#3
 3323 005e D8D9     	 bls .L121
1379:../Libraries/XMCLib/src/xmc_vadc.c ****       }
1380:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1381:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1382:../Libraries/XMCLib/src/xmc_vadc.c **** 
1383:../Libraries/XMCLib/src/xmc_vadc.c ****   return count;
 3324              	 .loc 2 1383 0 is_stmt 1
 3325 0060 BB68     	 ldr r3,[r7,#8]
1384:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3326              	 .loc 2 1384 0
 3327 0062 1846     	 mov r0,r3
 3328 0064 1C37     	 adds r7,r7,#28
 3329              	.LCFI265:
 3330              	 .cfi_def_cfa_offset 4
 3331 0066 BD46     	 mov sp,r7
 3332              	.LCFI266:
 3333              	 .cfi_def_cfa_register 13
 3334              	 
 3335 0068 5DF8047B 	 ldr r7,[sp],#4
 3336              	.LCFI267:
 3337              	 .cfi_restore 7
 3338              	 .cfi_def_cfa_offset 0
 3339 006c 7047     	 bx lr
 3340              	 .cfi_endproc
 3341              	.LFE265:
 3343 006e 00BF     	 .section .text.XMC_VADC_GROUP_QueueInit,"ax",%progbits
 3344              	 .align 2
 3345              	 .global XMC_VADC_GROUP_QueueInit
 3346              	 .thumb
 3347              	 .thumb_func
 3349              	XMC_VADC_GROUP_QueueInit:
 3350              	.LFB266:
1385:../Libraries/XMCLib/src/xmc_vadc.c **** 
1386:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
1387:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize queue request source */
1388:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *con
1389:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3351              	 .loc 2 1389 0
 3352              	 .cfi_startproc
 3353              	 
 3354              	 
 3355 0000 80B5     	 push {r7,lr}
 3356              	.LCFI268:
 3357              	 .cfi_def_cfa_offset 8
 3358              	 .cfi_offset 7,-8
 3359              	 .cfi_offset 14,-4
 3360 0002 84B0     	 sub sp,sp,#16
 3361              	.LCFI269:
 3362              	 .cfi_def_cfa_offset 24
 3363 0004 00AF     	 add r7,sp,#0
 3364              	.LCFI270:
 3365              	 .cfi_def_cfa_register 7
 3366 0006 7860     	 str r0,[r7,#4]
 3367 0008 3960     	 str r1,[r7]
1390:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t          reg;
1391:../Libraries/XMCLib/src/xmc_vadc.c **** 
1392:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1393:../Libraries/XMCLib/src/xmc_vadc.c **** 
1394:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable arbitration slot of the queue request source */
1395:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3368              	 .loc 2 1395 0
 3369 000a 7868     	 ldr r0,[r7,#4]
 3370 000c FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1396:../Libraries/XMCLib/src/xmc_vadc.c ****   
1397:../Libraries/XMCLib/src/xmc_vadc.c ****   reg = group_ptr->ARBPR;
 3371              	 .loc 2 1397 0
 3372 0010 7B68     	 ldr r3,[r7,#4]
 3373 0012 D3F88430 	 ldr r3,[r3,#132]
 3374 0016 FB60     	 str r3,[r7,#12]
1398:../Libraries/XMCLib/src/xmc_vadc.c **** 
1399:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Request Source priority */
1400:../Libraries/XMCLib/src/xmc_vadc.c ****   reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 3375              	 .loc 2 1400 0
 3376 0018 FB68     	 ldr r3,[r7,#12]
 3377 001a 23F00303 	 bic r3,r3,#3
 3378 001e FB60     	 str r3,[r7,#12]
1401:../Libraries/XMCLib/src/xmc_vadc.c ****   reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 3379              	 .loc 2 1401 0
 3380 0020 3B68     	 ldr r3,[r7]
 3381 0022 1B78     	 ldrb r3,[r3]
 3382 0024 C3F38103 	 ubfx r3,r3,#2,#2
 3383 0028 DBB2     	 uxtb r3,r3
 3384 002a 1A46     	 mov r2,r3
 3385 002c FB68     	 ldr r3,[r7,#12]
 3386 002e 1343     	 orrs r3,r3,r2
 3387 0030 FB60     	 str r3,[r7,#12]
1402:../Libraries/XMCLib/src/xmc_vadc.c **** 
1403:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Conversion Start mode */
1404:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
 3388              	 .loc 2 1404 0
 3389 0032 3B68     	 ldr r3,[r7]
 3390 0034 1B78     	 ldrb r3,[r3]
 3391 0036 03F00303 	 and r3,r3,#3
 3392 003a DBB2     	 uxtb r3,r3
 3393 003c 002B     	 cmp r3,#0
 3394 003e 03D0     	 beq .L124
1405:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1406:../Libraries/XMCLib/src/xmc_vadc.c ****     reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 3395              	 .loc 2 1406 0
 3396 0040 FB68     	 ldr r3,[r7,#12]
 3397 0042 43F00803 	 orr r3,r3,#8
 3398 0046 FB60     	 str r3,[r7,#12]
 3399              	.L124:
1407:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1408:../Libraries/XMCLib/src/xmc_vadc.c **** 
1409:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR = reg;
 3400              	 .loc 2 1409 0
 3401 0048 7B68     	 ldr r3,[r7,#4]
 3402 004a FA68     	 ldr r2,[r7,#12]
 3403 004c C3F88420 	 str r2,[r3,#132]
1410:../Libraries/XMCLib/src/xmc_vadc.c **** 
1411:../Libraries/XMCLib/src/xmc_vadc.c **** 
1412:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 3404              	 .loc 2 1412 0
 3405 0050 3B68     	 ldr r3,[r7]
 3406 0052 5B68     	 ldr r3,[r3,#4]
 3407 0054 43F08023 	 orr r3,r3,#-2147450880
 3408 0058 43F40003 	 orr r3,r3,#8388608
 3409 005c 7A68     	 ldr r2,[r7,#4]
 3410 005e C2F80031 	 str r3,[r2,#256]
1413:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
1414:../Libraries/XMCLib/src/xmc_vadc.c ****                                                     (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));
1415:../Libraries/XMCLib/src/xmc_vadc.c **** 
1416:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Gating mode */
1417:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VA
 3411              	 .loc 2 1417 0
 3412 0062 3B68     	 ldr r3,[r7]
 3413 0064 9B68     	 ldr r3,[r3,#8]
 3414 0066 43F00102 	 orr r2,r3,#1
 3415 006a 7B68     	 ldr r3,[r7,#4]
 3416 006c C3F80421 	 str r2,[r3,#260]
1418:../Libraries/XMCLib/src/xmc_vadc.c **** 
1419:../Libraries/XMCLib/src/xmc_vadc.c ****   if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode) )
 3417              	 .loc 2 1419 0
 3418 0070 3B68     	 ldr r3,[r7]
 3419 0072 1B78     	 ldrb r3,[r3]
 3420 0074 03F00303 	 and r3,r3,#3
 3421 0078 DBB2     	 uxtb r3,r3
 3422 007a 022B     	 cmp r3,#2
 3423 007c 07D1     	 bne .L125
1420:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1421:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 3424              	 .loc 2 1421 0
 3425 007e 7B68     	 ldr r3,[r7,#4]
 3426 0080 D3F80431 	 ldr r3,[r3,#260]
 3427 0084 43F48032 	 orr r2,r3,#65536
 3428 0088 7B68     	 ldr r3,[r7,#4]
 3429 008a C3F80421 	 str r2,[r3,#260]
 3430              	.L125:
1422:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1423:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable arbitration slot for the queue request source */
1424:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 3431              	 .loc 2 1424 0
 3432 008e 7868     	 ldr r0,[r7,#4]
 3433 0090 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueEnableArbitrationSlot
1425:../Libraries/XMCLib/src/xmc_vadc.c **** 
1426:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3434              	 .loc 2 1426 0
 3435 0094 1037     	 adds r7,r7,#16
 3436              	.LCFI271:
 3437              	 .cfi_def_cfa_offset 8
 3438 0096 BD46     	 mov sp,r7
 3439              	.LCFI272:
 3440              	 .cfi_def_cfa_register 13
 3441              	 
 3442 0098 80BD     	 pop {r7,pc}
 3443              	 .cfi_endproc
 3444              	.LFE266:
 3446 009a 00BF     	 .section .text.XMC_VADC_GROUP_QueueSelectTrigger,"ax",%progbits
 3447              	 .align 2
 3448              	 .global XMC_VADC_GROUP_QueueSelectTrigger
 3449              	 .thumb
 3450              	 .thumb_func
 3452              	XMC_VADC_GROUP_QueueSelectTrigger:
 3453              	.LFB267:
1427:../Libraries/XMCLib/src/xmc_vadc.c **** 
1428:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible triggers as a conversion trigger for queue request source *
1429:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTrigger(XMC_VADC_GROUP_t *const group_ptr,
1430:../Libraries/XMCLib/src/xmc_vadc.c ****                                        const XMC_VADC_TRIGGER_INPUT_SELECT_t input_num)
1431:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3454              	 .loc 2 1431 0
 3455              	 .cfi_startproc
 3456              	 
 3457              	 
 3458              	 
 3459 0000 80B4     	 push {r7}
 3460              	.LCFI273:
 3461              	 .cfi_def_cfa_offset 4
 3462              	 .cfi_offset 7,-4
 3463 0002 85B0     	 sub sp,sp,#20
 3464              	.LCFI274:
 3465              	 .cfi_def_cfa_offset 24
 3466 0004 00AF     	 add r7,sp,#0
 3467              	.LCFI275:
 3468              	 .cfi_def_cfa_register 7
 3469 0006 7860     	 str r0,[r7,#4]
 3470 0008 0B46     	 mov r3,r1
 3471 000a FB70     	 strb r3,[r7,#3]
1432:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    qctrl;
1433:../Libraries/XMCLib/src/xmc_vadc.c ****   
1434:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1435:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTrigger:Wrong Trigger Port", ((input_num)< XMC_VADC_NUM_POR
1436:../Libraries/XMCLib/src/xmc_vadc.c **** 
1437:../Libraries/XMCLib/src/xmc_vadc.c ****   
1438:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the conversion trigger */
1439:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3472              	 .loc 2 1439 0
 3473 000c 7B68     	 ldr r3,[r7,#4]
 3474 000e D3F80031 	 ldr r3,[r3,#256]
 3475 0012 FB60     	 str r3,[r7,#12]
1440:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3476              	 .loc 2 1440 0
 3477 0014 FB68     	 ldr r3,[r7,#12]
 3478 0016 43F40043 	 orr r3,r3,#32768
 3479 001a FB60     	 str r3,[r7,#12]
1441:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTSEL_Msk);
 3480              	 .loc 2 1441 0
 3481 001c FB68     	 ldr r3,[r7,#12]
 3482 001e 23F47063 	 bic r3,r3,#3840
 3483 0022 FB60     	 str r3,[r7,#12]
1442:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_XTSEL_Pos);
 3484              	 .loc 2 1442 0
 3485 0024 FB78     	 ldrb r3,[r7,#3]
 3486 0026 1B02     	 lsls r3,r3,#8
 3487 0028 FA68     	 ldr r2,[r7,#12]
 3488 002a 1343     	 orrs r3,r3,r2
 3489 002c FB60     	 str r3,[r7,#12]
1443:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3490              	 .loc 2 1443 0
 3491 002e 7B68     	 ldr r3,[r7,#4]
 3492 0030 FA68     	 ldr r2,[r7,#12]
 3493 0032 C3F80021 	 str r2,[r3,#256]
1444:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3494              	 .loc 2 1444 0
 3495 0036 1437     	 adds r7,r7,#20
 3496              	.LCFI276:
 3497              	 .cfi_def_cfa_offset 4
 3498 0038 BD46     	 mov sp,r7
 3499              	.LCFI277:
 3500              	 .cfi_def_cfa_register 13
 3501              	 
 3502 003a 5DF8047B 	 ldr r7,[sp],#4
 3503              	.LCFI278:
 3504              	 .cfi_restore 7
 3505              	 .cfi_def_cfa_offset 0
 3506 003e 7047     	 bx lr
 3507              	 .cfi_endproc
 3508              	.LFE267:
 3510              	 .section .text.XMC_VADC_GROUP_QueueSelectTriggerEdge,"ax",%progbits
 3511              	 .align 2
 3512              	 .global XMC_VADC_GROUP_QueueSelectTriggerEdge
 3513              	 .thumb
 3514              	 .thumb_func
 3516              	XMC_VADC_GROUP_QueueSelectTriggerEdge:
 3517              	.LFB268:
1445:../Libraries/XMCLib/src/xmc_vadc.c **** 
1446:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a trigger edge*/
1447:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectTriggerEdge(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_TRIGGE
1448:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3518              	 .loc 2 1448 0
 3519              	 .cfi_startproc
 3520              	 
 3521              	 
 3522              	 
 3523 0000 80B4     	 push {r7}
 3524              	.LCFI279:
 3525              	 .cfi_def_cfa_offset 4
 3526              	 .cfi_offset 7,-4
 3527 0002 85B0     	 sub sp,sp,#20
 3528              	.LCFI280:
 3529              	 .cfi_def_cfa_offset 24
 3530 0004 00AF     	 add r7,sp,#0
 3531              	.LCFI281:
 3532              	 .cfi_def_cfa_register 7
 3533 0006 7860     	 str r0,[r7,#4]
 3534 0008 0B46     	 mov r3,r1
 3535 000a FB70     	 strb r3,[r7,#3]
1449:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1450:../Libraries/XMCLib/src/xmc_vadc.c **** 
1451:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1452:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectTriggerEdge:Wrong Gating Port", ((trigger_edge)<= XMC_VADC_
1453:../Libraries/XMCLib/src/xmc_vadc.c **** 
1454:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1455:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3536              	 .loc 2 1455 0
 3537 000c 7B68     	 ldr r3,[r7,#4]
 3538 000e D3F80031 	 ldr r3,[r3,#256]
 3539 0012 FB60     	 str r3,[r7,#12]
1456:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_XTWC_Msk;
 3540              	 .loc 2 1456 0
 3541 0014 FB68     	 ldr r3,[r7,#12]
 3542 0016 43F40043 	 orr r3,r3,#32768
 3543 001a FB60     	 str r3,[r7,#12]
1457:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_XTMODE_Msk);
 3544              	 .loc 2 1457 0
 3545 001c FB68     	 ldr r3,[r7,#12]
 3546 001e 23F4C043 	 bic r3,r3,#24576
 3547 0022 FB60     	 str r3,[r7,#12]
1458:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)trigger_edge << VADC_G_QCTRL0_XTMODE_Pos);
 3548              	 .loc 2 1458 0
 3549 0024 FB78     	 ldrb r3,[r7,#3]
 3550 0026 5B03     	 lsls r3,r3,#13
 3551 0028 FA68     	 ldr r2,[r7,#12]
 3552 002a 1343     	 orrs r3,r3,r2
 3553 002c FB60     	 str r3,[r7,#12]
1459:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3554              	 .loc 2 1459 0
 3555 002e 7B68     	 ldr r3,[r7,#4]
 3556 0030 FA68     	 ldr r2,[r7,#12]
 3557 0032 C3F80021 	 str r2,[r3,#256]
1460:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3558              	 .loc 2 1460 0
 3559 0036 1437     	 adds r7,r7,#20
 3560              	.LCFI282:
 3561              	 .cfi_def_cfa_offset 4
 3562 0038 BD46     	 mov sp,r7
 3563              	.LCFI283:
 3564              	 .cfi_def_cfa_register 13
 3565              	 
 3566 003a 5DF8047B 	 ldr r7,[sp],#4
 3567              	.LCFI284:
 3568              	 .cfi_restore 7
 3569              	 .cfi_def_cfa_offset 0
 3570 003e 7047     	 bx lr
 3571              	 .cfi_endproc
 3572              	.LFE268:
 3574              	 .section .text.XMC_VADC_GROUP_QueueSelectGating,"ax",%progbits
 3575              	 .align 2
 3576              	 .global XMC_VADC_GROUP_QueueSelectGating
 3577              	 .thumb
 3578              	 .thumb_func
 3580              	XMC_VADC_GROUP_QueueSelectGating:
 3581              	.LFB269:
1461:../Libraries/XMCLib/src/xmc_vadc.c **** 
1462:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the 16 possible trigger gates as a trigger gating signal for queue request 
1463:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSelectGating(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GATE_INPUT_
1464:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3582              	 .loc 2 1464 0
 3583              	 .cfi_startproc
 3584              	 
 3585              	 
 3586              	 
 3587 0000 80B4     	 push {r7}
 3588              	.LCFI285:
 3589              	 .cfi_def_cfa_offset 4
 3590              	 .cfi_offset 7,-4
 3591 0002 85B0     	 sub sp,sp,#20
 3592              	.LCFI286:
 3593              	 .cfi_def_cfa_offset 24
 3594 0004 00AF     	 add r7,sp,#0
 3595              	.LCFI287:
 3596              	 .cfi_def_cfa_register 7
 3597 0006 7860     	 str r0,[r7,#4]
 3598 0008 0B46     	 mov r3,r1
 3599 000a FB70     	 strb r3,[r7,#3]
1465:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl;
1466:../Libraries/XMCLib/src/xmc_vadc.c **** 
1467:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
1468:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSelectGating:Wrong Gating Port", ((input_num)< XMC_VADC_NUM_PORTS
1469:../Libraries/XMCLib/src/xmc_vadc.c ****   
1470:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Now select the gating input */
1471:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl  = group_ptr->QCTRL0;
 3600              	 .loc 2 1471 0
 3601 000c 7B68     	 ldr r3,[r7,#4]
 3602 000e D3F80031 	 ldr r3,[r3,#256]
 3603 0012 FB60     	 str r3,[r7,#12]
1472:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)VADC_G_QCTRL0_GTWC_Msk;
 3604              	 .loc 2 1472 0
 3605 0014 FB68     	 ldr r3,[r7,#12]
 3606 0016 43F40003 	 orr r3,r3,#8388608
 3607 001a FB60     	 str r3,[r7,#12]
1473:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl &= ~((uint32_t)VADC_G_QCTRL0_GTSEL_Msk);
 3608              	 .loc 2 1473 0
 3609 001c FB68     	 ldr r3,[r7,#12]
 3610 001e 23F47023 	 bic r3,r3,#983040
 3611 0022 FB60     	 str r3,[r7,#12]
1474:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl |= (uint32_t)((uint32_t)input_num << VADC_G_QCTRL0_GTSEL_Pos);
 3612              	 .loc 2 1474 0
 3613 0024 FB78     	 ldrb r3,[r7,#3]
 3614 0026 1B04     	 lsls r3,r3,#16
 3615 0028 FA68     	 ldr r2,[r7,#12]
 3616 002a 1343     	 orrs r3,r3,r2
 3617 002c FB60     	 str r3,[r7,#12]
1475:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = qctrl;
 3618              	 .loc 2 1475 0
 3619 002e 7B68     	 ldr r3,[r7,#4]
 3620 0030 FA68     	 ldr r2,[r7,#12]
 3621 0032 C3F80021 	 str r2,[r3,#256]
1476:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3622              	 .loc 2 1476 0
 3623 0036 1437     	 adds r7,r7,#20
 3624              	.LCFI288:
 3625              	 .cfi_def_cfa_offset 4
 3626 0038 BD46     	 mov sp,r7
 3627              	.LCFI289:
 3628              	 .cfi_def_cfa_register 13
 3629              	 
 3630 003a 5DF8047B 	 ldr r7,[sp],#4
 3631              	.LCFI290:
 3632              	 .cfi_restore 7
 3633              	 .cfi_def_cfa_offset 0
 3634 003e 7047     	 bx lr
 3635              	 .cfi_endproc
 3636              	.LFE269:
 3638              	 .section .text.XMC_VADC_GROUP_QueueGetLength,"ax",%progbits
 3639              	 .align 2
 3640              	 .global XMC_VADC_GROUP_QueueGetLength
 3641              	 .thumb
 3642              	 .thumb_func
 3644              	XMC_VADC_GROUP_QueueGetLength:
 3645              	.LFB270:
1477:../Libraries/XMCLib/src/xmc_vadc.c **** 
1478:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine the number of channels in the queue (length includes the valid channel in the B
1479:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_QueueGetLength(XMC_VADC_GROUP_t *const group_ptr)
1480:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3646              	 .loc 2 1480 0
 3647              	 .cfi_startproc
 3648              	 
 3649              	 
 3650              	 
 3651 0000 80B4     	 push {r7}
 3652              	.LCFI291:
 3653              	 .cfi_def_cfa_offset 4
 3654              	 .cfi_offset 7,-4
 3655 0002 87B0     	 sub sp,sp,#28
 3656              	.LCFI292:
 3657              	 .cfi_def_cfa_offset 32
 3658 0004 00AF     	 add r7,sp,#0
 3659              	.LCFI293:
 3660              	 .cfi_def_cfa_register 7
 3661 0006 7860     	 str r0,[r7,#4]
1481:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qsr;
1482:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        qbur0;
1483:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t        length;
1484:../Libraries/XMCLib/src/xmc_vadc.c **** 
1485:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetLength:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_pt
1486:../Libraries/XMCLib/src/xmc_vadc.c **** 
1487:../Libraries/XMCLib/src/xmc_vadc.c ****   qsr = group_ptr->QSR0;
 3662              	 .loc 2 1487 0
 3663 0008 7B68     	 ldr r3,[r7,#4]
 3664 000a D3F80831 	 ldr r3,[r3,#264]
 3665 000e 3B61     	 str r3,[r7,#16]
1488:../Libraries/XMCLib/src/xmc_vadc.c ****   qbur0 = group_ptr->QBUR0;
 3666              	 .loc 2 1488 0
 3667 0010 7B68     	 ldr r3,[r7,#4]
 3668 0012 D3F81031 	 ldr r3,[r3,#272]
 3669 0016 FB60     	 str r3,[r7,#12]
1489:../Libraries/XMCLib/src/xmc_vadc.c **** 
1490:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qsr & (uint32_t)VADC_G_QSR0_EMPTY_Msk)
 3670              	 .loc 2 1490 0
 3671 0018 3B69     	 ldr r3,[r7,#16]
 3672 001a 03F02003 	 and r3,r3,#32
 3673 001e 002B     	 cmp r3,#0
 3674 0020 02D0     	 beq .L130
1491:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1492:../Libraries/XMCLib/src/xmc_vadc.c ****     length = 0U;
 3675              	 .loc 2 1492 0
 3676 0022 0023     	 movs r3,#0
 3677 0024 7B61     	 str r3,[r7,#20]
 3678 0026 04E0     	 b .L131
 3679              	.L130:
1493:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1494:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1495:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1496:../Libraries/XMCLib/src/xmc_vadc.c ****     length = (qsr & (uint32_t)VADC_G_QSR0_FILL_Msk) + 1U;
 3680              	 .loc 2 1496 0
 3681 0028 3B69     	 ldr r3,[r7,#16]
 3682 002a 03F00F03 	 and r3,r3,#15
 3683 002e 0133     	 adds r3,r3,#1
 3684 0030 7B61     	 str r3,[r7,#20]
 3685              	.L131:
1497:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1498:../Libraries/XMCLib/src/xmc_vadc.c ****   
1499:../Libraries/XMCLib/src/xmc_vadc.c ****   if (qbur0 & (uint32_t)VADC_G_QBUR0_V_Msk )
 3686              	 .loc 2 1499 0
 3687 0032 FB68     	 ldr r3,[r7,#12]
 3688 0034 03F48073 	 and r3,r3,#256
 3689 0038 002B     	 cmp r3,#0
 3690 003a 02D0     	 beq .L132
1500:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1501:../Libraries/XMCLib/src/xmc_vadc.c ****     length++;
 3691              	 .loc 2 1501 0
 3692 003c 7B69     	 ldr r3,[r7,#20]
 3693 003e 0133     	 adds r3,r3,#1
 3694 0040 7B61     	 str r3,[r7,#20]
 3695              	.L132:
1502:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1503:../Libraries/XMCLib/src/xmc_vadc.c **** 
1504:../Libraries/XMCLib/src/xmc_vadc.c ****   return length;
 3696              	 .loc 2 1504 0
 3697 0042 7B69     	 ldr r3,[r7,#20]
1505:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3698              	 .loc 2 1505 0
 3699 0044 1846     	 mov r0,r3
 3700 0046 1C37     	 adds r7,r7,#28
 3701              	.LCFI294:
 3702              	 .cfi_def_cfa_offset 4
 3703 0048 BD46     	 mov sp,r7
 3704              	.LCFI295:
 3705              	 .cfi_def_cfa_register 13
 3706              	 
 3707 004a 5DF8047B 	 ldr r7,[sp],#4
 3708              	.LCFI296:
 3709              	 .cfi_restore 7
 3710              	 .cfi_def_cfa_offset 0
 3711 004e 7047     	 bx lr
 3712              	 .cfi_endproc
 3713              	.LFE270:
 3715              	 .section .text.XMC_VADC_GROUP_QueueAbortSequence,"ax",%progbits
 3716              	 .align 2
 3717              	 .global XMC_VADC_GROUP_QueueAbortSequence
 3718              	 .thumb
 3719              	 .thumb_func
 3721              	XMC_VADC_GROUP_QueueAbortSequence:
 3722              	.LFB271:
1506:../Libraries/XMCLib/src/xmc_vadc.c **** 
1507:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort ongoing conversion of a channel sequence */
1508:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueAbortSequence(XMC_VADC_GROUP_t *const group_ptr)
1509:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3723              	 .loc 2 1509 0
 3724              	 .cfi_startproc
 3725              	 
 3726              	 
 3727 0000 80B5     	 push {r7,lr}
 3728              	.LCFI297:
 3729              	 .cfi_def_cfa_offset 8
 3730              	 .cfi_offset 7,-8
 3731              	 .cfi_offset 14,-4
 3732 0002 84B0     	 sub sp,sp,#16
 3733              	.LCFI298:
 3734              	 .cfi_def_cfa_offset 24
 3735 0004 00AF     	 add r7,sp,#0
 3736              	.LCFI299:
 3737              	 .cfi_def_cfa_register 7
 3738 0006 7860     	 str r0,[r7,#4]
1510:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1511:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1512:../Libraries/XMCLib/src/xmc_vadc.c **** 
1513:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueAbortSequence:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1514:../Libraries/XMCLib/src/xmc_vadc.c **** 
1515:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1516:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0 = group_ptr->QCTRL0;
 3739              	 .loc 2 1516 0
 3740 0008 7B68     	 ldr r3,[r7,#4]
 3741 000a D3F80031 	 ldr r3,[r3,#256]
 3742 000e FB60     	 str r3,[r7,#12]
1517:../Libraries/XMCLib/src/xmc_vadc.c **** 
1518:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3743              	 .loc 2 1518 0
 3744 0010 7B68     	 ldr r3,[r7,#4]
 3745 0012 144A     	 ldr r2,.L135
 3746 0014 C3F80021 	 str r2,[r3,#256]
1519:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1520:../Libraries/XMCLib/src/xmc_vadc.c ****   
1521:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1522:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3747              	 .loc 2 1522 0
 3748 0018 7B68     	 ldr r3,[r7,#4]
 3749 001a D3F88430 	 ldr r3,[r3,#132]
 3750 001e 1B0E     	 lsrs r3,r3,#24
 3751 0020 03F00103 	 and r3,r3,#1
 3752 0024 002B     	 cmp r3,#0
 3753 0026 14BF     	 ite ne
 3754 0028 0123     	 movne r3,#1
 3755 002a 0023     	 moveq r3,#0
 3756 002c FB72     	 strb r3,[r7,#11]
1523:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3757              	 .loc 2 1523 0
 3758 002e 7868     	 ldr r0,[r7,#4]
 3759 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1524:../Libraries/XMCLib/src/xmc_vadc.c ****    
1525:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Flush the Entries from queue*/
1526:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueFlushEntries(group_ptr);
 3760              	 .loc 2 1526 0
 3761 0034 7868     	 ldr r0,[r7,#4]
 3762 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueFlushEntries
1527:../Libraries/XMCLib/src/xmc_vadc.c ****   
1528:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1529:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3763              	 .loc 2 1529 0
 3764 003a 7B68     	 ldr r3,[r7,#4]
 3765 003c D3F88420 	 ldr r2,[r3,#132]
 3766 0040 FB7A     	 ldrb r3,[r7,#11]
 3767 0042 1B06     	 lsls r3,r3,#24
 3768 0044 1A43     	 orrs r2,r2,r3
 3769 0046 7B68     	 ldr r3,[r7,#4]
 3770 0048 C3F88420 	 str r2,[r3,#132]
1530:../Libraries/XMCLib/src/xmc_vadc.c ****   
1531:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1532:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1533:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3771              	 .loc 2 1533 0
 3772 004c FB68     	 ldr r3,[r7,#12]
 3773 004e 43F08023 	 orr r3,r3,#-2147450880
 3774 0052 43F40003 	 orr r3,r3,#8388608
1532:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3775              	 .loc 2 1532 0
 3776 0056 7A68     	 ldr r2,[r7,#4]
 3777 0058 C2F80031 	 str r3,[r2,#256]
1534:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3778              	 .loc 2 1534 0
 3779 005c 1037     	 adds r7,r7,#16
 3780              	.LCFI300:
 3781              	 .cfi_def_cfa_offset 8
 3782 005e BD46     	 mov sp,r7
 3783              	.LCFI301:
 3784              	 .cfi_def_cfa_register 13
 3785              	 
 3786 0060 80BD     	 pop {r7,pc}
 3787              	.L136:
 3788 0062 00BF     	 .align 2
 3789              	.L135:
 3790 0064 00808080 	 .word -2139062272
 3791              	 .cfi_endproc
 3792              	.LFE271:
 3794              	 .section .text.XMC_VADC_GROUP_QueueRemoveChannel,"ax",%progbits
 3795              	 .align 2
 3796              	 .global XMC_VADC_GROUP_QueueRemoveChannel
 3797              	 .thumb
 3798              	 .thumb_func
 3800              	XMC_VADC_GROUP_QueueRemoveChannel:
 3801              	.LFB272:
1535:../Libraries/XMCLib/src/xmc_vadc.c **** 
1536:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to abort conversion of the channel queued up next */
1537:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueRemoveChannel(XMC_VADC_GROUP_t *const group_ptr)
1538:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3802              	 .loc 2 1538 0
 3803              	 .cfi_startproc
 3804              	 
 3805              	 
 3806 0000 80B5     	 push {r7,lr}
 3807              	.LCFI302:
 3808              	 .cfi_def_cfa_offset 8
 3809              	 .cfi_offset 7,-8
 3810              	 .cfi_offset 14,-4
 3811 0002 86B0     	 sub sp,sp,#24
 3812              	.LCFI303:
 3813              	 .cfi_def_cfa_offset 32
 3814 0004 00AF     	 add r7,sp,#0
 3815              	.LCFI304:
 3816              	 .cfi_def_cfa_register 7
 3817 0006 7860     	 str r0,[r7,#4]
1539:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_before_abort;
1540:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t length_after_abort;
1541:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t qctrl0;
1542:../Libraries/XMCLib/src/xmc_vadc.c ****   bool arbitration_status;
1543:../Libraries/XMCLib/src/xmc_vadc.c **** 
1544:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueRemoveChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(grou
1545:../Libraries/XMCLib/src/xmc_vadc.c ****   
1546:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable any gating if present*/
1547:../Libraries/XMCLib/src/xmc_vadc.c ****   qctrl0= group_ptr->QCTRL0;
 3818              	 .loc 2 1547 0
 3819 0008 7B68     	 ldr r3,[r7,#4]
 3820 000a D3F80031 	 ldr r3,[r3,#256]
 3821 000e 3B61     	 str r3,[r7,#16]
1548:../Libraries/XMCLib/src/xmc_vadc.c **** 
1549:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 =(0U | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
 3822              	 .loc 2 1549 0
 3823 0010 7B68     	 ldr r3,[r7,#4]
 3824 0012 204A     	 ldr r2,.L141
 3825 0014 C3F80021 	 str r2,[r3,#256]
1550:../Libraries/XMCLib/src/xmc_vadc.c ****                                   (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_M
1551:../Libraries/XMCLib/src/xmc_vadc.c ****   
1552:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Disable the Arbitration 0 in the group before abort*/
1553:../Libraries/XMCLib/src/xmc_vadc.c ****   arbitration_status = (bool)((uint32_t)(group_ptr->ARBPR >> VADC_G_ARBPR_ASEN0_Pos) & 1U);
 3826              	 .loc 2 1553 0
 3827 0018 7B68     	 ldr r3,[r7,#4]
 3828 001a D3F88430 	 ldr r3,[r3,#132]
 3829 001e 1B0E     	 lsrs r3,r3,#24
 3830 0020 03F00103 	 and r3,r3,#1
 3831 0024 002B     	 cmp r3,#0
 3832 0026 14BF     	 ite ne
 3833 0028 0123     	 movne r3,#1
 3834 002a 0023     	 moveq r3,#0
 3835 002c FB73     	 strb r3,[r7,#15]
1554:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 3836              	 .loc 2 1554 0
 3837 002e 7868     	 ldr r0,[r7,#4]
 3838 0030 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueDisableArbitrationSlot
1555:../Libraries/XMCLib/src/xmc_vadc.c **** 
1556:../Libraries/XMCLib/src/xmc_vadc.c ****   length_before_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3839              	 .loc 2 1556 0
 3840 0034 7868     	 ldr r0,[r7,#4]
 3841 0036 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3842 003a B860     	 str r0,[r7,#8]
1557:../Libraries/XMCLib/src/xmc_vadc.c **** 
1558:../Libraries/XMCLib/src/xmc_vadc.c ****   if (length_before_abort)
 3843              	 .loc 2 1558 0
 3844 003c BB68     	 ldr r3,[r7,#8]
 3845 003e 002B     	 cmp r3,#0
 3846 0040 14D0     	 beq .L138
1559:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1560:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Remove the first entry of the queue */
1561:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_CLRV_Msk;
 3847              	 .loc 2 1561 0
 3848 0042 7B68     	 ldr r3,[r7,#4]
 3849 0044 D3F80431 	 ldr r3,[r3,#260]
 3850 0048 43F48072 	 orr r2,r3,#256
 3851 004c 7B68     	 ldr r3,[r7,#4]
 3852 004e C3F80421 	 str r2,[r3,#260]
1562:../Libraries/XMCLib/src/xmc_vadc.c **** 
1563:../Libraries/XMCLib/src/xmc_vadc.c ****     length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3853              	 .loc 2 1563 0
 3854 0052 7868     	 ldr r0,[r7,#4]
 3855 0054 FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3856 0058 7861     	 str r0,[r7,#20]
1564:../Libraries/XMCLib/src/xmc_vadc.c **** 
1565:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Loop until a reduction in queue length is assessed */
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     while(length_after_abort == length_before_abort)
 3857              	 .loc 2 1566 0
 3858 005a 03E0     	 b .L139
 3859              	.L140:
1567:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1568:../Libraries/XMCLib/src/xmc_vadc.c ****       length_after_abort = XMC_VADC_GROUP_QueueGetLength(group_ptr);
 3860              	 .loc 2 1568 0
 3861 005c 7868     	 ldr r0,[r7,#4]
 3862 005e FFF7FEFF 	 bl XMC_VADC_GROUP_QueueGetLength
 3863 0062 7861     	 str r0,[r7,#20]
 3864              	.L139:
1566:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 3865              	 .loc 2 1566 0
 3866 0064 7A69     	 ldr r2,[r7,#20]
 3867 0066 BB68     	 ldr r3,[r7,#8]
 3868 0068 9A42     	 cmp r2,r3
 3869 006a F7D0     	 beq .L140
 3870              	.L138:
1569:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1570:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1571:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable the arbitration slot 0*/
1572:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ARBPR |= (uint32_t)((uint32_t)arbitration_status << VADC_G_ARBPR_ASEN0_Pos);
 3871              	 .loc 2 1572 0
 3872 006c 7B68     	 ldr r3,[r7,#4]
 3873 006e D3F88420 	 ldr r2,[r3,#132]
 3874 0072 FB7B     	 ldrb r3,[r7,#15]
 3875 0074 1B06     	 lsls r3,r3,#24
 3876 0076 1A43     	 orrs r2,r2,r3
 3877 0078 7B68     	 ldr r3,[r7,#4]
 3878 007a C3F88420 	 str r2,[r3,#132]
1573:../Libraries/XMCLib/src/xmc_vadc.c ****   
1574:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Enable any disabled gating*/
1575:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->QCTRL0 = (qctrl0 | (uint32_t)VADC_G_QCTRL0_XTWC_Msk |
1576:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3879              	 .loc 2 1576 0
 3880 007e 3B69     	 ldr r3,[r7,#16]
 3881 0080 43F08023 	 orr r3,r3,#-2147450880
 3882 0084 43F40003 	 orr r3,r3,#8388608
1575:../Libraries/XMCLib/src/xmc_vadc.c ****                                    (uint32_t)VADC_G_QCTRL0_GTWC_Msk | (uint32_t)VADC_G_QCTRL0_TMWC_
 3883              	 .loc 2 1575 0
 3884 0088 7A68     	 ldr r2,[r7,#4]
 3885 008a C2F80031 	 str r3,[r2,#256]
1577:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3886              	 .loc 2 1577 0
 3887 008e 1837     	 adds r7,r7,#24
 3888              	.LCFI305:
 3889              	 .cfi_def_cfa_offset 8
 3890 0090 BD46     	 mov sp,r7
 3891              	.LCFI306:
 3892              	 .cfi_def_cfa_register 13
 3893              	 
 3894 0092 80BD     	 pop {r7,pc}
 3895              	.L142:
 3896              	 .align 2
 3897              	.L141:
 3898 0094 00808080 	 .word -2139062272
 3899              	 .cfi_endproc
 3900              	.LFE272:
 3902              	 .section .text.XMC_VADC_GROUP_QueueGetNextChannel,"ax",%progbits
 3903              	 .align 2
 3904              	 .global XMC_VADC_GROUP_QueueGetNextChannel
 3905              	 .thumb
 3906              	 .thumb_func
 3908              	XMC_VADC_GROUP_QueueGetNextChannel:
 3909              	.LFB273:
1578:../Libraries/XMCLib/src/xmc_vadc.c **** 
1579:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get details of channel meant to be converted right after the ongoing conversion */
1580:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetNextChannel(XMC_VADC_GROUP_t *const group_ptr)
1581:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3910              	 .loc 2 1581 0
 3911              	 .cfi_startproc
 3912              	 
 3913              	 
 3914              	 
 3915 0000 80B4     	 push {r7}
 3916              	.LCFI307:
 3917              	 .cfi_def_cfa_offset 4
 3918              	 .cfi_offset 7,-4
 3919 0002 85B0     	 sub sp,sp,#20
 3920              	.LCFI308:
 3921              	 .cfi_def_cfa_offset 24
 3922 0004 00AF     	 add r7,sp,#0
 3923              	.LCFI309:
 3924              	 .cfi_def_cfa_register 7
 3925 0006 7860     	 str r0,[r7,#4]
1582:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1583:../Libraries/XMCLib/src/xmc_vadc.c **** 
1584:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetNextChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1585:../Libraries/XMCLib/src/xmc_vadc.c ****   
1586:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1587:../Libraries/XMCLib/src/xmc_vadc.c ****    * Check if there is something in the backup stage. If not, read queue-0
1588:../Libraries/XMCLib/src/xmc_vadc.c ****    * entry.
1589:../Libraries/XMCLib/src/xmc_vadc.c ****    */
1590:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 3926              	 .loc 2 1590 0
 3927 0008 7B68     	 ldr r3,[r7,#4]
 3928 000a D3F81031 	 ldr r3,[r3,#272]
 3929 000e 03F48073 	 and r3,r3,#256
 3930 0012 002B     	 cmp r3,#0
 3931 0014 06D0     	 beq .L144
1591:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1592:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 3932              	 .loc 2 1592 0
 3933 0016 7B68     	 ldr r3,[r7,#4]
 3934 0018 D3F81031 	 ldr r3,[r3,#272]
 3935 001c 03F01F03 	 and r3,r3,#31
 3936 0020 FB60     	 str r3,[r7,#12]
 3937 0022 10E0     	 b .L145
 3938              	.L144:
1593:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1594:../Libraries/XMCLib/src/xmc_vadc.c ****   else if ( (group_ptr->Q0R0) & (uint32_t)VADC_G_Q0R0_V_Msk)
 3939              	 .loc 2 1594 0
 3940 0024 7B68     	 ldr r3,[r7,#4]
 3941 0026 D3F80C31 	 ldr r3,[r3,#268]
 3942 002a 03F48073 	 and r3,r3,#256
 3943 002e 002B     	 cmp r3,#0
 3944 0030 06D0     	 beq .L146
1595:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1596:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->Q0R0 & (uint32_t)VADC_G_Q0R0_REQCHNR_Msk);
 3945              	 .loc 2 1596 0
 3946 0032 7B68     	 ldr r3,[r7,#4]
 3947 0034 D3F80C31 	 ldr r3,[r3,#268]
 3948 0038 03F01F03 	 and r3,r3,#31
 3949 003c FB60     	 str r3,[r7,#12]
 3950 003e 02E0     	 b .L145
 3951              	.L146:
1597:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1598:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1599:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1600:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Nothing is pending */
1601:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 3952              	 .loc 2 1601 0
 3953 0040 4FF0FF33 	 mov r3,#-1
 3954 0044 FB60     	 str r3,[r7,#12]
 3955              	.L145:
1602:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1603:../Libraries/XMCLib/src/xmc_vadc.c **** 
1604:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 3956              	 .loc 2 1604 0
 3957 0046 FB68     	 ldr r3,[r7,#12]
1605:../Libraries/XMCLib/src/xmc_vadc.c **** }
 3958              	 .loc 2 1605 0
 3959 0048 1846     	 mov r0,r3
 3960 004a 1437     	 adds r7,r7,#20
 3961              	.LCFI310:
 3962              	 .cfi_def_cfa_offset 4
 3963 004c BD46     	 mov sp,r7
 3964              	.LCFI311:
 3965              	 .cfi_def_cfa_register 13
 3966              	 
 3967 004e 5DF8047B 	 ldr r7,[sp],#4
 3968              	.LCFI312:
 3969              	 .cfi_restore 7
 3970              	 .cfi_def_cfa_offset 0
 3971 0052 7047     	 bx lr
 3972              	 .cfi_endproc
 3973              	.LFE273:
 3975              	 .section .text.XMC_VADC_GROUP_QueueGetInterruptedChannel,"ax",%progbits
 3976              	 .align 2
 3977              	 .global XMC_VADC_GROUP_QueueGetInterruptedChannel
 3978              	 .thumb
 3979              	 .thumb_func
 3981              	XMC_VADC_GROUP_QueueGetInterruptedChannel:
 3982              	.LFB274:
1606:../Libraries/XMCLib/src/xmc_vadc.c **** 
1607:../Libraries/XMCLib/src/xmc_vadc.c **** /* Get the channel number of the channel whose conversion had been interrupted */
1608:../Libraries/XMCLib/src/xmc_vadc.c **** int32_t XMC_VADC_GROUP_QueueGetInterruptedChannel(XMC_VADC_GROUP_t *const group_ptr)
1609:../Libraries/XMCLib/src/xmc_vadc.c **** {
 3983              	 .loc 2 1609 0
 3984              	 .cfi_startproc
 3985              	 
 3986              	 
 3987              	 
 3988 0000 80B4     	 push {r7}
 3989              	.LCFI313:
 3990              	 .cfi_def_cfa_offset 4
 3991              	 .cfi_offset 7,-4
 3992 0002 85B0     	 sub sp,sp,#20
 3993              	.LCFI314:
 3994              	 .cfi_def_cfa_offset 24
 3995 0004 00AF     	 add r7,sp,#0
 3996              	.LCFI315:
 3997              	 .cfi_def_cfa_register 7
 3998 0006 7860     	 str r0,[r7,#4]
1610:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t ch_num;
1611:../Libraries/XMCLib/src/xmc_vadc.c **** 
1612:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueGetInterruptedChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1613:../Libraries/XMCLib/src/xmc_vadc.c ****   
1614:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((group_ptr->QBUR0) & (uint32_t)VADC_G_QBUR0_V_Msk)
 3999              	 .loc 2 1614 0
 4000 0008 7B68     	 ldr r3,[r7,#4]
 4001 000a D3F81031 	 ldr r3,[r3,#272]
 4002 000e 03F48073 	 and r3,r3,#256
 4003 0012 002B     	 cmp r3,#0
 4004 0014 06D0     	 beq .L149
1615:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1616:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = (int32_t)(group_ptr->QBUR0 & (uint32_t)VADC_G_QBUR0_REQCHNR_Msk);
 4005              	 .loc 2 1616 0
 4006 0016 7B68     	 ldr r3,[r7,#4]
 4007 0018 D3F81031 	 ldr r3,[r3,#272]
 4008 001c 03F01F03 	 and r3,r3,#31
 4009 0020 FB60     	 str r3,[r7,#12]
 4010 0022 02E0     	 b .L150
 4011              	.L149:
1617:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1618:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1619:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1620:../Libraries/XMCLib/src/xmc_vadc.c ****     /* No such channel */
1621:../Libraries/XMCLib/src/xmc_vadc.c ****     ch_num = -1;
 4012              	 .loc 2 1621 0
 4013 0024 4FF0FF33 	 mov r3,#-1
 4014 0028 FB60     	 str r3,[r7,#12]
 4015              	.L150:
1622:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1623:../Libraries/XMCLib/src/xmc_vadc.c **** 
1624:../Libraries/XMCLib/src/xmc_vadc.c ****   return ch_num;
 4016              	 .loc 2 1624 0
 4017 002a FB68     	 ldr r3,[r7,#12]
1625:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4018              	 .loc 2 1625 0
 4019 002c 1846     	 mov r0,r3
 4020 002e 1437     	 adds r7,r7,#20
 4021              	.LCFI316:
 4022              	 .cfi_def_cfa_offset 4
 4023 0030 BD46     	 mov sp,r7
 4024              	.LCFI317:
 4025              	 .cfi_def_cfa_register 13
 4026              	 
 4027 0032 5DF8047B 	 ldr r7,[sp],#4
 4028              	.LCFI318:
 4029              	 .cfi_restore 7
 4030              	 .cfi_def_cfa_offset 0
 4031 0036 7047     	 bx lr
 4032              	 .cfi_endproc
 4033              	.LFE274:
 4035              	 .section .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode,"ax",%progbits
 4036              	 .align 2
 4037              	 .global XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
 4038              	 .thumb
 4039              	 .thumb_func
 4041              	XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:
 4042              	.LFB275:
1626:../Libraries/XMCLib/src/xmc_vadc.c **** 
1627:../Libraries/XMCLib/src/xmc_vadc.c **** /* Select a Service Request line for the request source event */
1628:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_V
1629:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4043              	 .loc 2 1629 0
 4044              	 .cfi_startproc
 4045              	 
 4046              	 
 4047              	 
 4048 0000 80B4     	 push {r7}
 4049              	.LCFI319:
 4050              	 .cfi_def_cfa_offset 4
 4051              	 .cfi_offset 7,-4
 4052 0002 85B0     	 sub sp,sp,#20
 4053              	.LCFI320:
 4054              	 .cfi_def_cfa_offset 24
 4055 0004 00AF     	 add r7,sp,#0
 4056              	.LCFI321:
 4057              	 .cfi_def_cfa_register 7
 4058 0006 7860     	 str r0,[r7,#4]
 4059 0008 0B46     	 mov r3,r1
 4060 000a FB70     	 strb r3,[r7,#3]
1630:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t sevnp;
1631:../Libraries/XMCLib/src/xmc_vadc.c **** 
1632:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_
1633:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC
1634:../Libraries/XMCLib/src/xmc_vadc.c **** 
1635:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp = group_ptr->SEVNP;
 4061              	 .loc 2 1635 0
 4062 000c 7B68     	 ldr r3,[r7,#4]
 4063 000e D3F8C031 	 ldr r3,[r3,#448]
 4064 0012 FB60     	 str r3,[r7,#12]
1636:../Libraries/XMCLib/src/xmc_vadc.c **** 
1637:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 4065              	 .loc 2 1637 0
 4066 0014 FB68     	 ldr r3,[r7,#12]
 4067 0016 23F00F03 	 bic r3,r3,#15
 4068 001a FB60     	 str r3,[r7,#12]
1638:../Libraries/XMCLib/src/xmc_vadc.c ****   sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 4069              	 .loc 2 1638 0
 4070 001c FB78     	 ldrb r3,[r7,#3]
 4071 001e FA68     	 ldr r2,[r7,#12]
 4072 0020 1343     	 orrs r3,r3,r2
 4073 0022 FB60     	 str r3,[r7,#12]
1639:../Libraries/XMCLib/src/xmc_vadc.c **** 
1640:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->SEVNP = sevnp;
 4074              	 .loc 2 1640 0
 4075 0024 7B68     	 ldr r3,[r7,#4]
 4076 0026 FA68     	 ldr r2,[r7,#12]
 4077 0028 C3F8C021 	 str r2,[r3,#448]
1641:../Libraries/XMCLib/src/xmc_vadc.c **** 
1642:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4078              	 .loc 2 1642 0
 4079 002c 1437     	 adds r7,r7,#20
 4080              	.LCFI322:
 4081              	 .cfi_def_cfa_offset 4
 4082 002e BD46     	 mov sp,r7
 4083              	.LCFI323:
 4084              	 .cfi_def_cfa_register 13
 4085              	 
 4086 0030 5DF8047B 	 ldr r7,[sp],#4
 4087              	.LCFI324:
 4088              	 .cfi_restore 7
 4089              	 .cfi_def_cfa_offset 0
 4090 0034 7047     	 bx lr
 4091              	 .cfi_endproc
 4092              	.LFE275:
 4094 0036 00BF     	 .section .text.XMC_VADC_GROUP_ChannelInit,"ax",%progbits
 4095              	 .align 2
 4096              	 .global XMC_VADC_GROUP_ChannelInit
 4097              	 .thumb
 4098              	 .thumb_func
 4100              	XMC_VADC_GROUP_ChannelInit:
 4101              	.LFB276:
1643:../Libraries/XMCLib/src/xmc_vadc.c **** #endif /* XMC_VADC_QUEUE_AVAILABLE*/
1644:../Libraries/XMCLib/src/xmc_vadc.c **** 
1645:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_GROUP_AVAILABLE ==1U)
1646:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to initialize a channel unit */
1647:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
1648:../Libraries/XMCLib/src/xmc_vadc.c ****                                         const XMC_VADC_CHANNEL_CONFIG_t *config)
1649:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4102              	 .loc 2 1649 0
 4103              	 .cfi_startproc
 4104              	 
 4105              	 
 4106              	 
 4107 0000 80B4     	 push {r7}
 4108              	.LCFI325:
 4109              	 .cfi_def_cfa_offset 4
 4110              	 .cfi_offset 7,-4
 4111 0002 89B0     	 sub sp,sp,#36
 4112              	.LCFI326:
 4113              	 .cfi_def_cfa_offset 40
 4114 0004 00AF     	 add r7,sp,#0
 4115              	.LCFI327:
 4116              	 .cfi_def_cfa_register 7
 4117 0006 F860     	 str r0,[r7,#12]
 4118 0008 B960     	 str r1,[r7,#8]
 4119 000a 7A60     	 str r2,[r7,#4]
1650:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t prio;
1651:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ch_assign;
1652:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1653:../Libraries/XMCLib/src/xmc_vadc.c **** 
1654:../Libraries/XMCLib/src/xmc_vadc.c **** 
1655:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
1656:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_P
1657:../Libraries/XMCLib/src/xmc_vadc.c ****   
1658:../Libraries/XMCLib/src/xmc_vadc.c ****   prio  = (uint32_t)config->channel_priority;
 4120              	 .loc 2 1658 0
 4121 000c 7B68     	 ldr r3,[r7,#4]
 4122 000e 1B7A     	 ldrb r3,[r3,#8]
 4123 0010 BB61     	 str r3,[r7,#24]
1659:../Libraries/XMCLib/src/xmc_vadc.c **** 
1660:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Priority channel */
1661:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign  = group_ptr->CHASS;
 4124              	 .loc 2 1661 0
 4125 0012 FB68     	 ldr r3,[r7,#12]
 4126 0014 D3F88830 	 ldr r3,[r3,#136]
 4127 0018 7B61     	 str r3,[r7,#20]
1662:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 4128              	 .loc 2 1662 0
 4129 001a BB68     	 ldr r3,[r7,#8]
 4130 001c 0122     	 movs r2,#1
 4131 001e 02FA03F3 	 lsl r3,r2,r3
 4132 0022 DB43     	 mvns r3,r3
 4133 0024 7A69     	 ldr r2,[r7,#20]
 4134 0026 1340     	 ands r3,r3,r2
 4135 0028 7B61     	 str r3,[r7,#20]
1663:../Libraries/XMCLib/src/xmc_vadc.c ****   ch_assign |= (uint32_t)(prio << ch_num);
 4136              	 .loc 2 1663 0
 4137 002a BB68     	 ldr r3,[r7,#8]
 4138 002c BA69     	 ldr r2,[r7,#24]
 4139 002e 02FA03F3 	 lsl r3,r2,r3
 4140 0032 7A69     	 ldr r2,[r7,#20]
 4141 0034 1343     	 orrs r3,r3,r2
 4142 0036 7B61     	 str r3,[r7,#20]
1664:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHASS = ch_assign;
 4143              	 .loc 2 1664 0
 4144 0038 FB68     	 ldr r3,[r7,#12]
 4145 003a 7A69     	 ldr r2,[r7,#20]
 4146 003c C3F88820 	 str r2,[r3,#136]
1665:../Libraries/XMCLib/src/xmc_vadc.c **** 
1666:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Alias channel */
1667:../Libraries/XMCLib/src/xmc_vadc.c ****   if (config->alias_channel >= (int32_t)0)
 4147              	 .loc 2 1667 0
 4148 0040 7B68     	 ldr r3,[r7,#4]
 4149 0042 5B7A     	 ldrb r3,[r3,#9]
 4150 0044 5BB2     	 sxtb r3,r3
 4151 0046 002B     	 cmp r3,#0
 4152 0048 29DB     	 blt .L154
1668:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1669:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t)0;
 4153              	 .loc 2 1669 0
 4154 004a 0023     	 movs r3,#0
 4155 004c FB61     	 str r3,[r7,#28]
1670:../Libraries/XMCLib/src/xmc_vadc.c ****     if ((uint32_t)1 == ch_num)
 4156              	 .loc 2 1670 0
 4157 004e BB68     	 ldr r3,[r7,#8]
 4158 0050 012B     	 cmp r3,#1
 4159 0052 0AD1     	 bne .L155
1671:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1672:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS1_Pos;
 4160              	 .loc 2 1672 0
 4161 0054 0823     	 movs r3,#8
 4162 0056 FB61     	 str r3,[r7,#28]
1673:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 4163              	 .loc 2 1673 0
 4164 0058 FB68     	 ldr r3,[r7,#12]
 4165 005a D3F8B030 	 ldr r3,[r3,#176]
 4166 005e 23F4F852 	 bic r2,r3,#7936
 4167 0062 FB68     	 ldr r3,[r7,#12]
 4168 0064 C3F8B020 	 str r2,[r3,#176]
 4169 0068 0CE0     	 b .L156
 4170              	.L155:
1674:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1675:../Libraries/XMCLib/src/xmc_vadc.c ****     else if ((uint32_t)0 == ch_num)
 4171              	 .loc 2 1675 0
 4172 006a BB68     	 ldr r3,[r7,#8]
 4173 006c 002B     	 cmp r3,#0
 4174 006e 09D1     	 bne .L156
1676:../Libraries/XMCLib/src/xmc_vadc.c ****     {
1677:../Libraries/XMCLib/src/xmc_vadc.c ****       mask = VADC_G_ALIAS_ALIAS0_Pos;
 4175              	 .loc 2 1677 0
 4176 0070 0023     	 movs r3,#0
 4177 0072 FB61     	 str r3,[r7,#28]
1678:../Libraries/XMCLib/src/xmc_vadc.c ****       group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 4178              	 .loc 2 1678 0
 4179 0074 FB68     	 ldr r3,[r7,#12]
 4180 0076 D3F8B030 	 ldr r3,[r3,#176]
 4181 007a 23F01F02 	 bic r2,r3,#31
 4182 007e FB68     	 ldr r3,[r7,#12]
 4183 0080 C3F8B020 	 str r2,[r3,#176]
 4184              	.L156:
1679:../Libraries/XMCLib/src/xmc_vadc.c ****     }
1680:../Libraries/XMCLib/src/xmc_vadc.c **** 
1681:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 4185              	 .loc 2 1681 0
 4186 0084 FB68     	 ldr r3,[r7,#12]
 4187 0086 D3F8B030 	 ldr r3,[r3,#176]
 4188 008a 7A68     	 ldr r2,[r7,#4]
 4189 008c 527A     	 ldrb r2,[r2,#9]
 4190 008e 51B2     	 sxtb r1,r2
 4191 0090 FA69     	 ldr r2,[r7,#28]
 4192 0092 01FA02F2 	 lsl r2,r1,r2
 4193 0096 1A43     	 orrs r2,r2,r3
 4194 0098 FB68     	 ldr r3,[r7,#12]
 4195 009a C3F8B020 	 str r2,[r3,#176]
 4196              	.L154:
1682:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1683:../Libraries/XMCLib/src/xmc_vadc.c **** 
1684:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFL |= config->bfl;
 4197              	 .loc 2 1684 0
 4198 009e FB68     	 ldr r3,[r7,#12]
 4199 00a0 D3F8C820 	 ldr r2,[r3,#200]
 4200 00a4 7B68     	 ldr r3,[r7,#4]
 4201 00a6 5B68     	 ldr r3,[r3,#4]
 4202 00a8 1A43     	 orrs r2,r2,r3
 4203 00aa FB68     	 ldr r3,[r7,#12]
 4204 00ac C3F8C820 	 str r2,[r3,#200]
1685:../Libraries/XMCLib/src/xmc_vadc.c **** 
1686:../Libraries/XMCLib/src/xmc_vadc.c **** #if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
1687:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->BFLC |= config->bflc;
1688:../Libraries/XMCLib/src/xmc_vadc.c **** #endif
1689:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Program the CHCTR register */
1690:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = config->chctr;
 4205              	 .loc 2 1690 0
 4206 00b0 7B68     	 ldr r3,[r7,#4]
 4207 00b2 1968     	 ldr r1,[r3]
 4208 00b4 FB68     	 ldr r3,[r7,#12]
 4209 00b6 BA68     	 ldr r2,[r7,#8]
 4210 00b8 8032     	 adds r2,r2,#128
 4211 00ba 43F82210 	 str r1,[r3,r2,lsl#2]
1691:../Libraries/XMCLib/src/xmc_vadc.c **** 
1692:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4212              	 .loc 2 1692 0
 4213 00be 2437     	 adds r7,r7,#36
 4214              	.LCFI328:
 4215              	 .cfi_def_cfa_offset 4
 4216 00c0 BD46     	 mov sp,r7
 4217              	.LCFI329:
 4218              	 .cfi_def_cfa_register 13
 4219              	 
 4220 00c2 5DF8047B 	 ldr r7,[sp],#4
 4221              	.LCFI330:
 4222              	 .cfi_restore 7
 4223              	 .cfi_def_cfa_offset 0
 4224 00c6 7047     	 bx lr
 4225              	 .cfi_endproc
 4226              	.LFE276:
 4228              	 .section .text.XMC_VADC_GROUP_SetChannelAlias,"ax",%progbits
 4229              	 .align 2
 4230              	 .global XMC_VADC_GROUP_SetChannelAlias
 4231              	 .thumb
 4232              	 .thumb_func
 4234              	XMC_VADC_GROUP_SetChannelAlias:
 4235              	.LFB277:
1693:../Libraries/XMCLib/src/xmc_vadc.c **** 
1694:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to set an alias channel for channels numbered 2 through 7 */
1695:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetChannelAlias(XMC_VADC_GROUP_t *const group_ptr,
1696:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t src_ch_num,
1697:../Libraries/XMCLib/src/xmc_vadc.c ****                                     const uint32_t alias_ch_num)
1698:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4236              	 .loc 2 1698 0
 4237              	 .cfi_startproc
 4238              	 
 4239              	 
 4240              	 
 4241 0000 80B4     	 push {r7}
 4242              	.LCFI331:
 4243              	 .cfi_def_cfa_offset 4
 4244              	 .cfi_offset 7,-4
 4245 0002 89B0     	 sub sp,sp,#36
 4246              	.LCFI332:
 4247              	 .cfi_def_cfa_offset 40
 4248 0004 00AF     	 add r7,sp,#0
 4249              	.LCFI333:
 4250              	 .cfi_def_cfa_register 7
 4251 0006 F860     	 str r0,[r7,#12]
 4252 0008 B960     	 str r1,[r7,#8]
 4253 000a 7A60     	 str r2,[r7,#4]
1699:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t alias;
1700:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t mask;
1701:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t pos;
1702:../Libraries/XMCLib/src/xmc_vadc.c **** 
1703:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1704:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Alias Channel", ((alias_ch_num == 0)|| (alias_ch
1705:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetChannelAlias:Wrong Aliased Channel", ((src_ch_num < 8U)))
1706:../Libraries/XMCLib/src/xmc_vadc.c **** 
1707:../Libraries/XMCLib/src/xmc_vadc.c ****   alias = group_ptr->ALIAS;
 4254              	 .loc 2 1707 0
 4255 000c FB68     	 ldr r3,[r7,#12]
 4256 000e D3F8B030 	 ldr r3,[r3,#176]
 4257 0012 7B61     	 str r3,[r7,#20]
1708:../Libraries/XMCLib/src/xmc_vadc.c **** 
1709:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == alias_ch_num)
 4258              	 .loc 2 1709 0
 4259 0014 7B68     	 ldr r3,[r7,#4]
 4260 0016 002B     	 cmp r3,#0
 4261 0018 04D1     	 bne .L158
1710:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1711:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS0_Msk;
 4262              	 .loc 2 1711 0
 4263 001a 1F23     	 movs r3,#31
 4264 001c FB61     	 str r3,[r7,#28]
1712:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS0_Pos;
 4265              	 .loc 2 1712 0
 4266 001e 0023     	 movs r3,#0
 4267 0020 BB61     	 str r3,[r7,#24]
 4268 0022 04E0     	 b .L159
 4269              	.L158:
1713:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1714:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1715:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1716:../Libraries/XMCLib/src/xmc_vadc.c ****     mask = (uint32_t) VADC_G_ALIAS_ALIAS1_Msk;
 4270              	 .loc 2 1716 0
 4271 0024 4FF4F853 	 mov r3,#7936
 4272 0028 FB61     	 str r3,[r7,#28]
1717:../Libraries/XMCLib/src/xmc_vadc.c ****     pos  = (uint32_t) VADC_G_ALIAS_ALIAS1_Pos;
 4273              	 .loc 2 1717 0
 4274 002a 0823     	 movs r3,#8
 4275 002c BB61     	 str r3,[r7,#24]
 4276              	.L159:
1718:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1719:../Libraries/XMCLib/src/xmc_vadc.c ****   alias &= ~mask;
 4277              	 .loc 2 1719 0
 4278 002e FB69     	 ldr r3,[r7,#28]
 4279 0030 DB43     	 mvns r3,r3
 4280 0032 7A69     	 ldr r2,[r7,#20]
 4281 0034 1340     	 ands r3,r3,r2
 4282 0036 7B61     	 str r3,[r7,#20]
1720:../Libraries/XMCLib/src/xmc_vadc.c ****   alias |= (uint32_t)(src_ch_num << pos);
 4283              	 .loc 2 1720 0
 4284 0038 BB69     	 ldr r3,[r7,#24]
 4285 003a BA68     	 ldr r2,[r7,#8]
 4286 003c 02FA03F3 	 lsl r3,r2,r3
 4287 0040 7A69     	 ldr r2,[r7,#20]
 4288 0042 1343     	 orrs r3,r3,r2
 4289 0044 7B61     	 str r3,[r7,#20]
1721:../Libraries/XMCLib/src/xmc_vadc.c **** 
1722:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->ALIAS = alias;
 4290              	 .loc 2 1722 0
 4291 0046 FB68     	 ldr r3,[r7,#12]
 4292 0048 7A69     	 ldr r2,[r7,#20]
 4293 004a C3F8B020 	 str r2,[r3,#176]
1723:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4294              	 .loc 2 1723 0
 4295 004e 2437     	 adds r7,r7,#36
 4296              	.LCFI334:
 4297              	 .cfi_def_cfa_offset 4
 4298 0050 BD46     	 mov sp,r7
 4299              	.LCFI335:
 4300              	 .cfi_def_cfa_register 13
 4301              	 
 4302 0052 5DF8047B 	 ldr r7,[sp],#4
 4303              	.LCFI336:
 4304              	 .cfi_restore 7
 4305              	 .cfi_def_cfa_offset 0
 4306 0056 7047     	 bx lr
 4307              	 .cfi_endproc
 4308              	.LFE277:
 4310              	 .section .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds,"ax",%progbits
 4311              	 .align 2
 4312              	 .global XMC_VADC_GROUP_ChannelIsResultOutOfBounds
 4313              	 .thumb
 4314              	 .thumb_func
 4316              	XMC_VADC_GROUP_ChannelIsResultOutOfBounds:
 4317              	.LFB278:
1724:../Libraries/XMCLib/src/xmc_vadc.c **** 
1725:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine whether input to a channel has violated boundary conditions */
1726:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_ChannelIsResultOutOfBounds(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch
1727:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4318              	 .loc 2 1727 0
 4319              	 .cfi_startproc
 4320              	 
 4321              	 
 4322              	 
 4323 0000 80B4     	 push {r7}
 4324              	.LCFI337:
 4325              	 .cfi_def_cfa_offset 4
 4326              	 .cfi_offset 7,-4
 4327 0002 87B0     	 sub sp,sp,#28
 4328              	.LCFI338:
 4329              	 .cfi_def_cfa_offset 32
 4330 0004 00AF     	 add r7,sp,#0
 4331              	.LCFI339:
 4332              	 .cfi_def_cfa_register 7
 4333 0006 7860     	 str r0,[r7,#4]
 4334 0008 3960     	 str r1,[r7]
1728:../Libraries/XMCLib/src/xmc_vadc.c ****   bool retval;
1729:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    chctr;
1730:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t    ceflag;
1731:../Libraries/XMCLib/src/xmc_vadc.c **** 
1732:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_
1733:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelIsResultOutOfBounds:Wrong Channel Number",
1734:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1735:../Libraries/XMCLib/src/xmc_vadc.c **** 
1736:../Libraries/XMCLib/src/xmc_vadc.c ****   retval = (bool)false;
 4335              	 .loc 2 1736 0
 4336 000a 0023     	 movs r3,#0
 4337 000c FB75     	 strb r3,[r7,#23]
1737:../Libraries/XMCLib/src/xmc_vadc.c ****   /*
1738:../Libraries/XMCLib/src/xmc_vadc.c ****     Check if the Channel event is configured to be generated in the event of
1739:../Libraries/XMCLib/src/xmc_vadc.c ****     boundary violation and if affirmative, check if the channel event is set.
1740:../Libraries/XMCLib/src/xmc_vadc.c ****   */
1741:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CHEVMODE for requested channel */
1742:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4338              	 .loc 2 1742 0
 4339 000e 7B68     	 ldr r3,[r7,#4]
 4340 0010 3A68     	 ldr r2,[r7]
 4341 0012 8032     	 adds r2,r2,#128
 4342 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4343 0018 3B61     	 str r3,[r7,#16]
1743:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = (uint32_t)(chctr >> (uint32_t)VADC_G_CHCTR_CHEVMODE_Pos)& (uint32_t)0x3;
 4344              	 .loc 2 1743 0
 4345 001a 3B69     	 ldr r3,[r7,#16]
 4346 001c 1B0A     	 lsrs r3,r3,#8
 4347 001e 03F00303 	 and r3,r3,#3
 4348 0022 3B61     	 str r3,[r7,#16]
1744:../Libraries/XMCLib/src/xmc_vadc.c **** 
1745:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract CEFLAG for the requested channel */
1746:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = group_ptr->CEFLAG;
 4349              	 .loc 2 1746 0
 4350 0024 7B68     	 ldr r3,[r7,#4]
 4351 0026 D3F88031 	 ldr r3,[r3,#384]
 4352 002a FB60     	 str r3,[r7,#12]
1747:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag = ceflag & ((uint32_t)((uint32_t)1 << ch_num) );
 4353              	 .loc 2 1747 0
 4354 002c 3B68     	 ldr r3,[r7]
 4355 002e 0122     	 movs r2,#1
 4356 0030 02FA03F3 	 lsl r3,r2,r3
 4357 0034 FA68     	 ldr r2,[r7,#12]
 4358 0036 1340     	 ands r3,r3,r2
 4359 0038 FB60     	 str r3,[r7,#12]
1748:../Libraries/XMCLib/src/xmc_vadc.c **** 
1749:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Check what was the channel event generation criteria */
1750:../Libraries/XMCLib/src/xmc_vadc.c ****   if ( (( (uint32_t)XMC_VADC_CHANNEL_EVGEN_INBOUND == chctr) \
 4360              	 .loc 2 1750 0
 4361 003a 3B69     	 ldr r3,[r7,#16]
 4362 003c 012B     	 cmp r3,#1
 4363 003e 02D0     	 beq .L161
1751:../Libraries/XMCLib/src/xmc_vadc.c ****       || ((uint32_t) XMC_VADC_CHANNEL_EVGEN_OUTBOUND == chctr)) && (ceflag) )
 4364              	 .loc 2 1751 0
 4365 0040 3B69     	 ldr r3,[r7,#16]
 4366 0042 022B     	 cmp r3,#2
 4367 0044 04D1     	 bne .L162
 4368              	.L161:
 4369              	 .loc 2 1751 0 is_stmt 0 discriminator 1
 4370 0046 FB68     	 ldr r3,[r7,#12]
 4371 0048 002B     	 cmp r3,#0
 4372 004a 01D0     	 beq .L162
1752:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1753:../Libraries/XMCLib/src/xmc_vadc.c ****     retval = (bool)true;
 4373              	 .loc 2 1753 0 is_stmt 1
 4374 004c 0123     	 movs r3,#1
 4375 004e FB75     	 strb r3,[r7,#23]
 4376              	.L162:
1754:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1755:../Libraries/XMCLib/src/xmc_vadc.c **** 
1756:../Libraries/XMCLib/src/xmc_vadc.c ****   return retval;
 4377              	 .loc 2 1756 0
 4378 0050 FB7D     	 ldrb r3,[r7,#23]
1757:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4379              	 .loc 2 1757 0
 4380 0052 1846     	 mov r0,r3
 4381 0054 1C37     	 adds r7,r7,#28
 4382              	.LCFI340:
 4383              	 .cfi_def_cfa_offset 4
 4384 0056 BD46     	 mov sp,r7
 4385              	.LCFI341:
 4386              	 .cfi_def_cfa_register 13
 4387              	 
 4388 0058 5DF8047B 	 ldr r7,[sp],#4
 4389              	.LCFI342:
 4390              	 .cfi_restore 7
 4391              	 .cfi_def_cfa_offset 0
 4392 005c 7047     	 bx lr
 4393              	 .cfi_endproc
 4394              	.LFE278:
 4396 005e 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetInputReference,"ax",%progbits
 4397              	 .align 2
 4398              	 .global XMC_VADC_GROUP_ChannelSetInputReference
 4399              	 .thumb
 4400              	 .thumb_func
 4402              	XMC_VADC_GROUP_ChannelSetInputReference:
 4403              	.LFB279:
1758:../Libraries/XMCLib/src/xmc_vadc.c **** 
1759:../Libraries/XMCLib/src/xmc_vadc.c **** /* Set a reference voltage for conversion */
1760:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetInputReference(XMC_VADC_GROUP_t *const group_ptr,
1761:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1762:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const XMC_VADC_CHANNEL_REF_t ref)
1763:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4404              	 .loc 2 1763 0
 4405              	 .cfi_startproc
 4406              	 
 4407              	 
 4408              	 
 4409 0000 80B4     	 push {r7}
 4410              	.LCFI343:
 4411              	 .cfi_def_cfa_offset 4
 4412              	 .cfi_offset 7,-4
 4413 0002 87B0     	 sub sp,sp,#28
 4414              	.LCFI344:
 4415              	 .cfi_def_cfa_offset 32
 4416 0004 00AF     	 add r7,sp,#0
 4417              	.LCFI345:
 4418              	 .cfi_def_cfa_register 7
 4419 0006 F860     	 str r0,[r7,#12]
 4420 0008 B960     	 str r1,[r7,#8]
 4421 000a 1346     	 mov r3,r2
 4422 000c FB71     	 strb r3,[r7,#7]
1764:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1765:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1766:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Channel Number", ((ch_num) < XMC_VADC_N
1767:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetInputReference:Wrong Voltage Reference", ((ref)<= XMC_VADC_C
1768:../Libraries/XMCLib/src/xmc_vadc.c **** 
1769:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4423              	 .loc 2 1769 0
 4424 000e FB68     	 ldr r3,[r7,#12]
 4425 0010 BA68     	 ldr r2,[r7,#8]
 4426 0012 8032     	 adds r2,r2,#128
 4427 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4428 0018 7B61     	 str r3,[r7,#20]
1770:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_REFSEL_Msk);
 4429              	 .loc 2 1770 0
 4430 001a 7B69     	 ldr r3,[r7,#20]
 4431 001c 23F40063 	 bic r3,r3,#2048
 4432 0020 7B61     	 str r3,[r7,#20]
1771:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)ref <<  VADC_G_CHCTR_REFSEL_Pos);
 4433              	 .loc 2 1771 0
 4434 0022 FB79     	 ldrb r3,[r7,#7]
 4435 0024 DB02     	 lsls r3,r3,#11
 4436 0026 7A69     	 ldr r2,[r7,#20]
 4437 0028 1343     	 orrs r3,r3,r2
 4438 002a 7B61     	 str r3,[r7,#20]
1772:../Libraries/XMCLib/src/xmc_vadc.c **** 
1773:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4439              	 .loc 2 1773 0
 4440 002c FB68     	 ldr r3,[r7,#12]
 4441 002e BA68     	 ldr r2,[r7,#8]
 4442 0030 8032     	 adds r2,r2,#128
 4443 0032 7969     	 ldr r1,[r7,#20]
 4444 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1774:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4445              	 .loc 2 1774 0
 4446 0038 1C37     	 adds r7,r7,#28
 4447              	.LCFI346:
 4448              	 .cfi_def_cfa_offset 4
 4449 003a BD46     	 mov sp,r7
 4450              	.LCFI347:
 4451              	 .cfi_def_cfa_register 13
 4452              	 
 4453 003c 5DF8047B 	 ldr r7,[sp],#4
 4454              	.LCFI348:
 4455              	 .cfi_restore 7
 4456              	 .cfi_def_cfa_offset 0
 4457 0040 7047     	 bx lr
 4458              	 .cfi_endproc
 4459              	.LFE279:
 4461 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetResultRegister,"ax",%progbits
 4462              	 .align 2
 4463              	 .global XMC_VADC_GROUP_ChannelSetResultRegister
 4464              	 .thumb
 4465              	 .thumb_func
 4467              	XMC_VADC_GROUP_ChannelSetResultRegister:
 4468              	.LFB280:
1775:../Libraries/XMCLib/src/xmc_vadc.c **** 
1776:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 16 registers for storing the channel result */
1777:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetResultRegister(XMC_VADC_GROUP_t *const group_ptr,
1778:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t ch_num,
1779:../Libraries/XMCLib/src/xmc_vadc.c ****                                              const uint32_t result_reg_num)
1780:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4469              	 .loc 2 1780 0
 4470              	 .cfi_startproc
 4471              	 
 4472              	 
 4473              	 
 4474 0000 80B4     	 push {r7}
 4475              	.LCFI349:
 4476              	 .cfi_def_cfa_offset 4
 4477              	 .cfi_offset 7,-4
 4478 0002 87B0     	 sub sp,sp,#28
 4479              	.LCFI350:
 4480              	 .cfi_def_cfa_offset 32
 4481 0004 00AF     	 add r7,sp,#0
 4482              	.LCFI351:
 4483              	 .cfi_def_cfa_register 7
 4484 0006 F860     	 str r0,[r7,#12]
 4485 0008 B960     	 str r1,[r7,#8]
 4486 000a 7A60     	 str r2,[r7,#4]
1781:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1782:../Libraries/XMCLib/src/xmc_vadc.c **** 
1783:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1784:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Channel Number",
1785:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1786:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetResultRegister:Wrong Result Register",
1787:../Libraries/XMCLib/src/xmc_vadc.c ****              ((result_reg_num) < XMC_VADC_NUM_RESULT_REGISTERS))
1788:../Libraries/XMCLib/src/xmc_vadc.c **** 
1789:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4487              	 .loc 2 1789 0
 4488 000c FB68     	 ldr r3,[r7,#12]
 4489 000e BA68     	 ldr r2,[r7,#8]
 4490 0010 8032     	 adds r2,r2,#128
 4491 0012 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4492 0016 7B61     	 str r3,[r7,#20]
1790:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_RESREG_Msk);
 4493              	 .loc 2 1790 0
 4494 0018 7B69     	 ldr r3,[r7,#20]
 4495 001a 23F47023 	 bic r3,r3,#983040
 4496 001e 7B61     	 str r3,[r7,#20]
1791:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)(result_reg_num <<  VADC_G_CHCTR_RESREG_Pos);
 4497              	 .loc 2 1791 0
 4498 0020 7B68     	 ldr r3,[r7,#4]
 4499 0022 1B04     	 lsls r3,r3,#16
 4500 0024 7A69     	 ldr r2,[r7,#20]
 4501 0026 1343     	 orrs r3,r3,r2
 4502 0028 7B61     	 str r3,[r7,#20]
1792:../Libraries/XMCLib/src/xmc_vadc.c **** 
1793:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4503              	 .loc 2 1793 0
 4504 002a FB68     	 ldr r3,[r7,#12]
 4505 002c BA68     	 ldr r2,[r7,#8]
 4506 002e 8032     	 adds r2,r2,#128
 4507 0030 7969     	 ldr r1,[r7,#20]
 4508 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1794:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4509              	 .loc 2 1794 0
 4510 0036 1C37     	 adds r7,r7,#28
 4511              	.LCFI352:
 4512              	 .cfi_def_cfa_offset 4
 4513 0038 BD46     	 mov sp,r7
 4514              	.LCFI353:
 4515              	 .cfi_def_cfa_register 13
 4516              	 
 4517 003a 5DF8047B 	 ldr r7,[sp],#4
 4518              	.LCFI354:
 4519              	 .cfi_restore 7
 4520              	 .cfi_def_cfa_offset 0
 4521 003e 7047     	 bx lr
 4522              	 .cfi_endproc
 4523              	.LFE280:
 4525              	 .section .text.XMC_VADC_GROUP_ChannelSetIclass,"ax",%progbits
 4526              	 .align 2
 4527              	 .global XMC_VADC_GROUP_ChannelSetIclass
 4528              	 .thumb
 4529              	 .thumb_func
 4531              	XMC_VADC_GROUP_ChannelSetIclass:
 4532              	.LFB281:
1795:../Libraries/XMCLib/src/xmc_vadc.c **** 
1796:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select one of the available 4 class conversion */
1797:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetIclass(XMC_VADC_GROUP_t *const group_ptr,
1798:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const uint32_t ch_num,
1799:../Libraries/XMCLib/src/xmc_vadc.c ****                                      const XMC_VADC_CHANNEL_CONV_t conversion_class)
1800:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4533              	 .loc 2 1800 0
 4534              	 .cfi_startproc
 4535              	 
 4536              	 
 4537              	 
 4538 0000 80B4     	 push {r7}
 4539              	.LCFI355:
 4540              	 .cfi_def_cfa_offset 4
 4541              	 .cfi_offset 7,-4
 4542 0002 87B0     	 sub sp,sp,#28
 4543              	.LCFI356:
 4544              	 .cfi_def_cfa_offset 32
 4545 0004 00AF     	 add r7,sp,#0
 4546              	.LCFI357:
 4547              	 .cfi_def_cfa_register 7
 4548 0006 F860     	 str r0,[r7,#12]
 4549 0008 B960     	 str r1,[r7,#8]
 4550 000a 1346     	 mov r3,r2
 4551 000c FB71     	 strb r3,[r7,#7]
1801:../Libraries/XMCLib/src/xmc_vadc.c **** 
1802:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1803:../Libraries/XMCLib/src/xmc_vadc.c **** 
1804:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_
1805:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong Channel Number",
1806:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1807:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetIclass:Wrong input class ",
1808:../Libraries/XMCLib/src/xmc_vadc.c ****              (XMC_VADC_CHANNEL_CONV_GLOBAL_CLASS1 >= conversion_class))
1809:../Libraries/XMCLib/src/xmc_vadc.c **** 
1810:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr = group_ptr->CHCTR[ch_num];
 4552              	 .loc 2 1810 0
 4553 000e FB68     	 ldr r3,[r7,#12]
 4554 0010 BA68     	 ldr r2,[r7,#8]
 4555 0012 8032     	 adds r2,r2,#128
 4556 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4557 0018 7B61     	 str r3,[r7,#20]
1811:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_ICLSEL_Msk);
 4558              	 .loc 2 1811 0
 4559 001a 7B69     	 ldr r3,[r7,#20]
 4560 001c 23F00303 	 bic r3,r3,#3
 4561 0020 7B61     	 str r3,[r7,#20]
1812:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)conversion_class <<  (uint32_t)VADC_G_CHCTR_ICLSEL_Pos);
 4562              	 .loc 2 1812 0
 4563 0022 FB79     	 ldrb r3,[r7,#7]
 4564 0024 7A69     	 ldr r2,[r7,#20]
 4565 0026 1343     	 orrs r3,r3,r2
 4566 0028 7B61     	 str r3,[r7,#20]
1813:../Libraries/XMCLib/src/xmc_vadc.c **** 
1814:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4567              	 .loc 2 1814 0
 4568 002a FB68     	 ldr r3,[r7,#12]
 4569 002c BA68     	 ldr r2,[r7,#8]
 4570 002e 8032     	 adds r2,r2,#128
 4571 0030 7969     	 ldr r1,[r7,#20]
 4572 0032 43F82210 	 str r1,[r3,r2,lsl#2]
1815:../Libraries/XMCLib/src/xmc_vadc.c **** 
1816:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4573              	 .loc 2 1816 0
 4574 0036 1C37     	 adds r7,r7,#28
 4575              	.LCFI358:
 4576              	 .cfi_def_cfa_offset 4
 4577 0038 BD46     	 mov sp,r7
 4578              	.LCFI359:
 4579              	 .cfi_def_cfa_register 13
 4580              	 
 4581 003a 5DF8047B 	 ldr r7,[sp],#4
 4582              	.LCFI360:
 4583              	 .cfi_restore 7
 4584              	 .cfi_def_cfa_offset 0
 4585 003e 7047     	 bx lr
 4586              	 .cfi_endproc
 4587              	.LFE281:
 4589              	 .section .text.XMC_VADC_GROUP_ChannelGetResultRegister,"ax",%progbits
 4590              	 .align 2
 4591              	 .global XMC_VADC_GROUP_ChannelGetResultRegister
 4592              	 .thumb
 4593              	 .thumb_func
 4595              	XMC_VADC_GROUP_ChannelGetResultRegister:
 4596              	.LFB282:
1817:../Libraries/XMCLib/src/xmc_vadc.c **** 
1818:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result register bound with specified channel */
1819:../Libraries/XMCLib/src/xmc_vadc.c **** uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t c
1820:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4597              	 .loc 2 1820 0
 4598              	 .cfi_startproc
 4599              	 
 4600              	 
 4601              	 
 4602 0000 80B4     	 push {r7}
 4603              	.LCFI361:
 4604              	 .cfi_def_cfa_offset 4
 4605              	 .cfi_offset 7,-4
 4606 0002 85B0     	 sub sp,sp,#20
 4607              	.LCFI362:
 4608              	 .cfi_def_cfa_offset 24
 4609 0004 00AF     	 add r7,sp,#0
 4610              	.LCFI363:
 4611              	 .cfi_def_cfa_register 7
 4612 0006 7860     	 str r0,[r7,#4]
 4613 0008 3960     	 str r1,[r7]
1821:../Libraries/XMCLib/src/xmc_vadc.c ****   uint8_t resreg;
1822:../Libraries/XMCLib/src/xmc_vadc.c **** 
1823:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
1824:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
1825:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1826:../Libraries/XMCLib/src/xmc_vadc.c **** 
1827:../Libraries/XMCLib/src/xmc_vadc.c ****   resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR
 4614              	 .loc 2 1827 0
 4615 000a 7B68     	 ldr r3,[r7,#4]
 4616 000c 3A68     	 ldr r2,[r7]
 4617 000e 8032     	 adds r2,r2,#128
 4618 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4619 0014 03F47023 	 and r3,r3,#983040
 4620 0018 1B0C     	 lsrs r3,r3,#16
 4621 001a FB73     	 strb r3,[r7,#15]
1828:../Libraries/XMCLib/src/xmc_vadc.c **** 
1829:../Libraries/XMCLib/src/xmc_vadc.c ****   return resreg;
 4622              	 .loc 2 1829 0
 4623 001c FB7B     	 ldrb r3,[r7,#15]
1830:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4624              	 .loc 2 1830 0
 4625 001e 1846     	 mov r0,r3
 4626 0020 1437     	 adds r7,r7,#20
 4627              	.LCFI364:
 4628              	 .cfi_def_cfa_offset 4
 4629 0022 BD46     	 mov sp,r7
 4630              	.LCFI365:
 4631              	 .cfi_def_cfa_register 13
 4632              	 
 4633 0024 5DF8047B 	 ldr r7,[sp],#4
 4634              	.LCFI366:
 4635              	 .cfi_restore 7
 4636              	 .cfi_def_cfa_offset 0
 4637 0028 7047     	 bx lr
 4638              	 .cfi_endproc
 4639              	.LFE282:
 4641 002a 00BF     	 .section .text.XMC_VADC_GROUP_ChannelTriggerEvent,"ax",%progbits
 4642              	 .align 2
 4643              	 .global XMC_VADC_GROUP_ChannelTriggerEvent
 4644              	 .thumb
 4645              	 .thumb_func
 4647              	XMC_VADC_GROUP_ChannelTriggerEvent:
 4648              	.LFB283:
1831:../Libraries/XMCLib/src/xmc_vadc.c **** 
1832:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to manually assert channel event */
1833:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEvent(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
1834:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4649              	 .loc 2 1834 0
 4650              	 .cfi_startproc
 4651              	 
 4652              	 
 4653              	 
 4654 0000 80B4     	 push {r7}
 4655              	.LCFI367:
 4656              	 .cfi_def_cfa_offset 4
 4657              	 .cfi_offset 7,-4
 4658 0002 85B0     	 sub sp,sp,#20
 4659              	.LCFI368:
 4660              	 .cfi_def_cfa_offset 24
 4661 0004 00AF     	 add r7,sp,#0
 4662              	.LCFI369:
 4663              	 .cfi_def_cfa_register 7
 4664 0006 7860     	 str r0,[r7,#4]
 4665 0008 3960     	 str r1,[r7]
1835:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t ceflag;
1836:../Libraries/XMCLib/src/xmc_vadc.c **** 
1837:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gro
1838:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEvent:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CH
1839:../Libraries/XMCLib/src/xmc_vadc.c **** 
1840:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag  = group_ptr->CEFLAG;
 4666              	 .loc 2 1840 0
 4667 000a 7B68     	 ldr r3,[r7,#4]
 4668 000c D3F88031 	 ldr r3,[r3,#384]
 4669 0010 FB60     	 str r3,[r7,#12]
1841:../Libraries/XMCLib/src/xmc_vadc.c ****   ceflag |= (uint32_t)((uint32_t)1 << ch_num);
 4670              	 .loc 2 1841 0
 4671 0012 3B68     	 ldr r3,[r7]
 4672 0014 0122     	 movs r2,#1
 4673 0016 02FA03F3 	 lsl r3,r2,r3
 4674 001a FA68     	 ldr r2,[r7,#12]
 4675 001c 1343     	 orrs r3,r3,r2
 4676 001e FB60     	 str r3,[r7,#12]
1842:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEFLAG = ceflag;
 4677              	 .loc 2 1842 0
 4678 0020 7B68     	 ldr r3,[r7,#4]
 4679 0022 FA68     	 ldr r2,[r7,#12]
 4680 0024 C3F88021 	 str r2,[r3,#384]
1843:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4681              	 .loc 2 1843 0
 4682 0028 1437     	 adds r7,r7,#20
 4683              	.LCFI370:
 4684              	 .cfi_def_cfa_offset 4
 4685 002a BD46     	 mov sp,r7
 4686              	.LCFI371:
 4687              	 .cfi_def_cfa_register 13
 4688              	 
 4689 002c 5DF8047B 	 ldr r7,[sp],#4
 4690              	.LCFI372:
 4691              	 .cfi_restore 7
 4692              	 .cfi_def_cfa_offset 0
 4693 0030 7047     	 bx lr
 4694              	 .cfi_endproc
 4695              	.LFE283:
 4697 0032 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode,"ax",%progbits
 4698              	 .align 2
 4699              	 .global XMC_VADC_GROUP_ChannelSetEventInterruptNode
 4700              	 .thumb
 4701              	 .thumb_func
 4703              	XMC_VADC_GROUP_ChannelSetEventInterruptNode:
 4704              	.LFB284:
1844:../Libraries/XMCLib/src/xmc_vadc.c **** 
1845:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to bind channel event with a service request (NVIC Node) */
1846:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelSetEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1847:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1848:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const XMC_VADC_SR_t sr)
1849:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4705              	 .loc 2 1849 0
 4706              	 .cfi_startproc
 4707              	 
 4708              	 
 4709              	 
 4710 0000 80B4     	 push {r7}
 4711              	.LCFI373:
 4712              	 .cfi_def_cfa_offset 4
 4713              	 .cfi_offset 7,-4
 4714 0002 87B0     	 sub sp,sp,#28
 4715              	.LCFI374:
 4716              	 .cfi_def_cfa_offset 32
 4717 0004 00AF     	 add r7,sp,#0
 4718              	.LCFI375:
 4719              	 .cfi_def_cfa_register 7
 4720 0006 F860     	 str r0,[r7,#12]
 4721 0008 B960     	 str r1,[r7,#8]
 4722 000a 1346     	 mov r3,r2
 4723 000c FB71     	 strb r3,[r7,#7]
1850:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1851:../Libraries/XMCLib/src/xmc_vadc.c **** 
1852:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROU
1853:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Channel Number",
1854:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1855:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VAD
1856:../Libraries/XMCLib/src/xmc_vadc.c **** 
1857:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask  = group_ptr->CEVNP0;
 4724              	 .loc 2 1857 0
 4725 000e FB68     	 ldr r3,[r7,#12]
 4726 0010 D3F8A031 	 ldr r3,[r3,#416]
 4727 0014 7B61     	 str r3,[r7,#20]
1858:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask &= ~((uint32_t)15 << (ch_num * (uint32_t)4));
 4728              	 .loc 2 1858 0
 4729 0016 BB68     	 ldr r3,[r7,#8]
 4730 0018 9B00     	 lsls r3,r3,#2
 4731 001a 1A46     	 mov r2,r3
 4732 001c 0F23     	 movs r3,#15
 4733 001e 9340     	 lsls r3,r3,r2
 4734 0020 DB43     	 mvns r3,r3
 4735 0022 7A69     	 ldr r2,[r7,#20]
 4736 0024 1340     	 ands r3,r3,r2
 4737 0026 7B61     	 str r3,[r7,#20]
1859:../Libraries/XMCLib/src/xmc_vadc.c ****   route_mask |= (uint32_t)( (uint32_t)sr << (ch_num * (uint32_t)4));
 4738              	 .loc 2 1859 0
 4739 0028 FB79     	 ldrb r3,[r7,#7]
 4740 002a BA68     	 ldr r2,[r7,#8]
 4741 002c 9200     	 lsls r2,r2,#2
 4742 002e 9340     	 lsls r3,r3,r2
 4743 0030 7A69     	 ldr r2,[r7,#20]
 4744 0032 1343     	 orrs r3,r3,r2
 4745 0034 7B61     	 str r3,[r7,#20]
1860:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CEVNP0 = route_mask;
 4746              	 .loc 2 1860 0
 4747 0036 FB68     	 ldr r3,[r7,#12]
 4748 0038 7A69     	 ldr r2,[r7,#20]
 4749 003a C3F8A021 	 str r2,[r3,#416]
1861:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4750              	 .loc 2 1861 0
 4751 003e 1C37     	 adds r7,r7,#28
 4752              	.LCFI376:
 4753              	 .cfi_def_cfa_offset 4
 4754 0040 BD46     	 mov sp,r7
 4755              	.LCFI377:
 4756              	 .cfi_def_cfa_register 13
 4757              	 
 4758 0042 5DF8047B 	 ldr r7,[sp],#4
 4759              	.LCFI378:
 4760              	 .cfi_restore 7
 4761              	 .cfi_def_cfa_offset 0
 4762 0046 7047     	 bx lr
 4763              	 .cfi_endproc
 4764              	.LFE284:
 4766              	 .section .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria,"ax",%progbits
 4767              	 .align 2
 4768              	 .global XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
 4769              	 .thumb
 4770              	 .thumb_func
 4772              	XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:
 4773              	.LFB285:
1862:../Libraries/XMCLib/src/xmc_vadc.c **** 
1863:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure conditions for generation of channel event */
1864:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_ChannelTriggerEventGenCriteria( XMC_VADC_GROUP_t *const group_ptr,
1865:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const uint32_t ch_num,
1866:../Libraries/XMCLib/src/xmc_vadc.c ****                                                    const XMC_VADC_CHANNEL_EVGEN_t criteria)
1867:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4774              	 .loc 2 1867 0
 4775              	 .cfi_startproc
 4776              	 
 4777              	 
 4778              	 
 4779 0000 80B4     	 push {r7}
 4780              	.LCFI379:
 4781              	 .cfi_def_cfa_offset 4
 4782              	 .cfi_offset 7,-4
 4783 0002 87B0     	 sub sp,sp,#28
 4784              	.LCFI380:
 4785              	 .cfi_def_cfa_offset 32
 4786 0004 00AF     	 add r7,sp,#0
 4787              	.LCFI381:
 4788              	 .cfi_def_cfa_register 7
 4789 0006 F860     	 str r0,[r7,#12]
 4790 0008 B960     	 str r1,[r7,#8]
 4791 000a 1346     	 mov r3,r2
 4792 000c FB71     	 strb r3,[r7,#7]
1868:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t chctr;
1869:../Libraries/XMCLib/src/xmc_vadc.c **** 
1870:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Group Pointer", XMC_VADC_CHECK_GR
1871:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Channel Number",
1872:../Libraries/XMCLib/src/xmc_vadc.c ****              ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1873:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:Wrong Event Generation Criteria",
1874:../Libraries/XMCLib/src/xmc_vadc.c ****              ((criteria) <= XMC_VADC_CHANNEL_EVGEN_ALWAYS))
1875:../Libraries/XMCLib/src/xmc_vadc.c **** 
1876:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr  = group_ptr->CHCTR[ch_num];
 4793              	 .loc 2 1876 0
 4794 000e FB68     	 ldr r3,[r7,#12]
 4795 0010 BA68     	 ldr r2,[r7,#8]
 4796 0012 8032     	 adds r2,r2,#128
 4797 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4798 0018 7B61     	 str r3,[r7,#20]
1877:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr &= ~((uint32_t)VADC_G_CHCTR_CHEVMODE_Msk);
 4799              	 .loc 2 1877 0
 4800 001a 7B69     	 ldr r3,[r7,#20]
 4801 001c 23F44073 	 bic r3,r3,#768
 4802 0020 7B61     	 str r3,[r7,#20]
1878:../Libraries/XMCLib/src/xmc_vadc.c ****   chctr |= (uint32_t)((uint32_t)criteria << VADC_G_CHCTR_CHEVMODE_Pos);
 4803              	 .loc 2 1878 0
 4804 0022 FB79     	 ldrb r3,[r7,#7]
 4805 0024 1B02     	 lsls r3,r3,#8
 4806 0026 7A69     	 ldr r2,[r7,#20]
 4807 0028 1343     	 orrs r3,r3,r2
 4808 002a 7B61     	 str r3,[r7,#20]
1879:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] = chctr;
 4809              	 .loc 2 1879 0
 4810 002c FB68     	 ldr r3,[r7,#12]
 4811 002e BA68     	 ldr r2,[r7,#8]
 4812 0030 8032     	 adds r2,r2,#128
 4813 0032 7969     	 ldr r1,[r7,#20]
 4814 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1880:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4815              	 .loc 2 1880 0
 4816 0038 1C37     	 adds r7,r7,#28
 4817              	.LCFI382:
 4818              	 .cfi_def_cfa_offset 4
 4819 003a BD46     	 mov sp,r7
 4820              	.LCFI383:
 4821              	 .cfi_def_cfa_register 13
 4822              	 
 4823 003c 5DF8047B 	 ldr r7,[sp],#4
 4824              	.LCFI384:
 4825              	 .cfi_restore 7
 4826              	 .cfi_def_cfa_offset 0
 4827 0040 7047     	 bx lr
 4828              	 .cfi_endproc
 4829              	.LFE285:
 4831 0042 00BF     	 .section .text.XMC_VADC_GROUP_ChannelSetBoundarySelection,"ax",%progbits
 4832              	 .align 2
 4833              	 .global XMC_VADC_GROUP_ChannelSetBoundarySelection
 4834              	 .thumb
 4835              	 .thumb_func
 4837              	XMC_VADC_GROUP_ChannelSetBoundarySelection:
 4838              	.LFB286:
1881:../Libraries/XMCLib/src/xmc_vadc.c **** 
1882:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to configure the boundary selection */
1883:../Libraries/XMCLib/src/xmc_vadc.c **** void  XMC_VADC_GROUP_ChannelSetBoundarySelection(XMC_VADC_GROUP_t *const group_ptr,
1884:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  const uint32_t ch_num,
1885:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_BOUNDARY_SELECT_t boundary_sel,
1886:../Libraries/XMCLib/src/xmc_vadc.c ****                                                  XMC_VADC_CHANNEL_BOUNDARY_t selection)
1887:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4839              	 .loc 2 1887 0
 4840              	 .cfi_startproc
 4841              	 
 4842              	 
 4843              	 
 4844 0000 80B4     	 push {r7}
 4845              	.LCFI385:
 4846              	 .cfi_def_cfa_offset 4
 4847              	 .cfi_offset 7,-4
 4848 0002 85B0     	 sub sp,sp,#20
 4849              	.LCFI386:
 4850              	 .cfi_def_cfa_offset 24
 4851 0004 00AF     	 add r7,sp,#0
 4852              	.LCFI387:
 4853              	 .cfi_def_cfa_register 7
 4854 0006 F860     	 str r0,[r7,#12]
 4855 0008 B960     	 str r1,[r7,#8]
 4856 000a 1146     	 mov r1,r2
 4857 000c 1A46     	 mov r2,r3
 4858 000e 0B46     	 mov r3,r1
 4859 0010 FB71     	 strb r3,[r7,#7]
 4860 0012 1346     	 mov r3,r2
 4861 0014 BB71     	 strb r3,[r7,#6]
1888:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Group Pointer", XMC_VADC_CHECK_GROUP
1889:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_ChannelSetBoundarySelection:Wrong Channel Number",
1890:../Libraries/XMCLib/src/xmc_vadc.c ****               ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
1891:../Libraries/XMCLib/src/xmc_vadc.c **** 
1892:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] &= ~((uint32_t)VADC_G_CHCTR_BNDSELL_Msk << boundary_sel);
 4862              	 .loc 2 1892 0
 4863 0016 FB68     	 ldr r3,[r7,#12]
 4864 0018 BA68     	 ldr r2,[r7,#8]
 4865 001a 8032     	 adds r2,r2,#128
 4866 001c 53F82220 	 ldr r2,[r3,r2,lsl#2]
 4867 0020 FB79     	 ldrb r3,[r7,#7]
 4868 0022 3021     	 movs r1,#48
 4869 0024 01FA03F3 	 lsl r3,r1,r3
 4870 0028 DB43     	 mvns r3,r3
 4871 002a 02EA0301 	 and r1,r2,r3
 4872 002e FB68     	 ldr r3,[r7,#12]
 4873 0030 BA68     	 ldr r2,[r7,#8]
 4874 0032 8032     	 adds r2,r2,#128
 4875 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1893:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->CHCTR[ch_num] |= (selection<< ((uint32_t)VADC_G_CHCTR_BNDSELL_Pos + (uint32_t)boundary
 4876              	 .loc 2 1893 0
 4877 0038 FB68     	 ldr r3,[r7,#12]
 4878 003a BA68     	 ldr r2,[r7,#8]
 4879 003c 8032     	 adds r2,r2,#128
 4880 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4881 0042 BA79     	 ldrb r2,[r7,#6]
 4882 0044 F979     	 ldrb r1,[r7,#7]
 4883 0046 0431     	 adds r1,r1,#4
 4884 0048 8A40     	 lsls r2,r2,r1
 4885 004a 43EA0201 	 orr r1,r3,r2
 4886 004e FB68     	 ldr r3,[r7,#12]
 4887 0050 BA68     	 ldr r2,[r7,#8]
 4888 0052 8032     	 adds r2,r2,#128
 4889 0054 43F82210 	 str r1,[r3,r2,lsl#2]
1894:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4890              	 .loc 2 1894 0
 4891 0058 1437     	 adds r7,r7,#20
 4892              	.LCFI388:
 4893              	 .cfi_def_cfa_offset 4
 4894 005a BD46     	 mov sp,r7
 4895              	.LCFI389:
 4896              	 .cfi_def_cfa_register 13
 4897              	 
 4898 005c 5DF8047B 	 ldr r7,[sp],#4
 4899              	.LCFI390:
 4900              	 .cfi_restore 7
 4901              	 .cfi_def_cfa_offset 0
 4902 0060 7047     	 bx lr
 4903              	 .cfi_endproc
 4904              	.LFE286:
 4906 0062 00BF     	 .section .text.XMC_VADC_GROUP_AddResultToFifo,"ax",%progbits
 4907              	 .align 2
 4908              	 .global XMC_VADC_GROUP_AddResultToFifo
 4909              	 .thumb
 4910              	 .thumb_func
 4912              	XMC_VADC_GROUP_AddResultToFifo:
 4913              	.LFB287:
1895:../Libraries/XMCLib/src/xmc_vadc.c **** 
1896:../Libraries/XMCLib/src/xmc_vadc.c **** /* Make the specified result register part of Result FIFO */ 
1897:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_AddResultToFifo(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
1898:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4914              	 .loc 2 1898 0
 4915              	 .cfi_startproc
 4916              	 
 4917              	 
 4918              	 
 4919 0000 80B4     	 push {r7}
 4920              	.LCFI391:
 4921              	 .cfi_def_cfa_offset 4
 4922              	 .cfi_offset 7,-4
 4923 0002 85B0     	 sub sp,sp,#20
 4924              	.LCFI392:
 4925              	 .cfi_def_cfa_offset 24
 4926 0004 00AF     	 add r7,sp,#0
 4927              	.LCFI393:
 4928              	 .cfi_def_cfa_register 7
 4929 0006 7860     	 str r0,[r7,#4]
 4930 0008 3960     	 str r1,[r7]
1899:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t fen;
1900:../Libraries/XMCLib/src/xmc_vadc.c **** 
1901:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_p
1902:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_AddResultToFifo:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESU
1903:../Libraries/XMCLib/src/xmc_vadc.c **** 
1904:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Extract and clear the FIFO enable field */
1905:../Libraries/XMCLib/src/xmc_vadc.c ****   fen = group_ptr->RCR[res_reg];
 4931              	 .loc 2 1905 0
 4932 000a 7B68     	 ldr r3,[r7,#4]
 4933 000c 3A68     	 ldr r2,[r7]
 4934 000e A032     	 adds r2,r2,#160
 4935 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4936 0014 FB60     	 str r3,[r7,#12]
1906:../Libraries/XMCLib/src/xmc_vadc.c ****   fen &= ~((uint32_t)VADC_G_RCR_FEN_Msk);
 4937              	 .loc 2 1906 0
 4938 0016 FB68     	 ldr r3,[r7,#12]
 4939 0018 23F0C063 	 bic r3,r3,#100663296
 4940 001c FB60     	 str r3,[r7,#12]
1907:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Set this register up as a FIFO member */
1908:../Libraries/XMCLib/src/xmc_vadc.c ****   fen |= (uint32_t)((uint32_t)1 << VADC_G_RCR_FEN_Pos);
 4941              	 .loc 2 1908 0
 4942 001e FB68     	 ldr r3,[r7,#12]
 4943 0020 43F00073 	 orr r3,r3,#33554432
 4944 0024 FB60     	 str r3,[r7,#12]
1909:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RCR[res_reg] = fen;
 4945              	 .loc 2 1909 0
 4946 0026 7B68     	 ldr r3,[r7,#4]
 4947 0028 3A68     	 ldr r2,[r7]
 4948 002a A032     	 adds r2,r2,#160
 4949 002c F968     	 ldr r1,[r7,#12]
 4950 002e 43F82210 	 str r1,[r3,r2,lsl#2]
1910:../Libraries/XMCLib/src/xmc_vadc.c **** }
 4951              	 .loc 2 1910 0
 4952 0032 1437     	 adds r7,r7,#20
 4953              	.LCFI394:
 4954              	 .cfi_def_cfa_offset 4
 4955 0034 BD46     	 mov sp,r7
 4956              	.LCFI395:
 4957              	 .cfi_def_cfa_register 13
 4958              	 
 4959 0036 5DF8047B 	 ldr r7,[sp],#4
 4960              	.LCFI396:
 4961              	 .cfi_restore 7
 4962              	 .cfi_def_cfa_offset 0
 4963 003a 7047     	 bx lr
 4964              	 .cfi_endproc
 4965              	.LFE287:
 4967              	 .section .text.XMC_VADC_GROUP_SetResultFastCompareValue,"ax",%progbits
 4968              	 .align 2
 4969              	 .global XMC_VADC_GROUP_SetResultFastCompareValue
 4970              	 .thumb
 4971              	 .thumb_func
 4973              	XMC_VADC_GROUP_SetResultFastCompareValue:
 4974              	.LFB288:
1911:../Libraries/XMCLib/src/xmc_vadc.c **** 
1912:../Libraries/XMCLib/src/xmc_vadc.c **** 
1913:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1914:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultFastCompareValue(XMC_VADC_GROUP_t *const group_ptr,
1915:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint32_t res_reg,
1916:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const XMC_VADC_RESULT_SIZE_t compare_val)
1917:../Libraries/XMCLib/src/xmc_vadc.c **** {
 4975              	 .loc 2 1917 0
 4976              	 .cfi_startproc
 4977              	 
 4978              	 
 4979              	 
 4980 0000 80B4     	 push {r7}
 4981              	.LCFI397:
 4982              	 .cfi_def_cfa_offset 4
 4983              	 .cfi_offset 7,-4
 4984 0002 87B0     	 sub sp,sp,#28
 4985              	.LCFI398:
 4986              	 .cfi_def_cfa_offset 32
 4987 0004 00AF     	 add r7,sp,#0
 4988              	.LCFI399:
 4989              	 .cfi_def_cfa_register 7
 4990 0006 F860     	 str r0,[r7,#12]
 4991 0008 B960     	 str r1,[r7,#8]
 4992 000a 1346     	 mov r3,r2
 4993 000c FB80     	 strh r3,[r7,#6]
1918:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res = group_ptr->RES[res_reg];
 4994              	 .loc 2 1918 0
 4995 000e FB68     	 ldr r3,[r7,#12]
 4996 0010 BA68     	 ldr r2,[r7,#8]
 4997 0012 C032     	 adds r2,r2,#192
 4998 0014 53F82230 	 ldr r3,[r3,r2,lsl#2]
 4999 0018 7B61     	 str r3,[r7,#20]
1919:../Libraries/XMCLib/src/xmc_vadc.c **** 
1920:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1921:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultFastCompareValue:Wrong Result Register",
1922:../Libraries/XMCLib/src/xmc_vadc.c ****             ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
1923:../Libraries/XMCLib/src/xmc_vadc.c **** 
1924:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5000              	 .loc 2 1924 0
 5001 001a 7B69     	 ldr r3,[r7,#20]
 5002 001c 1B0C     	 lsrs r3,r3,#16
 5003 001e 1B04     	 lsls r3,r3,#16
 5004 0020 7B61     	 str r3,[r7,#20]
1925:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)((uint32_t)compare_val << XMC_VADC_RESULT_LEFT_ALIGN_10BIT);
 5005              	 .loc 2 1925 0
 5006 0022 FB88     	 ldrh r3,[r7,#6]
 5007 0024 9B00     	 lsls r3,r3,#2
 5008 0026 7A69     	 ldr r2,[r7,#20]
 5009 0028 1343     	 orrs r3,r3,r2
 5010 002a 7B61     	 str r3,[r7,#20]
1926:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[res_reg] = res;
 5011              	 .loc 2 1926 0
 5012 002c FB68     	 ldr r3,[r7,#12]
 5013 002e BA68     	 ldr r2,[r7,#8]
 5014 0030 C032     	 adds r2,r2,#192
 5015 0032 7969     	 ldr r1,[r7,#20]
 5016 0034 43F82210 	 str r1,[r3,r2,lsl#2]
1927:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5017              	 .loc 2 1927 0
 5018 0038 1C37     	 adds r7,r7,#28
 5019              	.LCFI400:
 5020              	 .cfi_def_cfa_offset 4
 5021 003a BD46     	 mov sp,r7
 5022              	.LCFI401:
 5023              	 .cfi_def_cfa_register 13
 5024              	 
 5025 003c 5DF8047B 	 ldr r7,[sp],#4
 5026              	.LCFI402:
 5027              	 .cfi_restore 7
 5028              	 .cfi_def_cfa_offset 0
 5029 0040 7047     	 bx lr
 5030              	 .cfi_endproc
 5031              	.LFE288:
 5033 0042 00BF     	 .section .text.XMC_VADC_GROUP_GetFastCompareResult,"ax",%progbits
 5034              	 .align 2
 5035              	 .global XMC_VADC_GROUP_GetFastCompareResult
 5036              	 .thumb
 5037              	 .thumb_func
 5039              	XMC_VADC_GROUP_GetFastCompareResult:
 5040              	.LFB289:
1928:../Libraries/XMCLib/src/xmc_vadc.c **** 
1929:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the result of fast mode comparison */
1930:../Libraries/XMCLib/src/xmc_vadc.c **** XMC_VADC_FAST_COMPARE_t XMC_VADC_GROUP_GetFastCompareResult(XMC_VADC_GROUP_t *const group_ptr, cons
1931:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5041              	 .loc 2 1931 0
 5042              	 .cfi_startproc
 5043              	 
 5044              	 
 5045              	 
 5046 0000 80B4     	 push {r7}
 5047              	.LCFI403:
 5048              	 .cfi_def_cfa_offset 4
 5049              	 .cfi_offset 7,-4
 5050 0002 85B0     	 sub sp,sp,#20
 5051              	.LCFI404:
 5052              	 .cfi_def_cfa_offset 24
 5053 0004 00AF     	 add r7,sp,#0
 5054              	.LCFI405:
 5055              	 .cfi_def_cfa_register 7
 5056 0006 7860     	 str r0,[r7,#4]
 5057 0008 3960     	 str r1,[r7]
1932:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_VADC_FAST_COMPARE_t result;
1933:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1934:../Libraries/XMCLib/src/xmc_vadc.c **** 
1935:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(gr
1936:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetFastCompareResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM
1937:../Libraries/XMCLib/src/xmc_vadc.c **** 
1938:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[res_reg];
 5058              	 .loc 2 1938 0
 5059 000a 7B68     	 ldr r3,[r7,#4]
 5060 000c 3A68     	 ldr r2,[r7]
 5061 000e C032     	 adds r2,r2,#192
 5062 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5063 0014 BB60     	 str r3,[r7,#8]
1939:../Libraries/XMCLib/src/xmc_vadc.c **** 
1940:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res & (uint32_t)VADC_G_RES_VF_Msk)
 5064              	 .loc 2 1940 0
 5065 0016 BB68     	 ldr r3,[r7,#8]
 5066 0018 002B     	 cmp r3,#0
 5067 001a 06DA     	 bge .L176
1941:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1942:../Libraries/XMCLib/src/xmc_vadc.c ****     result = (XMC_VADC_FAST_COMPARE_t)((uint32_t)(res >> (uint32_t)VADC_G_RES_FCR_Pos) & (uint32_t)
 5068              	 .loc 2 1942 0
 5069 001c BB68     	 ldr r3,[r7,#8]
 5070 001e 9B0F     	 lsrs r3,r3,#30
 5071 0020 DBB2     	 uxtb r3,r3
 5072 0022 03F00103 	 and r3,r3,#1
 5073 0026 FB73     	 strb r3,[r7,#15]
 5074 0028 01E0     	 b .L177
 5075              	.L176:
1943:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1944:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1945:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1946:../Libraries/XMCLib/src/xmc_vadc.c ****     result = XMC_VADC_FAST_COMPARE_UNKNOWN;
 5076              	 .loc 2 1946 0
 5077 002a 0223     	 movs r3,#2
 5078 002c FB73     	 strb r3,[r7,#15]
 5079              	.L177:
1947:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1948:../Libraries/XMCLib/src/xmc_vadc.c **** 
1949:../Libraries/XMCLib/src/xmc_vadc.c ****   return result;
 5080              	 .loc 2 1949 0
 5081 002e FB7B     	 ldrb r3,[r7,#15]
1950:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5082              	 .loc 2 1950 0
 5083 0030 1846     	 mov r0,r3
 5084 0032 1437     	 adds r7,r7,#20
 5085              	.LCFI406:
 5086              	 .cfi_def_cfa_offset 4
 5087 0034 BD46     	 mov sp,r7
 5088              	.LCFI407:
 5089              	 .cfi_def_cfa_register 13
 5090              	 
 5091 0036 5DF8047B 	 ldr r7,[sp],#4
 5092              	.LCFI408:
 5093              	 .cfi_restore 7
 5094              	 .cfi_def_cfa_offset 0
 5095 003a 7047     	 bx lr
 5096              	 .cfi_endproc
 5097              	.LFE289:
 5099              	 .section .text.XMC_VADC_GROUP_SetResultSubtractionValue,"ax",%progbits
 5100              	 .align 2
 5101              	 .global XMC_VADC_GROUP_SetResultSubtractionValue
 5102              	 .thumb
 5103              	 .thumb_func
 5105              	XMC_VADC_GROUP_SetResultSubtractionValue:
 5106              	.LFB290:
1951:../Libraries/XMCLib/src/xmc_vadc.c **** 
1952:../Libraries/XMCLib/src/xmc_vadc.c **** /* Applicable to fast compare mode, this API sets up the value which is to be compared against conv
1953:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultSubtractionValue(XMC_VADC_GROUP_t *const group_ptr,
1954:../Libraries/XMCLib/src/xmc_vadc.c ****                                               const uint16_t subtraction_val)
1955:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5107              	 .loc 2 1955 0
 5108              	 .cfi_startproc
 5109              	 
 5110              	 
 5111              	 
 5112 0000 80B4     	 push {r7}
 5113              	.LCFI409:
 5114              	 .cfi_def_cfa_offset 4
 5115              	 .cfi_offset 7,-4
 5116 0002 85B0     	 sub sp,sp,#20
 5117              	.LCFI410:
 5118              	 .cfi_def_cfa_offset 24
 5119 0004 00AF     	 add r7,sp,#0
 5120              	.LCFI411:
 5121              	 .cfi_def_cfa_register 7
 5122 0006 7860     	 str r0,[r7,#4]
 5123 0008 0B46     	 mov r3,r1
 5124 000a 7B80     	 strh r3,[r7,#2]
1956:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t res;
1957:../Libraries/XMCLib/src/xmc_vadc.c **** 
1958:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultSubtractionValue:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_P
1959:../Libraries/XMCLib/src/xmc_vadc.c **** 
1960:../Libraries/XMCLib/src/xmc_vadc.c ****   res = group_ptr->RES[0];
 5125              	 .loc 2 1960 0
 5126 000c 7B68     	 ldr r3,[r7,#4]
 5127 000e D3F80033 	 ldr r3,[r3,#768]
 5128 0012 FB60     	 str r3,[r7,#12]
1961:../Libraries/XMCLib/src/xmc_vadc.c ****   res &= ~((uint32_t)VADC_G_RES_RESULT_Msk);
 5129              	 .loc 2 1961 0
 5130 0014 FB68     	 ldr r3,[r7,#12]
 5131 0016 1B0C     	 lsrs r3,r3,#16
 5132 0018 1B04     	 lsls r3,r3,#16
 5133 001a FB60     	 str r3,[r7,#12]
1962:../Libraries/XMCLib/src/xmc_vadc.c ****   res |= (uint32_t)subtraction_val;
 5134              	 .loc 2 1962 0
 5135 001c 7B88     	 ldrh r3,[r7,#2]
 5136 001e FA68     	 ldr r2,[r7,#12]
 5137 0020 1343     	 orrs r3,r3,r2
 5138 0022 FB60     	 str r3,[r7,#12]
1963:../Libraries/XMCLib/src/xmc_vadc.c ****   group_ptr->RES[0] = res;
 5139              	 .loc 2 1963 0
 5140 0024 7B68     	 ldr r3,[r7,#4]
 5141 0026 FA68     	 ldr r2,[r7,#12]
 5142 0028 C3F80023 	 str r2,[r3,#768]
1964:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5143              	 .loc 2 1964 0
 5144 002c 1437     	 adds r7,r7,#20
 5145              	.LCFI412:
 5146              	 .cfi_def_cfa_offset 4
 5147 002e BD46     	 mov sp,r7
 5148              	.LCFI413:
 5149              	 .cfi_def_cfa_register 13
 5150              	 
 5151 0030 5DF8047B 	 ldr r7,[sp],#4
 5152              	.LCFI414:
 5153              	 .cfi_restore 7
 5154              	 .cfi_def_cfa_offset 0
 5155 0034 7047     	 bx lr
 5156              	 .cfi_endproc
 5157              	.LFE290:
 5159 0036 00BF     	 .section .text.XMC_VADC_GROUP_SetResultInterruptNode,"ax",%progbits
 5160              	 .align 2
 5161              	 .global XMC_VADC_GROUP_SetResultInterruptNode
 5162              	 .thumb
 5163              	 .thumb_func
 5165              	XMC_VADC_GROUP_SetResultInterruptNode:
 5166              	.LFB291:
1965:../Libraries/XMCLib/src/xmc_vadc.c **** 
1966:../Libraries/XMCLib/src/xmc_vadc.c **** 
1967:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to select a service request line (NVIC Node) for result event of specified unit of result ha
1968:../Libraries/XMCLib/src/xmc_vadc.c **** void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
1969:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const uint32_t res_reg,
1970:../Libraries/XMCLib/src/xmc_vadc.c ****                                            const XMC_VADC_SR_t sr)
1971:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5167              	 .loc 2 1971 0
 5168              	 .cfi_startproc
 5169              	 
 5170              	 
 5171              	 
 5172 0000 80B4     	 push {r7}
 5173              	.LCFI415:
 5174              	 .cfi_def_cfa_offset 4
 5175              	 .cfi_offset 7,-4
 5176 0002 87B0     	 sub sp,sp,#28
 5177              	.LCFI416:
 5178              	 .cfi_def_cfa_offset 32
 5179 0004 00AF     	 add r7,sp,#0
 5180              	.LCFI417:
 5181              	 .cfi_def_cfa_register 7
 5182 0006 F860     	 str r0,[r7,#12]
 5183 0008 B960     	 str r1,[r7,#8]
 5184 000a 1346     	 mov r3,r2
 5185 000c FB71     	 strb r3,[r7,#7]
1972:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t route_mask;
1973:../Libraries/XMCLib/src/xmc_vadc.c **** 
1974:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(
1975:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_N
1976:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_S
1977:../Libraries/XMCLib/src/xmc_vadc.c **** 
1978:../Libraries/XMCLib/src/xmc_vadc.c ****   if (res_reg <= 7U)
 5186              	 .loc 2 1978 0
 5187 000e BB68     	 ldr r3,[r7,#8]
 5188 0010 072B     	 cmp r3,#7
 5189 0012 18D8     	 bhi .L181
1979:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1980:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask  = group_ptr->REVNP0;
 5190              	 .loc 2 1980 0
 5191 0014 FB68     	 ldr r3,[r7,#12]
 5192 0016 D3F8B031 	 ldr r3,[r3,#432]
 5193 001a 7B61     	 str r3,[r7,#20]
1981:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 5194              	 .loc 2 1981 0
 5195 001c BB68     	 ldr r3,[r7,#8]
 5196 001e 9B00     	 lsls r3,r3,#2
 5197 0020 1A46     	 mov r2,r3
 5198 0022 0F23     	 movs r3,#15
 5199 0024 9340     	 lsls r3,r3,r2
 5200 0026 DB43     	 mvns r3,r3
 5201 0028 7A69     	 ldr r2,[r7,#20]
 5202 002a 1340     	 ands r3,r3,r2
 5203 002c 7B61     	 str r3,[r7,#20]
1982:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 5204              	 .loc 2 1982 0
 5205 002e FB79     	 ldrb r3,[r7,#7]
 5206 0030 BA68     	 ldr r2,[r7,#8]
 5207 0032 9200     	 lsls r2,r2,#2
 5208 0034 9340     	 lsls r3,r3,r2
 5209 0036 7A69     	 ldr r2,[r7,#20]
 5210 0038 1343     	 orrs r3,r3,r2
 5211 003a 7B61     	 str r3,[r7,#20]
1983:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP0 = route_mask;
 5212              	 .loc 2 1983 0
 5213 003c FB68     	 ldr r3,[r7,#12]
 5214 003e 7A69     	 ldr r2,[r7,#20]
 5215 0040 C3F8B021 	 str r2,[r3,#432]
 5216 0044 1EE0     	 b .L180
 5217              	.L181:
1984:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1985:../Libraries/XMCLib/src/xmc_vadc.c ****   else
1986:../Libraries/XMCLib/src/xmc_vadc.c ****   {
1987:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask = group_ptr->REVNP1;
 5218              	 .loc 2 1987 0
 5219 0046 FB68     	 ldr r3,[r7,#12]
 5220 0048 D3F8B431 	 ldr r3,[r3,#436]
 5221 004c 7B61     	 str r3,[r7,#20]
1988:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 5222              	 .loc 2 1988 0
 5223 004e BB68     	 ldr r3,[r7,#8]
 5224 0050 03F18043 	 add r3,r3,#1073741824
 5225 0054 083B     	 subs r3,r3,#8
 5226 0056 9B00     	 lsls r3,r3,#2
 5227 0058 1A46     	 mov r2,r3
 5228 005a 0F23     	 movs r3,#15
 5229 005c 9340     	 lsls r3,r3,r2
 5230 005e DB43     	 mvns r3,r3
 5231 0060 7A69     	 ldr r2,[r7,#20]
 5232 0062 1340     	 ands r3,r3,r2
 5233 0064 7B61     	 str r3,[r7,#20]
1989:../Libraries/XMCLib/src/xmc_vadc.c ****     route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 5234              	 .loc 2 1989 0
 5235 0066 FA79     	 ldrb r2,[r7,#7]
 5236 0068 BB68     	 ldr r3,[r7,#8]
 5237 006a 03F18043 	 add r3,r3,#1073741824
 5238 006e 083B     	 subs r3,r3,#8
 5239 0070 9B00     	 lsls r3,r3,#2
 5240 0072 02FA03F3 	 lsl r3,r2,r3
 5241 0076 7A69     	 ldr r2,[r7,#20]
 5242 0078 1343     	 orrs r3,r3,r2
 5243 007a 7B61     	 str r3,[r7,#20]
1990:../Libraries/XMCLib/src/xmc_vadc.c ****     group_ptr->REVNP1 = route_mask;
 5244              	 .loc 2 1990 0
 5245 007c FB68     	 ldr r3,[r7,#12]
 5246 007e 7A69     	 ldr r2,[r7,#20]
 5247 0080 C3F8B421 	 str r2,[r3,#436]
 5248              	.L180:
1991:../Libraries/XMCLib/src/xmc_vadc.c ****   }
1992:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5249              	 .loc 2 1992 0
 5250 0084 1C37     	 adds r7,r7,#28
 5251              	.LCFI418:
 5252              	 .cfi_def_cfa_offset 4
 5253 0086 BD46     	 mov sp,r7
 5254              	.LCFI419:
 5255              	 .cfi_def_cfa_register 13
 5256              	 
 5257 0088 5DF8047B 	 ldr r7,[sp],#4
 5258              	.LCFI420:
 5259              	 .cfi_restore 7
 5260              	 .cfi_def_cfa_offset 0
 5261 008c 7047     	 bx lr
 5262              	 .cfi_endproc
 5263              	.LFE291:
 5265 008e 00BF     	 .section .text.XMC_VADC_GROUP_GetResultFifoTail,"ax",%progbits
 5266              	 .align 2
 5267              	 .global XMC_VADC_GROUP_GetResultFifoTail
 5268              	 .thumb
 5269              	 .thumb_func
 5271              	XMC_VADC_GROUP_GetResultFifoTail:
 5272              	.LFB292:
1993:../Libraries/XMCLib/src/xmc_vadc.c **** 
1994:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the tail of the fifo which the specified result register is a part of */
1995:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoTail(XMC_VADC_GROUP_t *const group_ptr, uint32_t res_reg)
1996:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5273              	 .loc 2 1996 0
 5274              	 .cfi_startproc
 5275              	 
 5276              	 
 5277 0000 80B5     	 push {r7,lr}
 5278              	.LCFI421:
 5279              	 .cfi_def_cfa_offset 8
 5280              	 .cfi_offset 7,-8
 5281              	 .cfi_offset 14,-4
 5282 0002 86B0     	 sub sp,sp,#24
 5283              	.LCFI422:
 5284              	 .cfi_def_cfa_offset 32
 5285 0004 00AF     	 add r7,sp,#0
 5286              	.LCFI423:
 5287              	 .cfi_def_cfa_register 7
 5288 0006 7860     	 str r0,[r7,#4]
 5289 0008 3960     	 str r1,[r7]
1997:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t tail;
1998:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
1999:../Libraries/XMCLib/src/xmc_vadc.c ****   int32_t i;
2000:../Libraries/XMCLib/src/xmc_vadc.c ****   bool exit_flag;
2001:../Libraries/XMCLib/src/xmc_vadc.c **** 
2002:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2003:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoTail:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2004:../Libraries/XMCLib/src/xmc_vadc.c **** 
2005:../Libraries/XMCLib/src/xmc_vadc.c ****   tail = 0U;
 5290              	 .loc 2 2005 0
 5291 000a 0023     	 movs r3,#0
 5292 000c 7B61     	 str r3,[r7,#20]
2006:../Libraries/XMCLib/src/xmc_vadc.c ****   exit_flag= (bool)false;
 5293              	 .loc 2 2006 0
 5294 000e 0023     	 movs r3,#0
 5295 0010 FB73     	 strb r3,[r7,#15]
2007:../Libraries/XMCLib/src/xmc_vadc.c **** 
2008:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5296              	 .loc 2 2008 0
 5297 0012 7868     	 ldr r0,[r7,#4]
 5298 0014 3968     	 ldr r1,[r7]
 5299 0016 FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5300 001a 0346     	 mov r3,r0
 5301 001c 002B     	 cmp r3,#0
 5302 001e 02D0     	 beq .L184
2009:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2010:../Libraries/XMCLib/src/xmc_vadc.c ****     res_reg = res_reg - 1U;
 5303              	 .loc 2 2010 0
 5304 0020 3B68     	 ldr r3,[r7]
 5305 0022 013B     	 subs r3,r3,#1
 5306 0024 3B60     	 str r3,[r7]
 5307              	.L184:
2011:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2012:../Libraries/XMCLib/src/xmc_vadc.c **** 
2013:../Libraries/XMCLib/src/xmc_vadc.c ****   /* Border condition */
2014:../Libraries/XMCLib/src/xmc_vadc.c ****   if (0U == res_reg)
 5308              	 .loc 2 2014 0
 5309 0026 3B68     	 ldr r3,[r7]
 5310 0028 002B     	 cmp r3,#0
 5311 002a 02D1     	 bne .L185
2015:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2016:../Libraries/XMCLib/src/xmc_vadc.c ****     tail = 0U;
 5312              	 .loc 2 2016 0
 5313 002c 0023     	 movs r3,#0
 5314 002e 7B61     	 str r3,[r7,#20]
 5315 0030 26E0     	 b .L186
 5316              	.L185:
2017:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2018:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2019:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2020:../Libraries/XMCLib/src/xmc_vadc.c ****     /* Stop either at a node that does not have FEN set or at Node-0 */
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = (int32_t)res_reg; i >= (int32_t)0; i--)
 5317              	 .loc 2 2021 0
 5318 0032 3B68     	 ldr r3,[r7]
 5319 0034 3B61     	 str r3,[r7,#16]
 5320 0036 20E0     	 b .L187
 5321              	.L192:
2022:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2023:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr = group_ptr->RCR[i];
 5322              	 .loc 2 2023 0
 5323 0038 7B68     	 ldr r3,[r7,#4]
 5324 003a 3A69     	 ldr r2,[r7,#16]
 5325 003c A032     	 adds r2,r2,#160
 5326 003e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5327 0042 BB60     	 str r3,[r7,#8]
2024:../Libraries/XMCLib/src/xmc_vadc.c ****        rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5328              	 .loc 2 2024 0
 5329 0044 BB68     	 ldr r3,[r7,#8]
 5330 0046 03F0C063 	 and r3,r3,#100663296
 5331 004a BB60     	 str r3,[r7,#8]
2025:../Libraries/XMCLib/src/xmc_vadc.c **** 
2026:../Libraries/XMCLib/src/xmc_vadc.c ****        if (rcr)
 5332              	 .loc 2 2026 0
 5333 004c BB68     	 ldr r3,[r7,#8]
 5334 004e 002B     	 cmp r3,#0
 5335 0050 07D0     	 beq .L188
2027:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2028:../Libraries/XMCLib/src/xmc_vadc.c ****          if ((int32_t)0 == i)
 5336              	 .loc 2 2028 0
 5337 0052 3B69     	 ldr r3,[r7,#16]
 5338 0054 002B     	 cmp r3,#0
 5339 0056 09D1     	 bne .L190
2029:../Libraries/XMCLib/src/xmc_vadc.c ****          {
2030:../Libraries/XMCLib/src/xmc_vadc.c ****           /* No more nodes. Stop here */
2031:../Libraries/XMCLib/src/xmc_vadc.c ****           tail = (uint32_t)0;
 5340              	 .loc 2 2031 0
 5341 0058 0023     	 movs r3,#0
 5342 005a 7B61     	 str r3,[r7,#20]
2032:../Libraries/XMCLib/src/xmc_vadc.c ****           exit_flag = (bool)true;
 5343              	 .loc 2 2032 0
 5344 005c 0123     	 movs r3,#1
 5345 005e FB73     	 strb r3,[r7,#15]
 5346 0060 04E0     	 b .L190
 5347              	.L188:
2033:../Libraries/XMCLib/src/xmc_vadc.c ****          }
2034:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2035:../Libraries/XMCLib/src/xmc_vadc.c ****        else
2036:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2037:../Libraries/XMCLib/src/xmc_vadc.c ****          /* The preceding register forms the tail of the FIFO */
2038:../Libraries/XMCLib/src/xmc_vadc.c ****          tail = (uint32_t)i + (uint32_t)1;
 5348              	 .loc 2 2038 0
 5349 0062 3B69     	 ldr r3,[r7,#16]
 5350 0064 0133     	 adds r3,r3,#1
 5351 0066 7B61     	 str r3,[r7,#20]
2039:../Libraries/XMCLib/src/xmc_vadc.c ****          exit_flag = (bool)true;
 5352              	 .loc 2 2039 0
 5353 0068 0123     	 movs r3,#1
 5354 006a FB73     	 strb r3,[r7,#15]
 5355              	.L190:
2040:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2041:../Libraries/XMCLib/src/xmc_vadc.c ****        if (exit_flag)
 5356              	 .loc 2 2041 0
 5357 006c FB7B     	 ldrb r3,[r7,#15]
 5358 006e 002B     	 cmp r3,#0
 5359 0070 00D0     	 beq .L191
2042:../Libraries/XMCLib/src/xmc_vadc.c ****        {
2043:../Libraries/XMCLib/src/xmc_vadc.c ****          break;
 5360              	 .loc 2 2043 0
 5361 0072 05E0     	 b .L186
 5362              	.L191:
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5363              	 .loc 2 2021 0 discriminator 2
 5364 0074 3B69     	 ldr r3,[r7,#16]
 5365 0076 013B     	 subs r3,r3,#1
 5366 0078 3B61     	 str r3,[r7,#16]
 5367              	.L187:
2021:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5368              	 .loc 2 2021 0 is_stmt 0 discriminator 1
 5369 007a 3B69     	 ldr r3,[r7,#16]
 5370 007c 002B     	 cmp r3,#0
 5371 007e DBDA     	 bge .L192
 5372              	.L186:
2044:../Libraries/XMCLib/src/xmc_vadc.c ****        }
2045:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2046:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2047:../Libraries/XMCLib/src/xmc_vadc.c ****   return tail;
 5373              	 .loc 2 2047 0 is_stmt 1
 5374 0080 7B69     	 ldr r3,[r7,#20]
2048:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5375              	 .loc 2 2048 0
 5376 0082 1846     	 mov r0,r3
 5377 0084 1837     	 adds r7,r7,#24
 5378              	.LCFI424:
 5379              	 .cfi_def_cfa_offset 8
 5380 0086 BD46     	 mov sp,r7
 5381              	.LCFI425:
 5382              	 .cfi_def_cfa_register 13
 5383              	 
 5384 0088 80BD     	 pop {r7,pc}
 5385              	 .cfi_endproc
 5386              	.LFE292:
 5388              	 .section .text.XMC_VADC_GROUP_GetResultFifoHead,"ax",%progbits
 5389              	 .align 2
 5390              	 .global XMC_VADC_GROUP_GetResultFifoHead
 5391              	 .thumb
 5392              	 .thumb_func
 5394              	XMC_VADC_GROUP_GetResultFifoHead:
 5395              	.LFB293:
2049:../Libraries/XMCLib/src/xmc_vadc.c **** 
2050:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to retrieve the head of the fifo which the specified result register is a part of */
2051:../Libraries/XMCLib/src/xmc_vadc.c **** uint32_t XMC_VADC_GROUP_GetResultFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg
2052:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5396              	 .loc 2 2052 0
 5397              	 .cfi_startproc
 5398              	 
 5399              	 
 5400 0000 80B5     	 push {r7,lr}
 5401              	.LCFI426:
 5402              	 .cfi_def_cfa_offset 8
 5403              	 .cfi_offset 7,-8
 5404              	 .cfi_offset 14,-4
 5405 0002 86B0     	 sub sp,sp,#24
 5406              	.LCFI427:
 5407              	 .cfi_def_cfa_offset 32
 5408 0004 00AF     	 add r7,sp,#0
 5409              	.LCFI428:
 5410              	 .cfi_def_cfa_register 7
 5411 0006 7860     	 str r0,[r7,#4]
 5412 0008 3960     	 str r1,[r7]
2053:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t head;
2054:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr;
2055:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t i;
2056:../Libraries/XMCLib/src/xmc_vadc.c **** 
2057:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group
2058:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_GetResultFifoHead:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RE
2059:../Libraries/XMCLib/src/xmc_vadc.c **** 
2060:../Libraries/XMCLib/src/xmc_vadc.c ****   if ((bool)true == XMC_VADC_GROUP_IsResultRegisterFifoHead(group_ptr, res_reg))
 5413              	 .loc 2 2060 0
 5414 000a 7868     	 ldr r0,[r7,#4]
 5415 000c 3968     	 ldr r1,[r7]
 5416 000e FFF7FEFF 	 bl XMC_VADC_GROUP_IsResultRegisterFifoHead
 5417 0012 0346     	 mov r3,r0
 5418 0014 002B     	 cmp r3,#0
 5419 0016 02D0     	 beq .L195
2061:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2062:../Libraries/XMCLib/src/xmc_vadc.c ****       head = res_reg;
 5420              	 .loc 2 2062 0
 5421 0018 3B68     	 ldr r3,[r7]
 5422 001a 7B61     	 str r3,[r7,#20]
 5423 001c 1AE0     	 b .L196
 5424              	.L195:
2063:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2064:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2065:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2066:../Libraries/XMCLib/src/xmc_vadc.c ****     head = XMC_VADC_NUM_RESULT_REGISTERS - (uint32_t)1;
 5425              	 .loc 2 2066 0
 5426 001e 0F23     	 movs r3,#15
 5427 0020 7B61     	 str r3,[r7,#20]
2067:../Libraries/XMCLib/src/xmc_vadc.c **** 
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     for(i = res_reg; i < XMC_VADC_NUM_RESULT_REGISTERS ; i++)
 5428              	 .loc 2 2068 0
 5429 0022 3B68     	 ldr r3,[r7]
 5430 0024 3B61     	 str r3,[r7,#16]
 5431 0026 12E0     	 b .L197
 5432              	.L199:
2069:../Libraries/XMCLib/src/xmc_vadc.c ****     {
2070:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr = group_ptr->RCR[i];
 5433              	 .loc 2 2070 0
 5434 0028 7B68     	 ldr r3,[r7,#4]
 5435 002a 3A69     	 ldr r2,[r7,#16]
 5436 002c A032     	 adds r2,r2,#160
 5437 002e 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5438 0032 FB60     	 str r3,[r7,#12]
2071:../Libraries/XMCLib/src/xmc_vadc.c ****       rcr &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5439              	 .loc 2 2071 0
 5440 0034 FB68     	 ldr r3,[r7,#12]
 5441 0036 03F0C063 	 and r3,r3,#100663296
 5442 003a FB60     	 str r3,[r7,#12]
2072:../Libraries/XMCLib/src/xmc_vadc.c **** 
2073:../Libraries/XMCLib/src/xmc_vadc.c ****       if (!rcr)
 5443              	 .loc 2 2073 0
 5444 003c FB68     	 ldr r3,[r7,#12]
 5445 003e 002B     	 cmp r3,#0
 5446 0040 02D1     	 bne .L198
2074:../Libraries/XMCLib/src/xmc_vadc.c ****       {
2075:../Libraries/XMCLib/src/xmc_vadc.c ****         /* This node forms the head of the FIFO */
2076:../Libraries/XMCLib/src/xmc_vadc.c ****         head = i ;
 5447              	 .loc 2 2076 0
 5448 0042 3B69     	 ldr r3,[r7,#16]
 5449 0044 7B61     	 str r3,[r7,#20]
2077:../Libraries/XMCLib/src/xmc_vadc.c ****         break;
 5450              	 .loc 2 2077 0
 5451 0046 05E0     	 b .L196
 5452              	.L198:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5453              	 .loc 2 2068 0 discriminator 2
 5454 0048 3B69     	 ldr r3,[r7,#16]
 5455 004a 0133     	 adds r3,r3,#1
 5456 004c 3B61     	 str r3,[r7,#16]
 5457              	.L197:
2068:../Libraries/XMCLib/src/xmc_vadc.c ****     {
 5458              	 .loc 2 2068 0 is_stmt 0 discriminator 1
 5459 004e 3B69     	 ldr r3,[r7,#16]
 5460 0050 0F2B     	 cmp r3,#15
 5461 0052 E9D9     	 bls .L199
 5462              	.L196:
2078:../Libraries/XMCLib/src/xmc_vadc.c ****       }
2079:../Libraries/XMCLib/src/xmc_vadc.c ****     }
2080:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2081:../Libraries/XMCLib/src/xmc_vadc.c ****   return head;
 5463              	 .loc 2 2081 0 is_stmt 1
 5464 0054 7B69     	 ldr r3,[r7,#20]
2082:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5465              	 .loc 2 2082 0
 5466 0056 1846     	 mov r0,r3
 5467 0058 1837     	 adds r7,r7,#24
 5468              	.LCFI429:
 5469              	 .cfi_def_cfa_offset 8
 5470 005a BD46     	 mov sp,r7
 5471              	.LCFI430:
 5472              	 .cfi_def_cfa_register 13
 5473              	 
 5474 005c 80BD     	 pop {r7,pc}
 5475              	 .cfi_endproc
 5476              	.LFE293:
 5478 005e 00BF     	 .section .text.XMC_VADC_GROUP_IsResultRegisterFifoHead,"ax",%progbits
 5479              	 .align 2
 5480              	 .global XMC_VADC_GROUP_IsResultRegisterFifoHead
 5481              	 .thumb
 5482              	 .thumb_func
 5484              	XMC_VADC_GROUP_IsResultRegisterFifoHead:
 5485              	.LFB294:
2083:../Libraries/XMCLib/src/xmc_vadc.c **** 
2084:../Libraries/XMCLib/src/xmc_vadc.c **** /* API to determine if the specified result register is the head of a result fifo */
2085:../Libraries/XMCLib/src/xmc_vadc.c **** bool XMC_VADC_GROUP_IsResultRegisterFifoHead(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_
2086:../Libraries/XMCLib/src/xmc_vadc.c **** {
 5486              	 .loc 2 2086 0
 5487              	 .cfi_startproc
 5488              	 
 5489              	 
 5490              	 
 5491 0000 80B4     	 push {r7}
 5492              	.LCFI431:
 5493              	 .cfi_def_cfa_offset 4
 5494              	 .cfi_offset 7,-4
 5495 0002 87B0     	 sub sp,sp,#28
 5496              	.LCFI432:
 5497              	 .cfi_def_cfa_offset 32
 5498 0004 00AF     	 add r7,sp,#0
 5499              	.LCFI433:
 5500              	 .cfi_def_cfa_register 7
 5501 0006 7860     	 str r0,[r7,#4]
 5502 0008 3960     	 str r1,[r7]
2087:../Libraries/XMCLib/src/xmc_vadc.c ****   bool ret_val;
2088:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_head;
2089:../Libraries/XMCLib/src/xmc_vadc.c ****   uint32_t rcr_next;
2090:../Libraries/XMCLib/src/xmc_vadc.c **** 
2091:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PT
2092:../Libraries/XMCLib/src/xmc_vadc.c ****   XMC_ASSERT("XMC_VADC_GROUP_IsResultRegisterFifoHead:Wrong Result Register",
2093:../Libraries/XMCLib/src/xmc_vadc.c ****              ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
2094:../Libraries/XMCLib/src/xmc_vadc.c **** 
2095:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head = group_ptr->RCR[res_reg];
 5503              	 .loc 2 2095 0
 5504 000a 7B68     	 ldr r3,[r7,#4]
 5505 000c 3A68     	 ldr r2,[r7]
 5506 000e A032     	 adds r2,r2,#160
 5507 0010 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5508 0014 3B61     	 str r3,[r7,#16]
2096:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_head &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5509              	 .loc 2 2096 0
 5510 0016 3B69     	 ldr r3,[r7,#16]
 5511 0018 03F0C063 	 and r3,r3,#100663296
 5512 001c 3B61     	 str r3,[r7,#16]
2097:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next = group_ptr->RCR[res_reg - (uint32_t)1];
 5513              	 .loc 2 2097 0
 5514 001e 3B68     	 ldr r3,[r7]
 5515 0020 5A1E     	 subs r2,r3,#1
 5516 0022 7B68     	 ldr r3,[r7,#4]
 5517 0024 A032     	 adds r2,r2,#160
 5518 0026 53F82230 	 ldr r3,[r3,r2,lsl#2]
 5519 002a FB60     	 str r3,[r7,#12]
2098:../Libraries/XMCLib/src/xmc_vadc.c ****   rcr_next &= (uint32_t)VADC_G_RCR_FEN_Msk;
 5520              	 .loc 2 2098 0
 5521 002c FB68     	 ldr r3,[r7,#12]
 5522 002e 03F0C063 	 and r3,r3,#100663296
 5523 0032 FB60     	 str r3,[r7,#12]
2099:../Libraries/XMCLib/src/xmc_vadc.c **** 
2100:../Libraries/XMCLib/src/xmc_vadc.c ****   if (rcr_head)
 5524              	 .loc 2 2100 0
 5525 0034 3B69     	 ldr r3,[r7,#16]
 5526 0036 002B     	 cmp r3,#0
 5527 0038 02D0     	 beq .L202
2101:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2102:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5528              	 .loc 2 2102 0
 5529 003a 0023     	 movs r3,#0
 5530 003c FB75     	 strb r3,[r7,#23]
 5531 003e 07E0     	 b .L203
 5532              	.L202:
2103:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2104:../Libraries/XMCLib/src/xmc_vadc.c ****   else if (rcr_next)
 5533              	 .loc 2 2104 0
 5534 0040 FB68     	 ldr r3,[r7,#12]
 5535 0042 002B     	 cmp r3,#0
 5536 0044 02D0     	 beq .L204
2105:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2106:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)true;
 5537              	 .loc 2 2106 0
 5538 0046 0123     	 movs r3,#1
 5539 0048 FB75     	 strb r3,[r7,#23]
 5540 004a 01E0     	 b .L203
 5541              	.L204:
2107:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2108:../Libraries/XMCLib/src/xmc_vadc.c ****   else
2109:../Libraries/XMCLib/src/xmc_vadc.c ****   {
2110:../Libraries/XMCLib/src/xmc_vadc.c ****     ret_val = (bool)false;
 5542              	 .loc 2 2110 0
 5543 004c 0023     	 movs r3,#0
 5544 004e FB75     	 strb r3,[r7,#23]
 5545              	.L203:
2111:../Libraries/XMCLib/src/xmc_vadc.c ****   }
2112:../Libraries/XMCLib/src/xmc_vadc.c **** 
2113:../Libraries/XMCLib/src/xmc_vadc.c ****   return ret_val;
 5546              	 .loc 2 2113 0
 5547 0050 FB7D     	 ldrb r3,[r7,#23]
2114:../Libraries/XMCLib/src/xmc_vadc.c **** }
 5548              	 .loc 2 2114 0
 5549 0052 1846     	 mov r0,r3
 5550 0054 1C37     	 adds r7,r7,#28
 5551              	.LCFI434:
 5552              	 .cfi_def_cfa_offset 4
 5553 0056 BD46     	 mov sp,r7
 5554              	.LCFI435:
 5555              	 .cfi_def_cfa_register 13
 5556              	 
 5557 0058 5DF8047B 	 ldr r7,[sp],#4
 5558              	.LCFI436:
 5559              	 .cfi_restore 7
 5560              	 .cfi_def_cfa_offset 0
 5561 005c 7047     	 bx lr
 5562              	 .cfi_endproc
 5563              	.LFE294:
 5565 005e 00BF     	 .text
 5566              	.Letext0:
 5567              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 5568              	 .file 4 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 5569              	 .file 5 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 5570              	 .file 6 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc4_scu.h"
 5571              	 .file 7 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Include/core_cm4.h"
 5572              	 .file 8 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_vadc.c
    {standard input}:20     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 $t
    {standard input}:24     .text.XMC_VADC_GROUP_ExternalMuxControlInit:00000000 XMC_VADC_GROUP_ExternalMuxControlInit
    {standard input}:106    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 $t
    {standard input}:110    .text.XMC_VADC_GROUP_ScanEnableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanEnableArbitrationSlot
    {standard input}:151    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 $t
    {standard input}:155    .text.XMC_VADC_GROUP_ScanDisableArbitrationSlot:00000000 XMC_VADC_GROUP_ScanDisableArbitrationSlot
    {standard input}:196    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 $t
    {standard input}:200    .text.XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundEnableArbitrationSlot
    {standard input}:241    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 $t
    {standard input}:245    .text.XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:00000000 XMC_VADC_GROUP_BackgroundDisableArbitrationSlot
    {standard input}:286    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 $t
    {standard input}:290    .text.XMC_VADC_GROUP_QueueEnableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueEnableArbitrationSlot
    {standard input}:331    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 $t
    {standard input}:335    .text.XMC_VADC_GROUP_QueueDisableArbitrationSlot:00000000 XMC_VADC_GROUP_QueueDisableArbitrationSlot
    {standard input}:376    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 $t
    {standard input}:380    .text.XMC_VADC_GROUP_QueueFlushEntries:00000000 XMC_VADC_GROUP_QueueFlushEntries
    {standard input}:430    .rodata.g_xmc_vadc_group_array:00000000 $d
    {standard input}:433    .rodata.g_xmc_vadc_group_array:00000000 g_xmc_vadc_group_array
    {standard input}:439    .text.XMC_VADC_GLOBAL_EnableModule:00000000 $t
    {standard input}:444    .text.XMC_VADC_GLOBAL_EnableModule:00000000 XMC_VADC_GLOBAL_EnableModule
    {standard input}:468    .text.XMC_VADC_GLOBAL_DisableModule:00000000 $t
    {standard input}:473    .text.XMC_VADC_GLOBAL_DisableModule:00000000 XMC_VADC_GLOBAL_DisableModule
    {standard input}:496    .text.XMC_VADC_GLOBAL_Init:00000000 $t
    {standard input}:501    .text.XMC_VADC_GLOBAL_Init:00000000 XMC_VADC_GLOBAL_Init
    {standard input}:566    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 $t
    {standard input}:571    .text.XMC_VADC_GLOBAL_InputClassInit:00000000 XMC_VADC_GLOBAL_InputClassInit
    {standard input}:632    .text.XMC_VADC_GLOBAL_InputClassInit:00000044 $d
    {standard input}:637    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 $t
    {standard input}:642    .text.XMC_VADC_GLOBAL_StartupCalibration:00000000 XMC_VADC_GLOBAL_StartupCalibration
    {standard input}:717    .text.XMC_VADC_GLOBAL_StartupCalibration:0000005c $d
    {standard input}:722    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 $t
    {standard input}:727    .text.XMC_VADC_GLOBAL_SetBoundaries:00000000 XMC_VADC_GLOBAL_SetBoundaries
    {standard input}:782    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 $t
    {standard input}:787    .text.XMC_VADC_GLOBAL_SetIndividualBoundary:00000000 XMC_VADC_GLOBAL_SetIndividualBoundary
    {standard input}:866    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 $t
    {standard input}:871    .text.XMC_VADC_GLOBAL_SetCompareValue:00000000 XMC_VADC_GLOBAL_SetCompareValue
    {standard input}:923    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 $t
    {standard input}:928    .text.XMC_VADC_GLOBAL_GetCompareResult:00000000 XMC_VADC_GLOBAL_GetCompareResult
    {standard input}:986    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 $t
    {standard input}:991    .text.XMC_VADC_GLOBAL_BindGroupToEMux:00000000 XMC_VADC_GLOBAL_BindGroupToEMux
    {standard input}:1064   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 $t
    {standard input}:1069   .text.XMC_VADC_GLOBAL_SetResultEventInterruptNode:00000000 XMC_VADC_GLOBAL_SetResultEventInterruptNode
    {standard input}:1134   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:1139   .text.XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:00000000 XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode
    {standard input}:1203   .text.XMC_VADC_GROUP_Init:00000000 $t
    {standard input}:1208   .text.XMC_VADC_GROUP_Init:00000000 XMC_VADC_GROUP_Init
    {standard input}:1288   .text.XMC_VADC_GROUP_InputClassInit:00000000 XMC_VADC_GROUP_InputClassInit
    {standard input}:1283   .text.XMC_VADC_GROUP_InputClassInit:00000000 $t
    {standard input}:1416   .text.XMC_VADC_GROUP_SetPowerMode:00000000 $t
    {standard input}:1421   .text.XMC_VADC_GROUP_SetPowerMode:00000000 XMC_VADC_GROUP_SetPowerMode
    {standard input}:1475   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 $t
    {standard input}:1480   .text.XMC_VADC_GROUP_SetSyncSlave:00000000 XMC_VADC_GROUP_SetSyncSlave
    {standard input}:1544   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 $t
    {standard input}:1549   .text.XMC_VADC_GROUP_SetSyncMaster:00000000 XMC_VADC_GROUP_SetSyncMaster
    {standard input}:1596   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 $t
    {standard input}:1601   .text.XMC_VADC_GROUP_CheckSlaveReadiness:00000000 XMC_VADC_GROUP_CheckSlaveReadiness
    {standard input}:1684   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 $t
    {standard input}:1689   .text.XMC_VADC_GROUP_IgnoreSlaveReadiness:00000000 XMC_VADC_GROUP_IgnoreSlaveReadiness
    {standard input}:1773   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 $t
    {standard input}:1778   .text.XMC_VADC_GROUP_EnableChannelSyncRequest:00000000 XMC_VADC_GROUP_EnableChannelSyncRequest
    {standard input}:1834   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 $t
    {standard input}:1839   .text.XMC_VADC_GROUP_DisableChannelSyncRequest:00000000 XMC_VADC_GROUP_DisableChannelSyncRequest
    {standard input}:1895   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 $t
    {standard input}:1900   .text.XMC_VADC_GROUP_IsConverterBusy:00000000 XMC_VADC_GROUP_IsConverterBusy
    {standard input}:1951   .text.XMC_VADC_GROUP_SetBoundaries:00000000 $t
    {standard input}:1956   .text.XMC_VADC_GROUP_SetBoundaries:00000000 XMC_VADC_GROUP_SetBoundaries
    {standard input}:2022   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 $t
    {standard input}:2027   .text.XMC_VADC_GROUP_SetIndividualBoundary:00000000 XMC_VADC_GROUP_SetIndividualBoundary
    {standard input}:2106   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 $t
    {standard input}:2111   .text.XMC_VADC_GROUP_TriggerServiceRequest:00000000 XMC_VADC_GROUP_TriggerServiceRequest
    {standard input}:2180   .text.XMC_VADC_GROUP_ScanInit:00000000 $t
    {standard input}:2185   .text.XMC_VADC_GROUP_ScanInit:00000000 XMC_VADC_GROUP_ScanInit
    {standard input}:2283   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 $t
    {standard input}:2288   .text.XMC_VADC_GROUP_ScanSelectTrigger:00000000 XMC_VADC_GROUP_ScanSelectTrigger
    {standard input}:2347   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 $t
    {standard input}:2352   .text.XMC_VADC_GROUP_ScanSelectTriggerEdge:00000000 XMC_VADC_GROUP_ScanSelectTriggerEdge
    {standard input}:2411   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 $t
    {standard input}:2416   .text.XMC_VADC_GROUP_ScanSelectGating:00000000 XMC_VADC_GROUP_ScanSelectGating
    {standard input}:2475   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 $t
    {standard input}:2480   .text.XMC_VADC_GROUP_ScanSequenceAbort:00000000 XMC_VADC_GROUP_ScanSequenceAbort
    {standard input}:2558   .text.XMC_VADC_GROUP_ScanSequenceAbort:0000007c $d
    {standard input}:2563   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 $t
    {standard input}:2568   .text.XMC_VADC_GROUP_ScanGetNumChannelsPending:00000000 XMC_VADC_GROUP_ScanGetNumChannelsPending
    {standard input}:2647   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:2652   .text.XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_ScanSetReqSrcEventInterruptNode
    {standard input}:2707   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 $t
    {standard input}:2712   .text.XMC_VADC_GROUP_ScanRemoveChannel:00000000 XMC_VADC_GROUP_ScanRemoveChannel
    {standard input}:2765   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 $t
    {standard input}:2770   .text.XMC_VADC_GLOBAL_BackgroundInit:00000000 XMC_VADC_GLOBAL_BackgroundInit
    {standard input}:2926   .text.XMC_VADC_GLOBAL_BackgroundInit:000000f8 $d
    {standard input}:2931   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 $t
    {standard input}:2936   .text.XMC_VADC_GLOBAL_BackgroundSelectTrigger:00000000 XMC_VADC_GLOBAL_BackgroundSelectTrigger
    {standard input}:2994   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 $t
    {standard input}:2999   .text.XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge:00000000 XMC_VADC_GLOBAL_BackgroundSelectTriggerEdge
    {standard input}:3058   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 $t
    {standard input}:3063   .text.XMC_VADC_GLOBAL_BackgroundSelectGating:00000000 XMC_VADC_GLOBAL_BackgroundSelectGating
    {standard input}:3121   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 $t
    {standard input}:3126   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:00000000 XMC_VADC_GLOBAL_BackgroundAbortSequence
    {standard input}:3236   .text.XMC_VADC_GLOBAL_BackgroundAbortSequence:000000a8 $d
    {standard input}:3242   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 $t
    {standard input}:3247   .text.XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending:00000000 XMC_VADC_GLOBAL_BackgroundGetNumChannelsPending
    {standard input}:3344   .text.XMC_VADC_GROUP_QueueInit:00000000 $t
    {standard input}:3349   .text.XMC_VADC_GROUP_QueueInit:00000000 XMC_VADC_GROUP_QueueInit
    {standard input}:3447   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 $t
    {standard input}:3452   .text.XMC_VADC_GROUP_QueueSelectTrigger:00000000 XMC_VADC_GROUP_QueueSelectTrigger
    {standard input}:3511   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 $t
    {standard input}:3516   .text.XMC_VADC_GROUP_QueueSelectTriggerEdge:00000000 XMC_VADC_GROUP_QueueSelectTriggerEdge
    {standard input}:3575   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 $t
    {standard input}:3580   .text.XMC_VADC_GROUP_QueueSelectGating:00000000 XMC_VADC_GROUP_QueueSelectGating
    {standard input}:3639   .text.XMC_VADC_GROUP_QueueGetLength:00000000 $t
    {standard input}:3644   .text.XMC_VADC_GROUP_QueueGetLength:00000000 XMC_VADC_GROUP_QueueGetLength
    {standard input}:3716   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 $t
    {standard input}:3721   .text.XMC_VADC_GROUP_QueueAbortSequence:00000000 XMC_VADC_GROUP_QueueAbortSequence
    {standard input}:3790   .text.XMC_VADC_GROUP_QueueAbortSequence:00000064 $d
    {standard input}:3795   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 $t
    {standard input}:3800   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000000 XMC_VADC_GROUP_QueueRemoveChannel
    {standard input}:3898   .text.XMC_VADC_GROUP_QueueRemoveChannel:00000094 $d
    {standard input}:3903   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 $t
    {standard input}:3908   .text.XMC_VADC_GROUP_QueueGetNextChannel:00000000 XMC_VADC_GROUP_QueueGetNextChannel
    {standard input}:3976   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 $t
    {standard input}:3981   .text.XMC_VADC_GROUP_QueueGetInterruptedChannel:00000000 XMC_VADC_GROUP_QueueGetInterruptedChannel
    {standard input}:4036   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 $t
    {standard input}:4041   .text.XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:00000000 XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode
    {standard input}:4095   .text.XMC_VADC_GROUP_ChannelInit:00000000 $t
    {standard input}:4100   .text.XMC_VADC_GROUP_ChannelInit:00000000 XMC_VADC_GROUP_ChannelInit
    {standard input}:4229   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 $t
    {standard input}:4234   .text.XMC_VADC_GROUP_SetChannelAlias:00000000 XMC_VADC_GROUP_SetChannelAlias
    {standard input}:4311   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 $t
    {standard input}:4316   .text.XMC_VADC_GROUP_ChannelIsResultOutOfBounds:00000000 XMC_VADC_GROUP_ChannelIsResultOutOfBounds
    {standard input}:4397   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 $t
    {standard input}:4402   .text.XMC_VADC_GROUP_ChannelSetInputReference:00000000 XMC_VADC_GROUP_ChannelSetInputReference
    {standard input}:4462   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 $t
    {standard input}:4467   .text.XMC_VADC_GROUP_ChannelSetResultRegister:00000000 XMC_VADC_GROUP_ChannelSetResultRegister
    {standard input}:4526   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 $t
    {standard input}:4531   .text.XMC_VADC_GROUP_ChannelSetIclass:00000000 XMC_VADC_GROUP_ChannelSetIclass
    {standard input}:4590   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 $t
    {standard input}:4595   .text.XMC_VADC_GROUP_ChannelGetResultRegister:00000000 XMC_VADC_GROUP_ChannelGetResultRegister
    {standard input}:4642   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 $t
    {standard input}:4647   .text.XMC_VADC_GROUP_ChannelTriggerEvent:00000000 XMC_VADC_GROUP_ChannelTriggerEvent
    {standard input}:4698   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 $t
    {standard input}:4703   .text.XMC_VADC_GROUP_ChannelSetEventInterruptNode:00000000 XMC_VADC_GROUP_ChannelSetEventInterruptNode
    {standard input}:4767   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 $t
    {standard input}:4772   .text.XMC_VADC_GROUP_ChannelTriggerEventGenCriteria:00000000 XMC_VADC_GROUP_ChannelTriggerEventGenCriteria
    {standard input}:4832   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 $t
    {standard input}:4837   .text.XMC_VADC_GROUP_ChannelSetBoundarySelection:00000000 XMC_VADC_GROUP_ChannelSetBoundarySelection
    {standard input}:4907   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 $t
    {standard input}:4912   .text.XMC_VADC_GROUP_AddResultToFifo:00000000 XMC_VADC_GROUP_AddResultToFifo
    {standard input}:4968   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 $t
    {standard input}:4973   .text.XMC_VADC_GROUP_SetResultFastCompareValue:00000000 XMC_VADC_GROUP_SetResultFastCompareValue
    {standard input}:5034   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 $t
    {standard input}:5039   .text.XMC_VADC_GROUP_GetFastCompareResult:00000000 XMC_VADC_GROUP_GetFastCompareResult
    {standard input}:5100   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 $t
    {standard input}:5105   .text.XMC_VADC_GROUP_SetResultSubtractionValue:00000000 XMC_VADC_GROUP_SetResultSubtractionValue
    {standard input}:5160   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 $t
    {standard input}:5165   .text.XMC_VADC_GROUP_SetResultInterruptNode:00000000 XMC_VADC_GROUP_SetResultInterruptNode
    {standard input}:5266   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 $t
    {standard input}:5271   .text.XMC_VADC_GROUP_GetResultFifoTail:00000000 XMC_VADC_GROUP_GetResultFifoTail
    {standard input}:5484   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 XMC_VADC_GROUP_IsResultRegisterFifoHead
    {standard input}:5389   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 $t
    {standard input}:5394   .text.XMC_VADC_GROUP_GetResultFifoHead:00000000 XMC_VADC_GROUP_GetResultFifoHead
    {standard input}:5479   .text.XMC_VADC_GROUP_IsResultRegisterFifoHead:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset

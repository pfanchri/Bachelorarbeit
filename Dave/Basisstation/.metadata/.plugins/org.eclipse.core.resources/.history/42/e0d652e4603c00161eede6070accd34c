   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_can.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_CAN_PanelControl,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_CAN_PanelControl:
  25              	.LFB158:
  26              	 .file 1 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc_can.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @file xmc_can.h
   3:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @date 2015-09-15
   4:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-02-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - Initial <br>
  41:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - Documentation improved <br>
  42:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  43:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-05-20:
  44:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - New elements have added in XMC_CAN_MO_t data structure <br>
  45:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  46:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - XMC_CAN_STATUS_t enum structure has updated. <br>
  47:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  48:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-06-20:
  49:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - New APIs added: XMC_CAN_NODE_ClearStatus(),XMC_CAN_MO_ReceiveData(), XMC_CAN_GATEWAY_InitD
  50:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  51:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *      
  52:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-07-09:
  53:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - New API added: XMC_CAN_NODE_Enable. <br>
  54:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  55:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-09-01:
  56:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - Removed fCANB clock support <br>
  57:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  58:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 2015-09-15:
  59:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *     - Added "xmc_can_map.h" include <br>
  60:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * <b>Details of use for node configuration related APIs</b><br>
  61:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Please use the XMC_CAN_NODE_SetInitBit() and XMC_CAN_NODE_EnableConfigurationChange() before cal
  62:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * related APIs.
  63:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange() and  XMC_CAN_NODE_ResetInitBit() can be called for dis
  64:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * change and enable the node for communication afterwards.
  65:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Do not use this when configuring the nominal bit time with XMC_CAN_NODE_NominalBitTimeConfigure(
  66:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Enable/Disable node configuration change is taken in account.
  67:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  68:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * <b>Example Usage:</b>
  69:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @code
  70:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * //disabling the Node
  71:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetInitBit(CAN_NODE0)
  72:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * //allowing the configuration change
  73:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(CAN_NODE0)
  74:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * //Node configuration
  75:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_FrameCounterConfigure(CAN_NODE0,&can_node_frame_counter);
  76:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack(CAN_NODE0)
  77:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * //disable configuration
  78:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange(CAN_NODE0)
  79:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * //Enabling node for communication
  80:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_ResetInitBit(CAN_NODE0)
  81:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @endcode
  82:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  83:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @endcond
  84:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
  85:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
  86:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
  87:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #ifndef XMC_CAN_H
  88:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #define XMC_CAN_H
  89:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
  90:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
  91:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * HEADER FILES
  92:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
  93:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #include "xmc_common.h"
  94:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
  95:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if defined(CAN)
  96:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
  97:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #include "xmc_scu.h"
  98:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #include "xmc_can_map.h"
  99:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #include <string.h>
 100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @addtogroup XMClib XMC Peripheral Library
 103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @{
 104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @addtogroup CAN
 108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @brief Controller Area Network Controller (CAN) driver for the XMC microcontroller family.
 109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * CAN driver provides transfer of CAN frames in accordance with CAN specificetion V2.0 B (active).
 111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * can receive and transmit standard frames with 11-bit identifiers as well as extended frames with
 112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * All CAN nodes share a common set of message objects. Each message object can be individually all
 113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * CAN nodes. 
 114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Besides serving as a storage container for incoming and outgoing frames, message objects can be 
 115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * gateways between 
 116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * the CAN nodes or to setup a FIFO buffer. The CAN module provides Analyzer mode,Loop-back mode an
 117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * node analysis.
 118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 
 119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * The driver is divided into five sections:
 120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN Global features:
 121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure module frequency using function XMC_CAN_Init().
 122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure Module interrupt using configuration structure XMC_CAN_NODE_INTERRUPT_TRI
 123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *    XMC_CAN_EventTrigger().
 124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 
 125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_NODE features:
 126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to set baud rate by configuration structure XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t and
 127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *    function XMC_CAN_NODE_NominalBitTimeConfigure().
 128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure loop-back mode using fuction XMC_CAN_NODE_EnableLoopBack().
 129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure CAN Node analyzer using function XMC_CAN_NODE_SetAnalyzerMode().
 130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows CAN node events enable/ disable by enum structure XMC_CAN_NODE_EVENT_t and functions X
 131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *    and XMC_CAN_NODE_DisableEvent().
 132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Provides bit timming analysis, configuration structure XMC_CAN_NODE_FRAME_COUNTER_t and funct
 133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *    XMC_CAN_NODE_FrameCounterConfigure(). 
 134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_MO features:
 136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows message object initialization by configuration structure XMC_CAN_MO_t and function XMC
 137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows transfer of message objects using functions XMC_CAN_MO_Transmit() and XMC_CAN_MO_Recei
 138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure Single Data Transfer and Single Transmit Trial using functions 
 139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_MO_EnableSingleTransmitTrial() and XMC_CAN_MO_EnableSingleTransmitTrial().
 140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows to configure MO events using function XMC_CAN_MO_EnableEvent(). 
 141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_FIFO features:
 143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Allows message object FIFO structure by configuration structure XMC_CAN_FIFO_CONFIG_t and fun
 144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_TXFIFO_ConfigMOBaseObject() , XMC_CAN_RXFIFO_ConfigMOBaseObject() and XMC_CAN_TXFIFO_Tra
 145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par CAN_GATEWAY features:
 147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * -# Provides Gateway mode, configuration structure XMC_CAN_GATEWAY_CONFIG_t and function XMC_CAN_
 148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @{
 150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * MACROS
 154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Pos (18U)		/**< Standard Identifier bitposition */
 156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #define XMC_CAN_MO_MOAR_STDID_Msk ((0x000007FFUL) << XMC_CAN_MO_MOAR_STDID_Pos) /**< Standard Ident
 158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #define CAN_NODE_NIPR_Msk         (0x7UL)	/**< Node event mask */
 160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #define CAN_MO_MOIPR_Msk          (0x7U)	/**< Message Object event mask */
 162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * ENUMS
 165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Defines the status of CAN, to verify the CAN related API calls. Use type \a XMC_CAN_STATUS_t fo
 168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** */
 169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_STATUS
 170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_SUCCESS,           /**< Driver accepted application request*/
 172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_ERROR,             /**< Returned when unknown error occurred */
 173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_BUSY,              /**< Driver is busy and can not handle request*/
 174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_MO_NOT_ACCEPTABLE, /**< Message object type not allowed*/
 175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_STATUS_MO_DISABLED       /**< Returned if Message object is disabled */
 176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_STATUS_t;
 177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** * Defines CAN module Panel Commands . Use type \a XMC_CAN_PANCMD_t for this enum.
 180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** */
 181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_PANCMD
 182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_INIT_LIST = 1U,              /**< Command to initialize a list */
 184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_ALLOCATE = 2U,        /**< Command to activate static allocation */
 185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_ALLOCATE = 3U,       /**< Command to activate dynamic allocation */
 186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEFORE = 4U,	  /**< Remove a message object from the list and insert
 188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEFORE = 5U,  /**< Command to activate dynamic allocation */
 189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_STATIC_INSERT_BEHIND = 6U,   /**< Command to activate dynamic allocation */
 190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_PANCMD_DYNAMIC_INSERT_BEHIND = 7U   /**< Command to activate dynamic allocation */
 191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_PANCMD_t;
 192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** * Defines loop Back Mode, to enable/disable an in-system test of the MultiCAN module .
 195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** * Use type \a XMC_CAN_LOOKBACKMODE_t for this enum.
 196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** */
 197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_LOOKBACKMODE
 198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_ENABLED,   /**< Each CAN node can be connected to the internal CAN bus  */
 200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_LOOKBACKMODE_DISABLED   /**< Each CAN node can be connected to the external CAN bus */
 201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_LOOKBACKMODE_t;
 202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines Message Object direction. Use type \a XMC_CAN_MO_TYPE_t for this enum.
 205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_TYPE
 207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_TYPE_RECMSGOBJ,   /**< Receive Message Object selected */
 209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_TYPE_TRANSMSGOBJ  /**< Transmit Message Object selected */
 210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_TYPE_t;
 211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines Data frame types. Use type \a XMC_CAN_FRAME_TYPE_t for this enum.
 214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_TYPE
 216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_STANDARD_11BITS, /**< Standard type identifier*/
 218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_TYPE_EXTENDED_29BITS  /**< Extended type identifier*/
 219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_FRAME_TYPE_t;
 220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines arbitration mode for transmit acceptance filtering. Use type \a XMC_CAN_ARBITRATION_MODE
 224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_ARBITRATION_MODE
 226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_1 = 1U,   /**< Transmit acceptance based in the order(p
 228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_IDE_DIR_BASED_PRIO_2 = 2U, /**< Transmit acceptance filtering is based o
 229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_ARBITRATION_MODE_ORDER_BASED_PRIO_3 = 3U    /**< Transmit acceptance based in the order *
 230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_ARBITRATION_MODE_t;
 231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the operation mode of the frame counter. Use type \a XMC_CAN_FRAME_COUNT_MODE_t for this
 234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_FRAME_COUNT_MODE
 236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE = 0U, 			 /**< Frame Count Mode */
 238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_TIME_STAMP = 1U,  /**< The frame counter is incremented with the beginni
 239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_FRAME_COUNT_MODE_BIT_TIMING = 2U   /**< Used for baud rate detection and analysis of the 
 240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_FRAME_COUNT_MODE_t;
 241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the Divider Modes. Use type \a XMC_CAN_DM_t for this enum.
 244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_DM
 246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_DM_NORMAL = 1U,      /**< Normal divider mode */
 248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_DM_FRACTIONAL = 2U,  /**< Fractional divider mode */
 249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_DM_OFF = 3U          /**< Divider Mode in off-state*/
 250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_DM_t;
 251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object set status. Use type \a XMC_CAN_MO_SET_STATUS_t for th
 254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_SET_STATUS
 256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_PENDING = CAN_MO_MOCTR_SETRXPND_Msk,     /**< Set receive pending */
 258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_PENDING = CAN_MO_MOCTR_SETTXPND_Msk,     /**< Set transmit pending */
 259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_UPDATING = CAN_MO_MOCTR_SETRXUPD_Msk,    /**< Set receive updating */
 260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_NEW_DATA = CAN_MO_MOCTR_SETNEWDAT_Msk,      /**< Set new data */
 261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_SETMSGLST_Msk,  /**< Set message lost */
 262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_SETMSGVAL_Msk, /**< Set message valid */
 263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_SETRTSEL_Msk, /**< Set transmit/receive selec
 264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_RX_ENABLE = CAN_MO_MOCTR_SETRXEN_Msk,       /**< Set receive enable */
 265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_REQUEST = CAN_MO_MOCTR_SETTXRQ_Msk,      /**< Set transmit request */
 266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_SETTXEN0_Msk,     /**< Set transmit enable 0 */
 267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_SETTXEN1_Msk,     /**< Set transmit enable 1 */
 268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_SET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_SETDIR_Msk /**< Set message direction */
 269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_SET_STATUS_t;
 270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object reset status. Use type \a XMC_CAN_MO_RESET_STATUS_t fo
 273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_RESET_STATUS
 275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_PENDING = CAN_MO_MOCTR_RESRXPND_Msk,     /**< Reset receive pending */
 277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_PENDING = CAN_MO_MOCTR_RESTXPND_Msk,     /**< Reset transmit pending *
 278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_UPDATING = CAN_MO_MOCTR_RESRXUPD_Msk,    /**< Reset receive updating *
 279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_NEW_DATA = CAN_MO_MOCTR_RESNEWDAT_Msk,      /**< Reset new data */
 280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_LOST = CAN_MO_MOCTR_RESMSGLST_Msk,  /**< Reset message lost */
 281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_VALID = CAN_MO_MOCTR_RESMSGVAL_Msk, /**< Reset message valid */
 282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_TX_SELECTED = CAN_MO_MOCTR_RESRTSEL_Msk, /**< Reset transmit/receive s
 283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_RX_ENABLE = CAN_MO_MOCTR_RESRXEN_Msk,       /**< Reset receive enable */
 284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_REQUEST = CAN_MO_MOCTR_RESTXRQ_Msk,      /**< Reset transmit request *
 285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE0 = CAN_MO_MOCTR_RESTXEN0_Msk,     /**< Reset transmit enable 0 
 286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_TX_ENABLE1 = CAN_MO_MOCTR_RESTXEN1_Msk,     /**< Reset transmit enable 1 
 287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_RESET_STATUS_MESSAGE_DIRECTION = CAN_MO_MOCTR_RESDIR_Msk /**< Reset message direction 
 288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_RESET_STATUS_t;
 289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object status. Use type \a XMC_CAN_MO_STATUS_t for this enum.
 292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_STATUS
 294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_PENDING = CAN_MO_MOSTAT_RXPND_Msk,                   /**< Defines message ha
 296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_PENDING = CAN_MO_MOSTAT_TXPND_Msk,                   /**< Defines message ha
 297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_UPDATING = CAN_MO_MOSTAT_RXUPD_Msk,                  /**< Defines Message id
 298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_NEW_DATA = CAN_MO_MOSTAT_NEWDAT_Msk,                    /**< Defines no update 
 299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_LOST = CAN_MO_MOSTAT_MSGLST_Msk,                /**< CAN message is los
 300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_VALID = CAN_MO_MOSTAT_MSGVAL_Msk,               /**< Message valid */
 301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_TX_SELECTED = CAN_MO_MOSTAT_RTSEL_Msk,               /**< Transmit/Receive s
 302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_RX_ENABLE = CAN_MO_MOSTAT_RXEN_Msk,                     /**< Receive enable */
 303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_REQUEST = CAN_MO_MOSTAT_TXRQ_Msk,                    /**< Transmit request *
 304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE0 = CAN_MO_MOSTAT_TXEN0_Msk,                   /**< Transmit enable 0 
 305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_TX_ENABLE1 = CAN_MO_MOSTAT_TXEN1_Msk,                   /**< Transmit enable 1 
 306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_MESSAGE_DIRECTION = CAN_MO_MOSTAT_DIR_Msk,              /**< Message direction 
 307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_LIST = CAN_MO_MOSTAT_LIST_Msk,                          /**< List allocation */
 308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_PREVIOUS_MO = CAN_MO_MOSTAT_PPREV_Msk,    	/**< Pointer to previous 
 309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_STATUS_POINTER_TO_NEXT_MO = (int32_t)CAN_MO_MOSTAT_PNEXT_Msk   /**< Pointer to next Me
 310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_STATUS_t;
 311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Node status. Use type \a XMC_CAN_NODE_STATUS_t for this enum.
 314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_STATUS
 316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LAST_ERROR_CODE = CAN_NODE_NSR_LEC_Msk,       /**< Last Error Code */
 318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_TX_OK = CAN_NODE_NSR_TXOK_Msk,                /**< Message transmitted succes
 319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_RX_OK = CAN_NODE_NSR_RXOK_Msk,                /**< Message received successfu
 320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ALERT_WARNING = CAN_NODE_NSR_ALERT_Msk,       /**< Alert warning */
 321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_ERROR_WARNING_STATUS = CAN_NODE_NSR_EWRN_Msk, /**< Error warning status */
 322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_BUS_OFF= CAN_NODE_NSR_BOFF_Msk,				/**< Bus-off status */
 323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_LENGTH_ERROR = CAN_NODE_NSR_LLE_Msk,     /**< List length error */
 324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_LIST_OBJECT_ERROR = CAN_NODE_NSR_LOE_Msk,     /**< List object error */
 325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_STATUS_SUSPENDED_ACK = CAN_NODE_NSR_SUSACK_Msk       /**< Suspend Acknowledge */
 327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_STATUS_t;
 329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Node control like initialization, node disable and analyzer mode .
 332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Use type \a XMC_CAN_NODE_CONTROL_t for this enum.
 333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_CONTROL
 335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_NODE_INIT = CAN_NODE_NCR_INIT_Msk,            /**< Node initialization */
 337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_TX_INT_ENABLE = CAN_NODE_NCR_TRIE_Msk,        /**< Transfer event enable */
 338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_LEC_INT_ENABLE = CAN_NODE_NCR_LECIE_Msk,      /**< LEC Indicated Error Event
 339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_ALERT_INT_ENABLE = CAN_NODE_NCR_ALIE_Msk,     /**< Alert Event Enable */
 340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_DISABLE = CAN_NODE_NCR_CANDIS_Msk,        /**< CAN disable */
 341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CONF_CHANGE_ENABLE= CAN_NODE_NCR_CCE_Msk,     /**< Configuration change enab
 342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_CAN_ANALYZER_NODEDE = CAN_NODE_NCR_CALM_Msk,  /**< CAN Analyzer mode */
 343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if !defined(MULTICAN_PLUS)
 344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_CONTROL_SUSPENDED_ENABLE = CAN_NODE_NCR_SUSEN_Msk     /**< Suspend Enable */
 345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_CONTROL_t;
 347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Node events. Use type \a XMC_CAN_NODE_EVENT_t for this enum.
 350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_EVENT
 352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_TX_INT = CAN_NODE_NCR_TRIE_Msk,   /**< Node Transfer OK Event */
 354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_ALERT = CAN_NODE_NCR_ALIE_Msk,    /**< Node Alert Event */
 355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_LEC = CAN_NODE_NCR_LECIE_Msk,     /**< Last Error code Event */
 356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_EVENT_CFCIE = CAN_NODE_NFCR_CFCIE_Msk   /**< CAN Frame Count Event  */
 357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_EVENT_t;
 358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN node pointer events position. Use type \a XMC_CAN_NODE_POINTER_EVENT_
 361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_POINTER_EVENT
 363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_ALERT = CAN_NODE_NIPR_ALINP_Pos,           /**< Node Alert Event node 
 365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_LEC = CAN_NODE_NIPR_LECINP_Pos,            /**< Last Error code Event 
 366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK = CAN_NODE_NIPR_TRINP_Pos,     /**< Transmit Event node po
 367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER = CAN_NODE_NIPR_CFCINP_Pos   /**< CAN Frame Count Event 
 368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_POINTER_EVENT_t;
 369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN Message Object event node pointer position. Use type \a XMC_CAN_MO_POINTER_EVENT_t f
 372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_POINTER_EVENT
 374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_TRANSMIT = CAN_MO_MOIPR_TXINP_Pos,     /**< Transmit Event node pointer 
 376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_POINTER_EVENT_RECEIVE = CAN_MO_MOIPR_RXINP_Pos       /**< Receive Event node pointer *
 377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_POINTER_EVENT_t;
 378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines mask value for CAN Message Object event type. Use type \a XMC_CAN_MO_EVENT_t for this en
 381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_MO_EVENT
 383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_EVENT_TRANSMIT = CAN_MO_MOFCR_TXIE_Msk,  /**< Message Object transmit event */
 385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_EVENT_RECEIVE = CAN_MO_MOFCR_RXIE_Msk,   /**< Message Object receive event */
 386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_EVENT_OVERFLOW = CAN_MO_MOFCR_OVIE_Msk,  /**< Message Object overflow event */
 387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_EVENT_t;
 388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the possible receive inputs. Use type \a XMC_CAN_NODE_RECEIVE_INPUT_t for this enum.
 391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_RECEIVE_INPUT
 393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCA, 	/**< CAN Receive Input A */
 395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCB,		/**< CAN Receive Input B */
 396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCC,		/**< CAN Receive Input C */
 397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCD,		/**< CAN Receive Input D */
 398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCE,		/**< CAN Receive Input E */
 399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCF,		/**< CAN Receive Input F */
 400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCG,		/**< CAN Receive Input G */
 401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_RECEIVE_INPUT_RXDCH		/**< CAN Receive Input H */
 402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_RECEIVE_INPUT_t;
 403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines last error transfer direction. Use type \a XMC_CAN_NODE_LAST_ERROR_DIR_t for this enum.
 406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_DIR
 408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_RECEPCION,    /**< The last error occurred while the CAN n
 410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_DIR_WHILE_NODE_TRANSMISSION  /**< The last error occurred while the CAN n
 411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_DIR_t;
 412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines last error increment. Use type \a XMC_CAN_NODE_LAST_ERROR_INC_t for this enum.
 416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_LAST_ERROR_INC
 418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_1, /**< The last error led to an error counter increment of 1. */
 420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_LAST_ERROR_INC_8  /**< The last error led to an error counter increment of 8. */
 421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_LAST_ERROR_INC_t;
 422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines interrupt request on interrupt output line INT_O[n]. Use type \a XMC_CAN_NODE_INTERRUPT_
 425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_NODE_INTERRUPT_TRIGGER
 427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_0 = 0x1U,
 429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_1 = 0x2U,
 430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_2 = 0x4U,
 431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_3 = 0x8U,
 432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_4 = 0x16U,
 433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_5 = 0x32U,
 434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_6 = 0x64U,
 435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_NODE_INTR_TRIGGER_7 = 0x128U,
 436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_INTERRUPT_TRIGGER_t;
 437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if defined(MULTICAN_PLUS) || defined(DOXYGEN)
 439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines the Clock source used for the MCAN peripheral. @note Only available for XMC1400, XMC4800
 441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef enum XMC_CAN_CANCLKSRC
 443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if UC_FAMILY == XMC4
 445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FPERI = 0x1U,
 446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U,
 447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #else
 448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_MCLK = 0x1U,
 449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_CANCLKSRC_FOHP = 0x2U
 450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_CANCLKSRC_t;
 452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * DATA STRUCTURES
 456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN node Nominal Bit Time. Use type \a XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t for this s
 459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** */
 460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG
 461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint32_t can_frequency;       /**< Frequency of the CAN module(fCAN). \a can_frequency shall be r
 463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint32_t baudrate;        	/**< Specifies the node baud rate. Unit: baud \a baudrate shall be ran
 464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint16_t sample_point;    	/**< Sample point is used to compensate mismatch between transmitter a
 465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 									 the synchronization segment. Sample point. Range = [0, 10000] with respect [0%, 100%] of 
 466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint16_t sjw;             	/**< (Re) Synchronization Jump Width. Range:0-3 */
 467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t;
 468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines base, top and bottom of CAN Message Object FIFO Structure. Use type \a XMC_CAN_FIFO_CONF
 471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * A FIFO consists of one base object and n slave objects.
 472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_FIFO_CONFIG
 474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t fifo_bottom;		/**< points to the first element(slave object) in a FIFO structure.Range :0
 476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t fifo_top;			/**< points to the last element(slave object) in a FIFO structure. Range :0-6
 477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t fifo_base;		/**< points to the actual target object(Base object) within a FIFO/Gateway st
 478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_FIFO_CONFIG_t;
 479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN Gateway FIFO structure and provides additional options for gateway destination objec
 482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Use type \a XMC_CAN_GATEWAY_CONFIG_t for this structure.
 483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_GATEWAY_CONFIG
 485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t gateway_bottom; 			/**< points to the first element(gateway destination object) in a FIFO
 487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t gateway_top;				/**< points to the last element(gateway destination object) in a FIFO str
 488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t gateway_base;				/**< points to the actual target object within a FIFO/Gateway structure.
 489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_data_frame_send;		/**< TXRQ updated in the gateway destination object after the inte
 490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	  	  	 to the gateway destination object */
 491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_identifier_copy;		/**< The identifier of the gateway source object (after storing th
 492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	  	  	 to the gateway destination object. */
 493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_data_length_code_copy; /**< Data length code of the gateway source object (after sto
 495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	  	  	   gateway destination object */
 496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   bool gateway_data_copy;  /**< Data fields in registers MODATALn and MODATAHn of the gateway sourc
 497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   	  	  	  	  	  	  	  	are copied to the gateway destination.*/
 498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_GATEWAY_CONFIG_t;
 500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** * Defines CAN Global Initialization structure
 503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** */
 504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef CAN_GLOBAL_TypeDef XMC_CAN_t;
 505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /*Anonymous structure/union guard start*/
 507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if defined(__CC_ARM)
 508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   #pragma push
 509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   #pragma anon_unions
 510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #elif defined(__TASKING__)
 511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   #pragma warning 586
 512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines frame counter configuration. Use type \a XMC_CAN_NODE_FRAME_COUNTER_t for this structure
 516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * It provides configuration of frame counter that counts transmitted/received CAN frames or obtain
 517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * when a frame has been started to transmit or be received by the CAN node.
 518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** */
 519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_NODE_FRAME_COUNTER
 520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   union{
 523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	  struct{
 524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t : 16;
 525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t can_frame_count_selection:3;		/**<   Defines function of the frame counter  */
 526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t can_frame_count_mode:2;			/**<   Determines the operation mode of the frame counter */
 527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		  uint32_t : 11;
 528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	  };
 529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	  uint32_t nfcr;
 530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   };
 532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_NODE_FRAME_COUNTER_t;
 533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *Defines Node Runtime structure.
 536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** */
 537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef CAN_NODE_TypeDef  XMC_CAN_NODE_t;            /**<  pointer to the Node CAN register */
 538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Defines CAN Message Object runtime elements. Use type \a XMC_CAN_MO_t for this structure.
 541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** typedef struct XMC_CAN_MO
 543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	CAN_MO_TypeDef *can_mo_ptr;                     /**< Pointer to the Message Object CAN register */
 545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	union{
 546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		struct{
 547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_identifier:29;            /**< standard (11 bit)/Extended (29 bit) message identifi
 548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_id_mode:1;                /**< Standard/Extended identifier support */
 549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_priority:2;               /**< Arbitration Mode/Priority */
 550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		};
 551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		uint32_t mo_ar;
 552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	};
 553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	union{
 554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		struct{
 555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_id_mask:29;              /**< CAN Identifier of Message Object */
 556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 			uint32_t can_ide_mask:1;              /**< Identifier Extension Bit of Message Object */
 557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		};
 558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		uint32_t mo_amr;
 559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	};
 560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   uint8_t can_data_length;                        /**< Message data length, Range:0-8 */
 561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   union{
 563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   		uint8_t can_data_byte[8];                 /**< Each position of the array represents a data byt
 565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   		uint16_t can_data_word[4];                /**< Each position of the array represents a 16 bits 
 566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   		uint32_t can_data[2];                     /**< can_data[0] lower 4 bytes of the data. can_data[
 567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   		 	 	 	 	 	 	 	 	 	 	    of the data */
 568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   		uint64_t can_data_long;                   /** Data of the Message Object*/
 569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   	  };
 570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   XMC_CAN_MO_TYPE_t can_mo_type;                  /**<  Message Type */
 572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** } XMC_CAN_MO_t;
 574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /*Anonymous structure/union guard end*/
 575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if defined(__CC_ARM)
 576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   #pragma pop
 577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #elif defined(__TASKING__)
 578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   #pragma warning restore
 579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**************************************************************************************************
 581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * API Prototypes
 582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  **************************************************************************************************
 583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #ifdef __cplusplus
 584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** extern "C" {
 585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj	Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 				for details.
 591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Disables CAN module. In disabled state, no registers of CAN module can be read or written excep
 596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_Enable()\n\n\n
 599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Disable(XMC_CAN_t *const obj);
 603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 			   for details.
 608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Enables CAN module and initializes all CAN registers to reset values. It is required to re-conf
 613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  before any data transfer. It configures CAN_CLC.DISR bit.
 614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_Disable()\n\n\n
 617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Enable(XMC_CAN_t *const obj);
 621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 		   for details.
 626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param node_num	CAN node number,Range : 0-2
 628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param mo_num 	CAN Message Object number,Range : 0-63
 629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Allocates Message Object from free list to node list. Each \a node_num is linked to one unique 
 634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  A CAN node performs message transfer only with the \a mo_num message objects that are allocated
 635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  It configures PANCTR register.
 636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  None
 639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 			  for details.
 648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param pancmd panal command selection. Refer @ref XMC_CAN_PANCMD_t for valid values.
 650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param arg1	 Panel Argument 1,Range : 0-2
 651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param arg2 	 Panel Argument 2, Range : 0-63
 652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures the panel command and panel arguments. A panel operation consists of a command code 
 657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  panel arguments (PANAR1, PANAR2). Commands that have a return value deliver it to the PANAR1 bi
 658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  return an error flag deliver it to bit 31 of the Panel Control Register, this means bit 7 of PA
 659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  panel argument PANAR1,\a arg2 represents panel argument PANAR2 and \a pancmd represents command
 660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  register.
 661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  None
 664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
 668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****                                           const XMC_CAN_PANCMD_t pancmd,
 669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		                                  const uint8_t arg1,
 670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		                                  const uint8_t arg2)
 671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
  27              	 .loc 1 671 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0846     	 mov r0,r1
  44 000a 1146     	 mov r1,r2
  45 000c 1A46     	 mov r2,r3
  46 000e 0346     	 mov r3,r0
  47 0010 FB70     	 strb r3,[r7,#3]
  48 0012 0B46     	 mov r3,r1
  49 0014 BB70     	 strb r3,[r7,#2]
  50 0016 1346     	 mov r3,r2
  51 0018 7B70     	 strb r3,[r7,#1]
 672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
  52              	 .loc 1 672 0
  53 001a FA78     	 ldrb r2,[r7,#3]
 673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
  54              	 .loc 1 673 0
  55 001c BB78     	 ldrb r3,[r7,#2]
  56 001e 1B04     	 lsls r3,r3,#16
  57 0020 03F47F03 	 and r3,r3,#16711680
 672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
  58              	 .loc 1 672 0
  59 0024 1A43     	 orrs r2,r2,r3
 674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		        (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
  60              	 .loc 1 674 0
  61 0026 7B78     	 ldrb r3,[r7,#1]
  62 0028 1B06     	 lsls r3,r3,#24
 673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		        (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
  63              	 .loc 1 673 0
  64 002a 1A43     	 orrs r2,r2,r3
 672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
  65              	 .loc 1 672 0
  66 002c 7B68     	 ldr r3,[r7,#4]
  67 002e C3F8C421 	 str r2,[r3,#452]
 675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
  68              	 .loc 1 675 0
  69 0032 0C37     	 adds r7,r7,#12
  70              	.LCFI3:
  71              	 .cfi_def_cfa_offset 4
  72 0034 BD46     	 mov sp,r7
  73              	.LCFI4:
  74              	 .cfi_def_cfa_register 13
  75              	 
  76 0036 5DF8047B 	 ldr r7,[sp],#4
  77              	.LCFI5:
  78              	 .cfi_restore 7
  79              	 .cfi_def_cfa_offset 0
  80 003a 7047     	 bx lr
  81              	 .cfi_endproc
  82              	.LFE158:
  84              	 .section .text.XMC_CAN_NODE_EnableConfigurationChange,"ax",%progbits
  85              	 .align 2
  86              	 .thumb
  87              	 .thumb_func
  89              	XMC_CAN_NODE_EnableConfigurationChange:
  90              	.LFB174:
 676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 			  for details.
 682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param service_requestr	Interrupt trigger number selection. Refer @ref XMC_CAN_NODE_INTERRUPT_TR
 684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 							 Multiple interrupt trigger events can be ORed.
 685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures multiple interrupt requests with a single write operation. \a service_requestr repre
 690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  request or multiple.It configures MITR register.
 691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  None
 694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_EventTrigger(XMC_CAN_t *const obj,const XMC_CAN_NODE_INTERRUPT_TRIGGER
 698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   obj->MITR = ((uint32_t)service_requestr << CAN_MITR_IT_Pos) & (uint32_t)CAN_MITR_IT_Msk;
 700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 								/*INIT APIs*/
 705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param obj Pointer pointing to XMC_CAN Global Initialization structure. Defines CAN global regis
 709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 			  for details.
 710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_frequency	CAN module frequency(fCAN). Range : 5MHz to 120MHz
 712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Configures clock rate of the module timer clock fCAN. Altering CAN module \a can_frequency shall
 717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * call XMC_CAN_NODE_NominalBitTimeConfigure() to configure baud rate for current CAN frequency.It 
 718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_NominalBitTimeConfigure()\n\n\n
 721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #if defined(MULTICAN_PLUS)
 726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency);
 727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj);
 731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source);
 735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj);
 739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #else
 740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency);
 741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** #endif
 742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_mo Pointer to Message Object structure. Refer @ref XMC_CAN_MO_t data structure for de
 746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Initializes CAN message object. Initialization includes configuring Message Object identifier ty
 751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * identifier value, Message Object type, and transfer requests. It configures FDR register.
 752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * None
 755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo);
 759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 	  /*NODE APIs*/
 762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node  	  Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers.
 767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param ptr_event		  CAN_NODE interrupt pointer position. Refer @ref XMC_CAN_NODE_POINTER_EVENT_t
 768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param service_request Interrupt service request number. Range : 0-7
 769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures node interrupt pointer \a service_request for CAN Node events \a ptr_event. It confi
 774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * None
 777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
 781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		                                      const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
 782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		                                      const uint32_t service_request)
 783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_eve
 785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node		Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers. Range :CAN_
 791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_bit_time	Nominal bit time configuration data structure. Refer @ref XMC_CAN_NODE_NOMIN
 792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Configures CAN node Baudrate. \a can_bit_time specifies required baudrate for a specified \a can
 797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * It configures NBTR register.
 798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * None
 801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
 804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
 805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param input    CAN receive input selection. Refer @ref XMC_CAN_NODE_RECEIVE_INPUT_t for details
 809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \a input specifies CAN input receive pin. This API Configures NPCRx register,it is required to c
 814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange(), before configuring NPCRx register, call XMC_CAN_NODE_D
 815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * API after configuring NPCRx register. CAN input receive pins which falls under analog port pins 
 816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_GPIO_EnableDigitalInput(),to enable digital pad.
 817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *\par<b>Related APIs:</b><BR>
 819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * None
 820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
 822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
 827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 		                                          const XMC_CAN_NODE_RECEIVE_INPUT_t input)
 828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****                    (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Ms
 831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node	Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Enable Node \a can_node in Loop-Back Mode. A Node is connected to an internal (virtual) loop-bac
 841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * nodes which are in Loop- Back Mode are connected to this virtual CAN bus so that they can commun
 842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * other internally. The external transmit line is forced recessive in Loop-Back Mode. This API Con
 843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * API after NPCRx configuration configuration.
 845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_NODE_DisableLoopBack().
 848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  \par<b>Note:</b><br>
 850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  NPCRx can be written only if bit NCRx.CCE is set.
 851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
 855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Disable Node Loop-Back Mode, disables internal (virtual) loop-back CAN bus. This API Configures 
 867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Call XMC_CAN_NODE_EnableConfigurationChange() API before NPCRx configuration, same way XMC_CAN_N
 868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * API after NPCRx configuration.
 869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>]
 871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableLoopBack()
 872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
 875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * NPCRx can be written only if bit NCRx.CCE is set.
 876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableLoopBack(XMC_CAN_NODE_t *const can_node)
 880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NPCR &= ~(uint32_t)CAN_NODE_NPCR_LBM_Msk;
 882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param event	   CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 				   multiple events can be ORed.
 890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Enable CAN Node events. It configures NFCR register.
 895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableEvent()
 898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
 902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param event	   CAN node event mask value. Refer @ref XMC_CAN_NODE_EVENT_t structure for valid v
 908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * 				   multiple events can be ORed.
 909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Disable CAN Node events. It configures NFCR register.
 914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableEvent()
 917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event);
 921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
 926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_DIR_t Last error transfer direction. Refer @ref XMC_CAN_NODE_LAS
 928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Returns NODE Last Error occurred during Transmit/receive direction. It returns value of NFCR reg
 931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferInc()\n\n\n
 934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_DIR_t XMC_CAN_NODE_GetLastErrTransferDir(XMC_CAN_NODE_t *co
 938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_DIR_t)(((node->NECNT) & CAN_NODE_NECNT_LETD_Msk) >> CAN_NODE_NECN
 940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_NODE0
 946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return XMC_CAN_NODE_LAST_ERROR_INC_t Last error transfer increment. Refer @ref XMC_CAN_NODE_LAS
 948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Returns NODE Last Error Transfer Increment. It returns value of NFCR register.
 951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetLastErrTransferDir()\n\n\n
 954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE XMC_CAN_NODE_LAST_ERROR_INC_t XMC_CAN_NODE_GetLastErrTransferInc(XMC_CAN_NODE_t *co
 958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   return (XMC_CAN_NODE_LAST_ERROR_INC_t)(((node->NECNT) & CAN_NODE_NECNT_LEINC_Msk)>> CAN_NODE_NECN
 960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param  error_warning_level	Error Warning level value. Range :0-255.
 967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Configures error warning level in order to set the corresponding error warning bit EWRN. It conf
 972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * into NECNT register. Before this configuration call XMC_CAN_NODE_EnableConfigurationChange() API
 973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
 975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetErrorWarningLevel()\n\n\n
 976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
 978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
 979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
 981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetErrorWarningLevel(XMC_CAN_NODE_t *const can_node, uint8_t erro
 983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_EWRNLVL_Msk)) |
 985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****                     (((uint32_t)error_warning_level << CAN_NODE_NECNT_EWRNLVL_Pos) & (uint32_t)CAN_
 986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
 989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
 990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
 992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_tec  transmit error counter value. Range :0-255
 993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
 995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
 996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
 997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  Configures Transmit error counter. It configures \a can_tec into NECNT register. Before this co
 998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_NODE_EnableConfigurationChange() API.
 999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetTransmitErrorCounter()\n\n\n
1002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  \par<b>Note:</b><br>
1004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1008:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1009:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t c
1010:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
1011:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_TEC_Msk)) |
1012:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****                     (((uint32_t)can_tec << CAN_NODE_NECNT_TEC_Pos) & (uint32_t)CAN_NODE_NECNT_TEC_M
1013:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
1014:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1015:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1016:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1017:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1018:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1019:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_rec  receive error counter value. Range :0-255
1020:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1021:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1022:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1023:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1024:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Configures Receive Error Counter. It configures \a can_rec into NECNT register. Before this conf
1025:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange() API.
1026:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1027:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1028:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetReceiveErrorCounter()\n\n\n
1029:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1030:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
1031:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1032:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1033:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1034:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1035:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_SetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node, uint8_t ca
1036:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
1037:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  can_node->NECNT = ((can_node->NECNT) & ~(uint32_t)(CAN_NODE_NECNT_REC_Msk)) |
1038:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****                    (((uint32_t)can_rec << CAN_NODE_NECNT_REC_Pos) & (uint32_t)CAN_NODE_NECNT_REC_Ms
1039:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
1040:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1041:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1042:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1043:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1044:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1045:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1046:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint8_t Error Warning Level. Range :0 - 255
1047:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1048:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1049:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *	Returns error warning level. This determines the threshold value (warning level, default 96) to 
1050:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *	to set the corresponding error warning bit EWRN. It reads NECNT register.
1051:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1052:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1053:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetErrorWarningLevel()\n\n\n
1054:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1055:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1056:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1057:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1058:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetErrorWarningLevel(XMC_CAN_NODE_t *const can_node)
1059:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
1060:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_EWRNLVL_Msk) >> CAN_NODE_NECNT_EWR
1061:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
1062:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1063:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1064:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1065:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1066:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1067:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1068:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint8_t transmit error counter value. Range :0 - 255
1069:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1070:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1071:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *	Returns Transmit Error Counter value. If the Bitstream Processor detects an error while a transm
1072:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *	running, the Transmit Error Counter is incremented by 8. An increment of 1 is used when the erro
1073:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *	reported by an external CAN node via an Error Frame generation. It reads NECNT register.
1074:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1075:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1076:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetTransmitErrorCounter()
1077:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1078:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Note:</b><br>
1079:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  NECNTx can be written only if bit NCRx.CCE is set.
1080:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1081:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1082:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1083:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetTransmitErrorCounter(XMC_CAN_NODE_t *const can_node)
1084:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
1085:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_TEC_Msk) >> CAN_NODE_NECNT_TEC_Po
1086:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
1087:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1088:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1089:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1090:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1091:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1092:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1093:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint8_t	receive error counter value.
1094:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1095:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1096:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *	Returns Receive Error Counter value. It reads NECNT register.
1097:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1098:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1099:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_SetReceiveErrorCounter()
1100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint8_t XMC_CAN_NODE_GetReceiveErrorCounter(XMC_CAN_NODE_t *const can_node)
1104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
1105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   return (uint8_t)((uint32_t)((can_node->NECNT)  & CAN_NODE_NECNT_REC_Msk) >> CAN_NODE_NECNT_REC_Po
1106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
1107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return uint32_t Current status of the node.
1114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Returns errors status as well as successfully transferred CAN frames status.
1117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *  XMC_CAN_NODE_ClearStatus()
1120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE uint32_t XMC_CAN_NODE_GetStatus(XMC_CAN_NODE_t *const can_node)
1124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
1125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   return ((can_node->NSR));
1126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
1127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node_status Status to clear.Refer @ref XMC_CAN_NODE_STATUS_t for valid values.
1132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Clear errors status as well as successfully transferred CAN frames status.
1137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_GetStatus()
1140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_ClearStatus(XMC_CAN_NODE_t *const can_node,XMC_CAN_NODE_STATUS_t 
1144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
1145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****    can_node->NSR &= ~(uint32_t)can_node_status;
1146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
1147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * Allow to change the configuration of the CAN node, like bit timing, CAN bus transmit/receive por
1157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * counters read. It configures NCRx.CCE bit.
1158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related APIs:</b><BR>
1160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_DisableConfigurationChange()
1161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
  91              	 .loc 1 1165 0
  92              	 .cfi_startproc
  93              	 
  94              	 
  95              	 
  96 0000 80B4     	 push {r7}
  97              	.LCFI6:
  98              	 .cfi_def_cfa_offset 4
  99              	 .cfi_offset 7,-4
 100 0002 83B0     	 sub sp,sp,#12
 101              	.LCFI7:
 102              	 .cfi_def_cfa_offset 16
 103 0004 00AF     	 add r7,sp,#0
 104              	.LCFI8:
 105              	 .cfi_def_cfa_register 7
 106 0006 7860     	 str r0,[r7,#4]
1166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 107              	 .loc 1 1166 0
 108 0008 7B68     	 ldr r3,[r7,#4]
 109 000a 1B68     	 ldr r3,[r3]
 110 000c 43F04002 	 orr r2,r3,#64
 111 0010 7B68     	 ldr r3,[r7,#4]
 112 0012 1A60     	 str r2,[r3]
1167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 113              	 .loc 1 1167 0
 114 0014 0C37     	 adds r7,r7,#12
 115              	.LCFI9:
 116              	 .cfi_def_cfa_offset 4
 117 0016 BD46     	 mov sp,r7
 118              	.LCFI10:
 119              	 .cfi_def_cfa_register 13
 120              	 
 121 0018 5DF8047B 	 ldr r7,[sp],#4
 122              	.LCFI11:
 123              	 .cfi_restore 7
 124              	 .cfi_def_cfa_offset 0
 125 001c 7047     	 bx lr
 126              	 .cfi_endproc
 127              	.LFE174:
 129 001e 00BF     	 .section .text.XMC_CAN_NODE_DisableConfigurationChange,"ax",%progbits
 130              	 .align 2
 131              	 .thumb
 132              	 .thumb_func
 134              	XMC_CAN_NODE_DisableConfigurationChange:
 135              	.LFB175:
1168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** /**
1171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @param can_node Pointer Pointing to CAN_NODE Structure. Defines CAN_NODE registers, Range :CAN_N
1173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * @return None
1175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Description:</b><br>
1177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *	Forbid to change the configuration of the CAN node. It configures NCRx.CCE bit.
1178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * \par<b>Related API's:</b><br>
1180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  * XMC_CAN_NODE_EnableConfigurationChange()
1181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  *
1182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****  */
1183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** 
1184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** __STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
1185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** {
 136              	 .loc 1 1185 0
 137              	 .cfi_startproc
 138              	 
 139              	 
 140              	 
 141 0000 80B4     	 push {r7}
 142              	.LCFI12:
 143              	 .cfi_def_cfa_offset 4
 144              	 .cfi_offset 7,-4
 145 0002 83B0     	 sub sp,sp,#12
 146              	.LCFI13:
 147              	 .cfi_def_cfa_offset 16
 148 0004 00AF     	 add r7,sp,#0
 149              	.LCFI14:
 150              	 .cfi_def_cfa_register 7
 151 0006 7860     	 str r0,[r7,#4]
1186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h ****   can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 152              	 .loc 1 1186 0
 153 0008 7B68     	 ldr r3,[r7,#4]
 154 000a 1B68     	 ldr r3,[r3]
 155 000c 23F04002 	 bic r2,r3,#64
 156 0010 7B68     	 ldr r3,[r7,#4]
 157 0012 1A60     	 str r2,[r3]
1187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_can.h **** }
 158              	 .loc 1 1187 0
 159 0014 0C37     	 adds r7,r7,#12
 160              	.LCFI15:
 161              	 .cfi_def_cfa_offset 4
 162 0016 BD46     	 mov sp,r7
 163              	.LCFI16:
 164              	 .cfi_def_cfa_register 13
 165              	 
 166 0018 5DF8047B 	 ldr r7,[sp],#4
 167              	.LCFI17:
 168              	 .cfi_restore 7
 169              	 .cfi_def_cfa_offset 0
 170 001c 7047     	 bx lr
 171              	 .cfi_endproc
 172              	.LFE175:
 174 001e 00BF     	 .section .text.max,"ax",%progbits
 175              	 .align 2
 176              	 .thumb
 177              	 .thumb_func
 179              	max:
 180              	.LFB210:
 181              	 .file 2 "../Libraries/XMCLib/src/xmc_can.c"
   1:../Libraries/XMCLib/src/xmc_can.c **** /**
   2:../Libraries/XMCLib/src/xmc_can.c ****  * @file xmc_can.c
   3:../Libraries/XMCLib/src/xmc_can.c ****  * @date 2015-09-08
   4:../Libraries/XMCLib/src/xmc_can.c ****  *
   5:../Libraries/XMCLib/src/xmc_can.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_can.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_can.c ****  *
   9:../Libraries/XMCLib/src/xmc_can.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_can.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_can.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_can.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_can.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_can.c ****  * 
  18:../Libraries/XMCLib/src/xmc_can.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_can.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_can.c ****  * 
  21:../Libraries/XMCLib/src/xmc_can.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_can.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_can.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_can.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_can.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_can.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_can.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_can.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_can.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_can.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_can.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_can.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_can.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_can.c ****  *
  36:../Libraries/XMCLib/src/xmc_can.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_can.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_can.c ****  *
  39:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_can.c ****  *     - Initial draft <br>
  41:../Libraries/XMCLib/src/xmc_can.c ****  *
  42:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_can.c ****  *     - New API added: XMC_CAN_MO_ReceiveData() <br>
  44:../Libraries/XMCLib/src/xmc_can.c ****  *     - XMC_CAN_MO_Config() signature has changed <br>
  45:../Libraries/XMCLib/src/xmc_can.c ****  *     - Minor fix in XMC_CAN_TXFIFO_ConfigMOSlaveObject(). <br>
  46:../Libraries/XMCLib/src/xmc_can.c ****  *
  47:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-06-20:
  48:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed version macros and declaration of GetDriverVersion API
  49:../Libraries/XMCLib/src/xmc_can.c ****  *
  50:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-01:
  51:../Libraries/XMCLib/src/xmc_can.c ****  *     - Removed  fCANB clock support <br>
  52:../Libraries/XMCLib/src/xmc_can.c ****  *
  53:../Libraries/XMCLib/src/xmc_can.c ****  * 2015-09-08:
  54:../Libraries/XMCLib/src/xmc_can.c ****  *     - Fixed bug in XMC_CAN_Init() <br>
  55:../Libraries/XMCLib/src/xmc_can.c ****  *
  56:../Libraries/XMCLib/src/xmc_can.c ****  * @endcond
  57:../Libraries/XMCLib/src/xmc_can.c ****  *
  58:../Libraries/XMCLib/src/xmc_can.c ****  */ 
  59:../Libraries/XMCLib/src/xmc_can.c **** 
  60:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  61:../Libraries/XMCLib/src/xmc_can.c ****  * HEADER FILES
  62:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  63:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_can.h"
  64:../Libraries/XMCLib/src/xmc_can.c **** 
  65:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CAN)
  66:../Libraries/XMCLib/src/xmc_can.c **** #include "xmc_scu.h"
  67:../Libraries/XMCLib/src/xmc_can.c **** 
  68:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
  69:../Libraries/XMCLib/src/xmc_can.c **** {
 182              	 .loc 2 69 0
 183              	 .cfi_startproc
 184              	 
 185              	 
 186              	 
 187 0000 80B4     	 push {r7}
 188              	.LCFI18:
 189              	 .cfi_def_cfa_offset 4
 190              	 .cfi_offset 7,-4
 191 0002 83B0     	 sub sp,sp,#12
 192              	.LCFI19:
 193              	 .cfi_def_cfa_offset 16
 194 0004 00AF     	 add r7,sp,#0
 195              	.LCFI20:
 196              	 .cfi_def_cfa_register 7
 197 0006 7860     	 str r0,[r7,#4]
 198 0008 3960     	 str r1,[r7]
  70:../Libraries/XMCLib/src/xmc_can.c ****   return (a > b) ? a : b;
 199              	 .loc 2 70 0
 200 000a 3A68     	 ldr r2,[r7]
 201 000c 7B68     	 ldr r3,[r7,#4]
 202 000e 9342     	 cmp r3,r2
 203 0010 38BF     	 it cc
 204 0012 1346     	 movcc r3,r2
  71:../Libraries/XMCLib/src/xmc_can.c **** }
 205              	 .loc 2 71 0
 206 0014 1846     	 mov r0,r3
 207 0016 0C37     	 adds r7,r7,#12
 208              	.LCFI21:
 209              	 .cfi_def_cfa_offset 4
 210 0018 BD46     	 mov sp,r7
 211              	.LCFI22:
 212              	 .cfi_def_cfa_register 13
 213              	 
 214 001a 5DF8047B 	 ldr r7,[sp],#4
 215              	.LCFI23:
 216              	 .cfi_restore 7
 217              	 .cfi_def_cfa_offset 0
 218 001e 7047     	 bx lr
 219              	 .cfi_endproc
 220              	.LFE210:
 222              	 .section .text.min,"ax",%progbits
 223              	 .align 2
 224              	 .thumb
 225              	 .thumb_func
 227              	min:
 228              	.LFB211:
  72:../Libraries/XMCLib/src/xmc_can.c **** 
  73:../Libraries/XMCLib/src/xmc_can.c **** __STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
  74:../Libraries/XMCLib/src/xmc_can.c **** {
 229              	 .loc 2 74 0
 230              	 .cfi_startproc
 231              	 
 232              	 
 233              	 
 234 0000 80B4     	 push {r7}
 235              	.LCFI24:
 236              	 .cfi_def_cfa_offset 4
 237              	 .cfi_offset 7,-4
 238 0002 83B0     	 sub sp,sp,#12
 239              	.LCFI25:
 240              	 .cfi_def_cfa_offset 16
 241 0004 00AF     	 add r7,sp,#0
 242              	.LCFI26:
 243              	 .cfi_def_cfa_register 7
 244 0006 7860     	 str r0,[r7,#4]
 245 0008 3960     	 str r1,[r7]
  75:../Libraries/XMCLib/src/xmc_can.c ****   return (a < b) ? a : b;
 246              	 .loc 2 75 0
 247 000a 3A68     	 ldr r2,[r7]
 248 000c 7B68     	 ldr r3,[r7,#4]
 249 000e 9342     	 cmp r3,r2
 250 0010 28BF     	 it cs
 251 0012 1346     	 movcs r3,r2
  76:../Libraries/XMCLib/src/xmc_can.c **** }
 252              	 .loc 2 76 0
 253 0014 1846     	 mov r0,r3
 254 0016 0C37     	 adds r7,r7,#12
 255              	.LCFI27:
 256              	 .cfi_def_cfa_offset 4
 257 0018 BD46     	 mov sp,r7
 258              	.LCFI28:
 259              	 .cfi_def_cfa_register 13
 260              	 
 261 001a 5DF8047B 	 ldr r7,[sp],#4
 262              	.LCFI29:
 263              	 .cfi_restore 7
 264              	 .cfi_def_cfa_offset 0
 265 001e 7047     	 bx lr
 266              	 .cfi_endproc
 267              	.LFE211:
 269              	 .section .text.XMC_CAN_NODE_NominalBitTimeConfigure,"ax",%progbits
 270              	 .align 2
 271              	 .global XMC_CAN_NODE_NominalBitTimeConfigure
 272              	 .thumb
 273              	 .thumb_func
 275              	XMC_CAN_NODE_NominalBitTimeConfigure:
 276              	.LFB212:
  77:../Libraries/XMCLib/src/xmc_can.c **** 
  78:../Libraries/XMCLib/src/xmc_can.c **** /*******************************************************************************
  79:../Libraries/XMCLib/src/xmc_can.c ****  * API IMPLEMENTATION
  80:../Libraries/XMCLib/src/xmc_can.c ****  *******************************************************************************/
  81:../Libraries/XMCLib/src/xmc_can.c **** 
  82:../Libraries/XMCLib/src/xmc_can.c **** /* Baudrate Configuration */
  83:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_NominalBitTimeConfigure (XMC_CAN_NODE_t *const can_node,
  84:../Libraries/XMCLib/src/xmc_can.c ****                                            const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const can_
  85:../Libraries/XMCLib/src/xmc_can.c **** {
 277              	 .loc 2 85 0
 278              	 .cfi_startproc
 279              	 
 280              	 
 281 0000 80B5     	 push {r7,lr}
 282              	.LCFI30:
 283              	 .cfi_def_cfa_offset 8
 284              	 .cfi_offset 7,-8
 285              	 .cfi_offset 14,-4
 286 0002 90B0     	 sub sp,sp,#64
 287              	.LCFI31:
 288              	 .cfi_def_cfa_offset 72
 289 0004 00AF     	 add r7,sp,#0
 290              	.LCFI32:
 291              	 .cfi_def_cfa_register 7
 292 0006 7860     	 str r0,[r7,#4]
 293 0008 3960     	 str r1,[r7]
  86:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_brp = 12U ;
 294              	 .loc 2 86 0
 295 000a 0C23     	 movs r3,#12
 296 000c FB63     	 str r3,[r7,#60]
  87:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t temp_tseg1 = 12U;
 297              	 .loc 2 87 0
 298 000e 0C23     	 movs r3,#12
 299 0010 BB63     	 str r3,[r7,#56]
  88:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_brp = 0U;
 300              	 .loc 2 88 0
 301 0012 0023     	 movs r3,#0
 302 0014 7B63     	 str r3,[r7,#52]
  89:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg1 = 1U;
 303              	 .loc 2 89 0
 304 0016 0123     	 movs r3,#1
 305 0018 3B63     	 str r3,[r7,#48]
  90:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tseg2 = 0U;
 306              	 .loc 2 90 0
 307 001a 0023     	 movs r3,#0
 308 001c 7B61     	 str r3,[r7,#20]
  91:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_tbaud = 0U;
 309              	 .loc 2 91 0
 310 001e 0023     	 movs r3,#0
 311 0020 FB62     	 str r3,[r7,#44]
  92:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t best_error = 10000U;
 312              	 .loc 2 92 0
 313 0022 42F21073 	 movw r3,#10000
 314 0026 BB62     	 str r3,[r7,#40]
  93:../Libraries/XMCLib/src/xmc_can.c **** 
  94:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: rate not supported", (can_bit_time->baudrate
  95:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->baudrate >= 100000U));
  96:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
  97:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency <= 120000000U);
  98:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: fCAN not supported",
  99:../Libraries/XMCLib/src/xmc_can.c ****              can_bit_time->can_frequency > 5000000U);
 100:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_NODE_NOMINAL_BIT_TIME_Configure: sample point not supported",
 101:../Libraries/XMCLib/src/xmc_can.c ****              (can_bit_time->sample_point < 10000U) && ((can_bit_time->sample_point > 0U)));
 102:../Libraries/XMCLib/src/xmc_can.c **** 			 
 103:../Libraries/XMCLib/src/xmc_can.c ****   /*
 104:../Libraries/XMCLib/src/xmc_can.c ****    * Bit timing & sampling
 105:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = (BRP+1)/Fcan if DIV8 = 0
 106:../Libraries/XMCLib/src/xmc_can.c ****    * Tq = 8*(BRP+1)/Fcan if DIV8 = 1
 107:../Libraries/XMCLib/src/xmc_can.c ****    * TSync = 1.Tq
 108:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 = (TSEG1+1)*Tq                >= 3Tq
 109:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 = (TSEG2+1)*Tq                >= 2Tq
 110:../Libraries/XMCLib/src/xmc_can.c ****    * Bit Time = TSync + TSeg1 + TSeg2    >= 8Tq
 111:../Libraries/XMCLib/src/xmc_can.c ****    *
 112:../Libraries/XMCLib/src/xmc_can.c ****    * Resynchronization:
 113:../Libraries/XMCLib/src/xmc_can.c ****    *
 114:../Libraries/XMCLib/src/xmc_can.c ****    * Tsjw = (SJW + 1)*Tq
 115:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg1 >= Tsjw + Tprop
 116:../Libraries/XMCLib/src/xmc_can.c ****    * TSeg2 >= Tsjw
 117:../Libraries/XMCLib/src/xmc_can.c ****    */
 118:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best baudrate */
 119:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_brp = 1U; temp_brp <= 64U; temp_brp++)
 315              	 .loc 2 119 0
 316 0028 0123     	 movs r3,#1
 317 002a FB63     	 str r3,[r7,#60]
 318 002c 67E0     	 b .L9
 319              	.L18:
 320              	.LBB2:
 120:../Libraries/XMCLib/src/xmc_can.c ****   {
 121:../Libraries/XMCLib/src/xmc_can.c **** 
 122:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t f_quanta = (uint32_t)((can_bit_time->can_frequency * 10U) / temp_brp);
 321              	 .loc 2 122 0
 322 002e 3B68     	 ldr r3,[r7]
 323 0030 1A68     	 ldr r2,[r3]
 324 0032 1346     	 mov r3,r2
 325 0034 9B00     	 lsls r3,r3,#2
 326 0036 1344     	 add r3,r3,r2
 327 0038 5B00     	 lsls r3,r3,#1
 328 003a 1A46     	 mov r2,r3
 329 003c FB6B     	 ldr r3,[r7,#60]
 330 003e B2FBF3F3 	 udiv r3,r2,r3
 331 0042 3B61     	 str r3,[r7,#16]
 123:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_tbaud = (uint32_t)(f_quanta / (can_bit_time->baudrate));
 332              	 .loc 2 123 0
 333 0044 3B68     	 ldr r3,[r7]
 334 0046 5B68     	 ldr r3,[r3,#4]
 335 0048 3A69     	 ldr r2,[r7,#16]
 336 004a B2FBF3F3 	 udiv r3,r2,r3
 337 004e 7B62     	 str r3,[r7,#36]
 124:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t temp_baudrate;
 125:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t error;
 126:../Libraries/XMCLib/src/xmc_can.c **** 
 127:../Libraries/XMCLib/src/xmc_can.c ****   if((temp_tbaud % 10U) > 5U)
 338              	 .loc 2 127 0
 339 0050 796A     	 ldr r1,[r7,#36]
 340 0052 5B4B     	 ldr r3,.L26
 341 0054 A3FB0123 	 umull r2,r3,r3,r1
 342 0058 DA08     	 lsrs r2,r3,#3
 343 005a 1346     	 mov r3,r2
 344 005c 9B00     	 lsls r3,r3,#2
 345 005e 1344     	 add r3,r3,r2
 346 0060 5B00     	 lsls r3,r3,#1
 347 0062 CA1A     	 subs r2,r1,r3
 348 0064 052A     	 cmp r2,#5
 349 0066 09D9     	 bls .L10
 128:../Libraries/XMCLib/src/xmc_can.c ****   {
 129:../Libraries/XMCLib/src/xmc_can.c **** 	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 350              	 .loc 2 129 0
 351 0068 7B6A     	 ldr r3,[r7,#36]
 352 006a 554A     	 ldr r2,.L26
 353 006c A2FB0323 	 umull r2,r3,r2,r3
 354 0070 DB08     	 lsrs r3,r3,#3
 355 0072 7B62     	 str r3,[r7,#36]
 130:../Libraries/XMCLib/src/xmc_can.c **** 	temp_tbaud++;
 356              	 .loc 2 130 0
 357 0074 7B6A     	 ldr r3,[r7,#36]
 358 0076 0133     	 adds r3,r3,#1
 359 0078 7B62     	 str r3,[r7,#36]
 360 007a 05E0     	 b .L11
 361              	.L10:
 131:../Libraries/XMCLib/src/xmc_can.c ****   }
 132:../Libraries/XMCLib/src/xmc_can.c ****   else
 133:../Libraries/XMCLib/src/xmc_can.c ****   {
 134:../Libraries/XMCLib/src/xmc_can.c **** 	temp_tbaud = (uint32_t)(temp_tbaud / 10U);
 362              	 .loc 2 134 0
 363 007c 7B6A     	 ldr r3,[r7,#36]
 364 007e 504A     	 ldr r2,.L26
 365 0080 A2FB0323 	 umull r2,r3,r2,r3
 366 0084 DB08     	 lsrs r3,r3,#3
 367 0086 7B62     	 str r3,[r7,#36]
 368              	.L11:
 135:../Libraries/XMCLib/src/xmc_can.c ****   }
 136:../Libraries/XMCLib/src/xmc_can.c **** 
 137:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_tbaud > 0U)
 369              	 .loc 2 137 0
 370 0088 7B6A     	 ldr r3,[r7,#36]
 371 008a 002B     	 cmp r3,#0
 372 008c 0AD0     	 beq .L12
 138:../Libraries/XMCLib/src/xmc_can.c ****   {
 139:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = (uint32_t) (f_quanta / (temp_tbaud * 10U));
 373              	 .loc 2 139 0
 374 008e 7A6A     	 ldr r2,[r7,#36]
 375 0090 1346     	 mov r3,r2
 376 0092 9B00     	 lsls r3,r3,#2
 377 0094 1344     	 add r3,r3,r2
 378 0096 5B00     	 lsls r3,r3,#1
 379 0098 1A46     	 mov r2,r3
 380 009a 3B69     	 ldr r3,[r7,#16]
 381 009c B3FBF2F3 	 udiv r3,r3,r2
 382 00a0 3B62     	 str r3,[r7,#32]
 383 00a2 07E0     	 b .L13
 384              	.L12:
 140:../Libraries/XMCLib/src/xmc_can.c ****   }
 141:../Libraries/XMCLib/src/xmc_can.c ****   else
 142:../Libraries/XMCLib/src/xmc_can.c ****   {
 143:../Libraries/XMCLib/src/xmc_can.c ****     temp_baudrate = f_quanta / 10U;
 385              	 .loc 2 143 0
 386 00a4 3B69     	 ldr r3,[r7,#16]
 387 00a6 464A     	 ldr r2,.L26
 388 00a8 A2FB0323 	 umull r2,r3,r2,r3
 389 00ac DB08     	 lsrs r3,r3,#3
 390 00ae 3B62     	 str r3,[r7,#32]
 144:../Libraries/XMCLib/src/xmc_can.c **** 	temp_tbaud = 1;
 391              	 .loc 2 144 0
 392 00b0 0123     	 movs r3,#1
 393 00b2 7B62     	 str r3,[r7,#36]
 394              	.L13:
 145:../Libraries/XMCLib/src/xmc_can.c ****   }
 146:../Libraries/XMCLib/src/xmc_can.c **** 
 147:../Libraries/XMCLib/src/xmc_can.c ****   if(temp_baudrate >= can_bit_time->baudrate)
 395              	 .loc 2 147 0
 396 00b4 3B68     	 ldr r3,[r7]
 397 00b6 5A68     	 ldr r2,[r3,#4]
 398 00b8 3B6A     	 ldr r3,[r7,#32]
 399 00ba 9A42     	 cmp r2,r3
 400 00bc 05D8     	 bhi .L14
 148:../Libraries/XMCLib/src/xmc_can.c ****   {
 149:../Libraries/XMCLib/src/xmc_can.c **** 	error = temp_baudrate - can_bit_time->baudrate;
 401              	 .loc 2 149 0
 402 00be 3B68     	 ldr r3,[r7]
 403 00c0 5B68     	 ldr r3,[r3,#4]
 404 00c2 3A6A     	 ldr r2,[r7,#32]
 405 00c4 D31A     	 subs r3,r2,r3
 406 00c6 FB61     	 str r3,[r7,#28]
 407 00c8 04E0     	 b .L15
 408              	.L14:
 150:../Libraries/XMCLib/src/xmc_can.c ****   }
 151:../Libraries/XMCLib/src/xmc_can.c ****   else
 152:../Libraries/XMCLib/src/xmc_can.c ****   {
 153:../Libraries/XMCLib/src/xmc_can.c **** 	error = can_bit_time->baudrate - temp_baudrate;
 409              	 .loc 2 153 0
 410 00ca 3B68     	 ldr r3,[r7]
 411 00cc 5A68     	 ldr r2,[r3,#4]
 412 00ce 3B6A     	 ldr r3,[r7,#32]
 413 00d0 D31A     	 subs r3,r2,r3
 414 00d2 FB61     	 str r3,[r7,#28]
 415              	.L15:
 154:../Libraries/XMCLib/src/xmc_can.c ****   }
 155:../Libraries/XMCLib/src/xmc_can.c **** 
 156:../Libraries/XMCLib/src/xmc_can.c ****   if ((temp_tbaud <= 20U) && (best_error > error))
 416              	 .loc 2 156 0
 417 00d4 7B6A     	 ldr r3,[r7,#36]
 418 00d6 142B     	 cmp r3,#20
 419 00d8 0ED8     	 bhi .L16
 420              	 .loc 2 156 0 is_stmt 0 discriminator 1
 421 00da BA6A     	 ldr r2,[r7,#40]
 422 00dc FB69     	 ldr r3,[r7,#28]
 423 00de 9A42     	 cmp r2,r3
 424 00e0 0AD9     	 bls .L16
 157:../Libraries/XMCLib/src/xmc_can.c ****   {
 158:../Libraries/XMCLib/src/xmc_can.c ****     best_brp = temp_brp;
 425              	 .loc 2 158 0 is_stmt 1
 426 00e2 FB6B     	 ldr r3,[r7,#60]
 427 00e4 7B63     	 str r3,[r7,#52]
 159:../Libraries/XMCLib/src/xmc_can.c ****     best_tbaud = temp_tbaud;
 428              	 .loc 2 159 0
 429 00e6 7B6A     	 ldr r3,[r7,#36]
 430 00e8 FB62     	 str r3,[r7,#44]
 160:../Libraries/XMCLib/src/xmc_can.c ****     best_error = (error);
 431              	 .loc 2 160 0
 432 00ea FB69     	 ldr r3,[r7,#28]
 433 00ec BB62     	 str r3,[r7,#40]
 161:../Libraries/XMCLib/src/xmc_can.c **** 
 162:../Libraries/XMCLib/src/xmc_can.c ****     if (error < 1000U)
 434              	 .loc 2 162 0
 435 00ee FB69     	 ldr r3,[r7,#28]
 436 00f0 B3F57A7F 	 cmp r3,#1000
 437 00f4 00D2     	 bcs .L16
 163:../Libraries/XMCLib/src/xmc_can.c ****     {
 164:../Libraries/XMCLib/src/xmc_can.c ****       break;
 438              	 .loc 2 164 0
 439 00f6 05E0     	 b .L17
 440              	.L16:
 441              	.LBE2:
 119:../Libraries/XMCLib/src/xmc_can.c ****   {
 442              	 .loc 2 119 0 discriminator 2
 443 00f8 FB6B     	 ldr r3,[r7,#60]
 444 00fa 0133     	 adds r3,r3,#1
 445 00fc FB63     	 str r3,[r7,#60]
 446              	.L9:
 119:../Libraries/XMCLib/src/xmc_can.c ****   {
 447              	 .loc 2 119 0 is_stmt 0 discriminator 1
 448 00fe FB6B     	 ldr r3,[r7,#60]
 449 0100 402B     	 cmp r3,#64
 450 0102 94D9     	 bls .L18
 451              	.L17:
 165:../Libraries/XMCLib/src/xmc_can.c ****     }
 166:../Libraries/XMCLib/src/xmc_can.c ****    }
 167:../Libraries/XMCLib/src/xmc_can.c ****   }
 168:../Libraries/XMCLib/src/xmc_can.c ****   /* search for best sample point */
 169:../Libraries/XMCLib/src/xmc_can.c ****   best_error = 10000U;
 452              	 .loc 2 169 0 is_stmt 1
 453 0104 42F21073 	 movw r3,#10000
 454 0108 BB62     	 str r3,[r7,#40]
 170:../Libraries/XMCLib/src/xmc_can.c **** 
 171:../Libraries/XMCLib/src/xmc_can.c ****   for (temp_tseg1 = 64U; temp_tseg1 >= 3U; temp_tseg1--)
 455              	 .loc 2 171 0
 456 010a 4023     	 movs r3,#64
 457 010c BB63     	 str r3,[r7,#56]
 458 010e 2EE0     	 b .L19
 459              	.L25:
 460              	.LBB3:
 172:../Libraries/XMCLib/src/xmc_can.c ****   {
 173:../Libraries/XMCLib/src/xmc_can.c ****     uint32_t tempSamplePoint = ((temp_tseg1 + 1U) * 10000U) / best_tbaud;
 461              	 .loc 2 173 0
 462 0110 BB6B     	 ldr r3,[r7,#56]
 463 0112 0133     	 adds r3,r3,#1
 464 0114 42F21072 	 movw r2,#10000
 465 0118 02FB03F2 	 mul r2,r2,r3
 466 011c FB6A     	 ldr r3,[r7,#44]
 467 011e B2FBF3F3 	 udiv r3,r2,r3
 468 0122 FB60     	 str r3,[r7,#12]
 174:../Libraries/XMCLib/src/xmc_can.c **** 	uint32_t error;
 175:../Libraries/XMCLib/src/xmc_can.c **** 	if (tempSamplePoint >= can_bit_time->sample_point)
 469              	 .loc 2 175 0
 470 0124 3B68     	 ldr r3,[r7]
 471 0126 1B89     	 ldrh r3,[r3,#8]
 472 0128 1A46     	 mov r2,r3
 473 012a FB68     	 ldr r3,[r7,#12]
 474 012c 9A42     	 cmp r2,r3
 475 012e 06D8     	 bhi .L20
 176:../Libraries/XMCLib/src/xmc_can.c **** 	{
 177:../Libraries/XMCLib/src/xmc_can.c ****       error = tempSamplePoint  - can_bit_time->sample_point;
 476              	 .loc 2 177 0
 477 0130 3B68     	 ldr r3,[r7]
 478 0132 1B89     	 ldrh r3,[r3,#8]
 479 0134 1A46     	 mov r2,r3
 480 0136 FB68     	 ldr r3,[r7,#12]
 481 0138 9B1A     	 subs r3,r3,r2
 482 013a BB61     	 str r3,[r7,#24]
 483 013c 05E0     	 b .L21
 484              	.L20:
 178:../Libraries/XMCLib/src/xmc_can.c **** 	}
 179:../Libraries/XMCLib/src/xmc_can.c **** 	else
 180:../Libraries/XMCLib/src/xmc_can.c **** 	{
 181:../Libraries/XMCLib/src/xmc_can.c **** 	  error = can_bit_time->sample_point  - tempSamplePoint;
 485              	 .loc 2 181 0
 486 013e 3B68     	 ldr r3,[r7]
 487 0140 1B89     	 ldrh r3,[r3,#8]
 488 0142 1A46     	 mov r2,r3
 489 0144 FB68     	 ldr r3,[r7,#12]
 490 0146 D31A     	 subs r3,r2,r3
 491 0148 BB61     	 str r3,[r7,#24]
 492              	.L21:
 182:../Libraries/XMCLib/src/xmc_can.c **** 	}
 183:../Libraries/XMCLib/src/xmc_can.c ****     if (best_error > error)
 493              	 .loc 2 183 0
 494 014a BA6A     	 ldr r2,[r7,#40]
 495 014c BB69     	 ldr r3,[r7,#24]
 496 014e 9A42     	 cmp r2,r3
 497 0150 03D9     	 bls .L22
 184:../Libraries/XMCLib/src/xmc_can.c ****     {
 185:../Libraries/XMCLib/src/xmc_can.c ****       best_tseg1 = temp_tseg1;
 498              	 .loc 2 185 0
 499 0152 BB6B     	 ldr r3,[r7,#56]
 500 0154 3B63     	 str r3,[r7,#48]
 186:../Libraries/XMCLib/src/xmc_can.c ****       best_error = error;
 501              	 .loc 2 186 0
 502 0156 BB69     	 ldr r3,[r7,#24]
 503 0158 BB62     	 str r3,[r7,#40]
 504              	.L22:
 187:../Libraries/XMCLib/src/xmc_can.c ****     }
 188:../Libraries/XMCLib/src/xmc_can.c ****     if (tempSamplePoint < (can_bit_time->sample_point))
 505              	 .loc 2 188 0
 506 015a 3B68     	 ldr r3,[r7]
 507 015c 1B89     	 ldrh r3,[r3,#8]
 508 015e 1A46     	 mov r2,r3
 509 0160 FB68     	 ldr r3,[r7,#12]
 510 0162 9A42     	 cmp r2,r3
 511 0164 00D9     	 bls .L23
 189:../Libraries/XMCLib/src/xmc_can.c ****     {
 190:../Libraries/XMCLib/src/xmc_can.c ****       break;
 512              	 .loc 2 190 0
 513 0166 05E0     	 b .L24
 514              	.L23:
 515              	.LBE3:
 171:../Libraries/XMCLib/src/xmc_can.c ****   {
 516              	 .loc 2 171 0 discriminator 2
 517 0168 BB6B     	 ldr r3,[r7,#56]
 518 016a 013B     	 subs r3,r3,#1
 519 016c BB63     	 str r3,[r7,#56]
 520              	.L19:
 171:../Libraries/XMCLib/src/xmc_can.c ****   {
 521              	 .loc 2 171 0 is_stmt 0 discriminator 1
 522 016e BB6B     	 ldr r3,[r7,#56]
 523 0170 022B     	 cmp r3,#2
 524 0172 CDD8     	 bhi .L25
 525              	.L24:
 191:../Libraries/XMCLib/src/xmc_can.c ****     }
 192:../Libraries/XMCLib/src/xmc_can.c ****   }
 193:../Libraries/XMCLib/src/xmc_can.c **** 
 194:../Libraries/XMCLib/src/xmc_can.c ****   best_tseg2 = best_tbaud - best_tseg1 - 1U;
 526              	 .loc 2 194 0 is_stmt 1
 527 0174 FA6A     	 ldr r2,[r7,#44]
 528 0176 3B6B     	 ldr r3,[r7,#48]
 529 0178 D31A     	 subs r3,r2,r3
 530 017a 013B     	 subs r3,r3,#1
 531 017c 7B61     	 str r3,[r7,#20]
 195:../Libraries/XMCLib/src/xmc_can.c **** 
 196:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_EnableConfigurationChange(can_node);
 532              	 .loc 2 196 0
 533 017e 7868     	 ldr r0,[r7,#4]
 534 0180 FFF7FEFF 	 bl XMC_CAN_NODE_EnableConfigurationChange
 197:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure bit timing register */
 198:../Libraries/XMCLib/src/xmc_can.c ****   can_node->NBTR = (((uint32_t)(best_tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_N
 535              	 .loc 2 198 0
 536 0184 7B69     	 ldr r3,[r7,#20]
 537 0186 013B     	 subs r3,r3,#1
 538 0188 1B03     	 lsls r3,r3,#12
 539 018a 03F4E042 	 and r2,r3,#28672
 199:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 540              	 .loc 2 199 0
 541 018e 3B68     	 ldr r3,[r7]
 542 0190 5B89     	 ldrh r3,[r3,#10]
 543 0192 013B     	 subs r3,r3,#1
 544 0194 9B01     	 lsls r3,r3,#6
 545 0196 DBB2     	 uxtb r3,r3
 198:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 546              	 .loc 2 198 0
 547 0198 1A43     	 orrs r2,r2,r3
 200:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_tseg1-1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBT
 548              	 .loc 2 200 0
 549 019a 3B6B     	 ldr r3,[r7,#48]
 550 019c 013B     	 subs r3,r3,#1
 551 019e 1B02     	 lsls r3,r3,#8
 552 01a0 03F47063 	 and r3,r3,#3840
 199:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 553              	 .loc 2 199 0
 554 01a4 1A43     	 orrs r2,r2,r3
 201:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)(best_brp - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_
 555              	 .loc 2 201 0
 556 01a6 7B6B     	 ldr r3,[r7,#52]
 557 01a8 013B     	 subs r3,r3,#1
 558 01aa 03F03F03 	 and r3,r3,#63
 559 01ae 1A43     	 orrs r2,r2,r3
 198:../Libraries/XMCLib/src/xmc_can.c ****                    ((((uint32_t)((uint32_t)(can_bit_time->sjw)-1U) << CAN_NODE_NBTR_SJW_Pos)) & (ui
 560              	 .loc 2 198 0
 561 01b0 7B68     	 ldr r3,[r7,#4]
 562 01b2 1A61     	 str r2,[r3,#16]
 202:../Libraries/XMCLib/src/xmc_can.c ****                    (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 203:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_NODE_DisableConfigurationChange(can_node);
 563              	 .loc 2 203 0
 564 01b4 7868     	 ldr r0,[r7,#4]
 565 01b6 FFF7FEFF 	 bl XMC_CAN_NODE_DisableConfigurationChange
 204:../Libraries/XMCLib/src/xmc_can.c **** }
 566              	 .loc 2 204 0
 567 01ba 4037     	 adds r7,r7,#64
 568              	.LCFI33:
 569              	 .cfi_def_cfa_offset 8
 570 01bc BD46     	 mov sp,r7
 571              	.LCFI34:
 572              	 .cfi_def_cfa_register 13
 573              	 
 574 01be 80BD     	 pop {r7,pc}
 575              	.L27:
 576              	 .align 2
 577              	.L26:
 578 01c0 CDCCCCCC 	 .word -858993459
 579              	 .cfi_endproc
 580              	.LFE212:
 582              	 .section .text.XMC_CAN_AllocateMOtoNodeList,"ax",%progbits
 583              	 .align 2
 584              	 .global XMC_CAN_AllocateMOtoNodeList
 585              	 .thumb
 586              	 .thumb_func
 588              	XMC_CAN_AllocateMOtoNodeList:
 589              	.LFB213:
 205:../Libraries/XMCLib/src/xmc_can.c **** /* Function to allocate message object from free list to node list */
 206:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_nu
 207:../Libraries/XMCLib/src/xmc_can.c **** {
 590              	 .loc 2 207 0
 591              	 .cfi_startproc
 592              	 
 593              	 
 594 0000 80B5     	 push {r7,lr}
 595              	.LCFI35:
 596              	 .cfi_def_cfa_offset 8
 597              	 .cfi_offset 7,-8
 598              	 .cfi_offset 14,-4
 599 0002 82B0     	 sub sp,sp,#8
 600              	.LCFI36:
 601              	 .cfi_def_cfa_offset 16
 602 0004 00AF     	 add r7,sp,#0
 603              	.LCFI37:
 604              	 .cfi_def_cfa_register 7
 605 0006 7860     	 str r0,[r7,#4]
 606 0008 0B46     	 mov r3,r1
 607 000a FB70     	 strb r3,[r7,#3]
 608 000c 1346     	 mov r3,r2
 609 000e BB70     	 strb r3,[r7,#2]
 208:../Libraries/XMCLib/src/xmc_can.c ****   /* Panel Command for  allocation of MO to node list */
 209:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE,mo_num,(node_num + 1U));
 610              	 .loc 2 209 0
 611 0010 FB78     	 ldrb r3,[r7,#3]
 612 0012 0133     	 adds r3,r3,#1
 613 0014 DBB2     	 uxtb r3,r3
 614 0016 BA78     	 ldrb r2,[r7,#2]
 615 0018 7868     	 ldr r0,[r7,#4]
 616 001a 0221     	 movs r1,#2
 617 001c FFF7FEFF 	 bl XMC_CAN_PanelControl
 210:../Libraries/XMCLib/src/xmc_can.c ****   /* wait until panel as done the command */
 211:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->PANCTR & CAN_PANCTR_BUSY_Msk)
 618              	 .loc 2 211 0
 619 0020 00BF     	 nop
 620              	.L29:
 621              	 .loc 2 211 0 is_stmt 0 discriminator 1
 622 0022 7B68     	 ldr r3,[r7,#4]
 623 0024 D3F8C431 	 ldr r3,[r3,#452]
 624 0028 03F48073 	 and r3,r3,#256
 625 002c 002B     	 cmp r3,#0
 626 002e F8D1     	 bne .L29
 212:../Libraries/XMCLib/src/xmc_can.c ****   {
 213:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 214:../Libraries/XMCLib/src/xmc_can.c ****   };
 215:../Libraries/XMCLib/src/xmc_can.c **** }
 627              	 .loc 2 215 0 is_stmt 1
 628 0030 0837     	 adds r7,r7,#8
 629              	.LCFI38:
 630              	 .cfi_def_cfa_offset 8
 631 0032 BD46     	 mov sp,r7
 632              	.LCFI39:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 0034 80BD     	 pop {r7,pc}
 636              	 .cfi_endproc
 637              	.LFE213:
 639 0036 00BF     	 .section .text.XMC_CAN_Disable,"ax",%progbits
 640              	 .align 2
 641              	 .global XMC_CAN_Disable
 642              	 .thumb
 643              	 .thumb_func
 645              	XMC_CAN_Disable:
 646              	.LFB214:
 216:../Libraries/XMCLib/src/xmc_can.c **** 
 217:../Libraries/XMCLib/src/xmc_can.c **** /* Disable XMC_CAN Peripheral */
 218:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Disable(XMC_CAN_t *const obj)
 219:../Libraries/XMCLib/src/xmc_can.c **** {
 647              	 .loc 2 219 0
 648              	 .cfi_startproc
 649              	 
 650              	 
 651 0000 80B5     	 push {r7,lr}
 652              	.LCFI40:
 653              	 .cfi_def_cfa_offset 8
 654              	 .cfi_offset 7,-8
 655              	 .cfi_offset 14,-4
 656 0002 82B0     	 sub sp,sp,#8
 657              	.LCFI41:
 658              	 .cfi_def_cfa_offset 16
 659 0004 00AF     	 add r7,sp,#0
 660              	.LCFI42:
 661              	 .cfi_def_cfa_register 7
 662 0006 7860     	 str r0,[r7,#4]
 220:../Libraries/XMCLib/src/xmc_can.c ****   /* Disable CAN Module */
 221:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC = CAN_CLC_DISR_Msk;
 663              	 .loc 2 221 0
 664 0008 7B68     	 ldr r3,[r7,#4]
 665 000a 0122     	 movs r2,#1
 666 000c 1A60     	 str r2,[r3]
 222:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 223:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 667              	 .loc 2 223 0
 668 000e 0348     	 ldr r0,.L31
 669 0010 FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 224:../Libraries/XMCLib/src/xmc_can.c **** #endif
 225:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 226:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 227:../Libraries/XMCLib/src/xmc_can.c **** #endif
 228:../Libraries/XMCLib/src/xmc_can.c **** }
 670              	 .loc 2 228 0
 671 0014 0837     	 adds r7,r7,#8
 672              	.LCFI43:
 673              	 .cfi_def_cfa_offset 8
 674 0016 BD46     	 mov sp,r7
 675              	.LCFI44:
 676              	 .cfi_def_cfa_register 13
 677              	 
 678 0018 80BD     	 pop {r7,pc}
 679              	.L32:
 680 001a 00BF     	 .align 2
 681              	.L31:
 682 001c 10000010 	 .word 268435472
 683              	 .cfi_endproc
 684              	.LFE214:
 686              	 .section .text.XMC_CAN_Enable,"ax",%progbits
 687              	 .align 2
 688              	 .global XMC_CAN_Enable
 689              	 .thumb
 690              	 .thumb_func
 692              	XMC_CAN_Enable:
 693              	.LFB215:
 229:../Libraries/XMCLib/src/xmc_can.c **** 
 230:../Libraries/XMCLib/src/xmc_can.c **** /* Enable XMC_CAN Peripheral */
 231:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Enable(XMC_CAN_t *const obj)
 232:../Libraries/XMCLib/src/xmc_can.c **** {
 694              	 .loc 2 232 0
 695              	 .cfi_startproc
 696              	 
 697              	 
 698 0000 80B5     	 push {r7,lr}
 699              	.LCFI45:
 700              	 .cfi_def_cfa_offset 8
 701              	 .cfi_offset 7,-8
 702              	 .cfi_offset 14,-4
 703 0002 82B0     	 sub sp,sp,#8
 704              	.LCFI46:
 705              	 .cfi_def_cfa_offset 16
 706 0004 00AF     	 add r7,sp,#0
 707              	.LCFI47:
 708              	 .cfi_def_cfa_register 7
 709 0006 7860     	 str r0,[r7,#4]
 233:../Libraries/XMCLib/src/xmc_can.c **** #if defined(CLOCK_GATING_SUPPORTED)
 234:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 235:../Libraries/XMCLib/src/xmc_can.c **** #endif
 236:../Libraries/XMCLib/src/xmc_can.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 237:../Libraries/XMCLib/src/xmc_can.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 710              	 .loc 2 237 0
 711 0008 0948     	 ldr r0,.L35
 712 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 238:../Libraries/XMCLib/src/xmc_can.c **** #endif
 239:../Libraries/XMCLib/src/xmc_can.c ****   /* Enable CAN Module */
 240:../Libraries/XMCLib/src/xmc_can.c ****   obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 713              	 .loc 2 240 0
 714 000e 7B68     	 ldr r3,[r7,#4]
 715 0010 1B68     	 ldr r3,[r3]
 716 0012 23F00102 	 bic r2,r3,#1
 717 0016 7B68     	 ldr r3,[r7,#4]
 718 0018 1A60     	 str r2,[r3]
 241:../Libraries/XMCLib/src/xmc_can.c ****   while (obj->CLC & CAN_CLC_DISS_Msk)
 719              	 .loc 2 241 0
 720 001a 00BF     	 nop
 721              	.L34:
 722              	 .loc 2 241 0 is_stmt 0 discriminator 1
 723 001c 7B68     	 ldr r3,[r7,#4]
 724 001e 1B68     	 ldr r3,[r3]
 725 0020 03F00203 	 and r3,r3,#2
 726 0024 002B     	 cmp r3,#0
 727 0026 F9D1     	 bne .L34
 242:../Libraries/XMCLib/src/xmc_can.c ****   {
 243:../Libraries/XMCLib/src/xmc_can.c ****     /*Do nothing*/
 244:../Libraries/XMCLib/src/xmc_can.c ****   };
 245:../Libraries/XMCLib/src/xmc_can.c **** }
 728              	 .loc 2 245 0 is_stmt 1
 729 0028 0837     	 adds r7,r7,#8
 730              	.LCFI48:
 731              	 .cfi_def_cfa_offset 8
 732 002a BD46     	 mov sp,r7
 733              	.LCFI49:
 734              	 .cfi_def_cfa_register 13
 735              	 
 736 002c 80BD     	 pop {r7,pc}
 737              	.L36:
 738 002e 00BF     	 .align 2
 739              	.L35:
 740 0030 10000010 	 .word 268435472
 741              	 .cfi_endproc
 742              	.LFE215:
 744              	 .section .text.XMC_CAN_Init,"ax",%progbits
 745              	 .align 2
 746              	 .global XMC_CAN_Init
 747              	 .thumb
 748              	 .thumb_func
 750              	XMC_CAN_Init:
 751              	.LFB216:
 246:../Libraries/XMCLib/src/xmc_can.c **** #if defined(MULTICAN_PLUS)
 247:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
 248:../Libraries/XMCLib/src/xmc_can.c **** {
 249:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t frequency;
 250:../Libraries/XMCLib/src/xmc_can.c **** 
 251:../Libraries/XMCLib/src/xmc_can.c ****   switch(XMC_CAN_GetBaudrateClockSource(obj))
 252:../Libraries/XMCLib/src/xmc_can.c ****   {
 253:../Libraries/XMCLib/src/xmc_can.c **** #if UC_FAMILY == XMC4
 254:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FPERI:
 255:../Libraries/XMCLib/src/xmc_can.c ****          frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 256:../Libraries/XMCLib/src/xmc_can.c ****          break;
 257:../Libraries/XMCLib/src/xmc_can.c **** #else
 258:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_MCLK:
 259:../Libraries/XMCLib/src/xmc_can.c ****            frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 260:../Libraries/XMCLib/src/xmc_can.c ****            break;
 261:../Libraries/XMCLib/src/xmc_can.c **** #endif
 262:../Libraries/XMCLib/src/xmc_can.c ****     case XMC_CAN_CANCLKSRC_FOHP:
 263:../Libraries/XMCLib/src/xmc_can.c ****          frequency = OSCHP_GetFrequency();
 264:../Libraries/XMCLib/src/xmc_can.c ****          break;
 265:../Libraries/XMCLib/src/xmc_can.c **** 
 266:../Libraries/XMCLib/src/xmc_can.c ****     default:
 267:../Libraries/XMCLib/src/xmc_can.c ****          frequency = 0;
 268:../Libraries/XMCLib/src/xmc_can.c ****          break;
 269:../Libraries/XMCLib/src/xmc_can.c ****   }
 270:../Libraries/XMCLib/src/xmc_can.c **** 
 271:../Libraries/XMCLib/src/xmc_can.c ****   return frequency;
 272:../Libraries/XMCLib/src/xmc_can.c **** }
 273:../Libraries/XMCLib/src/xmc_can.c **** 
 274:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
 275:../Libraries/XMCLib/src/xmc_can.c **** {
 276:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 277:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 278:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 279:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 280:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 281:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 282:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 283:../Libraries/XMCLib/src/xmc_can.c **** 
 284:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency;
 285:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 286:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 287:../Libraries/XMCLib/src/xmc_can.c **** 
 288:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 289:../Libraries/XMCLib/src/xmc_can.c **** 
 290:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 291:../Libraries/XMCLib/src/xmc_can.c **** 
 292:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 293:../Libraries/XMCLib/src/xmc_can.c **** 
 294:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 295:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 296:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 297:../Libraries/XMCLib/src/xmc_can.c **** 
 298:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 299:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 300:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 301:../Libraries/XMCLib/src/xmc_can.c **** 
 302:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 303:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 304:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 305:../Libraries/XMCLib/src/xmc_can.c **** 
 306:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 307:../Libraries/XMCLib/src/xmc_can.c **** 
 308:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 309:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 310:../Libraries/XMCLib/src/xmc_can.c **** 
 311:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 312:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 313:../Libraries/XMCLib/src/xmc_can.c **** 
 314:../Libraries/XMCLib/src/xmc_can.c **** }
 315:../Libraries/XMCLib/src/xmc_can.c **** 
 316:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj,const XMC_CAN_CANCLKSRC_t source)
 317:../Libraries/XMCLib/src/xmc_can.c **** {
 318:../Libraries/XMCLib/src/xmc_can.c ****   obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 319:../Libraries/XMCLib/src/xmc_can.c **** }
 320:../Libraries/XMCLib/src/xmc_can.c **** 
 321:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
 322:../Libraries/XMCLib/src/xmc_can.c **** {
 323:../Libraries/XMCLib/src/xmc_can.c ****   return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 324:../Libraries/XMCLib/src/xmc_can.c **** }
 325:../Libraries/XMCLib/src/xmc_can.c **** 
 326:../Libraries/XMCLib/src/xmc_can.c **** #else
 327:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN GLOBAL Object */
 328:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_Init(XMC_CAN_t *const obj, uint32_t can_frequency)
 329:../Libraries/XMCLib/src/xmc_can.c **** {
 752              	 .loc 2 329 0
 753              	 .cfi_startproc
 754              	 
 755              	 
 756 0000 80B5     	 push {r7,lr}
 757              	.LCFI50:
 758              	 .cfi_def_cfa_offset 8
 759              	 .cfi_offset 7,-8
 760              	 .cfi_offset 14,-4
 761 0002 8CB0     	 sub sp,sp,#48
 762              	.LCFI51:
 763              	 .cfi_def_cfa_offset 56
 764 0004 00AF     	 add r7,sp,#0
 765              	.LCFI52:
 766              	 .cfi_def_cfa_register 7
 767 0006 7860     	 str r0,[r7,#4]
 768 0008 3960     	 str r1,[r7]
 330:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t  step_n, step_f;
 331:../Libraries/XMCLib/src/xmc_can.c ****   bool normal_divider;
 332:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t freq_n, freq_f;
 333:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t step;
 334:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t can_frequency_khz;
 335:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency_khz;
 336:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_DM_t can_divider_mode;
 337:../Libraries/XMCLib/src/xmc_can.c **** 
 338:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t peripheral_frequency = (XMC_SCU_CLOCK_GetPeripheralClockFrequency());
 769              	 .loc 2 338 0
 770 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 771 000e F862     	 str r0,[r7,#44]
 339:../Libraries/XMCLib/src/xmc_can.c **** 
 340:../Libraries/XMCLib/src/xmc_can.c ****   XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);
 341:../Libraries/XMCLib/src/xmc_can.c **** 
 342:../Libraries/XMCLib/src/xmc_can.c ****   /*Enabling the module*/
 343:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_Enable(obj);
 772              	 .loc 2 343 0
 773 0010 7868     	 ldr r0,[r7,#4]
 774 0012 FFF7FEFF 	 bl XMC_CAN_Enable
 344:../Libraries/XMCLib/src/xmc_can.c **** 
 345:../Libraries/XMCLib/src/xmc_can.c ****   /* Normal divider mode */
 346:../Libraries/XMCLib/src/xmc_can.c ****   step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 775              	 .loc 2 346 0
 776 0016 FA6A     	 ldr r2,[r7,#44]
 777 0018 3B68     	 ldr r3,[r7]
 778 001a B2FBF3F3 	 udiv r3,r2,r3
 779 001e C3F58063 	 rsb r3,r3,#1024
 780 0022 0020     	 movs r0,#0
 781 0024 1946     	 mov r1,r3
 782 0026 FFF7FEFF 	 bl max
 783 002a 0346     	 mov r3,r0
 784 002c 1846     	 mov r0,r3
 785 002e 40F2FF31 	 movw r1,#1023
 786 0032 FFF7FEFF 	 bl min
 787 0036 B862     	 str r0,[r7,#40]
 347:../Libraries/XMCLib/src/xmc_can.c ****   freq_n = (uint32_t) (peripheral_frequency / (1024U - step_n));
 788              	 .loc 2 347 0
 789 0038 BB6A     	 ldr r3,[r7,#40]
 790 003a C3F58063 	 rsb r3,r3,#1024
 791 003e FA6A     	 ldr r2,[r7,#44]
 792 0040 B2FBF3F3 	 udiv r3,r2,r3
 793 0044 7B62     	 str r3,[r7,#36]
 348:../Libraries/XMCLib/src/xmc_can.c **** 
 349:../Libraries/XMCLib/src/xmc_can.c ****   /* Fractional divider mode */
 350:../Libraries/XMCLib/src/xmc_can.c ****   can_frequency_khz = (uint32_t) (can_frequency >> 6);
 794              	 .loc 2 350 0
 795 0046 3B68     	 ldr r3,[r7]
 796 0048 9B09     	 lsrs r3,r3,#6
 797 004a 3B62     	 str r3,[r7,#32]
 351:../Libraries/XMCLib/src/xmc_can.c ****   peripheral_frequency_khz = (uint32_t)(peripheral_frequency >> 6);
 798              	 .loc 2 351 0
 799 004c FB6A     	 ldr r3,[r7,#44]
 800 004e 9B09     	 lsrs r3,r3,#6
 801 0050 FB61     	 str r3,[r7,#28]
 352:../Libraries/XMCLib/src/xmc_can.c **** 
 353:../Libraries/XMCLib/src/xmc_can.c ****   step_f = (uint32_t)(min( (((1024U * can_frequency_khz) / peripheral_frequency_khz) ), 1023U ));
 802              	 .loc 2 353 0
 803 0052 3B6A     	 ldr r3,[r7,#32]
 804 0054 9A02     	 lsls r2,r3,#10
 805 0056 FB69     	 ldr r3,[r7,#28]
 806 0058 B2FBF3F3 	 udiv r3,r2,r3
 807 005c 1846     	 mov r0,r3
 808 005e 40F2FF31 	 movw r1,#1023
 809 0062 FFF7FEFF 	 bl min
 810 0066 B861     	 str r0,[r7,#24]
 354:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = (uint32_t)((peripheral_frequency_khz * step_f) / 1024U);
 811              	 .loc 2 354 0
 812 0068 FB69     	 ldr r3,[r7,#28]
 813 006a BA69     	 ldr r2,[r7,#24]
 814 006c 02FB03F3 	 mul r3,r2,r3
 815 0070 9B0A     	 lsrs r3,r3,#10
 816 0072 7B61     	 str r3,[r7,#20]
 355:../Libraries/XMCLib/src/xmc_can.c ****   freq_f = freq_f << 6;
 817              	 .loc 2 355 0
 818 0074 7B69     	 ldr r3,[r7,#20]
 819 0076 9B01     	 lsls r3,r3,#6
 820 0078 7B61     	 str r3,[r7,#20]
 356:../Libraries/XMCLib/src/xmc_can.c **** 
 357:../Libraries/XMCLib/src/xmc_can.c ****   normal_divider  = (uint32_t)(can_frequency - freq_n) <= (can_frequency - freq_f);
 821              	 .loc 2 357 0
 822 007a 3A68     	 ldr r2,[r7]
 823 007c 7B6A     	 ldr r3,[r7,#36]
 824 007e D21A     	 subs r2,r2,r3
 825 0080 3968     	 ldr r1,[r7]
 826 0082 7B69     	 ldr r3,[r7,#20]
 827 0084 CB1A     	 subs r3,r1,r3
 828 0086 9A42     	 cmp r2,r3
 829 0088 94BF     	 ite ls
 830 008a 0123     	 movls r3,#1
 831 008c 0023     	 movhi r3,#0
 832 008e FB74     	 strb r3,[r7,#19]
 358:../Libraries/XMCLib/src/xmc_can.c **** 
 359:../Libraries/XMCLib/src/xmc_can.c ****   step   = (normal_divider != 0U) ? step_n : step_f;
 833              	 .loc 2 359 0
 834 0090 FB7C     	 ldrb r3,[r7,#19]
 835 0092 002B     	 cmp r3,#0
 836 0094 01D0     	 beq .L38
 837              	 .loc 2 359 0 is_stmt 0 discriminator 1
 838 0096 BB6A     	 ldr r3,[r7,#40]
 839 0098 00E0     	 b .L39
 840              	.L38:
 841              	 .loc 2 359 0 discriminator 2
 842 009a BB69     	 ldr r3,[r7,#24]
 843              	.L39:
 844              	 .loc 2 359 0 discriminator 4
 845 009c FB60     	 str r3,[r7,#12]
 360:../Libraries/XMCLib/src/xmc_can.c ****   can_divider_mode = (normal_divider != 0U) ? XMC_CAN_DM_NORMAL : XMC_CAN_DM_FRACTIONAL;
 846              	 .loc 2 360 0 is_stmt 1 discriminator 4
 847 009e FB7C     	 ldrb r3,[r7,#19]
 848 00a0 002B     	 cmp r3,#0
 849 00a2 01D0     	 beq .L40
 850              	 .loc 2 360 0 is_stmt 0 discriminator 1
 851 00a4 0123     	 movs r3,#1
 852 00a6 00E0     	 b .L41
 853              	.L40:
 854              	 .loc 2 360 0 discriminator 2
 855 00a8 0223     	 movs r3,#2
 856              	.L41:
 857              	 .loc 2 360 0 discriminator 4
 858 00aa FB72     	 strb r3,[r7,#11]
 361:../Libraries/XMCLib/src/xmc_can.c **** 
 362:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 859              	 .loc 2 362 0 is_stmt 1 discriminator 4
 860 00ac 7B68     	 ldr r3,[r7,#4]
 861 00ae DB68     	 ldr r3,[r3,#12]
 862 00b0 23F44343 	 bic r3,r3,#49920
 863 00b4 23F0FF03 	 bic r3,r3,#255
 864 00b8 7A68     	 ldr r2,[r7,#4]
 865 00ba D360     	 str r3,[r2,#12]
 363:../Libraries/XMCLib/src/xmc_can.c ****   obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos)
 866              	 .loc 2 363 0 discriminator 4
 867 00bc 7B68     	 ldr r3,[r7,#4]
 868 00be DA68     	 ldr r2,[r3,#12]
 869 00c0 FB7A     	 ldrb r3,[r7,#11]
 870 00c2 9903     	 lsls r1,r3,#14
 871 00c4 FB68     	 ldr r3,[r7,#12]
 872 00c6 0B43     	 orrs r3,r3,r1
 873 00c8 1A43     	 orrs r2,r2,r3
 874 00ca 7B68     	 ldr r3,[r7,#4]
 875 00cc DA60     	 str r2,[r3,#12]
 364:../Libraries/XMCLib/src/xmc_can.c **** }
 876              	 .loc 2 364 0 discriminator 4
 877 00ce 3037     	 adds r7,r7,#48
 878              	.LCFI53:
 879              	 .cfi_def_cfa_offset 8
 880 00d0 BD46     	 mov sp,r7
 881              	.LCFI54:
 882              	 .cfi_def_cfa_register 13
 883              	 
 884 00d2 80BD     	 pop {r7,pc}
 885              	 .cfi_endproc
 886              	.LFE216:
 888              	 .section .text.XMC_CAN_MO_SetIdentifier,"ax",%progbits
 889              	 .align 2
 890              	 .global XMC_CAN_MO_SetIdentifier
 891              	 .thumb
 892              	 .thumb_func
 894              	XMC_CAN_MO_SetIdentifier:
 895              	.LFB217:
 365:../Libraries/XMCLib/src/xmc_can.c **** #endif
 366:../Libraries/XMCLib/src/xmc_can.c **** 
 367:../Libraries/XMCLib/src/xmc_can.c **** /* Sets the Identifier of the MO */
 368:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetIdentifier(XMC_CAN_MO_t *const can_mo, const uint32_t can_identifier)
 369:../Libraries/XMCLib/src/xmc_can.c **** {
 896              	 .loc 2 369 0
 897              	 .cfi_startproc
 898              	 
 899              	 
 900              	 
 901 0000 80B4     	 push {r7}
 902              	.LCFI55:
 903              	 .cfi_def_cfa_offset 4
 904              	 .cfi_offset 7,-4
 905 0002 83B0     	 sub sp,sp,#12
 906              	.LCFI56:
 907              	 .cfi_def_cfa_offset 16
 908 0004 00AF     	 add r7,sp,#0
 909              	.LCFI57:
 910              	 .cfi_def_cfa_register 7
 911 0006 7860     	 str r0,[r7,#4]
 912 0008 3960     	 str r1,[r7]
 370:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 913              	 .loc 2 370 0
 914 000a 7B68     	 ldr r3,[r7,#4]
 915 000c 1B68     	 ldr r3,[r3]
 916 000e 9B69     	 ldr r3,[r3,#24]
 917 0010 03F00053 	 and r3,r3,#536870912
 918 0014 002B     	 cmp r3,#0
 919 0016 0DD1     	 bne .L43
 371:../Libraries/XMCLib/src/xmc_can.c ****   {
 372:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 920              	 .loc 2 372 0
 921 0018 7B68     	 ldr r3,[r7,#4]
 922 001a 1B68     	 ldr r3,[r3]
 923 001c 7A68     	 ldr r2,[r7,#4]
 924 001e 1268     	 ldr r2,[r2]
 925 0020 9269     	 ldr r2,[r2,#24]
 926 0022 02F06041 	 and r1,r2,#-536870912
 373:../Libraries/XMCLib/src/xmc_can.c **** 	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_
 927              	 .loc 2 373 0
 928 0026 3A68     	 ldr r2,[r7]
 929 0028 9204     	 lsls r2,r2,#18
 930 002a 22F06042 	 bic r2,r2,#-536870912
 372:../Libraries/XMCLib/src/xmc_can.c **** 	                           ((can_identifier << XMC_CAN_MO_MOAR_STDID_Pos) & (uint32_t)CAN_MO_MOAR_
 931              	 .loc 2 372 0
 932 002e 0A43     	 orrs r2,r2,r1
 933 0030 9A61     	 str r2,[r3,#24]
 934 0032 0BE0     	 b .L44
 935              	.L43:
 374:../Libraries/XMCLib/src/xmc_can.c ****   }
 375:../Libraries/XMCLib/src/xmc_can.c ****   else
 376:../Libraries/XMCLib/src/xmc_can.c ****   {
 377:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOAR = ((can_mo->can_mo_ptr->MOAR) & ~(uint32_t)(CAN_MO_MOAR_ID_Msk)) |
 936              	 .loc 2 377 0
 937 0034 7B68     	 ldr r3,[r7,#4]
 938 0036 1B68     	 ldr r3,[r3]
 939 0038 7A68     	 ldr r2,[r7,#4]
 940 003a 1268     	 ldr r2,[r2]
 941 003c 9269     	 ldr r2,[r2,#24]
 942 003e 02F06041 	 and r1,r2,#-536870912
 378:../Libraries/XMCLib/src/xmc_can.c ****     		                   (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 943              	 .loc 2 378 0
 944 0042 3A68     	 ldr r2,[r7]
 945 0044 22F06042 	 bic r2,r2,#-536870912
 377:../Libraries/XMCLib/src/xmc_can.c ****     		                   (can_identifier & (uint32_t)CAN_MO_MOAR_ID_Msk);
 946              	 .loc 2 377 0
 947 0048 0A43     	 orrs r2,r2,r1
 948 004a 9A61     	 str r2,[r3,#24]
 949              	.L44:
 379:../Libraries/XMCLib/src/xmc_can.c ****   }
 380:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_identifier = can_identifier;
 950              	 .loc 2 380 0
 951 004c 3B68     	 ldr r3,[r7]
 952 004e 23F06041 	 bic r1,r3,#-536870912
 953 0052 7A68     	 ldr r2,[r7,#4]
 954 0054 5368     	 ldr r3,[r2,#4]
 955 0056 61F31C03 	 bfi r3,r1,#0,#29
 956 005a 5360     	 str r3,[r2,#4]
 381:../Libraries/XMCLib/src/xmc_can.c **** }
 957              	 .loc 2 381 0
 958 005c 0C37     	 adds r7,r7,#12
 959              	.LCFI58:
 960              	 .cfi_def_cfa_offset 4
 961 005e BD46     	 mov sp,r7
 962              	.LCFI59:
 963              	 .cfi_def_cfa_register 13
 964              	 
 965 0060 5DF8047B 	 ldr r7,[sp],#4
 966              	.LCFI60:
 967              	 .cfi_restore 7
 968              	 .cfi_def_cfa_offset 0
 969 0064 7047     	 bx lr
 970              	 .cfi_endproc
 971              	.LFE217:
 973 0066 00BF     	 .section .text.XMC_CAN_MO_GetIdentifier,"ax",%progbits
 974              	 .align 2
 975              	 .global XMC_CAN_MO_GetIdentifier
 976              	 .thumb
 977              	 .thumb_func
 979              	XMC_CAN_MO_GetIdentifier:
 980              	.LFB218:
 382:../Libraries/XMCLib/src/xmc_can.c **** 
 383:../Libraries/XMCLib/src/xmc_can.c **** 
 384:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the Identifier of the MO */
 385:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetIdentifier(const XMC_CAN_MO_t *const can_mo)
 386:../Libraries/XMCLib/src/xmc_can.c **** {
 981              	 .loc 2 386 0
 982              	 .cfi_startproc
 983              	 
 984              	 
 985              	 
 986 0000 80B4     	 push {r7}
 987              	.LCFI61:
 988              	 .cfi_def_cfa_offset 4
 989              	 .cfi_offset 7,-4
 990 0002 85B0     	 sub sp,sp,#20
 991              	.LCFI62:
 992              	 .cfi_def_cfa_offset 24
 993 0004 00AF     	 add r7,sp,#0
 994              	.LCFI63:
 995              	 .cfi_def_cfa_register 7
 996 0006 7860     	 str r0,[r7,#4]
 387:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier;
 388:../Libraries/XMCLib/src/xmc_can.c ****   if ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk)
 997              	 .loc 2 388 0
 998 0008 7B68     	 ldr r3,[r7,#4]
 999 000a 1B68     	 ldr r3,[r3]
 1000 000c 9B69     	 ldr r3,[r3,#24]
 1001 000e 03F00053 	 and r3,r3,#536870912
 1002 0012 002B     	 cmp r3,#0
 1003 0014 07D1     	 bne .L46
 389:../Libraries/XMCLib/src/xmc_can.c ****   {
 390:../Libraries/XMCLib/src/xmc_can.c **** 	identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk)) >> XMC_CAN_MO_MOAR_STDI
 1004              	 .loc 2 390 0
 1005 0016 7B68     	 ldr r3,[r7,#4]
 1006 0018 1B68     	 ldr r3,[r3]
 1007 001a 9B69     	 ldr r3,[r3,#24]
 1008 001c 23F06043 	 bic r3,r3,#-536870912
 1009 0020 9B0C     	 lsrs r3,r3,#18
 1010 0022 FB60     	 str r3,[r7,#12]
 1011 0024 05E0     	 b .L47
 1012              	.L46:
 391:../Libraries/XMCLib/src/xmc_can.c ****   }
 392:../Libraries/XMCLib/src/xmc_can.c ****   else
 393:../Libraries/XMCLib/src/xmc_can.c ****   {
 394:../Libraries/XMCLib/src/xmc_can.c **** 	identifier = ((can_mo->can_mo_ptr->MOAR) & (uint32_t)(CAN_MO_MOAR_ID_Msk));
 1013              	 .loc 2 394 0
 1014 0026 7B68     	 ldr r3,[r7,#4]
 1015 0028 1B68     	 ldr r3,[r3]
 1016 002a 9B69     	 ldr r3,[r3,#24]
 1017 002c 23F06043 	 bic r3,r3,#-536870912
 1018 0030 FB60     	 str r3,[r7,#12]
 1019              	.L47:
 395:../Libraries/XMCLib/src/xmc_can.c ****   }
 396:../Libraries/XMCLib/src/xmc_can.c ****   return identifier;
 1020              	 .loc 2 396 0
 1021 0032 FB68     	 ldr r3,[r7,#12]
 397:../Libraries/XMCLib/src/xmc_can.c **** }
 1022              	 .loc 2 397 0
 1023 0034 1846     	 mov r0,r3
 1024 0036 1437     	 adds r7,r7,#20
 1025              	.LCFI64:
 1026              	 .cfi_def_cfa_offset 4
 1027 0038 BD46     	 mov sp,r7
 1028              	.LCFI65:
 1029              	 .cfi_def_cfa_register 13
 1030              	 
 1031 003a 5DF8047B 	 ldr r7,[sp],#4
 1032              	.LCFI66:
 1033              	 .cfi_restore 7
 1034              	 .cfi_def_cfa_offset 0
 1035 003e 7047     	 bx lr
 1036              	 .cfi_endproc
 1037              	.LFE218:
 1039              	 .section .text.XMC_CAN_MO_GetAcceptanceMask,"ax",%progbits
 1040              	 .align 2
 1041              	 .global XMC_CAN_MO_GetAcceptanceMask
 1042              	 .thumb
 1043              	 .thumb_func
 1045              	XMC_CAN_MO_GetAcceptanceMask:
 1046              	.LFB219:
 398:../Libraries/XMCLib/src/xmc_can.c **** 
 399:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask for the CAN MO. */
 400:../Libraries/XMCLib/src/xmc_can.c **** uint32_t XMC_CAN_MO_GetAcceptanceMask(const XMC_CAN_MO_t *const can_mo)
 401:../Libraries/XMCLib/src/xmc_can.c **** {
 1047              	 .loc 2 401 0
 1048              	 .cfi_startproc
 1049              	 
 1050              	 
 1051              	 
 1052 0000 80B4     	 push {r7}
 1053              	.LCFI67:
 1054              	 .cfi_def_cfa_offset 4
 1055              	 .cfi_offset 7,-4
 1056 0002 85B0     	 sub sp,sp,#20
 1057              	.LCFI68:
 1058              	 .cfi_def_cfa_offset 24
 1059 0004 00AF     	 add r7,sp,#0
 1060              	.LCFI69:
 1061              	 .cfi_def_cfa_register 7
 1062 0006 7860     	 str r0,[r7,#4]
 402:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t identifier_mask;
 403:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1063              	 .loc 2 403 0
 1064 0008 7B68     	 ldr r3,[r7,#4]
 1065 000a 1B68     	 ldr r3,[r3]
 1066 000c DB68     	 ldr r3,[r3,#12]
 1067 000e 03F00053 	 and r3,r3,#536870912
 1068 0012 002B     	 cmp r3,#0
 1069 0014 0ED1     	 bne .L50
 404:../Libraries/XMCLib/src/xmc_can.c ****             && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1070              	 .loc 2 404 0
 1071 0016 7B68     	 ldr r3,[r7,#4]
 1072 0018 1B68     	 ldr r3,[r3]
 1073 001a 9B69     	 ldr r3,[r3,#24]
 1074 001c 03F00053 	 and r3,r3,#536870912
 1075 0020 002B     	 cmp r3,#0
 1076 0022 07D1     	 bne .L50
 405:../Libraries/XMCLib/src/xmc_can.c ****   {
 406:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk)) >> XMC_CAN_MO
 1077              	 .loc 2 406 0
 1078 0024 7B68     	 ldr r3,[r7,#4]
 1079 0026 1B68     	 ldr r3,[r3]
 1080 0028 DB68     	 ldr r3,[r3,#12]
 1081 002a 23F06043 	 bic r3,r3,#-536870912
 1082 002e 9B0C     	 lsrs r3,r3,#18
 1083 0030 FB60     	 str r3,[r7,#12]
 1084 0032 05E0     	 b .L51
 1085              	.L50:
 407:../Libraries/XMCLib/src/xmc_can.c ****   }
 408:../Libraries/XMCLib/src/xmc_can.c ****   else
 409:../Libraries/XMCLib/src/xmc_can.c ****   {
 410:../Libraries/XMCLib/src/xmc_can.c ****     identifier_mask = ((can_mo->can_mo_ptr->MOAMR) & (uint32_t)(CAN_MO_MOAMR_AM_Msk));
 1086              	 .loc 2 410 0
 1087 0034 7B68     	 ldr r3,[r7,#4]
 1088 0036 1B68     	 ldr r3,[r3]
 1089 0038 DB68     	 ldr r3,[r3,#12]
 1090 003a 23F06043 	 bic r3,r3,#-536870912
 1091 003e FB60     	 str r3,[r7,#12]
 1092              	.L51:
 411:../Libraries/XMCLib/src/xmc_can.c ****   }
 412:../Libraries/XMCLib/src/xmc_can.c ****   return identifier_mask;
 1093              	 .loc 2 412 0
 1094 0040 FB68     	 ldr r3,[r7,#12]
 413:../Libraries/XMCLib/src/xmc_can.c **** }
 1095              	 .loc 2 413 0
 1096 0042 1846     	 mov r0,r3
 1097 0044 1437     	 adds r7,r7,#20
 1098              	.LCFI70:
 1099              	 .cfi_def_cfa_offset 4
 1100 0046 BD46     	 mov sp,r7
 1101              	.LCFI71:
 1102              	 .cfi_def_cfa_register 13
 1103              	 
 1104 0048 5DF8047B 	 ldr r7,[sp],#4
 1105              	.LCFI72:
 1106              	 .cfi_restore 7
 1107              	 .cfi_def_cfa_offset 0
 1108 004c 7047     	 bx lr
 1109              	 .cfi_endproc
 1110              	.LFE219:
 1112 004e 00BF     	 .section .text.XMC_CAN_MO_SetAcceptanceMask,"ax",%progbits
 1113              	 .align 2
 1114              	 .global XMC_CAN_MO_SetAcceptanceMask
 1115              	 .thumb
 1116              	 .thumb_func
 1118              	XMC_CAN_MO_SetAcceptanceMask:
 1119              	.LFB220:
 414:../Libraries/XMCLib/src/xmc_can.c **** 
 415:../Libraries/XMCLib/src/xmc_can.c **** /* Gets the acceptance mask of the MO */
 416:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_SetAcceptanceMask(XMC_CAN_MO_t *const can_mo,const uint32_t can_id_mask)
 417:../Libraries/XMCLib/src/xmc_can.c **** {
 1120              	 .loc 2 417 0
 1121              	 .cfi_startproc
 1122              	 
 1123              	 
 1124              	 
 1125 0000 80B4     	 push {r7}
 1126              	.LCFI73:
 1127              	 .cfi_def_cfa_offset 4
 1128              	 .cfi_offset 7,-4
 1129 0002 83B0     	 sub sp,sp,#12
 1130              	.LCFI74:
 1131              	 .cfi_def_cfa_offset 16
 1132 0004 00AF     	 add r7,sp,#0
 1133              	.LCFI75:
 1134              	 .cfi_def_cfa_register 7
 1135 0006 7860     	 str r0,[r7,#4]
 1136 0008 3960     	 str r1,[r7]
 418:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) != (uint32_t)CAN_MO_MOAMR_MIDE_Msk)
 1137              	 .loc 2 418 0
 1138 000a 7B68     	 ldr r3,[r7,#4]
 1139 000c 1B68     	 ldr r3,[r3]
 1140 000e DB68     	 ldr r3,[r3,#12]
 1141 0010 03F00053 	 and r3,r3,#536870912
 1142 0014 002B     	 cmp r3,#0
 1143 0016 12D1     	 bne .L54
 419:../Libraries/XMCLib/src/xmc_can.c ****           && ((can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_IDE_Msk) != (uint32_t)CAN_MO_MOAR_IDE_Msk))
 1144              	 .loc 2 419 0
 1145 0018 7B68     	 ldr r3,[r7,#4]
 1146 001a 1B68     	 ldr r3,[r3]
 1147 001c 9B69     	 ldr r3,[r3,#24]
 1148 001e 03F00053 	 and r3,r3,#536870912
 1149 0022 002B     	 cmp r3,#0
 1150 0024 0BD1     	 bne .L54
 420:../Libraries/XMCLib/src/xmc_can.c ****   {
 421:../Libraries/XMCLib/src/xmc_can.c **** 	can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1151              	 .loc 2 421 0
 1152 0026 7B68     	 ldr r3,[r7,#4]
 1153 0028 1B68     	 ldr r3,[r3]
 1154 002a 7A68     	 ldr r2,[r7,#4]
 1155 002c 1268     	 ldr r2,[r2]
 1156 002e D268     	 ldr r2,[r2,#12]
 1157 0030 02F06041 	 and r1,r2,#-536870912
 422:../Libraries/XMCLib/src/xmc_can.c **** 							    (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1158              	 .loc 2 422 0
 1159 0034 3A68     	 ldr r2,[r7]
 1160 0036 9204     	 lsls r2,r2,#18
 421:../Libraries/XMCLib/src/xmc_can.c **** 							    (can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1161              	 .loc 2 421 0
 1162 0038 0A43     	 orrs r2,r2,r1
 1163 003a DA60     	 str r2,[r3,#12]
 1164 003c 0BE0     	 b .L55
 1165              	.L54:
 423:../Libraries/XMCLib/src/xmc_can.c ****   }
 424:../Libraries/XMCLib/src/xmc_can.c ****   else
 425:../Libraries/XMCLib/src/xmc_can.c ****   {
 426:../Libraries/XMCLib/src/xmc_can.c **** 	can_mo->can_mo_ptr->MOAMR = ((can_mo->can_mo_ptr->MOAMR) & ~(uint32_t)(CAN_MO_MOAMR_AM_Msk)) |
 1166              	 .loc 2 426 0
 1167 003e 7B68     	 ldr r3,[r7,#4]
 1168 0040 1B68     	 ldr r3,[r3]
 1169 0042 7A68     	 ldr r2,[r7,#4]
 1170 0044 1268     	 ldr r2,[r2]
 1171 0046 D268     	 ldr r2,[r2,#12]
 1172 0048 02F06041 	 and r1,r2,#-536870912
 427:../Libraries/XMCLib/src/xmc_can.c **** 							    (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1173              	 .loc 2 427 0
 1174 004c 3A68     	 ldr r2,[r7]
 1175 004e 22F06042 	 bic r2,r2,#-536870912
 426:../Libraries/XMCLib/src/xmc_can.c **** 							    (can_id_mask & (uint32_t)CAN_MO_MOAMR_AM_Msk);
 1176              	 .loc 2 426 0
 1177 0052 0A43     	 orrs r2,r2,r1
 1178 0054 DA60     	 str r2,[r3,#12]
 1179              	.L55:
 428:../Libraries/XMCLib/src/xmc_can.c ****   }
 429:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_id_mask = can_id_mask;
 1180              	 .loc 2 429 0
 1181 0056 3B68     	 ldr r3,[r7]
 1182 0058 23F06041 	 bic r1,r3,#-536870912
 1183 005c 7A68     	 ldr r2,[r7,#4]
 1184 005e 9368     	 ldr r3,[r2,#8]
 1185 0060 61F31C03 	 bfi r3,r1,#0,#29
 1186 0064 9360     	 str r3,[r2,#8]
 430:../Libraries/XMCLib/src/xmc_can.c **** }
 1187              	 .loc 2 430 0
 1188 0066 0C37     	 adds r7,r7,#12
 1189              	.LCFI76:
 1190              	 .cfi_def_cfa_offset 4
 1191 0068 BD46     	 mov sp,r7
 1192              	.LCFI77:
 1193              	 .cfi_def_cfa_register 13
 1194              	 
 1195 006a 5DF8047B 	 ldr r7,[sp],#4
 1196              	.LCFI78:
 1197              	 .cfi_restore 7
 1198              	 .cfi_def_cfa_offset 0
 1199 006e 7047     	 bx lr
 1200              	 .cfi_endproc
 1201              	.LFE220:
 1203              	 .section .text.XMC_CAN_MO_Config,"ax",%progbits
 1204              	 .align 2
 1205              	 .global XMC_CAN_MO_Config
 1206              	 .thumb
 1207              	 .thumb_func
 1209              	XMC_CAN_MO_Config:
 1210              	.LFB221:
 431:../Libraries/XMCLib/src/xmc_can.c **** 
 432:../Libraries/XMCLib/src/xmc_can.c **** /* Initialization of XMC_CAN MO Object */
 433:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
 434:../Libraries/XMCLib/src/xmc_can.c **** {
 1211              	 .loc 2 434 0
 1212              	 .cfi_startproc
 1213              	 
 1214              	 
 1215 0000 80B5     	 push {r7,lr}
 1216              	.LCFI79:
 1217              	 .cfi_def_cfa_offset 8
 1218              	 .cfi_offset 7,-8
 1219              	 .cfi_offset 14,-4
 1220 0002 84B0     	 sub sp,sp,#16
 1221              	.LCFI80:
 1222              	 .cfi_def_cfa_offset 24
 1223 0004 00AF     	 add r7,sp,#0
 1224              	.LCFI81:
 1225              	 .cfi_def_cfa_register 7
 1226 0006 7860     	 str r0,[r7,#4]
 435:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t reg;
 436:../Libraries/XMCLib/src/xmc_can.c ****   /* Configure MPN */
 437:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U)/0x0020U;
 1227              	 .loc 2 437 0
 1228 0008 7B68     	 ldr r3,[r7,#4]
 1229 000a 1B68     	 ldr r3,[r3]
 1230 000c 03F13843 	 add r3,r3,#-1207959552
 1231 0010 A3F5A833 	 sub r3,r3,#86016
 1232 0014 5B09     	 lsrs r3,r3,#5
 1233 0016 FB60     	 str r3,[r7,#12]
 438:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOIPR = (((uint32_t)(num/32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(nu
 1234              	 .loc 2 438 0
 1235 0018 7B68     	 ldr r3,[r7,#4]
 1236 001a 1B68     	 ldr r3,[r3]
 1237 001c FA68     	 ldr r2,[r7,#12]
 1238 001e 5209     	 lsrs r2,r2,#5
 1239 0020 5103     	 lsls r1,r2,#13
 1240 0022 FA68     	 ldr r2,[r7,#12]
 1241 0024 02F01F02 	 and r2,r2,#31
 1242 0028 1202     	 lsls r2,r2,#8
 1243 002a 0A43     	 orrs r2,r2,r1
 1244 002c 9A60     	 str r2,[r3,#8]
 439:../Libraries/XMCLib/src/xmc_can.c **** 
 440:../Libraries/XMCLib/src/xmc_can.c ****   if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 1245              	 .loc 2 440 0
 1246 002e 7B68     	 ldr r3,[r7,#4]
 1247 0030 DB79     	 ldrb r3,[r3,#7]
 1248 0032 03F02003 	 and r3,r3,#32
 1249 0036 DBB2     	 uxtb r3,r3
 1250 0038 002B     	 cmp r3,#0
 1251 003a 07D0     	 beq .L57
 441:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1252              	 .loc 2 441 0 discriminator 1
 1253 003c 7B68     	 ldr r3,[r7,#4]
 1254 003e DB79     	 ldrb r3,[r3,#7]
 1255 0040 03F02003 	 and r3,r3,#32
 1256 0044 DBB2     	 uxtb r3,r3
 440:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1257              	 .loc 2 440 0 discriminator 1
 1258 0046 002B     	 cmp r3,#0
 1259 0048 00D1     	 bne .L57
 440:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1260              	 .loc 2 440 0 is_stmt 0
 1261 004a 5CE0     	 b .L56
 1262              	.L57:
 442:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1263              	 .loc 2 442 0 is_stmt 1
 1264 004c 7B68     	 ldr r3,[r7,#4]
 1265 004e 1B7E     	 ldrb r3,[r3,#24]
 441:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 1266              	 .loc 2 441 0
 1267 0050 002B     	 cmp r3,#0
 1268 0052 04D0     	 beq .L59
 443:../Libraries/XMCLib/src/xmc_can.c ****        (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 1269              	 .loc 2 443 0
 1270 0054 7B68     	 ldr r3,[r7,#4]
 1271 0056 1B7E     	 ldrb r3,[r3,#24]
 442:../Libraries/XMCLib/src/xmc_can.c ****       ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 1272              	 .loc 2 442 0
 1273 0058 012B     	 cmp r3,#1
 1274 005a 00D0     	 beq .L59
 1275 005c 53E0     	 b .L56
 1276              	.L59:
 444:../Libraries/XMCLib/src/xmc_can.c ****   {
 445:../Libraries/XMCLib/src/xmc_can.c ****     ; /*Do nothing*/
 446:../Libraries/XMCLib/src/xmc_can.c ****   }
 447:../Libraries/XMCLib/src/xmc_can.c ****   else
 448:../Libraries/XMCLib/src/xmc_can.c ****   {
 449:../Libraries/XMCLib/src/xmc_can.c **** 
 450:../Libraries/XMCLib/src/xmc_can.c ****     /* Disable Message object */
 451:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1277              	 .loc 2 451 0
 1278 005e 7B68     	 ldr r3,[r7,#4]
 1279 0060 1B68     	 ldr r3,[r3]
 1280 0062 2022     	 movs r2,#32
 1281 0064 DA61     	 str r2,[r3,#28]
 452:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 1282              	 .loc 2 452 0
 1283 0066 7B68     	 ldr r3,[r7,#4]
 1284 0068 DB79     	 ldrb r3,[r3,#7]
 1285 006a 03F02003 	 and r3,r3,#32
 1286 006e DBB2     	 uxtb r3,r3
 1287 0070 002B     	 cmp r3,#0
 1288 0072 28D1     	 bne .L60
 453:../Libraries/XMCLib/src/xmc_can.c ****     {
 454:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_ar;
 1289              	 .loc 2 454 0
 1290 0074 7B68     	 ldr r3,[r7,#4]
 1291 0076 5B68     	 ldr r3,[r3,#4]
 1292 0078 BB60     	 str r3,[r7,#8]
 455:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 1293              	 .loc 2 455 0
 1294 007a BB68     	 ldr r3,[r7,#8]
 1295 007c 03F06043 	 and r3,r3,#-536870912
 1296 0080 BB60     	 str r3,[r7,#8]
 456:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 1297              	 .loc 2 456 0
 1298 0082 7B68     	 ldr r3,[r7,#4]
 1299 0084 5B68     	 ldr r3,[r3,#4]
 1300 0086 C3F31C03 	 ubfx r3,r3,#0,#29
 1301 008a 9B04     	 lsls r3,r3,#18
 1302 008c 1A46     	 mov r2,r3
 1303 008e BB68     	 ldr r3,[r7,#8]
 1304 0090 1343     	 orrs r3,r3,r2
 1305 0092 BB60     	 str r3,[r7,#8]
 457:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = reg;
 1306              	 .loc 2 457 0
 1307 0094 7B68     	 ldr r3,[r7,#4]
 1308 0096 1B68     	 ldr r3,[r3]
 1309 0098 BA68     	 ldr r2,[r7,#8]
 1310 009a 9A61     	 str r2,[r3,#24]
 458:../Libraries/XMCLib/src/xmc_can.c **** 
 459:../Libraries/XMCLib/src/xmc_can.c ****       reg = can_mo->mo_amr;
 1311              	 .loc 2 459 0
 1312 009c 7B68     	 ldr r3,[r7,#4]
 1313 009e 9B68     	 ldr r3,[r3,#8]
 1314 00a0 BB60     	 str r3,[r7,#8]
 460:../Libraries/XMCLib/src/xmc_can.c ****       reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 1315              	 .loc 2 460 0
 1316 00a2 BB68     	 ldr r3,[r7,#8]
 1317 00a4 03F06043 	 and r3,r3,#-536870912
 1318 00a8 BB60     	 str r3,[r7,#8]
 461:../Libraries/XMCLib/src/xmc_can.c ****       reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 1319              	 .loc 2 461 0
 1320 00aa 7B68     	 ldr r3,[r7,#4]
 1321 00ac 9B68     	 ldr r3,[r3,#8]
 1322 00ae C3F31C03 	 ubfx r3,r3,#0,#29
 1323 00b2 9B04     	 lsls r3,r3,#18
 1324 00b4 1A46     	 mov r2,r3
 1325 00b6 BB68     	 ldr r3,[r7,#8]
 1326 00b8 1343     	 orrs r3,r3,r2
 1327 00ba BB60     	 str r3,[r7,#8]
 462:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = reg;
 1328              	 .loc 2 462 0
 1329 00bc 7B68     	 ldr r3,[r7,#4]
 1330 00be 1B68     	 ldr r3,[r3]
 1331 00c0 BA68     	 ldr r2,[r7,#8]
 1332 00c2 DA60     	 str r2,[r3,#12]
 1333 00c4 09E0     	 b .L61
 1334              	.L60:
 463:../Libraries/XMCLib/src/xmc_can.c ****     }
 464:../Libraries/XMCLib/src/xmc_can.c ****     else
 465:../Libraries/XMCLib/src/xmc_can.c ****     {
 466:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 1335              	 .loc 2 466 0
 1336 00c6 7B68     	 ldr r3,[r7,#4]
 1337 00c8 1B68     	 ldr r3,[r3]
 1338 00ca 7A68     	 ldr r2,[r7,#4]
 1339 00cc 5268     	 ldr r2,[r2,#4]
 1340 00ce 9A61     	 str r2,[r3,#24]
 467:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 1341              	 .loc 2 467 0
 1342 00d0 7B68     	 ldr r3,[r7,#4]
 1343 00d2 1B68     	 ldr r3,[r3]
 1344 00d4 7A68     	 ldr r2,[r7,#4]
 1345 00d6 9268     	 ldr r2,[r2,#8]
 1346 00d8 DA60     	 str r2,[r3,#12]
 1347              	.L61:
 468:../Libraries/XMCLib/src/xmc_can.c ****     }
 469:../Libraries/XMCLib/src/xmc_can.c ****     /* Check whether message object is transmit message object */
 470:../Libraries/XMCLib/src/xmc_can.c ****     if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1348              	 .loc 2 470 0
 1349 00da 7B68     	 ldr r3,[r7,#4]
 1350 00dc 1B7E     	 ldrb r3,[r3,#24]
 1351 00de 012B     	 cmp r3,#1
 1352 00e0 08D1     	 bne .L62
 471:../Libraries/XMCLib/src/xmc_can.c ****     {
 472:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Transmit message object  */
 473:../Libraries/XMCLib/src/xmc_can.c ****       XMC_CAN_MO_UpdateData(can_mo);
 1353              	 .loc 2 473 0
 1354 00e2 7868     	 ldr r0,[r7,#4]
 1355 00e4 FFF7FEFF 	 bl XMC_CAN_MO_UpdateData
 474:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 1356              	 .loc 2 474 0
 1357 00e8 7B68     	 ldr r3,[r7,#4]
 1358 00ea 1B68     	 ldr r3,[r3]
 1359 00ec 4FF00062 	 mov r2,#134217728
 1360 00f0 DA61     	 str r2,[r3,#28]
 1361 00f2 04E0     	 b .L63
 1362              	.L62:
 475:../Libraries/XMCLib/src/xmc_can.c ****     }
 476:../Libraries/XMCLib/src/xmc_can.c ****     else
 477:../Libraries/XMCLib/src/xmc_can.c ****     {
 478:../Libraries/XMCLib/src/xmc_can.c ****       /* Set MO as Receive message object and set RXEN bit */
 479:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 1363              	 .loc 2 479 0
 1364 00f4 7B68     	 ldr r3,[r7,#4]
 1365 00f6 1B68     	 ldr r3,[r3]
 1366 00f8 4FF40062 	 mov r2,#2048
 1367 00fc DA61     	 str r2,[r3,#28]
 1368              	.L63:
 480:../Libraries/XMCLib/src/xmc_can.c ****     }
 481:../Libraries/XMCLib/src/xmc_can.c **** 
 482:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 483:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOC
 1369              	 .loc 2 483 0
 1370 00fe 7B68     	 ldr r3,[r7,#4]
 1371 0100 1B68     	 ldr r3,[r3]
 1372 0102 024A     	 ldr r2,.L64
 1373 0104 DA61     	 str r2,[r3,#28]
 1374              	.L56:
 484:../Libraries/XMCLib/src/xmc_can.c ****                                  CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 485:../Libraries/XMCLib/src/xmc_can.c ****   }
 486:../Libraries/XMCLib/src/xmc_can.c **** }
 1375              	 .loc 2 486 0
 1376 0106 1037     	 adds r7,r7,#16
 1377              	.LCFI82:
 1378              	 .cfi_def_cfa_offset 8
 1379 0108 BD46     	 mov sp,r7
 1380              	.LCFI83:
 1381              	 .cfi_def_cfa_register 13
 1382              	 
 1383 010a 80BD     	 pop {r7,pc}
 1384              	.L65:
 1385              	 .align 2
 1386              	.L64:
 1387 010c 4000A006 	 .word 111149120
 1388              	 .cfi_endproc
 1389              	.LFE221:
 1391              	 .section .text.XMC_CAN_MO_UpdateData,"ax",%progbits
 1392              	 .align 2
 1393              	 .global XMC_CAN_MO_UpdateData
 1394              	 .thumb
 1395              	 .thumb_func
 1397              	XMC_CAN_MO_UpdateData:
 1398              	.LFB222:
 487:../Libraries/XMCLib/src/xmc_can.c **** 
 488:../Libraries/XMCLib/src/xmc_can.c **** /* Update of XMC_CAN Object */
 489:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
 490:../Libraries/XMCLib/src/xmc_can.c **** {
 1399              	 .loc 2 490 0
 1400              	 .cfi_startproc
 1401              	 
 1402              	 
 1403              	 
 1404 0000 80B4     	 push {r7}
 1405              	.LCFI84:
 1406              	 .cfi_def_cfa_offset 4
 1407              	 .cfi_offset 7,-4
 1408 0002 85B0     	 sub sp,sp,#20
 1409              	.LCFI85:
 1410              	 .cfi_def_cfa_offset 24
 1411 0004 00AF     	 add r7,sp,#0
 1412              	.LCFI86:
 1413              	 .cfi_def_cfa_register 7
 1414 0006 7860     	 str r0,[r7,#4]
 491:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1415              	 .loc 2 491 0
 1416 0008 0323     	 movs r3,#3
 1417 000a FB73     	 strb r3,[r7,#15]
 492:../Libraries/XMCLib/src/xmc_can.c ****   /* Check whether message object is transmit message object */
 493:../Libraries/XMCLib/src/xmc_can.c ****   if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 1418              	 .loc 2 493 0
 1419 000c 7B68     	 ldr r3,[r7,#4]
 1420 000e 1B7E     	 ldrb r3,[r3,#24]
 1421 0010 012B     	 cmp r3,#1
 1422 0012 22D1     	 bne .L67
 494:../Libraries/XMCLib/src/xmc_can.c ****   {
 495:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 1423              	 .loc 2 495 0
 1424 0014 7B68     	 ldr r3,[r7,#4]
 1425 0016 1B68     	 ldr r3,[r3]
 1426 0018 2022     	 movs r2,#32
 1427 001a DA61     	 str r2,[r3,#28]
 496:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure data length */
 497:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 1428              	 .loc 2 497 0
 1429 001c 7B68     	 ldr r3,[r7,#4]
 1430 001e 1B68     	 ldr r3,[r3]
 1431 0020 7A68     	 ldr r2,[r7,#4]
 1432 0022 1268     	 ldr r2,[r2]
 1433 0024 1268     	 ldr r2,[r2]
 1434 0026 22F07061 	 bic r1,r2,#251658240
 498:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1435              	 .loc 2 498 0
 1436 002a 7A68     	 ldr r2,[r7,#4]
 1437 002c 127B     	 ldrb r2,[r2,#12]
 1438 002e 1206     	 lsls r2,r2,#24
 1439 0030 02F07062 	 and r2,r2,#251658240
 497:../Libraries/XMCLib/src/xmc_can.c ****                                 (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (ui
 1440              	 .loc 2 497 0
 1441 0034 0A43     	 orrs r2,r2,r1
 1442 0036 1A60     	 str r2,[r3]
 499:../Libraries/XMCLib/src/xmc_can.c ****     /* Configure Data registers*/
 500:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 1443              	 .loc 2 500 0
 1444 0038 7B68     	 ldr r3,[r7,#4]
 1445 003a 1B68     	 ldr r3,[r3]
 1446 003c 7A68     	 ldr r2,[r7,#4]
 1447 003e 1269     	 ldr r2,[r2,#16]
 1448 0040 1A61     	 str r2,[r3,#16]
 501:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 1449              	 .loc 2 501 0
 1450 0042 7B68     	 ldr r3,[r7,#4]
 1451 0044 1B68     	 ldr r3,[r3]
 1452 0046 7A68     	 ldr r2,[r7,#4]
 1453 0048 5269     	 ldr r2,[r2,#20]
 1454 004a 5A61     	 str r2,[r3,#20]
 502:../Libraries/XMCLib/src/xmc_can.c ****     /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
 503:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk| CAN_MO_MOCTR_SETMSGVAL_Msk |CAN_MO_MOC
 1455              	 .loc 2 503 0
 1456 004c 7B68     	 ldr r3,[r7,#4]
 1457 004e 1B68     	 ldr r3,[r3]
 1458 0050 064A     	 ldr r2,.L70
 1459 0052 DA61     	 str r2,[r3,#28]
 504:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1460              	 .loc 2 504 0
 1461 0054 0023     	 movs r3,#0
 1462 0056 FB73     	 strb r3,[r7,#15]
 1463 0058 01E0     	 b .L68
 1464              	.L67:
 505:../Libraries/XMCLib/src/xmc_can.c ****   }
 506:../Libraries/XMCLib/src/xmc_can.c ****   else
 507:../Libraries/XMCLib/src/xmc_can.c ****   {
 508:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1465              	 .loc 2 508 0
 1466 005a 0323     	 movs r3,#3
 1467 005c FB73     	 strb r3,[r7,#15]
 1468              	.L68:
 509:../Libraries/XMCLib/src/xmc_can.c ****   }
 510:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 1469              	 .loc 2 510 0
 1470 005e FB7B     	 ldrb r3,[r7,#15]
 511:../Libraries/XMCLib/src/xmc_can.c **** }
 1471              	 .loc 2 511 0
 1472 0060 1846     	 mov r0,r3
 1473 0062 1437     	 adds r7,r7,#20
 1474              	.LCFI87:
 1475              	 .cfi_def_cfa_offset 4
 1476 0064 BD46     	 mov sp,r7
 1477              	.LCFI88:
 1478              	 .cfi_def_cfa_register 13
 1479              	 
 1480 0066 5DF8047B 	 ldr r7,[sp],#4
 1481              	.LCFI89:
 1482              	 .cfi_restore 7
 1483              	 .cfi_def_cfa_offset 0
 1484 006a 7047     	 bx lr
 1485              	.L71:
 1486              	 .align 2
 1487              	.L70:
 1488 006c 40002800 	 .word 2621504
 1489              	 .cfi_endproc
 1490              	.LFE222:
 1492              	 .section .text.XMC_CAN_MO_Transmit,"ax",%progbits
 1493              	 .align 2
 1494              	 .global XMC_CAN_MO_Transmit
 1495              	 .thumb
 1496              	 .thumb_func
 1498              	XMC_CAN_MO_Transmit:
 1499              	.LFB223:
 512:../Libraries/XMCLib/src/xmc_can.c **** 
 513:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will put a transmit request to transmit message object */
 514:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
 515:../Libraries/XMCLib/src/xmc_can.c **** {
 1500              	 .loc 2 515 0
 1501              	 .cfi_startproc
 1502              	 
 1503              	 
 1504              	 
 1505 0000 80B4     	 push {r7}
 1506              	.LCFI90:
 1507              	 .cfi_def_cfa_offset 4
 1508              	 .cfi_offset 7,-4
 1509 0002 87B0     	 sub sp,sp,#28
 1510              	.LCFI91:
 1511              	 .cfi_def_cfa_offset 32
 1512 0004 00AF     	 add r7,sp,#0
 1513              	.LCFI92:
 1514              	 .cfi_def_cfa_register 7
 1515 0006 7860     	 str r0,[r7,#4]
 516:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 1516              	 .loc 2 516 0
 1517 0008 0123     	 movs r3,#1
 1518 000a FB75     	 strb r3,[r7,#23]
 517:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 1519              	 .loc 2 517 0
 1520 000c 7B68     	 ldr r3,[r7,#4]
 1521 000e 1B68     	 ldr r3,[r3]
 1522 0010 DB69     	 ldr r3,[r3,#28]
 1523 0012 03F02003 	 and r3,r3,#32
 1524 0016 5B09     	 lsrs r3,r3,#5
 1525 0018 3B61     	 str r3,[r7,#16]
 518:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_
 1526              	 .loc 2 518 0
 1527 001a 7B68     	 ldr r3,[r7,#4]
 1528 001c 1B68     	 ldr r3,[r3]
 1529 001e DB69     	 ldr r3,[r3,#28]
 1530 0020 03F48073 	 and r3,r3,#256
 1531 0024 1B0A     	 lsrs r3,r3,#8
 1532 0026 FB60     	 str r3,[r7,#12]
 519:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 520:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 1533              	 .loc 2 520 0
 1534 0028 3B69     	 ldr r3,[r7,#16]
 1535 002a 002B     	 cmp r3,#0
 1536 002c 02D1     	 bne .L73
 521:../Libraries/XMCLib/src/xmc_can.c ****   {
 522:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 1537              	 .loc 2 522 0
 1538 002e 0423     	 movs r3,#4
 1539 0030 FB75     	 strb r3,[r7,#23]
 1540 0032 0CE0     	 b .L74
 1541              	.L73:
 523:../Libraries/XMCLib/src/xmc_can.c ****   }
 524:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 525:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 1542              	 .loc 2 525 0
 1543 0034 FB68     	 ldr r3,[r7,#12]
 1544 0036 012B     	 cmp r3,#1
 1545 0038 02D1     	 bne .L75
 526:../Libraries/XMCLib/src/xmc_can.c ****   {
 527:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 1546              	 .loc 2 527 0
 1547 003a 0223     	 movs r3,#2
 1548 003c FB75     	 strb r3,[r7,#23]
 1549 003e 06E0     	 b .L74
 1550              	.L75:
 528:../Libraries/XMCLib/src/xmc_can.c ****   }
 529:../Libraries/XMCLib/src/xmc_can.c ****   else
 530:../Libraries/XMCLib/src/xmc_can.c ****   {
 531:../Libraries/XMCLib/src/xmc_can.c ****     /* set TXRQ bit */
 532:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCT
 1551              	 .loc 2 532 0
 1552 0040 7B68     	 ldr r3,[r7,#4]
 1553 0042 1B68     	 ldr r3,[r3]
 1554 0044 4FF0E062 	 mov r2,#117440512
 1555 0048 DA61     	 str r2,[r3,#28]
 533:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1556              	 .loc 2 533 0
 1557 004a 0023     	 movs r3,#0
 1558 004c FB75     	 strb r3,[r7,#23]
 1559              	.L74:
 534:../Libraries/XMCLib/src/xmc_can.c ****   }
 535:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 1560              	 .loc 2 535 0
 1561 004e FB7D     	 ldrb r3,[r7,#23]
 536:../Libraries/XMCLib/src/xmc_can.c **** }
 1562              	 .loc 2 536 0
 1563 0050 1846     	 mov r0,r3
 1564 0052 1C37     	 adds r7,r7,#28
 1565              	.LCFI93:
 1566              	 .cfi_def_cfa_offset 4
 1567 0054 BD46     	 mov sp,r7
 1568              	.LCFI94:
 1569              	 .cfi_def_cfa_register 13
 1570              	 
 1571 0056 5DF8047B 	 ldr r7,[sp],#4
 1572              	.LCFI95:
 1573              	 .cfi_restore 7
 1574              	 .cfi_def_cfa_offset 0
 1575 005a 7047     	 bx lr
 1576              	 .cfi_endproc
 1577              	.LFE223:
 1579              	 .section .text.XMC_CAN_MO_ReceiveData,"ax",%progbits
 1580              	 .align 2
 1581              	 .global XMC_CAN_MO_ReceiveData
 1582              	 .thumb
 1583              	 .thumb_func
 1585              	XMC_CAN_MO_ReceiveData:
 1586              	.LFB224:
 537:../Libraries/XMCLib/src/xmc_can.c **** 
 538:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 539:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_ReceiveData (XMC_CAN_MO_t *can_mo)
 540:../Libraries/XMCLib/src/xmc_can.c **** {
 1587              	 .loc 2 540 0
 1588              	 .cfi_startproc
 1589              	 
 1590              	 
 1591              	 
 1592 0000 80B4     	 push {r7}
 1593              	.LCFI96:
 1594              	 .cfi_def_cfa_offset 4
 1595              	 .cfi_offset 7,-4
 1596 0002 87B0     	 sub sp,sp,#28
 1597              	.LCFI97:
 1598              	 .cfi_def_cfa_offset 32
 1599 0004 00AF     	 add r7,sp,#0
 1600              	.LCFI98:
 1601              	 .cfi_def_cfa_register 7
 1602 0006 7860     	 str r0,[r7,#4]
 541:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 1603              	 .loc 2 541 0
 1604 0008 0123     	 movs r3,#1
 1605 000a FB75     	 strb r3,[r7,#23]
 542:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 1606              	 .loc 2 542 0
 1607 000c 0023     	 movs r3,#0
 1608 000e BB75     	 strb r3,[r7,#22]
 543:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 1609              	 .loc 2 543 0
 1610 0010 0023     	 movs r3,#0
 1611 0012 7B75     	 strb r3,[r7,#21]
 544:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1612              	 .loc 2 544 0
 1613 0014 7B68     	 ldr r3,[r7,#4]
 1614 0016 1B68     	 ldr r3,[r3]
 1615 0018 DB69     	 ldr r3,[r3,#28]
 1616 001a 03F40063 	 and r3,r3,#2048
 1617 001e DB0A     	 lsrs r3,r3,#11
 1618 0020 3B61     	 str r3,[r7,#16]
 545:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1619              	 .loc 2 545 0
 1620 0022 7B68     	 ldr r3,[r7,#4]
 1621 0024 1B68     	 ldr r3,[r3]
 1622 0026 DB69     	 ldr r3,[r3,#28]
 1623 0028 03F00403 	 and r3,r3,#4
 1624 002c 9B08     	 lsrs r3,r3,#2
 1625 002e FB60     	 str r3,[r7,#12]
 546:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 547:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1626              	 .loc 2 547 0
 1627 0030 3B69     	 ldr r3,[r7,#16]
 1628 0032 002B     	 cmp r3,#0
 1629 0034 02D0     	 beq .L78
 548:../Libraries/XMCLib/src/xmc_can.c ****   {
 549:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1630              	 .loc 2 549 0
 1631 0036 0323     	 movs r3,#3
 1632 0038 FB75     	 strb r3,[r7,#23]
 1633 003a 25E0     	 b .L79
 1634              	.L78:
 550:../Libraries/XMCLib/src/xmc_can.c ****   }
 551:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 552:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1635              	 .loc 2 552 0
 1636 003c FB68     	 ldr r3,[r7,#12]
 1637 003e 012B     	 cmp r3,#1
 1638 0040 02D1     	 bne .L80
 553:../Libraries/XMCLib/src/xmc_can.c ****   {
 554:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 1639              	 .loc 2 554 0
 1640 0042 0223     	 movs r3,#2
 1641 0044 FB75     	 strb r3,[r7,#23]
 1642 0046 1FE0     	 b .L79
 1643              	.L80:
 555:../Libraries/XMCLib/src/xmc_can.c ****   }
 556:../Libraries/XMCLib/src/xmc_can.c ****   else
 557:../Libraries/XMCLib/src/xmc_can.c ****   {
 558:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 559:../Libraries/XMCLib/src/xmc_can.c ****     do
 560:../Libraries/XMCLib/src/xmc_can.c ****     {
 561:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1644              	 .loc 2 561 0 discriminator 2
 1645 0048 7B68     	 ldr r3,[r7,#4]
 1646 004a 1B68     	 ldr r3,[r3]
 1647 004c 1A69     	 ldr r2,[r3,#16]
 1648 004e 7B68     	 ldr r3,[r7,#4]
 1649 0050 1A61     	 str r2,[r3,#16]
 562:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1650              	 .loc 2 562 0 discriminator 2
 1651 0052 7B68     	 ldr r3,[r7,#4]
 1652 0054 1B68     	 ldr r3,[r3]
 1653 0056 5A69     	 ldr r2,[r3,#20]
 1654 0058 7B68     	 ldr r3,[r7,#4]
 1655 005a 5A61     	 str r2,[r3,#20]
 563:../Libraries/XMCLib/src/xmc_can.c **** 
 564:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1656              	 .loc 2 564 0 discriminator 2
 1657 005c 7B68     	 ldr r3,[r7,#4]
 1658 005e 1B68     	 ldr r3,[r3]
 1659 0060 DB69     	 ldr r3,[r3,#28]
 1660 0062 03F00403 	 and r3,r3,#4
 1661 0066 9B08     	 lsrs r3,r3,#2
 1662 0068 BB75     	 strb r3,[r7,#22]
 565:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1663              	 .loc 2 565 0 discriminator 2
 1664 006a 7B68     	 ldr r3,[r7,#4]
 1665 006c 1B68     	 ldr r3,[r3]
 1666 006e DB69     	 ldr r3,[r3,#28]
 1667 0070 03F00803 	 and r3,r3,#8
 1668 0074 DB08     	 lsrs r3,r3,#3
 1669 0076 7B75     	 strb r3,[r7,#21]
 566:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1670              	 .loc 2 566 0 discriminator 2
 1671 0078 BB7D     	 ldrb r3,[r7,#22]
 1672 007a 002B     	 cmp r3,#0
 1673 007c 02D0     	 beq .L81
 1674              	 .loc 2 566 0 is_stmt 0 discriminator 1
 1675 007e 7B7D     	 ldrb r3,[r7,#21]
 1676 0080 002B     	 cmp r3,#0
 1677 0082 E1D1     	 bne .L80
 1678              	.L81:
 567:../Libraries/XMCLib/src/xmc_can.c **** 
 568:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1679              	 .loc 2 568 0 is_stmt 1
 1680 0084 0023     	 movs r3,#0
 1681 0086 FB75     	 strb r3,[r7,#23]
 1682              	.L79:
 569:../Libraries/XMCLib/src/xmc_can.c ****   }
 570:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 1683              	 .loc 2 570 0
 1684 0088 FB7D     	 ldrb r3,[r7,#23]
 571:../Libraries/XMCLib/src/xmc_can.c **** }
 1685              	 .loc 2 571 0
 1686 008a 1846     	 mov r0,r3
 1687 008c 1C37     	 adds r7,r7,#28
 1688              	.LCFI99:
 1689              	 .cfi_def_cfa_offset 4
 1690 008e BD46     	 mov sp,r7
 1691              	.LCFI100:
 1692              	 .cfi_def_cfa_register 13
 1693              	 
 1694 0090 5DF8047B 	 ldr r7,[sp],#4
 1695              	.LCFI101:
 1696              	 .cfi_restore 7
 1697              	 .cfi_def_cfa_offset 0
 1698 0094 7047     	 bx lr
 1699              	 .cfi_endproc
 1700              	.LFE224:
 1702 0096 00BF     	 .section .text.XMC_CAN_MO_Receive,"ax",%progbits
 1703              	 .align 2
 1704              	 .global XMC_CAN_MO_Receive
 1705              	 .thumb
 1706              	 .thumb_func
 1708              	XMC_CAN_MO_Receive:
 1709              	.LFB225:
 572:../Libraries/XMCLib/src/xmc_can.c **** 
 573:../Libraries/XMCLib/src/xmc_can.c **** 
 574:../Libraries/XMCLib/src/xmc_can.c **** /* This function is will read the message object data bytes */
 575:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
 576:../Libraries/XMCLib/src/xmc_can.c **** {
 1710              	 .loc 2 576 0
 1711              	 .cfi_startproc
 1712              	 
 1713              	 
 1714              	 
 1715 0000 80B4     	 push {r7}
 1716              	.LCFI102:
 1717              	 .cfi_def_cfa_offset 4
 1718              	 .cfi_offset 7,-4
 1719 0002 87B0     	 sub sp,sp,#28
 1720              	.LCFI103:
 1721              	 .cfi_def_cfa_offset 32
 1722 0004 00AF     	 add r7,sp,#0
 1723              	.LCFI104:
 1724              	 .cfi_def_cfa_register 7
 1725 0006 7860     	 str r0,[r7,#4]
 577:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 1726              	 .loc 2 577 0
 1727 0008 0123     	 movs r3,#1
 1728 000a FB75     	 strb r3,[r7,#23]
 578:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t rx_pnd = 0U;
 1729              	 .loc 2 578 0
 1730 000c 0023     	 movs r3,#0
 1731 000e BB75     	 strb r3,[r7,#22]
 579:../Libraries/XMCLib/src/xmc_can.c ****   uint8_t new_data = 0U;
 1732              	 .loc 2 579 0
 1733 0010 0023     	 movs r3,#0
 1734 0012 7B75     	 strb r3,[r7,#21]
 580:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOS
 1735              	 .loc 2 580 0
 1736 0014 7B68     	 ldr r3,[r7,#4]
 1737 0016 1B68     	 ldr r3,[r3]
 1738 0018 DB69     	 ldr r3,[r3,#28]
 1739 001a 03F40063 	 and r3,r3,#2048
 1740 001e DB0A     	 lsrs r3,r3,#11
 1741 0020 3B61     	 str r3,[r7,#16]
 581:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk
 1742              	 .loc 2 581 0
 1743 0022 7B68     	 ldr r3,[r7,#4]
 1744 0024 1B68     	 ldr r3,[r3]
 1745 0026 DB69     	 ldr r3,[r3,#28]
 1746 0028 03F00403 	 and r3,r3,#4
 1747 002c 9B08     	 lsrs r3,r3,#2
 1748 002e FB60     	 str r3,[r7,#12]
 582:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message object is a receive message object */
 583:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 1749              	 .loc 2 583 0
 1750 0030 3B69     	 ldr r3,[r7,#16]
 1751 0032 002B     	 cmp r3,#0
 1752 0034 02D0     	 beq .L84
 584:../Libraries/XMCLib/src/xmc_can.c ****   {
 585:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 1753              	 .loc 2 585 0
 1754 0036 0323     	 movs r3,#3
 1755 0038 FB75     	 strb r3,[r7,#23]
 1756 003a A7E0     	 b .L85
 1757              	.L84:
 586:../Libraries/XMCLib/src/xmc_can.c ****   }
 587:../Libraries/XMCLib/src/xmc_can.c ****   /* check if reception is ongoing on message object */
 588:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_recepcion_ongoing == 1U)
 1758              	 .loc 2 588 0
 1759 003c FB68     	 ldr r3,[r7,#12]
 1760 003e 012B     	 cmp r3,#1
 1761 0040 02D1     	 bne .L86
 589:../Libraries/XMCLib/src/xmc_can.c ****   {
 590:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 1762              	 .loc 2 590 0
 1763 0042 0223     	 movs r3,#2
 1764 0044 FB75     	 strb r3,[r7,#23]
 1765 0046 A1E0     	 b .L85
 1766              	.L86:
 591:../Libraries/XMCLib/src/xmc_can.c ****   }
 592:../Libraries/XMCLib/src/xmc_can.c ****   else
 593:../Libraries/XMCLib/src/xmc_can.c ****   {
 594:../Libraries/XMCLib/src/xmc_can.c ****     /* read message parameters */
 595:../Libraries/XMCLib/src/xmc_can.c ****     do
 596:../Libraries/XMCLib/src/xmc_can.c ****     {
 597:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 1767              	 .loc 2 597 0
 1768 0048 7B68     	 ldr r3,[r7,#4]
 1769 004a 1B68     	 ldr r3,[r3]
 1770 004c 0822     	 movs r2,#8
 1771 004e DA61     	 str r2,[r3,#28]
 598:../Libraries/XMCLib/src/xmc_can.c ****       if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 1772              	 .loc 2 598 0
 1773 0050 7B68     	 ldr r3,[r7,#4]
 1774 0052 1B68     	 ldr r3,[r3]
 1775 0054 9B69     	 ldr r3,[r3,#24]
 1776 0056 03F00053 	 and r3,r3,#536870912
 1777 005a 5B0F     	 lsrs r3,r3,#29
 1778 005c 002B     	 cmp r3,#0
 1779 005e 40D1     	 bne .L87
 599:../Libraries/XMCLib/src/xmc_can.c ****       {
 600:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 1780              	 .loc 2 600 0
 1781 0060 7A68     	 ldr r2,[r7,#4]
 1782 0062 D379     	 ldrb r3,[r2,#7]
 1783 0064 6FF34513 	 bfc r3,#5,#1
 1784 0068 D371     	 strb r3,[r2,#7]
 601:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_
 1785              	 .loc 2 601 0
 1786 006a 7B68     	 ldr r3,[r7,#4]
 1787 006c 1B68     	 ldr r3,[r3]
 1788 006e 9A69     	 ldr r2,[r3,#24]
 1789 0070 4A4B     	 ldr r3,.L93
 1790 0072 1340     	 ands r3,r3,r2
 1791 0074 9B0C     	 lsrs r3,r3,#18
 1792 0076 23F06041 	 bic r1,r3,#-536870912
 1793 007a 7A68     	 ldr r2,[r7,#4]
 1794 007c 5368     	 ldr r3,[r2,#4]
 1795 007e 61F31C03 	 bfi r3,r1,#0,#29
 1796 0082 5360     	 str r3,[r2,#4]
 602:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1797              	 .loc 2 602 0
 1798 0084 7B68     	 ldr r3,[r7,#4]
 1799 0086 1B68     	 ldr r3,[r3]
 1800 0088 DB68     	 ldr r3,[r3,#12]
 1801 008a 03F00053 	 and r3,r3,#536870912
 1802 008e 5B0F     	 lsrs r3,r3,#29
 1803 0090 DBB2     	 uxtb r3,r3
 1804 0092 03F00103 	 and r3,r3,#1
 1805 0096 D9B2     	 uxtb r1,r3
 1806 0098 7A68     	 ldr r2,[r7,#4]
 1807 009a D37A     	 ldrb r3,[r2,#11]
 1808 009c 61F34513 	 bfi r3,r1,#5,#1
 1809 00a0 D372     	 strb r3,[r2,#11]
 603:../Libraries/XMCLib/src/xmc_can.c ****         if(can_mo->can_ide_mask == 1U)
 1810              	 .loc 2 603 0
 1811 00a2 7B68     	 ldr r3,[r7,#4]
 1812 00a4 DB7A     	 ldrb r3,[r3,#11]
 1813 00a6 03F02003 	 and r3,r3,#32
 1814 00aa DBB2     	 uxtb r3,r3
 1815 00ac 002B     	 cmp r3,#0
 1816 00ae 0DD0     	 beq .L88
 604:../Libraries/XMCLib/src/xmc_can.c ****         {
 605:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >
 1817              	 .loc 2 605 0
 1818 00b0 7B68     	 ldr r3,[r7,#4]
 1819 00b2 1B68     	 ldr r3,[r3]
 1820 00b4 DA68     	 ldr r2,[r3,#12]
 1821 00b6 394B     	 ldr r3,.L93
 1822 00b8 1340     	 ands r3,r3,r2
 1823 00ba 9B0C     	 lsrs r3,r3,#18
 1824 00bc 23F06041 	 bic r1,r3,#-536870912
 1825 00c0 7A68     	 ldr r2,[r7,#4]
 1826 00c2 9368     	 ldr r3,[r2,#8]
 1827 00c4 61F31C03 	 bfi r3,r1,#0,#29
 1828 00c8 9360     	 str r3,[r2,#8]
 1829 00ca 32E0     	 b .L90
 1830              	.L88:
 606:../Libraries/XMCLib/src/xmc_can.c ****         }
 607:../Libraries/XMCLib/src/xmc_can.c ****         else
 608:../Libraries/XMCLib/src/xmc_can.c ****         {
 609:../Libraries/XMCLib/src/xmc_can.c ****           can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1831              	 .loc 2 609 0
 1832 00cc 7B68     	 ldr r3,[r7,#4]
 1833 00ce 1B68     	 ldr r3,[r3]
 1834 00d0 DB68     	 ldr r3,[r3,#12]
 1835 00d2 23F06041 	 bic r1,r3,#-536870912
 1836 00d6 7A68     	 ldr r2,[r7,#4]
 1837 00d8 9368     	 ldr r3,[r2,#8]
 1838 00da 61F31C03 	 bfi r3,r1,#0,#29
 1839 00de 9360     	 str r3,[r2,#8]
 1840 00e0 27E0     	 b .L90
 1841              	.L87:
 610:../Libraries/XMCLib/src/xmc_can.c ****         }
 611:../Libraries/XMCLib/src/xmc_can.c ****       }
 612:../Libraries/XMCLib/src/xmc_can.c ****       else
 613:../Libraries/XMCLib/src/xmc_can.c ****       {
 614:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 1842              	 .loc 2 614 0
 1843 00e2 7A68     	 ldr r2,[r7,#4]
 1844 00e4 D379     	 ldrb r3,[r2,#7]
 1845 00e6 43F02003 	 orr r3,r3,#32
 1846 00ea D371     	 strb r3,[r2,#7]
 615:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 1847              	 .loc 2 615 0
 1848 00ec 7B68     	 ldr r3,[r7,#4]
 1849 00ee 1B68     	 ldr r3,[r3]
 1850 00f0 9B69     	 ldr r3,[r3,#24]
 1851 00f2 23F06041 	 bic r1,r3,#-536870912
 1852 00f6 7A68     	 ldr r2,[r7,#4]
 1853 00f8 5368     	 ldr r3,[r2,#4]
 1854 00fa 61F31C03 	 bfi r3,r1,#0,#29
 1855 00fe 5360     	 str r3,[r2,#4]
 616:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 1856              	 .loc 2 616 0
 1857 0100 7B68     	 ldr r3,[r7,#4]
 1858 0102 1B68     	 ldr r3,[r3]
 1859 0104 DB68     	 ldr r3,[r3,#12]
 1860 0106 23F06041 	 bic r1,r3,#-536870912
 1861 010a 7A68     	 ldr r2,[r7,#4]
 1862 010c 9368     	 ldr r3,[r2,#8]
 1863 010e 61F31C03 	 bfi r3,r1,#0,#29
 1864 0112 9360     	 str r3,[r2,#8]
 617:../Libraries/XMCLib/src/xmc_can.c ****         can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN
 1865              	 .loc 2 617 0
 1866 0114 7B68     	 ldr r3,[r7,#4]
 1867 0116 1B68     	 ldr r3,[r3]
 1868 0118 DB68     	 ldr r3,[r3,#12]
 1869 011a 03F00053 	 and r3,r3,#536870912
 1870 011e 5B0F     	 lsrs r3,r3,#29
 1871 0120 DBB2     	 uxtb r3,r3
 1872 0122 03F00103 	 and r3,r3,#1
 1873 0126 D9B2     	 uxtb r1,r3
 1874 0128 7A68     	 ldr r2,[r7,#4]
 1875 012a D37A     	 ldrb r3,[r2,#11]
 1876 012c 61F34513 	 bfi r3,r1,#5,#1
 1877 0130 D372     	 strb r3,[r2,#11]
 1878              	.L90:
 618:../Libraries/XMCLib/src/xmc_can.c ****       }
 619:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC
 1879              	 .loc 2 619 0
 1880 0132 7B68     	 ldr r3,[r7,#4]
 1881 0134 1B68     	 ldr r3,[r3]
 1882 0136 1B68     	 ldr r3,[r3]
 1883 0138 03F07063 	 and r3,r3,#251658240
 1884 013c 1B0E     	 lsrs r3,r3,#24
 1885 013e DAB2     	 uxtb r2,r3
 1886 0140 7B68     	 ldr r3,[r7,#4]
 1887 0142 1A73     	 strb r2,[r3,#12]
 620:../Libraries/XMCLib/src/xmc_can.c **** 
 621:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 1888              	 .loc 2 621 0
 1889 0144 7B68     	 ldr r3,[r7,#4]
 1890 0146 1B68     	 ldr r3,[r3]
 1891 0148 1A69     	 ldr r2,[r3,#16]
 1892 014a 7B68     	 ldr r3,[r7,#4]
 1893 014c 1A61     	 str r2,[r3,#16]
 622:../Libraries/XMCLib/src/xmc_can.c ****       can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 1894              	 .loc 2 622 0
 1895 014e 7B68     	 ldr r3,[r7,#4]
 1896 0150 1B68     	 ldr r3,[r3]
 1897 0152 5A69     	 ldr r2,[r3,#20]
 1898 0154 7B68     	 ldr r3,[r7,#4]
 1899 0156 5A61     	 str r2,[r3,#20]
 623:../Libraries/XMCLib/src/xmc_can.c **** 
 624:../Libraries/XMCLib/src/xmc_can.c ****       rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_
 1900              	 .loc 2 624 0
 1901 0158 7B68     	 ldr r3,[r7,#4]
 1902 015a 1B68     	 ldr r3,[r3]
 1903 015c DB69     	 ldr r3,[r3,#28]
 1904 015e 03F00403 	 and r3,r3,#4
 1905 0162 9B08     	 lsrs r3,r3,#2
 1906 0164 BB75     	 strb r3,[r7,#22]
 625:../Libraries/XMCLib/src/xmc_can.c ****       new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> C
 1907              	 .loc 2 625 0
 1908 0166 7B68     	 ldr r3,[r7,#4]
 1909 0168 1B68     	 ldr r3,[r3]
 1910 016a DB69     	 ldr r3,[r3,#28]
 1911 016c 03F00803 	 and r3,r3,#8
 1912 0170 DB08     	 lsrs r3,r3,#3
 1913 0172 7B75     	 strb r3,[r7,#21]
 626:../Libraries/XMCLib/src/xmc_can.c ****     } while ((rx_pnd != 0U) && (new_data != 0U));
 1914              	 .loc 2 626 0
 1915 0174 BB7D     	 ldrb r3,[r7,#22]
 1916 0176 002B     	 cmp r3,#0
 1917 0178 03D0     	 beq .L91
 1918              	 .loc 2 626 0 is_stmt 0 discriminator 1
 1919 017a 7B7D     	 ldrb r3,[r7,#21]
 1920 017c 002B     	 cmp r3,#0
 1921 017e 7FF463AF 	 bne .L86
 1922              	.L91:
 627:../Libraries/XMCLib/src/xmc_can.c **** 
 628:../Libraries/XMCLib/src/xmc_can.c ****     can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 1923              	 .loc 2 628 0 is_stmt 1
 1924 0182 7B68     	 ldr r3,[r7,#4]
 1925 0184 0022     	 movs r2,#0
 1926 0186 1A76     	 strb r2,[r3,#24]
 629:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 1927              	 .loc 2 629 0
 1928 0188 0023     	 movs r3,#0
 1929 018a FB75     	 strb r3,[r7,#23]
 1930              	.L85:
 630:../Libraries/XMCLib/src/xmc_can.c ****   }
 631:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 1931              	 .loc 2 631 0
 1932 018c FB7D     	 ldrb r3,[r7,#23]
 632:../Libraries/XMCLib/src/xmc_can.c **** }
 1933              	 .loc 2 632 0
 1934 018e 1846     	 mov r0,r3
 1935 0190 1C37     	 adds r7,r7,#28
 1936              	.LCFI105:
 1937              	 .cfi_def_cfa_offset 4
 1938 0192 BD46     	 mov sp,r7
 1939              	.LCFI106:
 1940              	 .cfi_def_cfa_register 13
 1941              	 
 1942 0194 5DF8047B 	 ldr r7,[sp],#4
 1943              	.LCFI107:
 1944              	 .cfi_restore 7
 1945              	 .cfi_def_cfa_offset 0
 1946 0198 7047     	 bx lr
 1947              	.L94:
 1948 019a 00BF     	 .align 2
 1949              	.L93:
 1950 019c 0000FC1F 	 .word 536608768
 1951              	 .cfi_endproc
 1952              	.LFE225:
 1954              	 .section .text.XMC_CAN_NODE_EnableEvent,"ax",%progbits
 1955              	 .align 2
 1956              	 .global XMC_CAN_NODE_EnableEvent
 1957              	 .thumb
 1958              	 .thumb_func
 1960              	XMC_CAN_NODE_EnableEvent:
 1961              	.LFB226:
 633:../Libraries/XMCLib/src/xmc_can.c **** 
 634:../Libraries/XMCLib/src/xmc_can.c **** /* Function to enable node event */
 635:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 636:../Libraries/XMCLib/src/xmc_can.c **** {
 1962              	 .loc 2 636 0
 1963              	 .cfi_startproc
 1964              	 
 1965              	 
 1966              	 
 1967 0000 80B4     	 push {r7}
 1968              	.LCFI108:
 1969              	 .cfi_def_cfa_offset 4
 1970              	 .cfi_offset 7,-4
 1971 0002 83B0     	 sub sp,sp,#12
 1972              	.LCFI109:
 1973              	 .cfi_def_cfa_offset 16
 1974 0004 00AF     	 add r7,sp,#0
 1975              	.LCFI110:
 1976              	 .cfi_def_cfa_register 7
 1977 0006 7860     	 str r0,[r7,#4]
 1978 0008 3960     	 str r1,[r7]
 637:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 1979              	 .loc 2 637 0
 1980 000a 3B68     	 ldr r3,[r7]
 1981 000c B3F5800F 	 cmp r3,#4194304
 1982 0010 06D0     	 beq .L96
 638:../Libraries/XMCLib/src/xmc_can.c ****   {
 639:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR |= (uint32_t)event;
 1983              	 .loc 2 639 0
 1984 0012 7B68     	 ldr r3,[r7,#4]
 1985 0014 1A68     	 ldr r2,[r3]
 1986 0016 3B68     	 ldr r3,[r7]
 1987 0018 1A43     	 orrs r2,r2,r3
 1988 001a 7B68     	 ldr r3,[r7,#4]
 1989 001c 1A60     	 str r2,[r3]
 1990 001e 05E0     	 b .L95
 1991              	.L96:
 640:../Libraries/XMCLib/src/xmc_can.c ****   }
 641:../Libraries/XMCLib/src/xmc_can.c ****   else
 642:../Libraries/XMCLib/src/xmc_can.c ****   {
 643:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR |= (uint32_t)event;
 1992              	 .loc 2 643 0
 1993 0020 7B68     	 ldr r3,[r7,#4]
 1994 0022 9A69     	 ldr r2,[r3,#24]
 1995 0024 3B68     	 ldr r3,[r7]
 1996 0026 1A43     	 orrs r2,r2,r3
 1997 0028 7B68     	 ldr r3,[r7,#4]
 1998 002a 9A61     	 str r2,[r3,#24]
 1999              	.L95:
 644:../Libraries/XMCLib/src/xmc_can.c ****   }
 645:../Libraries/XMCLib/src/xmc_can.c **** }
 2000              	 .loc 2 645 0
 2001 002c 0C37     	 adds r7,r7,#12
 2002              	.LCFI111:
 2003              	 .cfi_def_cfa_offset 4
 2004 002e BD46     	 mov sp,r7
 2005              	.LCFI112:
 2006              	 .cfi_def_cfa_register 13
 2007              	 
 2008 0030 5DF8047B 	 ldr r7,[sp],#4
 2009              	.LCFI113:
 2010              	 .cfi_restore 7
 2011              	 .cfi_def_cfa_offset 0
 2012 0034 7047     	 bx lr
 2013              	 .cfi_endproc
 2014              	.LFE226:
 2016 0036 00BF     	 .section .text.XMC_CAN_NODE_DisableEvent,"ax",%progbits
 2017              	 .align 2
 2018              	 .global XMC_CAN_NODE_DisableEvent
 2019              	 .thumb
 2020              	 .thumb_func
 2022              	XMC_CAN_NODE_DisableEvent:
 2023              	.LFB227:
 646:../Libraries/XMCLib/src/xmc_can.c **** 
 647:../Libraries/XMCLib/src/xmc_can.c **** /* Function to disable node event */
 648:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_NODE_DisableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
 649:../Libraries/XMCLib/src/xmc_can.c **** {
 2024              	 .loc 2 649 0
 2025              	 .cfi_startproc
 2026              	 
 2027              	 
 2028              	 
 2029 0000 80B4     	 push {r7}
 2030              	.LCFI114:
 2031              	 .cfi_def_cfa_offset 4
 2032              	 .cfi_offset 7,-4
 2033 0002 83B0     	 sub sp,sp,#12
 2034              	.LCFI115:
 2035              	 .cfi_def_cfa_offset 16
 2036 0004 00AF     	 add r7,sp,#0
 2037              	.LCFI116:
 2038              	 .cfi_def_cfa_register 7
 2039 0006 7860     	 str r0,[r7,#4]
 2040 0008 3960     	 str r1,[r7]
 650:../Libraries/XMCLib/src/xmc_can.c ****   if(event != XMC_CAN_NODE_EVENT_CFCIE)
 2041              	 .loc 2 650 0
 2042 000a 3B68     	 ldr r3,[r7]
 2043 000c B3F5800F 	 cmp r3,#4194304
 2044 0010 07D0     	 beq .L99
 651:../Libraries/XMCLib/src/xmc_can.c ****   {
 652:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NCR &= ~(uint32_t)event;
 2045              	 .loc 2 652 0
 2046 0012 7B68     	 ldr r3,[r7,#4]
 2047 0014 1A68     	 ldr r2,[r3]
 2048 0016 3B68     	 ldr r3,[r7]
 2049 0018 DB43     	 mvns r3,r3
 2050 001a 1A40     	 ands r2,r2,r3
 2051 001c 7B68     	 ldr r3,[r7,#4]
 2052 001e 1A60     	 str r2,[r3]
 2053 0020 06E0     	 b .L98
 2054              	.L99:
 653:../Libraries/XMCLib/src/xmc_can.c ****   }
 654:../Libraries/XMCLib/src/xmc_can.c ****   else
 655:../Libraries/XMCLib/src/xmc_can.c ****   {
 656:../Libraries/XMCLib/src/xmc_can.c ****     can_node->NFCR &= ~(uint32_t)event;
 2055              	 .loc 2 656 0
 2056 0022 7B68     	 ldr r3,[r7,#4]
 2057 0024 9A69     	 ldr r2,[r3,#24]
 2058 0026 3B68     	 ldr r3,[r7]
 2059 0028 DB43     	 mvns r3,r3
 2060 002a 1A40     	 ands r2,r2,r3
 2061 002c 7B68     	 ldr r3,[r7,#4]
 2062 002e 9A61     	 str r2,[r3,#24]
 2063              	.L98:
 657:../Libraries/XMCLib/src/xmc_can.c ****   }
 658:../Libraries/XMCLib/src/xmc_can.c **** }
 2064              	 .loc 2 658 0
 2065 0030 0C37     	 adds r7,r7,#12
 2066              	.LCFI117:
 2067              	 .cfi_def_cfa_offset 4
 2068 0032 BD46     	 mov sp,r7
 2069              	.LCFI118:
 2070              	 .cfi_def_cfa_register 13
 2071              	 
 2072 0034 5DF8047B 	 ldr r7,[sp],#4
 2073              	.LCFI119:
 2074              	 .cfi_restore 7
 2075              	 .cfi_def_cfa_offset 0
 2076 0038 7047     	 bx lr
 2077              	 .cfi_endproc
 2078              	.LFE227:
 2080 003a 00BF     	 .section .text.XMC_CAN_TXFIFO_Transmit,"ax",%progbits
 2081              	 .align 2
 2082              	 .global XMC_CAN_TXFIFO_Transmit
 2083              	 .thumb
 2084              	 .thumb_func
 2086              	XMC_CAN_TXFIFO_Transmit:
 2087              	.LFB228:
 659:../Libraries/XMCLib/src/xmc_can.c **** /* Function to transmit MO from the FIFO */
 660:../Libraries/XMCLib/src/xmc_can.c **** XMC_CAN_STATUS_t XMC_CAN_TXFIFO_Transmit(const XMC_CAN_MO_t *const can_mo)
 661:../Libraries/XMCLib/src/xmc_can.c **** {
 2088              	 .loc 2 661 0
 2089              	 .cfi_startproc
 2090              	 
 2091              	 
 2092              	 
 2093 0000 80B4     	 push {r7}
 2094              	.LCFI120:
 2095              	 .cfi_def_cfa_offset 4
 2096              	 .cfi_offset 7,-4
 2097 0002 89B0     	 sub sp,sp,#36
 2098              	.LCFI121:
 2099              	 .cfi_def_cfa_offset 40
 2100 0004 00AF     	 add r7,sp,#0
 2101              	.LCFI122:
 2102              	 .cfi_def_cfa_register 7
 2103 0006 7860     	 str r0,[r7,#4]
 662:../Libraries/XMCLib/src/xmc_can.c ****   XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 2104              	 .loc 2 662 0
 2105 0008 0123     	 movs r3,#1
 2106 000a FB77     	 strb r3,[r7,#31]
 663:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_type = ((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO
 2107              	 .loc 2 663 0
 2108 000c 7B68     	 ldr r3,[r7,#4]
 2109 000e 1B68     	 ldr r3,[r3]
 2110 0010 DB69     	 ldr r3,[r3,#28]
 2111 0012 03F02003 	 and r3,r3,#32
 2112 0016 5B09     	 lsrs r3,r3,#5
 2113 0018 BB61     	 str r3,[r7,#24]
 664:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_transmission_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_M
 2114              	 .loc 2 664 0
 2115 001a 7B68     	 ldr r3,[r7,#4]
 2116 001c 1B68     	 ldr r3,[r3]
 2117 001e DB69     	 ldr r3,[r3,#28]
 2118 0020 03F48073 	 and r3,r3,#256
 2119 0024 1B0A     	 lsrs r3,r3,#8
 2120 0026 7B61     	 str r3,[r7,#20]
 665:../Libraries/XMCLib/src/xmc_can.c ****   uint32_t mo_cur =  (uint32_t)(can_mo->can_mo_ptr-> MOFGPR & CAN_MO_MOFGPR_CUR_Msk) >> CAN_MO_MOFG
 2121              	 .loc 2 665 0
 2122 0028 7B68     	 ldr r3,[r7,#4]
 2123 002a 1B68     	 ldr r3,[r3]
 2124 002c 5B68     	 ldr r3,[r3,#4]
 2125 002e 03F47F03 	 and r3,r3,#16711680
 2126 0032 1B0C     	 lsrs r3,r3,#16
 2127 0034 3B61     	 str r3,[r7,#16]
 666:../Libraries/XMCLib/src/xmc_can.c ****   CAN_MO_TypeDef*  mo = (CAN_MO_TypeDef *)(CAN_BASE + 0x1000UL + (mo_cur * 0x0020UL));
 2128              	 .loc 2 666 0
 2129 0036 3B69     	 ldr r3,[r7,#16]
 2130 0038 03F11073 	 add r3,r3,#37748736
 2131 003c 03F52863 	 add r3,r3,#2688
 2132 0040 5B01     	 lsls r3,r3,#5
 2133 0042 FB60     	 str r3,[r7,#12]
 667:../Libraries/XMCLib/src/xmc_can.c ****   /* check if message is disabled */
 668:../Libraries/XMCLib/src/xmc_can.c ****   if (mo_type == 0U)
 2134              	 .loc 2 668 0
 2135 0044 BB69     	 ldr r3,[r7,#24]
 2136 0046 002B     	 cmp r3,#0
 2137 0048 02D1     	 bne .L102
 669:../Libraries/XMCLib/src/xmc_can.c ****   {
 670:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_MO_DISABLED;
 2138              	 .loc 2 670 0
 2139 004a 0423     	 movs r3,#4
 2140 004c FB77     	 strb r3,[r7,#31]
 2141 004e 0BE0     	 b .L103
 2142              	.L102:
 671:../Libraries/XMCLib/src/xmc_can.c ****   }
 672:../Libraries/XMCLib/src/xmc_can.c ****   /* check if transmission is ongoing on message object */
 673:../Libraries/XMCLib/src/xmc_can.c ****   else if (mo_transmission_ongoing == 1U)
 2143              	 .loc 2 673 0
 2144 0050 7B69     	 ldr r3,[r7,#20]
 2145 0052 012B     	 cmp r3,#1
 2146 0054 02D1     	 bne .L104
 674:../Libraries/XMCLib/src/xmc_can.c ****   {
 675:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_BUSY;
 2147              	 .loc 2 675 0
 2148 0056 0223     	 movs r3,#2
 2149 0058 FB77     	 strb r3,[r7,#31]
 2150 005a 05E0     	 b .L103
 2151              	.L104:
 676:../Libraries/XMCLib/src/xmc_can.c ****   }
 677:../Libraries/XMCLib/src/xmc_can.c ****   else
 678:../Libraries/XMCLib/src/xmc_can.c ****   {
 679:../Libraries/XMCLib/src/xmc_can.c ****     mo->MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 2152              	 .loc 2 679 0
 2153 005c FB68     	 ldr r3,[r7,#12]
 2154 005e 4FF0E062 	 mov r2,#117440512
 2155 0062 DA61     	 str r2,[r3,#28]
 680:../Libraries/XMCLib/src/xmc_can.c ****     error = XMC_CAN_STATUS_SUCCESS;
 2156              	 .loc 2 680 0
 2157 0064 0023     	 movs r3,#0
 2158 0066 FB77     	 strb r3,[r7,#31]
 2159              	.L103:
 681:../Libraries/XMCLib/src/xmc_can.c ****   }
 682:../Libraries/XMCLib/src/xmc_can.c ****   return error;
 2160              	 .loc 2 682 0
 2161 0068 FB7F     	 ldrb r3,[r7,#31]
 683:../Libraries/XMCLib/src/xmc_can.c **** }
 2162              	 .loc 2 683 0
 2163 006a 1846     	 mov r0,r3
 2164 006c 2437     	 adds r7,r7,#36
 2165              	.LCFI123:
 2166              	 .cfi_def_cfa_offset 4
 2167 006e BD46     	 mov sp,r7
 2168              	.LCFI124:
 2169              	 .cfi_def_cfa_register 13
 2170              	 
 2171 0070 5DF8047B 	 ldr r7,[sp],#4
 2172              	.LCFI125:
 2173              	 .cfi_restore 7
 2174              	 .cfi_def_cfa_offset 0
 2175 0074 7047     	 bx lr
 2176              	 .cfi_endproc
 2177              	.LFE228:
 2179 0076 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOBaseObject,"ax",%progbits
 2180              	 .align 2
 2181              	 .global XMC_CAN_TXFIFO_ConfigMOBaseObject
 2182              	 .thumb
 2183              	 .thumb_func
 2185              	XMC_CAN_TXFIFO_ConfigMOBaseObject:
 2186              	.LFB229:
 684:../Libraries/XMCLib/src/xmc_can.c **** 
 685:../Libraries/XMCLib/src/xmc_can.c **** /* Function to initialize the transmit FIFO MO base object */
 686:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 687:../Libraries/XMCLib/src/xmc_can.c **** {
 2187              	 .loc 2 687 0
 2188              	 .cfi_startproc
 2189              	 
 2190              	 
 2191              	 
 2192 0000 80B4     	 push {r7}
 2193              	.LCFI126:
 2194              	 .cfi_def_cfa_offset 4
 2195              	 .cfi_offset 7,-4
 2196 0002 83B0     	 sub sp,sp,#12
 2197              	.LCFI127:
 2198              	 .cfi_def_cfa_offset 16
 2199 0004 00AF     	 add r7,sp,#0
 2200              	.LCFI128:
 2201              	 .cfi_def_cfa_register 7
 2202 0006 7860     	 str r0,[r7,#4]
 2203 0008 3960     	 str r1,[r7]
 688:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2204              	 .loc 2 688 0
 2205 000a 7B68     	 ldr r3,[r7,#4]
 2206 000c 1B68     	 ldr r3,[r3]
 2207 000e 7A68     	 ldr r2,[r7,#4]
 2208 0010 1268     	 ldr r2,[r2]
 2209 0012 1268     	 ldr r2,[r2]
 2210 0014 22F00F02 	 bic r2,r2,#15
 2211 0018 42F00202 	 orr r2,r2,#2
 2212 001c 1A60     	 str r2,[r3]
 689:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x2U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 690:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_BOT_Msk |
 2213              	 .loc 2 690 0
 2214 001e 7B68     	 ldr r3,[r7,#4]
 2215 0020 1B68     	 ldr r3,[r3]
 2216 0022 7A68     	 ldr r2,[r7,#4]
 2217 0024 1268     	 ldr r2,[r2]
 2218 0026 5268     	 ldr r2,[r2,#4]
 2219 0028 02F07F42 	 and r2,r2,#-16777216
 691:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 692:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 693:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2220              	 .loc 2 693 0
 2221 002c 3978     	 ldrb r1,[r7]
 692:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2222              	 .loc 2 692 0
 2223 002e 1143     	 orrs r1,r1,r2
 694:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2224              	 .loc 2 694 0
 2225 0030 BA78     	 ldrb r2,[r7,#2]
 2226 0032 1204     	 lsls r2,r2,#16
 2227 0034 02F47F02 	 and r2,r2,#16711680
 693:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2228              	 .loc 2 693 0
 2229 0038 1143     	 orrs r1,r1,r2
 695:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2230              	 .loc 2 695 0
 2231 003a 7A78     	 ldrb r2,[r7,#1]
 2232 003c 1202     	 lsls r2,r2,#8
 2233 003e 92B2     	 uxth r2,r2
 694:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2234              	 .loc 2 694 0
 2235 0040 0A43     	 orrs r2,r2,r1
 690:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2236              	 .loc 2 690 0
 2237 0042 5A60     	 str r2,[r3,#4]
 696:../Libraries/XMCLib/src/xmc_can.c **** }
 2238              	 .loc 2 696 0
 2239 0044 0C37     	 adds r7,r7,#12
 2240              	.LCFI129:
 2241              	 .cfi_def_cfa_offset 4
 2242 0046 BD46     	 mov sp,r7
 2243              	.LCFI130:
 2244              	 .cfi_def_cfa_register 13
 2245              	 
 2246 0048 5DF8047B 	 ldr r7,[sp],#4
 2247              	.LCFI131:
 2248              	 .cfi_restore 7
 2249              	 .cfi_def_cfa_offset 0
 2250 004c 7047     	 bx lr
 2251              	 .cfi_endproc
 2252              	.LFE229:
 2254 004e 00BF     	 .section .text.XMC_CAN_RXFIFO_ConfigMOBaseObject,"ax",%progbits
 2255              	 .align 2
 2256              	 .global XMC_CAN_RXFIFO_ConfigMOBaseObject
 2257              	 .thumb
 2258              	 .thumb_func
 2260              	XMC_CAN_RXFIFO_ConfigMOBaseObject:
 2261              	.LFB230:
 697:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the receive FIFO MO base object */
 698:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_RXFIFO_ConfigMOBaseObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_t
 699:../Libraries/XMCLib/src/xmc_can.c **** {
 2262              	 .loc 2 699 0
 2263              	 .cfi_startproc
 2264              	 
 2265              	 
 2266              	 
 2267 0000 80B4     	 push {r7}
 2268              	.LCFI132:
 2269              	 .cfi_def_cfa_offset 4
 2270              	 .cfi_offset 7,-4
 2271 0002 83B0     	 sub sp,sp,#12
 2272              	.LCFI133:
 2273              	 .cfi_def_cfa_offset 16
 2274 0004 00AF     	 add r7,sp,#0
 2275              	.LCFI134:
 2276              	 .cfi_def_cfa_register 7
 2277 0006 7860     	 str r0,[r7,#4]
 2278 0008 3960     	 str r1,[r7]
 700:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2279              	 .loc 2 700 0
 2280 000a 7B68     	 ldr r3,[r7,#4]
 2281 000c 1B68     	 ldr r3,[r3]
 2282 000e 7A68     	 ldr r2,[r7,#4]
 2283 0010 1268     	 ldr r2,[r2]
 2284 0012 1268     	 ldr r2,[r2]
 2285 0014 22F00F02 	 bic r2,r2,#15
 2286 0018 42F00102 	 orr r2,r2,#1
 2287 001c 1A60     	 str r2,[r3]
 701:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x1U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 702:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~( uint32_t)(CAN_MO_MOFGPR_BOT_Msk 
 2288              	 .loc 2 702 0
 2289 001e 7B68     	 ldr r3,[r7,#4]
 2290 0020 1B68     	 ldr r3,[r3]
 2291 0022 7A68     	 ldr r2,[r7,#4]
 2292 0024 1268     	 ldr r2,[r2]
 2293 0026 5268     	 ldr r2,[r2,#4]
 2294 0028 02F07F42 	 and r2,r2,#-16777216
 703:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 704:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_CUR_Msk)) |
 705:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2295              	 .loc 2 705 0
 2296 002c 3978     	 ldrb r1,[r7]
 704:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_bottom << CAN_MO_MOFGPR_BOT_Pos) & (uint32
 2297              	 .loc 2 704 0
 2298 002e 1143     	 orrs r1,r1,r2
 706:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2299              	 .loc 2 706 0
 2300 0030 BA78     	 ldrb r2,[r7,#2]
 2301 0032 1204     	 lsls r2,r2,#16
 2302 0034 02F47F02 	 and r2,r2,#16711680
 705:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2303              	 .loc 2 705 0
 2304 0038 1143     	 orrs r1,r1,r2
 707:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_top << CAN_MO_MOFGPR_TOP_Pos) & (uint32_t)
 2305              	 .loc 2 707 0
 2306 003a 7A78     	 ldrb r2,[r7,#1]
 2307 003c 1202     	 lsls r2,r2,#8
 2308 003e 92B2     	 uxth r2,r2
 706:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2309              	 .loc 2 706 0
 2310 0040 0A43     	 orrs r2,r2,r1
 702:../Libraries/XMCLib/src/xmc_can.c ****                                                                   CAN_MO_MOFGPR_TOP_Msk |
 2311              	 .loc 2 702 0
 2312 0042 5A60     	 str r2,[r3,#4]
 708:../Libraries/XMCLib/src/xmc_can.c **** }
 2313              	 .loc 2 708 0
 2314 0044 0C37     	 adds r7,r7,#12
 2315              	.LCFI135:
 2316              	 .cfi_def_cfa_offset 4
 2317 0046 BD46     	 mov sp,r7
 2318              	.LCFI136:
 2319              	 .cfi_def_cfa_register 13
 2320              	 
 2321 0048 5DF8047B 	 ldr r7,[sp],#4
 2322              	.LCFI137:
 2323              	 .cfi_restore 7
 2324              	 .cfi_def_cfa_offset 0
 2325 004c 7047     	 bx lr
 2326              	 .cfi_endproc
 2327              	.LFE230:
 2329 004e 00BF     	 .section .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject,"ax",%progbits
 2330              	 .align 2
 2331              	 .global XMC_CAN_TXFIFO_ConfigMOSlaveObject
 2332              	 .thumb
 2333              	 .thumb_func
 2335              	XMC_CAN_TXFIFO_ConfigMOSlaveObject:
 2336              	.LFB231:
 709:../Libraries/XMCLib/src/xmc_can.c **** 
 710:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the FIFO MO slave object */
 711:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_TXFIFO_ConfigMOSlaveObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_FIFO_CONFIG_
 712:../Libraries/XMCLib/src/xmc_can.c **** {
 2337              	 .loc 2 712 0
 2338              	 .cfi_startproc
 2339              	 
 2340              	 
 2341              	 
 2342 0000 80B4     	 push {r7}
 2343              	.LCFI138:
 2344              	 .cfi_def_cfa_offset 4
 2345              	 .cfi_offset 7,-4
 2346 0002 83B0     	 sub sp,sp,#12
 2347              	.LCFI139:
 2348              	 .cfi_def_cfa_offset 16
 2349 0004 00AF     	 add r7,sp,#0
 2350              	.LCFI140:
 2351              	 .cfi_def_cfa_register 7
 2352 0006 7860     	 str r0,[r7,#4]
 2353 0008 3960     	 str r1,[r7]
 713:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR ) & ~(uint32_t)(CAN_MO_MOFCR_MMC_Msk)) |
 2354              	 .loc 2 713 0
 2355 000a 7B68     	 ldr r3,[r7,#4]
 2356 000c 1B68     	 ldr r3,[r3]
 2357 000e 7A68     	 ldr r2,[r7,#4]
 2358 0010 1268     	 ldr r2,[r2]
 2359 0012 1268     	 ldr r2,[r2]
 2360 0014 22F00F02 	 bic r2,r2,#15
 2361 0018 42F00302 	 orr r2,r2,#3
 2362 001c 1A60     	 str r2,[r3]
 714:../Libraries/XMCLib/src/xmc_can.c ****                               (((uint32_t)0x3U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 715:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = ((can_mo->can_mo_ptr->MOFGPR ) & ~(uint32_t)(CAN_MO_MOFGPR_CUR_Msk))
 2363              	 .loc 2 715 0
 2364 001e 7B68     	 ldr r3,[r7,#4]
 2365 0020 1B68     	 ldr r3,[r3]
 2366 0022 7A68     	 ldr r2,[r7,#4]
 2367 0024 1268     	 ldr r2,[r2]
 2368 0026 5268     	 ldr r2,[r2,#4]
 2369 0028 22F47F01 	 bic r1,r2,#16711680
 716:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2370              	 .loc 2 716 0
 2371 002c BA78     	 ldrb r2,[r7,#2]
 2372 002e 1204     	 lsls r2,r2,#16
 2373 0030 02F47F02 	 and r2,r2,#16711680
 715:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_fifo.fifo_base << CAN_MO_MOFGPR_CUR_Pos) & (uint32_t
 2374              	 .loc 2 715 0
 2375 0034 0A43     	 orrs r2,r2,r1
 2376 0036 5A60     	 str r2,[r3,#4]
 717:../Libraries/XMCLib/src/xmc_can.c **** 
 718:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOCTR  = CAN_MO_MOCTR_SETTXEN0_Msk|
 2377              	 .loc 2 718 0
 2378 0038 7B68     	 ldr r3,[r7,#4]
 2379 003a 1B68     	 ldr r3,[r3]
 2380 003c 034A     	 ldr r2,.L109
 2381 003e DA61     	 str r2,[r3,#28]
 719:../Libraries/XMCLib/src/xmc_can.c ****                                CAN_MO_MOCTR_RESTXEN1_Msk;
 720:../Libraries/XMCLib/src/xmc_can.c **** }
 2382              	 .loc 2 720 0
 2383 0040 0C37     	 adds r7,r7,#12
 2384              	.LCFI141:
 2385              	 .cfi_def_cfa_offset 4
 2386 0042 BD46     	 mov sp,r7
 2387              	.LCFI142:
 2388              	 .cfi_def_cfa_register 13
 2389              	 
 2390 0044 5DF8047B 	 ldr r7,[sp],#4
 2391              	.LCFI143:
 2392              	 .cfi_restore 7
 2393              	 .cfi_def_cfa_offset 0
 2394 0048 7047     	 bx lr
 2395              	.L110:
 2396 004a 00BF     	 .align 2
 2397              	.L109:
 2398 004c 00040002 	 .word 33555456
 2399              	 .cfi_endproc
 2400              	.LFE231:
 2402              	 .section .text.XMC_CAN_GATEWAY_InitSourceObject,"ax",%progbits
 2403              	 .align 2
 2404              	 .global XMC_CAN_GATEWAY_InitSourceObject
 2405              	 .thumb
 2406              	 .thumb_func
 2408              	XMC_CAN_GATEWAY_InitSourceObject:
 2409              	.LFB232:
 721:../Libraries/XMCLib/src/xmc_can.c **** 
 722:../Libraries/XMCLib/src/xmc_can.c **** /* Function to Initialize the Gateway Source Object */
 723:../Libraries/XMCLib/src/xmc_can.c **** void XMC_CAN_GATEWAY_InitSourceObject(const XMC_CAN_MO_t *const can_mo,const XMC_CAN_GATEWAY_CONFIG
 724:../Libraries/XMCLib/src/xmc_can.c **** {
 2410              	 .loc 2 724 0
 2411              	 .cfi_startproc
 2412              	 
 2413              	 
 2414              	 
 2415 0000 80B4     	 push {r7}
 2416              	.LCFI144:
 2417              	 .cfi_def_cfa_offset 4
 2418              	 .cfi_offset 7,-4
 2419 0002 85B0     	 sub sp,sp,#20
 2420              	.LCFI145:
 2421              	 .cfi_def_cfa_offset 24
 2422 0004 00AF     	 add r7,sp,#0
 2423              	.LCFI146:
 2424              	 .cfi_def_cfa_register 7
 2425 0006 F860     	 str r0,[r7,#12]
 2426 0008 3B1D     	 adds r3,r7,#4
 2427 000a 83E80600 	 stmia r3,{r1,r2}
 725:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFCR = (((uint32_t)0x4U << CAN_MO_MOFCR_MMC_Pos) & (uint32_t)CAN_MO_MOFCR_MM
 2428              	 .loc 2 725 0
 2429 000e FB68     	 ldr r3,[r7,#12]
 2430 0010 1B68     	 ldr r3,[r3]
 726:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 2431              	 .loc 2 726 0
 2432 0012 FA79     	 ldrb r2,[r7,#7]
 2433 0014 1202     	 lsls r2,r2,#8
 2434 0016 02F48071 	 and r1,r2,#256
 727:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 2435              	 .loc 2 727 0
 2436 001a 7A7A     	 ldrb r2,[r7,#9]
 2437 001c 9202     	 lsls r2,r2,#10
 2438 001e 02F48062 	 and r2,r2,#1024
 726:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 2439              	 .loc 2 726 0
 2440 0022 1143     	 orrs r1,r1,r2
 728:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 2441              	 .loc 2 728 0
 2442 0024 3A7A     	 ldrb r2,[r7,#8]
 2443 0026 5202     	 lsls r2,r2,#9
 2444 0028 02F40072 	 and r2,r2,#512
 727:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_length_code_copy) << CAN_MO_MOF
 2445              	 .loc 2 727 0
 2446 002c 1143     	 orrs r1,r1,r2
 729:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_copy) << CAN_MO_MOFCR_DATC_Pos)
 2447              	 .loc 2 729 0
 2448 002e BA7A     	 ldrb r2,[r7,#10]
 2449 0030 D202     	 lsls r2,r2,#11
 2450 0032 02F40062 	 and r2,r2,#2048
 728:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_identifier_copy) << CAN_MO_MOFCR_IDC
 2451              	 .loc 2 728 0
 2452 0036 0A43     	 orrs r2,r2,r1
 2453 0038 42F00402 	 orr r2,r2,#4
 725:../Libraries/XMCLib/src/xmc_can.c ****                               ((((uint32_t)can_gateway.gateway_data_frame_send) << CAN_MO_MOFCR_GDF
 2454              	 .loc 2 725 0
 2455 003c 1A60     	 str r2,[r3]
 730:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 2456              	 .loc 2 730 0
 2457 003e FB68     	 ldr r3,[r7,#12]
 2458 0040 1B68     	 ldr r3,[r3]
 2459 0042 3A79     	 ldrb r2,[r7,#4]
 2460 0044 1146     	 mov r1,r2
 731:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_base << CAN_MO_MOFGPR_CUR_Pos) & (ui
 2461              	 .loc 2 731 0
 2462 0046 BA79     	 ldrb r2,[r7,#6]
 2463 0048 1204     	 lsls r2,r2,#16
 2464 004a 02F47F02 	 and r2,r2,#16711680
 730:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 2465              	 .loc 2 730 0
 2466 004e 1143     	 orrs r1,r1,r2
 732:../Libraries/XMCLib/src/xmc_can.c ****                                (((uint32_t)can_gateway.gateway_top << CAN_MO_MOFGPR_TOP_Pos) & (uin
 2467              	 .loc 2 732 0
 2468 0050 7A79     	 ldrb r2,[r7,#5]
 2469 0052 1202     	 lsls r2,r2,#8
 2470 0054 92B2     	 uxth r2,r2
 730:../Libraries/XMCLib/src/xmc_can.c ****   can_mo->can_mo_ptr->MOFGPR = (uint32_t)((((uint32_t)can_gateway.gateway_bottom << CAN_MO_MOFGPR_B
 2471              	 .loc 2 730 0
 2472 0056 0A43     	 orrs r2,r2,r1
 2473 0058 5A60     	 str r2,[r3,#4]
 733:../Libraries/XMCLib/src/xmc_can.c **** }
 2474              	 .loc 2 733 0
 2475 005a 1437     	 adds r7,r7,#20
 2476              	.LCFI147:
 2477              	 .cfi_def_cfa_offset 4
 2478 005c BD46     	 mov sp,r7
 2479              	.LCFI148:
 2480              	 .cfi_def_cfa_register 13
 2481              	 
 2482 005e 5DF8047B 	 ldr r7,[sp],#4
 2483              	.LCFI149:
 2484              	 .cfi_restore 7
 2485              	 .cfi_def_cfa_offset 0
 2486 0062 7047     	 bx lr
 2487              	 .cfi_endproc
 2488              	.LFE232:
 2490              	 .text
 2491              	.Letext0:
 2492              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2493              	 .file 4 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2494              	 .file 5 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2495              	 .file 6 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc4_scu.h"
 2496              	 .file 7 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Include/core_cm4.h"
 2497              	 .file 8 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_can.c
    {standard input}:20     .text.XMC_CAN_PanelControl:00000000 $t
    {standard input}:24     .text.XMC_CAN_PanelControl:00000000 XMC_CAN_PanelControl
    {standard input}:85     .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 $t
    {standard input}:89     .text.XMC_CAN_NODE_EnableConfigurationChange:00000000 XMC_CAN_NODE_EnableConfigurationChange
    {standard input}:130    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 $t
    {standard input}:134    .text.XMC_CAN_NODE_DisableConfigurationChange:00000000 XMC_CAN_NODE_DisableConfigurationChange
    {standard input}:175    .text.max:00000000 $t
    {standard input}:179    .text.max:00000000 max
    {standard input}:223    .text.min:00000000 $t
    {standard input}:227    .text.min:00000000 min
    {standard input}:270    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 $t
    {standard input}:275    .text.XMC_CAN_NODE_NominalBitTimeConfigure:00000000 XMC_CAN_NODE_NominalBitTimeConfigure
    {standard input}:578    .text.XMC_CAN_NODE_NominalBitTimeConfigure:000001c0 $d
    {standard input}:583    .text.XMC_CAN_AllocateMOtoNodeList:00000000 $t
    {standard input}:588    .text.XMC_CAN_AllocateMOtoNodeList:00000000 XMC_CAN_AllocateMOtoNodeList
    {standard input}:640    .text.XMC_CAN_Disable:00000000 $t
    {standard input}:645    .text.XMC_CAN_Disable:00000000 XMC_CAN_Disable
    {standard input}:682    .text.XMC_CAN_Disable:0000001c $d
    {standard input}:687    .text.XMC_CAN_Enable:00000000 $t
    {standard input}:692    .text.XMC_CAN_Enable:00000000 XMC_CAN_Enable
    {standard input}:740    .text.XMC_CAN_Enable:00000030 $d
    {standard input}:745    .text.XMC_CAN_Init:00000000 $t
    {standard input}:750    .text.XMC_CAN_Init:00000000 XMC_CAN_Init
    {standard input}:889    .text.XMC_CAN_MO_SetIdentifier:00000000 $t
    {standard input}:894    .text.XMC_CAN_MO_SetIdentifier:00000000 XMC_CAN_MO_SetIdentifier
    {standard input}:974    .text.XMC_CAN_MO_GetIdentifier:00000000 $t
    {standard input}:979    .text.XMC_CAN_MO_GetIdentifier:00000000 XMC_CAN_MO_GetIdentifier
    {standard input}:1040   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 $t
    {standard input}:1045   .text.XMC_CAN_MO_GetAcceptanceMask:00000000 XMC_CAN_MO_GetAcceptanceMask
    {standard input}:1113   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 $t
    {standard input}:1118   .text.XMC_CAN_MO_SetAcceptanceMask:00000000 XMC_CAN_MO_SetAcceptanceMask
    {standard input}:1204   .text.XMC_CAN_MO_Config:00000000 $t
    {standard input}:1209   .text.XMC_CAN_MO_Config:00000000 XMC_CAN_MO_Config
    {standard input}:1397   .text.XMC_CAN_MO_UpdateData:00000000 XMC_CAN_MO_UpdateData
    {standard input}:1387   .text.XMC_CAN_MO_Config:0000010c $d
    {standard input}:1392   .text.XMC_CAN_MO_UpdateData:00000000 $t
    {standard input}:1488   .text.XMC_CAN_MO_UpdateData:0000006c $d
    {standard input}:1493   .text.XMC_CAN_MO_Transmit:00000000 $t
    {standard input}:1498   .text.XMC_CAN_MO_Transmit:00000000 XMC_CAN_MO_Transmit
    {standard input}:1580   .text.XMC_CAN_MO_ReceiveData:00000000 $t
    {standard input}:1585   .text.XMC_CAN_MO_ReceiveData:00000000 XMC_CAN_MO_ReceiveData
    {standard input}:1703   .text.XMC_CAN_MO_Receive:00000000 $t
    {standard input}:1708   .text.XMC_CAN_MO_Receive:00000000 XMC_CAN_MO_Receive
    {standard input}:1950   .text.XMC_CAN_MO_Receive:0000019c $d
    {standard input}:1955   .text.XMC_CAN_NODE_EnableEvent:00000000 $t
    {standard input}:1960   .text.XMC_CAN_NODE_EnableEvent:00000000 XMC_CAN_NODE_EnableEvent
    {standard input}:2017   .text.XMC_CAN_NODE_DisableEvent:00000000 $t
    {standard input}:2022   .text.XMC_CAN_NODE_DisableEvent:00000000 XMC_CAN_NODE_DisableEvent
    {standard input}:2081   .text.XMC_CAN_TXFIFO_Transmit:00000000 $t
    {standard input}:2086   .text.XMC_CAN_TXFIFO_Transmit:00000000 XMC_CAN_TXFIFO_Transmit
    {standard input}:2180   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2185   .text.XMC_CAN_TXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_TXFIFO_ConfigMOBaseObject
    {standard input}:2255   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 $t
    {standard input}:2260   .text.XMC_CAN_RXFIFO_ConfigMOBaseObject:00000000 XMC_CAN_RXFIFO_ConfigMOBaseObject
    {standard input}:2330   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 $t
    {standard input}:2335   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:00000000 XMC_CAN_TXFIFO_ConfigMOSlaveObject
    {standard input}:2398   .text.XMC_CAN_TXFIFO_ConfigMOSlaveObject:0000004c $d
    {standard input}:2403   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 $t
    {standard input}:2408   .text.XMC_CAN_GATEWAY_InitSourceObject:00000000 XMC_CAN_GATEWAY_InitSourceObject
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_CLOCK_GetPeripheralClockFrequency

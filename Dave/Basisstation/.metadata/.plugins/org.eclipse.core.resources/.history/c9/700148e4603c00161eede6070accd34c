
Basisstation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001680  08000000  0c000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 Stack         00000800  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000004  20000000  0c001680  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  20000004  0c001684  00010004  2**0
                  ALLOC
  4 .no_init      00000014  2000ffc0  2000ffc0  00017fc0  2**2
                  ALLOC
  5 .debug_aranges 000006a0  00000000  00000000  00010008  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000636a  00000000  00000000  000106a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001206  00000000  00000000  00016a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000273e  00000000  00000000  00017c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b08  00000000  00000000  0001a358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000448b  00000000  00000000  0001be60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003760  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  00023a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .build_attributes 000002eb  00000000  00000000  0002400b  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 08 00 10 01 02 00 08 b1 02 00 08 b1 02 00 08     ................
 8000010:	b1 02 00 08 b1 02 00 08 b1 02 00 08 00 00 00 00     ................
	...
 800002c:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800003c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800004c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800005c:	b1 02 00 08 b1 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 800007c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800008c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800009c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000dc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000ec:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80000fc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800010c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800011c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800012c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800013c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800014c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800015c:	b1 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800017c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800018c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 800019c:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ac:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001bc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001cc:	b1 02 00 08 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001dc:	00 00 00 00 b1 02 00 08 b1 02 00 08 b1 02 00 08     ................
 80001ec:	b1 02 00 08 b1 02 00 08 00 00 00 00 b1 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000200:	f8df d08c 	ldr.w	sp, [pc, #140]	; 8000290 <__zero_table_end__>

	.align	1
    .thumb
 8000204:	4823      	ldr	r0, [pc, #140]	; (8000294 <__zero_table_end__+0x4>)

 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c23      	ldr	r4, [pc, #140]	; (8000298 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d24      	ldr	r5, [pc, #144]	; (800029c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b1e      	ldr	r3, [pc, #120]	; (80002a0 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c1f      	ldr	r4, [pc, #124]	; (80002a4 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	481a      	ldr	r0, [pc, #104]	; (80002a8 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	481a      	ldr	r0, [pc, #104]	; (80002ac <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c001680 	.word	0x0c001680
 800024c:	20000000 	.word	0x20000000
 8000250:	00000004 	.word	0x00000004
 8000254:	0c001684 	.word	0x0c001684
 8000258:	30000000 	.word	0x30000000
 800025c:	00000000 	.word	0x00000000
 8000260:	0c001680 	.word	0x0c001680
 8000264:	10000800 	.word	0x10000800
 8000268:	00000000 	.word	0x00000000
 800026c:	0c001680 	.word	0x0c001680
 8000270:	10000800 	.word	0x10000800
 8000274:	00000000 	.word	0x00000000

08000278 <__copy_table_end__>:
 8000278:	20000004 	.word	0x20000004
 800027c:	00000000 	.word	0x00000000
 8000280:	30000000 	.word	0x30000000
 8000284:	00000000 	.word	0x00000000
 8000288:	10000800 	.word	0x10000800
 800028c:	00000000 	.word	0x00000000

08000290 <__zero_table_end__>:
    .long   0                           /* Not Available                 */

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */
 8000290:	10000800 	.word	0x10000800

	.align	1
    .thumb
 8000294:	080002dd 	.word	0x080002dd
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000298:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800029c:	08000278 	.word	0x08000278
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 80002a0:	08000278 	.word	0x08000278
	ldr	r4, =__zero_table_end__
 80002a4:	08000290 	.word	0x08000290
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 80002a8:	0800162d 	.word	0x0800162d
    blx  r0
#endif

    ldr  r0, =main
 80002ac:	08001341 	.word	0x08001341

080002b0 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 80002b0:	e7fe      	b.n	80002b0 <BusFault_Handler>
	...

080002b4 <delay>:

/*******************************************************************************
 * LOCAL FUNCTIONS
 *******************************************************************************/
static void delay(uint32_t cycles)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b085      	sub	sp, #20
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for(i = 0UL; i < cycles ;++i)
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e003      	b.n	80002ca <delay+0x16>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80002c2:	bf00      	nop
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fa      	ldr	r2, [r7, #12]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d3f7      	bcc.n	80002c2 <delay+0xe>
  {
    __NOP();
  }
}
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80002dc:	b598      	push	{r3, r4, r7, lr}
 80002de:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002e0:	4a05      	ldr	r2, [pc, #20]	; (80002f8 <SystemInit+0x1c>)
 80002e2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002e6:	4614      	mov	r4, r2
 80002e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  SystemCoreSetup();
 80002ee:	f000 f805 	bl	80002fc <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002f2:	f000 f83b 	bl	800036c <SystemCoreClockSetup>
}
 80002f6:	bd98      	pop	{r3, r4, r7, pc}
 80002f8:	2000ffc4 	.word	0x2000ffc4

080002fc <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000302:	b672      	cpsid	i
  uint32_t temp;
	
  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <SystemCoreSetup+0x64>)
 8000306:	4a17      	ldr	r2, [pc, #92]	; (8000364 <SystemCoreSetup+0x68>)
 8000308:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800030a:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800030e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
    
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <SystemCoreSetup+0x64>)
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <SystemCoreSetup+0x64>)
 8000314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800031c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <SystemCoreSetup+0x64>)
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <SystemCoreSetup+0x64>)
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800032c:	4b0e      	ldr	r3, [pc, #56]	; (8000368 <SystemCoreSetup+0x6c>)
 800032e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000332:	3314      	adds	r3, #20
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f023 030f 	bic.w	r3, r3, #15
 800033e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	f043 0303 	orr.w	r3, r3, #3
 8000346:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000348:	4b07      	ldr	r3, [pc, #28]	; (8000368 <SystemCoreSetup+0x6c>)
 800034a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800034e:	3314      	adds	r3, #20
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	08000000 	.word	0x08000000
 8000368:	58001000 	.word	0x58001000

0800036c <SystemCoreClockSetup>:

__WEAK void SystemCoreClockSetup(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
#else
  /* Automatic calibration uses the fSTDBY */

  /* Enable HIB domain */
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000370:	4b74      	ldr	r3, [pc, #464]	; (8000544 <SystemCoreClockSetup+0x1d8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 0301 	and.w	r3, r3, #1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d10c      	bne.n	8000396 <SystemCoreClockSetup+0x2a>
  {
    SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 800037c:	4a71      	ldr	r2, [pc, #452]	; (8000544 <SystemCoreClockSetup+0x1d8>)
 800037e:	4b71      	ldr	r3, [pc, #452]	; (8000544 <SystemCoreClockSetup+0x1d8>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6053      	str	r3, [r2, #4]

    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 8000388:	bf00      	nop
 800038a:	4b6e      	ldr	r3, [pc, #440]	; (8000544 <SystemCoreClockSetup+0x1d8>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f003 0301 	and.w	r3, r3, #1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d0f9      	beq.n	800038a <SystemCoreClockSetup+0x1e>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000396:	4b6c      	ldr	r3, [pc, #432]	; (8000548 <SystemCoreClockSetup+0x1dc>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d009      	beq.n	80003b6 <SystemCoreClockSetup+0x4a>
  {
    SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 80003a2:	4a69      	ldr	r2, [pc, #420]	; (8000548 <SystemCoreClockSetup+0x1dc>)
 80003a4:	4b68      	ldr	r3, [pc, #416]	; (8000548 <SystemCoreClockSetup+0x1dc>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ac:	6093      	str	r3, [r2, #8]
    delay(DELAY_CNT_150US_50MHZ);
 80003ae:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80003b2:	f7ff ff7f 	bl	80002b4 <delay>
  SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;

#endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */

  /* Enable automatic calibration of internal fast oscillator */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 80003b6:	4a65      	ldr	r2, [pc, #404]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80003b8:	4b64      	ldr	r3, [pc, #400]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003c0:	6053      	str	r3, [r2, #4]
#endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */

  delay(DELAY_CNT_50US_50MHZ);
 80003c2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80003c6:	f7ff ff75 	bl	80002b4 <delay>

#if ENABLE_PLL

  /* enable PLL */
  SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80003ca:	4a60      	ldr	r2, [pc, #384]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80003cc:	4b5f      	ldr	r3, [pc, #380]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d4:	f023 0302 	bic.w	r3, r3, #2
 80003d8:	6053      	str	r3, [r2, #4]

#if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
  /* enable OSC_HP */
  if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 80003da:	4b5d      	ldr	r3, [pc, #372]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 80003dc:	685b      	ldr	r3, [r3, #4]
 80003de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d027      	beq.n	8000436 <SystemCoreClockSetup+0xca>
  {
    SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Pos);
 80003e6:	4a5a      	ldr	r2, [pc, #360]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 80003e8:	4b59      	ldr	r3, [pc, #356]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80003f0:	6053      	str	r3, [r2, #4]
    SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 80003f2:	f000 f927 	bl	8000644 <OSCHP_GetFrequency>
 80003f6:	4602      	mov	r2, r0
 80003f8:	4b56      	ldr	r3, [pc, #344]	; (8000554 <SystemCoreClockSetup+0x1e8>)
 80003fa:	fba3 2302 	umull	r2, r3, r3, r2
 80003fe:	0d1b      	lsrs	r3, r3, #20
 8000400:	3b01      	subs	r3, #1
 8000402:	041b      	lsls	r3, r3, #16
 8000404:	4952      	ldr	r1, [pc, #328]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 8000406:	4a52      	ldr	r2, [pc, #328]	; (8000550 <SystemCoreClockSetup+0x1e4>)
 8000408:	6852      	ldr	r2, [r2, #4]
 800040a:	4313      	orrs	r3, r2
 800040c:	604b      	str	r3, [r1, #4]

    /* select OSC_HP clock as PLL input */
    SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 800040e:	4a4f      	ldr	r2, [pc, #316]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000410:	4b4e      	ldr	r3, [pc, #312]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000412:	68db      	ldr	r3, [r3, #12]
 8000414:	f023 0301 	bic.w	r3, r3, #1
 8000418:	60d3      	str	r3, [r2, #12]

    /* restart OSC Watchdog */
    SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 800041a:	4a4c      	ldr	r2, [pc, #304]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800041c:	4b4b      	ldr	r3, [pc, #300]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000424:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 8000426:	bf00      	nop
 8000428:	4b48      	ldr	r3, [pc, #288]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000430:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000434:	d1f8      	bne.n	8000428 <SystemCoreClockSetup+0xbc>
  /* select backup clock as PLL input */
  SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
#endif

  /* Go to bypass the Main PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000436:	4a45      	ldr	r2, [pc, #276]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000438:	4b44      	ldr	r3, [pc, #272]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	6053      	str	r3, [r2, #4]

  /* disconnect Oscillator from PLL */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 8000442:	4a42      	ldr	r2, [pc, #264]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000444:	4b41      	ldr	r3, [pc, #260]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	f043 0310 	orr.w	r3, r3, #16
 800044c:	6053      	str	r3, [r2, #4]

  /* Setup divider settings for main PLL */
  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 800044e:	4b3f      	ldr	r3, [pc, #252]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000450:	4a41      	ldr	r2, [pc, #260]	; (8000558 <SystemCoreClockSetup+0x1ec>)
 8000452:	609a      	str	r2, [r3, #8]
                      (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
                      (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000454:	4a3d      	ldr	r2, [pc, #244]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000456:	4b3d      	ldr	r3, [pc, #244]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800045e:	6053      	str	r3, [r2, #4]

  /* connect Oscillator to PLL */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000460:	4a3a      	ldr	r2, [pc, #232]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000462:	4b3a      	ldr	r3, [pc, #232]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	f023 0310 	bic.w	r3, r3, #16
 800046a:	6053      	str	r3, [r2, #4]

  /* restart PLL Lock detection */
  SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 800046c:	4a37      	ldr	r2, [pc, #220]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800046e:	4b37      	ldr	r3, [pc, #220]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000476:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000478:	bf00      	nop
 800047a:	4b34      	ldr	r3, [pc, #208]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f003 0304 	and.w	r3, r3, #4
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f9      	beq.n	800047a <SystemCoreClockSetup+0x10e>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000486:	4a31      	ldr	r2, [pc, #196]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000488:	4b30      	ldr	r3, [pc, #192]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	f023 0301 	bic.w	r3, r3, #1
 8000490:	6053      	str	r3, [r2, #4]
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000492:	bf00      	nop
 8000494:	4b2d      	ldr	r3, [pc, #180]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	2b00      	cmp	r3, #0
 800049e:	d1f9      	bne.n	8000494 <SystemCoreClockSetup+0x128>
  }
#endif /* ENABLE_PLL */

#if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
  /* Switch system clock to PLL */
  SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 80004a0:	4a2e      	ldr	r2, [pc, #184]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004a2:	4b2e      	ldr	r3, [pc, #184]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004aa:	60d3      	str	r3, [r2, #12]
  /* Switch system clock to backup clock */
  SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
#endif

  /* Before scaling to final frequency we need to setup the clock dividers */
  SCU_CLK->PBCLKCR = PBCLKDIV;
 80004ac:	4b2b      	ldr	r3, [pc, #172]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	615a      	str	r2, [r3, #20]
  SCU_CLK->CPUCLKCR = CPUCLKDIV;
 80004b2:	4b2a      	ldr	r3, [pc, #168]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
  SCU_CLK->CCUCLKCR = CCUCLKDIV;
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	621a      	str	r2, [r3, #32]
  SCU_CLK->WDTCLKCR = WDTCLKDIV;
 80004be:	4b27      	ldr	r3, [pc, #156]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
  SCU_CLK->EBUCLKCR = EBUCLKDIV;
 80004c4:	4b25      	ldr	r3, [pc, #148]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
  SCU_CLK->USBCLKCR = USBCLKDIV;
 80004ca:	4b24      	ldr	r3, [pc, #144]	; (800055c <SystemCoreClockSetup+0x1f0>)
 80004cc:	2203      	movs	r2, #3
 80004ce:	619a      	str	r2, [r3, #24]

#if ENABLE_PLL
  /* PLL frequency stepping...*/
  /* Reset OSCDISCDIS */
  SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 80004d0:	4a1e      	ldr	r2, [pc, #120]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80004d2:	4b1e      	ldr	r3, [pc, #120]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004da:	6053      	str	r3, [r2, #4]

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80004de:	4a20      	ldr	r2, [pc, #128]	; (8000560 <SystemCoreClockSetup+0x1f4>)
 80004e0:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_60MHZ);
 80004e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80004e6:	f7ff fee5 	bl	80002b4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 80004ea:	bf00      	nop
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d0f9      	beq.n	80004ec <SystemCoreClockSetup+0x180>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <SystemCoreClockSetup+0x1e0>)
 80004fa:	4a1a      	ldr	r2, [pc, #104]	; (8000564 <SystemCoreClockSetup+0x1f8>)
 80004fc:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_90MHZ);
 80004fe:	f241 1094 	movw	r0, #4500	; 0x1194
 8000502:	f7ff fed7 	bl	80002b4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000506:	bf00      	nop
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <SystemCoreClockSetup+0x1e0>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	2b00      	cmp	r3, #0
 8000512:	d0f9      	beq.n	8000508 <SystemCoreClockSetup+0x19c>
  {
    /* wait for PLL Lock */
  }

  SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <SystemCoreClockSetup+0x1fc>)
 8000518:	609a      	str	r2, [r3, #8]
	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));


  delay(DELAY_CNT_50US_120MHZ);
 800051a:	f241 7070 	movw	r0, #6000	; 0x1770
 800051e:	f7ff fec9 	bl	80002b4 <delay>
  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000522:	bf00      	nop
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <SystemCoreClockSetup+0x1e0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0f9      	beq.n	8000524 <SystemCoreClockSetup+0x1b8>
  {
    /* wait for PLL Lock */
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000530:	4b0e      	ldr	r3, [pc, #56]	; (800056c <SystemCoreClockSetup+0x200>)
 8000532:	2205      	movs	r2, #5
 8000534:	60da      	str	r2, [r3, #12]
    /* wait for PLL Lock */
  }
#endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */

  /* Enable selected clocks */
  SCU_CLK->CLKSET = ENABLE_SCUCLK;
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <SystemCoreClockSetup+0x1f0>)
 8000538:	2200      	movs	r2, #0
 800053a:	605a      	str	r2, [r3, #4]
  PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
#endif

#endif  /* ENABLE_EXTCLK == 1  */

  SystemCoreClockUpdate();
 800053c:	f000 f818 	bl	8000570 <SystemCoreClockUpdate>
}
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	50004200 	.word	0x50004200
 8000548:	50004400 	.word	0x50004400
 800054c:	50004710 	.word	0x50004710
 8000550:	50004700 	.word	0x50004700
 8000554:	6b5fca6b 	.word	0x6b5fca6b
 8000558:	01134f00 	.word	0x01134f00
 800055c:	50004600 	.word	0x50004600
 8000560:	01074f00 	.word	0x01074f00
 8000564:	01044f00 	.word	0x01044f00
 8000568:	01034f00 	.word	0x01034f00
 800056c:	50004160 	.word	0x50004160

08000570 <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000576:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <SystemCoreClockUpdate+0xc4>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800057e:	2b00      	cmp	r3, #0
 8000580:	d03e      	beq.n	8000600 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8000582:	4b2d      	ldr	r3, [pc, #180]	; (8000638 <SystemCoreClockUpdate+0xc8>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <SystemCoreClockUpdate+0xcc>)
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	e002      	b.n	800059a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8000594:	f000 f856 	bl	8000644 <OSCHP_GetFrequency>
 8000598:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 800059a:	4b27      	ldr	r3, [pc, #156]	; (8000638 <SystemCoreClockUpdate+0xc8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d020      	beq.n	80005e8 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80005a6:	4b24      	ldr	r3, [pc, #144]	; (8000638 <SystemCoreClockUpdate+0xc8>)
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80005ae:	0e1b      	lsrs	r3, r3, #24
 80005b0:	3301      	adds	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <SystemCoreClockUpdate+0xc8>)
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80005c2:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <SystemCoreClockUpdate+0xc8>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80005ca:	0c1b      	lsrs	r3, r3, #16
 80005cc:	3301      	adds	r3, #1
 80005ce:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	683a      	ldr	r2, [r7, #0]
 80005d4:	fb02 f303 	mul.w	r3, r2, r3
 80005d8:	68fa      	ldr	r2, [r7, #12]
 80005da:	fbb2 f3f3 	udiv	r3, r2, r3
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e00d      	b.n	8000604 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <SystemCoreClockUpdate+0xc8>)
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f0:	3301      	adds	r3, #1
 80005f2:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	e001      	b.n	8000604 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8000600:	4b0e      	ldr	r3, [pc, #56]	; (800063c <SystemCoreClockUpdate+0xcc>)
 8000602:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <SystemCoreClockUpdate+0xc4>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	b2db      	uxtb	r3, r3
 800060a:	3301      	adds	r3, #1
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000612:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <SystemCoreClockUpdate+0xc4>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	3301      	adds	r3, #1
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	fbb2 f3f3 	udiv	r3, r2, r3
 8000624:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <SystemCoreClockUpdate+0xd0>)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	6013      	str	r3, [r2, #0]
}
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	50004600 	.word	0x50004600
 8000638:	50004710 	.word	0x50004710
 800063c:	016e3600 	.word	0x016e3600
 8000640:	2000ffc0 	.word	0x2000ffc0

08000644 <OSCHP_GetFrequency>:

__WEAK uint32_t OSCHP_GetFrequency(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return OSCHP_FREQUENCY;
 8000648:	4b02      	ldr	r3, [pc, #8]	; (8000654 <OSCHP_GetFrequency+0x10>)
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	00b71b00 	.word	0x00b71b00

08000658 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	460b      	mov	r3, r1
 8000662:	607a      	str	r2, [r7, #4]
 8000664:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
 
  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8000666:	7afb      	ldrb	r3, [r7, #11]
 8000668:	089b      	lsrs	r3, r3, #2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	7afb      	ldrb	r3, [r7, #11]
 8000670:	089b      	lsrs	r3, r3, #2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	461a      	mov	r2, r3
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	3204      	adds	r2, #4
 800067a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800067e:	7afb      	ldrb	r3, [r7, #11]
 8000680:	f003 0303 	and.w	r3, r3, #3
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4619      	mov	r1, r3
 8000688:	23f8      	movs	r3, #248	; 0xf8
 800068a:	408b      	lsls	r3, r1
 800068c:	43db      	mvns	r3, r3
 800068e:	ea02 0103 	and.w	r1, r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	1d02      	adds	r2, r0, #4
 8000696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800069e:	7afb      	ldrb	r3, [r7, #11]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4619      	mov	r1, r3
 80006a4:	2303      	movs	r3, #3
 80006a6:	408b      	lsls	r3, r1
 80006a8:	43db      	mvns	r3, r3
 80006aa:	401a      	ands	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a37      	ldr	r2, [pc, #220]	; (8000790 <XMC_GPIO_Init+0x138>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d003      	beq.n	80006c0 <XMC_GPIO_Init+0x68>
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4a36      	ldr	r2, [pc, #216]	; (8000794 <XMC_GPIO_Init+0x13c>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d10a      	bne.n	80006d6 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	2101      	movs	r1, #1
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	401a      	ands	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	661a      	str	r2, [r3, #96]	; 0x60
 80006d4:	e03c      	b.n	8000750 <XMC_GPIO_Init+0xf8>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685a      	ldr	r2, [r3, #4]
 80006da:	7afb      	ldrb	r3, [r7, #11]
 80006dc:	409a      	lsls	r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80006e2:	7afb      	ldrb	r3, [r7, #11]
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	7afb      	ldrb	r3, [r7, #11]
 80006ec:	08db      	lsrs	r3, r3, #3
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	3210      	adds	r2, #16
 80006f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006fa:	7afb      	ldrb	r3, [r7, #11]
 80006fc:	f003 0307 	and.w	r3, r3, #7
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4619      	mov	r1, r3
 8000704:	2307      	movs	r3, #7
 8000706:	408b      	lsls	r3, r1
 8000708:	43db      	mvns	r3, r3
 800070a:	ea02 0103 	and.w	r1, r2, r3
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f100 0210 	add.w	r2, r0, #16
 8000714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000718:	7afb      	ldrb	r3, [r7, #11]
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	4618      	mov	r0, r3
 8000720:	7afb      	ldrb	r3, [r7, #11]
 8000722:	08db      	lsrs	r3, r3, #3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	461a      	mov	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3210      	adds	r2, #16
 800072c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7a1b      	ldrb	r3, [r3, #8]
 8000734:	4619      	mov	r1, r3
 8000736:	7afb      	ldrb	r3, [r7, #11]
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	ea42 0103 	orr.w	r1, r2, r3
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	f100 0210 	add.w	r2, r0, #16
 800074c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000750:	7afb      	ldrb	r3, [r7, #11]
 8000752:	089b      	lsrs	r3, r3, #2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4618      	mov	r0, r3
 8000758:	7afb      	ldrb	r3, [r7, #11]
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3204      	adds	r2, #4
 8000764:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	7afb      	ldrb	r3, [r7, #11]
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	ea42 0103 	orr.w	r1, r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1d02      	adds	r2, r0, #4
 8000782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	48028e00 	.word	0x48028e00
 8000794:	48028f00 	.word	0x48028f00

08000798 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000ffc0 	.word	0x2000ffc0

080007b0 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	0f1b      	lsrs	r3, r3, #28
 80007bc:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80007c4:	60bb      	str	r3, [r7, #8]

  *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b04      	ldr	r3, [pc, #16]	; (80007e4 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80007d4:	4413      	add	r3, r2
 80007d6:	68ba      	ldr	r2, [r7, #8]
 80007d8:	601a      	str	r2, [r3, #0]
}
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	50004414 	.word	0x50004414

080007e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80007ec:	f7ff ffd4 	bl	8000798 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80007f0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80007f4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	50004600 	.word	0x50004600

08000808 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
 8000814:	4613      	mov	r3, r2
 8000816:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8000818:	78fb      	ldrb	r3, [r7, #3]
 800081a:	089b      	lsrs	r3, r3, #2
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3204      	adds	r2, #4
 800082c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	f003 0303 	and.w	r3, r3, #3
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	4619      	mov	r1, r3
 800083a:	23f8      	movs	r3, #248	; 0xf8
 800083c:	408b      	lsls	r3, r1
 800083e:	43db      	mvns	r3, r3
 8000840:	ea02 0103 	and.w	r1, r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1d02      	adds	r2, r0, #4
 8000848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	089b      	lsrs	r3, r3, #2
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	78fb      	ldrb	r3, [r7, #3]
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	461a      	mov	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3204      	adds	r2, #4
 8000860:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000864:	78bb      	ldrb	r3, [r7, #2]
 8000866:	78f9      	ldrb	r1, [r7, #3]
 8000868:	f001 0103 	and.w	r1, r1, #3
 800086c:	00c9      	lsls	r1, r1, #3
 800086e:	408b      	lsls	r3, r1
 8000870:	ea42 0103 	orr.w	r1, r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	1d02      	adds	r2, r0, #4
 8000878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800089a:	b2db      	uxtb	r3, r3
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	431a      	orrs	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 f8a4 	bl	8000a20 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d106      	bne.n	80008ee <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	4619      	mov	r1, r3
 80008e8:	2202      	movs	r2, #2
 80008ea:	f000 f8e5 	bl	8000ab8 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <XMC_SPI_CH_Init+0x64>)
 80008f2:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80008fa:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	791b      	ldrb	r3, [r3, #4]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d107      	bne.n	8000914 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8000908:	f043 030b 	orr.w	r3, r3, #11
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f04f 32ff 	mov.w	r2, #4294967295
 800091a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	88db      	ldrh	r3, [r3, #6]
 8000920:	461a      	mov	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	073f0102 	.word	0x073f0102

08000930 <XMC_SPI_CH_EnableSlaveSelect>:
  return status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800093e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	431a      	orrs	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <XMC_SPI_CH_DisableSlaveSelect>:

/* Disable the slave signals by clearing (SELO) bits in PCR register. */
void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	2101      	movs	r1, #1
 8000968:	f7ff ff9e 	bl	80008a8 <XMC_SPI_CH_ClearStatusFlag>
  
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000970:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop

08000980 <XMC_SPI_CH_Transmit>:

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
 800098c:	4613      	mov	r3, r2
 800098e:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8000998:	787b      	ldrb	r3, [r7, #1]
 800099a:	019b      	lsls	r3, r3, #6
 800099c:	b2db      	uxtb	r3, r3

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80009aa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d112      	bne.n	80009d8 <XMC_SPI_CH_Transmit+0x58>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80009b2:	bf00      	nop
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff67 	bl	8000888 <XMC_USIC_CH_GetTransmitBufferStatus>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b80      	cmp	r3, #128	; 0x80
 80009be:	d0f9      	beq.n	80009b4 <XMC_SPI_CH_Transmit+0x34>
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	f7ff ff6f 	bl	80008a8 <XMC_SPI_CH_ClearStatusFlag>
  
    channel->TBUF[mode] = data;
 80009ca:	787a      	ldrb	r2, [r7, #1]
 80009cc:	8879      	ldrh	r1, [r7, #2]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3220      	adds	r2, #32
 80009d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80009d6:	e005      	b.n	80009e4 <XMC_SPI_CH_Transmit+0x64>
  }
  else
  {
    channel->IN[mode] = data;
 80009d8:	787a      	ldrb	r2, [r7, #1]
 80009da:	8879      	ldrh	r1, [r7, #2]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3260      	adds	r2, #96	; 0x60
 80009e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop

080009ec <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80009fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d103      	bne.n	8000a0a <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a06:	81fb      	strh	r3, [r7, #14]
 8000a08:	e003      	b.n	8000a12 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8000a10:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8000a12:	89fb      	ldrh	r3, [r7, #14]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <XMC_USIC_CH_Enable+0x74>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d003      	beq.n	8000a38 <XMC_USIC_CH_Enable+0x18>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <XMC_USIC_CH_Enable+0x78>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d103      	bne.n	8000a40 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <XMC_USIC_CH_Enable+0x7c>)
 8000a3a:	f000 f8d7 	bl	8000bec <XMC_USIC_Enable>
 8000a3e:	e016      	b.n	8000a6e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a17      	ldr	r2, [pc, #92]	; (8000aa0 <XMC_USIC_CH_Enable+0x80>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d003      	beq.n	8000a50 <XMC_USIC_CH_Enable+0x30>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <XMC_USIC_CH_Enable+0x84>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d103      	bne.n	8000a58 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <XMC_USIC_CH_Enable+0x88>)
 8000a52:	f000 f8cb 	bl	8000bec <XMC_USIC_Enable>
 8000a56:	e00a      	b.n	8000a6e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a14      	ldr	r2, [pc, #80]	; (8000aac <XMC_USIC_CH_Enable+0x8c>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d003      	beq.n	8000a68 <XMC_USIC_CH_Enable+0x48>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <XMC_USIC_CH_Enable+0x90>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d102      	bne.n	8000a6e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <XMC_USIC_CH_Enable+0x94>)
 8000a6a:	f000 f8bf 	bl	8000bec <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2203      	movs	r2, #3
 8000a72:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8000a74:	bf00      	nop
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f9      	beq.n	8000a76 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f023 020f 	bic.w	r2, r3, #15
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40030000 	.word	0x40030000
 8000a98:	40030200 	.word	0x40030200
 8000a9c:	40030008 	.word	0x40030008
 8000aa0:	48020000 	.word	0x48020000
 8000aa4:	48020200 	.word	0x48020200
 8000aa8:	48020008 	.word	0x48020008
 8000aac:	48024000 	.word	0x48024000
 8000ab0:	48024200 	.word	0x48024200
 8000ab4:	48024008 	.word	0x48024008

08000ab8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	; 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b63      	cmp	r3, #99	; 0x63
 8000ac8:	d958      	bls.n	8000b7c <XMC_USIC_CH_SetBaudrate+0xc4>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d055      	beq.n	8000b7c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8000ad0:	f7ff fe8a 	bl	80007e8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8000ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8000adc:	095b      	lsrs	r3, r3, #5
 8000ade:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4a2b      	ldr	r2, [pc, #172]	; (8000b90 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8000ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae8:	095b      	lsrs	r3, r3, #5
 8000aea:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8000af4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000afa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8000afe:	633b      	str	r3, [r7, #48]	; 0x30
 8000b00:	e022      	b.n	8000b48 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b06:	fb02 f203 	mul.w	r2, r2, r3
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	6879      	ldr	r1, [r7, #4]
 8000b0e:	fb01 f303 	mul.w	r3, r1, r3
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	0a9b      	lsrs	r3, r3, #10
 8000b1c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b24:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b2c:	d209      	bcs.n	8000b42 <XMC_USIC_CH_SetBaudrate+0x8a>
 8000b2e:	697a      	ldr	r2, [r7, #20]
 8000b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d205      	bcs.n	8000b42 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8000b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8000b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b44:	3b01      	subs	r3, #1
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
 8000b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1d9      	bne.n	8000b02 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8000b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b50:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8000b5e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	3a01      	subs	r2, #1
 8000b64:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8000b66:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8000b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8000b6e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000b7a:	e002      	b.n	8000b82 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8000b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	51eb851f 	.word	0x51eb851f
 8000b94:	fc0080ef 	.word	0xfc0080ef

08000b98 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000bae:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8000bc0:	4013      	ands	r3, r2
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	0211      	lsls	r1, r2, #8
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8000bca:	79fa      	ldrb	r2, [r7, #7]
 8000bcc:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                                                            USIC_CH_RBCTR_DPTR_Msk |
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8000bce:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                                                            USIC_CH_RBCTR_LOF_Msk)) |
                   ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                   (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	efffc0c0 	.word	0xefffc0c0

08000bec <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                   (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <XMC_USIC_Enable+0x40>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d104      	bne.n	8000c06 <XMC_USIC_Enable+0x1a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8000bfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000c00:	f7ff fdd6 	bl	80007b0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000c04:	e00e      	b.n	8000c24 <XMC_USIC_Enable+0x38>
#endif	
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <XMC_USIC_Enable+0x44>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d103      	bne.n	8000c16 <XMC_USIC_Enable+0x2a>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
#endif	
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <XMC_USIC_Enable+0x48>)
 8000c10:	f7ff fdce 	bl	80007b0 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000c14:	e006      	b.n	8000c24 <XMC_USIC_Enable+0x38>
#endif	
  }
#endif  
#if defined(USIC2)  
  else if (usic == USIC2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <XMC_USIC_Enable+0x4c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d102      	bne.n	8000c24 <XMC_USIC_Enable+0x38>
  {
#if defined(CLOCK_GATING_SUPPORTED) 
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <XMC_USIC_Enable+0x50>)
 8000c20:	f7ff fdc6 	bl	80007b0 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40030008 	.word	0x40030008
 8000c30:	48020008 	.word	0x48020008
 8000c34:	10000080 	.word	0x10000080
 8000c38:	48024008 	.word	0x48024008
 8000c3c:	10000100 	.word	0x10000100

08000c40 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000c50:	78f8      	ldrb	r0, [r7, #3]
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	3306      	adds	r3, #6
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8000c62:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8000c64:	431a      	orrs	r2, r3
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	1d83      	adds	r3, r0, #6
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop

08000c7c <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c8c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8000c96:	431a      	orrs	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bf14      	ite	ne
 8000cbe:	2301      	movne	r3, #1
 8000cc0:	2300      	moveq	r3, #0
 8000cc2:	b2db      	uxtb	r3, r3
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8000ce6:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	f023 020f 	bic.w	r2, r3, #15
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop

08000d24 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	2101      	movs	r1, #1
 8000d30:	f7ff ffe4 	bl	8000cfc <XMC_USIC_CH_SetMode>
}
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop

08000d3c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d48:	f043 0201 	orr.w	r2, r3, #1
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <XMC_SPI_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_ClearStatusFlag()
 */
__STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  return channel->PSR_SSCMode;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	f7ff ff93 	bl	8000cd0 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	460b      	mov	r3, r1
 8000dba:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f7ff ff5b 	bl	8000c7c <XMC_USIC_CH_SetWordLength>
}
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8000ddc:	78f8      	ldrb	r0, [r7, #3]
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	3306      	adds	r3, #6
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	4413      	add	r3, r2
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000dee:	f043 0210 	orr.w	r2, r3, #16
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	1d83      	adds	r3, r0, #6
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8000dfc:	78fa      	ldrb	r2, [r7, #3]
 8000dfe:	78bb      	ldrb	r3, [r7, #2]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	4611      	mov	r1, r2
 8000e04:	461a      	mov	r2, r3
 8000e06:	f7ff ff1b 	bl	8000c40 <XMC_USIC_CH_SetInputSource>
}
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <spi_init>:
#include "spi.h"
#include "portmakros.h"

XMC_USIC_CH_t *spi_master_ch = SPI_CHANNEL;

void spi_init(XMC_USIC_CH_t *const channel) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0a2      	sub	sp, #136	; 0x88
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	XMC_GPIO_PORT_t *master_rx_pin     = SPI_RX_P;
 8000e18:	4b71      	ldr	r3, [pc, #452]	; (8000fe0 <spi_init+0x1d0>)
 8000e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const uint8_t master_rx_pin_nr     = SPI_RX_PIN;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	XMC_GPIO_PORT_t *master_tx_pin     = SPI_TX_P;
 8000e24:	4b6e      	ldr	r3, [pc, #440]	; (8000fe0 <spi_init+0x1d0>)
 8000e26:	67fb      	str	r3, [r7, #124]	; 0x7c
	const uint8_t master_tx_pin_nr     = SPI_TX_PIN;
 8000e28:	2307      	movs	r3, #7
 8000e2a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	XMC_GPIO_PORT_t *master_clck_pin   = SPI_CLCK_P;
 8000e2e:	4b6c      	ldr	r3, [pc, #432]	; (8000fe0 <spi_init+0x1d0>)
 8000e30:	677b      	str	r3, [r7, #116]	; 0x74
	const uint8_t master_clck_pin_nr   = SPI_CLCK_PIN;
 8000e32:	2306      	movs	r3, #6
 8000e34:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	XMC_GPIO_PORT_t *master_selo_pin_0 = SPI_SELO_P_0;
 8000e38:	4b69      	ldr	r3, [pc, #420]	; (8000fe0 <spi_init+0x1d0>)
 8000e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint8_t master_selo_pin_0_nr = SPI_SELO_PIN_0;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	#if (NUMBER_OF_SPI_SLAVES > 1)
		XMC_GPIO_PORT_t *master_selo_pin_1 = SPI_SELO_P_1;
 8000e42:	4b67      	ldr	r3, [pc, #412]	; (8000fe0 <spi_init+0x1d0>)
 8000e44:	667b      	str	r3, [r7, #100]	; 0x64
		const uint8_t master_selo_pin_1_nr = SPI_SELO_PIN_1;
 8000e46:	2308      	movs	r3, #8
 8000e48:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 2)
		XMC_GPIO_PORT_t *master_selo_pin_2 = SPI_SELO_P_2;
 8000e4c:	4b65      	ldr	r3, [pc, #404]	; (8000fe4 <spi_init+0x1d4>)
 8000e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
		const uint8_t master_selo_pin_2_nr = SPI_SELO_PIN_2;
 8000e50:	2306      	movs	r3, #6
 8000e52:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 3)
		XMC_GPIO_PORT_t *master_selo_pin_3 = SPI_SELO_P_3;
 8000e56:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <spi_init+0x1d4>)
 8000e58:	657b      	str	r3, [r7, #84]	; 0x54
		const uint8_t master_selo_pin_3_nr = SPI_SELO_PIN_3;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 4)
		XMC_GPIO_PORT_t *master_selo_pin_4 = SPI_SELO_P_4;
 8000e60:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <spi_init+0x1d4>)
 8000e62:	64fb      	str	r3, [r7, #76]	; 0x4c
		const uint8_t master_selo_pin_4_nr = SPI_SELO_PIN_4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 5)
		XMC_GPIO_PORT_t *master_selo_pin_5 = SPI_SELO_P_5;
 8000e6a:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <spi_init+0x1d4>)
 8000e6c:	647b      	str	r3, [r7, #68]	; 0x44
		const uint8_t master_selo_pin_5_nr = SPI_SELO_PIN_5;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	#endif

	//Master Mode
	/*SPI Configuration*/
	XMC_SPI_CH_CONFIG_t spi_config = {
 8000e74:	4a5c      	ldr	r2, [pc, #368]	; (8000fe8 <spi_init+0x1d8>)
 8000e76:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e7e:	e883 0003 	stmia.w	r3, {r0, r1}
		.selo_inversion = SPI_SLAVE_SEL_POLARITY,
		.parity_mode    = XMC_USIC_CH_PARITY_MODE_NONE,
	};

	/*GPIO Input pin configuration*/
	XMC_GPIO_CONFIG_t master_rx_pin_config = {
 8000e82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	3304      	adds	r3, #4
 8000e98:	2310      	movs	r3, #16
 8000e9a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		.mode = XMC_GPIO_MODE_INPUT_PULL_UP
	};
	XMC_GPIO_Init(master_rx_pin, master_rx_pin_nr, &master_rx_pin_config);
 8000e9e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8000ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	f7ff fbd3 	bl	8000658 <XMC_GPIO_Init>

	/*GPIO Output pin configuration*/
	XMC_GPIO_CONFIG_t master_tx_pin_config = {
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	3304      	adds	r3, #4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	2390      	movs	r3, #144	; 0x90
 8000eca:	f887 3020 	strb.w	r3, [r7, #32]
 8000ece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
		.mode         = SPI_ALT_OUT,
		.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW
	};
	XMC_GPIO_Init(master_tx_pin, master_tx_pin_nr, &master_tx_pin_config);
 8000ed4:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	f7ff fbb9 	bl	8000658 <XMC_GPIO_Init>

	/*GPIO Clock pin configuration*/
	XMC_GPIO_CONFIG_t master_clck_pin_config = { .mode = SPI_ALT_OUT };
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	3304      	adds	r3, #4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	3304      	adds	r3, #4
 8000efc:	2390      	movs	r3, #144	; 0x90
 8000efe:	753b      	strb	r3, [r7, #20]
	XMC_GPIO_Init(master_clck_pin, master_clck_pin_nr, &master_clck_pin_config);
 8000f00:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	f7ff fba3 	bl	8000658 <XMC_GPIO_Init>

	XMC_GPIO_CONFIG_t master_selo_pin_config = { .mode = SPI_ALT_OUT };
 8000f12:	f107 0308 	add.w	r3, r7, #8
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	3304      	adds	r3, #4
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	3304      	adds	r3, #4
 8000f28:	2390      	movs	r3, #144	; 0x90
 8000f2a:	723b      	strb	r3, [r7, #8]
	XMC_GPIO_Init(master_selo_pin_0, master_selo_pin_0_nr, &master_selo_pin_config);
 8000f2c:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 8000f30:	f107 0308 	add.w	r3, r7, #8
 8000f34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000f36:	4611      	mov	r1, r2
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f7ff fb8d 	bl	8000658 <XMC_GPIO_Init>

	#if (NUMBER_OF_SPI_SLAVES > 1)
		XMC_GPIO_Init(master_selo_pin_1, master_selo_pin_1_nr, &master_selo_pin_config);
 8000f3e:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000f48:	4611      	mov	r1, r2
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f7ff fb84 	bl	8000658 <XMC_GPIO_Init>
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 2)
		XMC_GPIO_Init(master_selo_pin_2, master_selo_pin_2_nr, &master_selo_pin_config);
 8000f50:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8000f54:	f107 0308 	add.w	r3, r7, #8
 8000f58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f7ff fb7b 	bl	8000658 <XMC_GPIO_Init>
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 3)
		XMC_GPIO_Init(master_selo_pin_3, master_selo_pin_3_nr, &master_selo_pin_config);
 8000f62:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	461a      	mov	r2, r3
 8000f70:	f7ff fb72 	bl	8000658 <XMC_GPIO_Init>
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 4)
		XMC_GPIO_Init(master_selo_pin_4, master_selo_pin_4_nr, &master_selo_pin_config);
 8000f74:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f7e:	4611      	mov	r1, r2
 8000f80:	461a      	mov	r2, r3
 8000f82:	f7ff fb69 	bl	8000658 <XMC_GPIO_Init>
	#endif
	#if (NUMBER_OF_SPI_SLAVES > 5)
		XMC_GPIO_Init(master_selo_pin_5, master_selo_pin_5_nr, &master_selo_pin_config);
 8000f86:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f90:	4611      	mov	r1, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	f7ff fb60 	bl	8000658 <XMC_GPIO_Init>
	#endif

	/*Initialize SPI*/
	XMC_SPI_CH_Init(channel, &spi_config);
 8000f98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fc92 	bl	80008c8 <XMC_SPI_CH_Init>
	XMC_SPI_CH_ConfigureShiftClockOutput(channel, SPI_CLK_MODE,
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000faa:	2200      	movs	r2, #0
 8000fac:	f7ff fef2 	bl	8000d94 <XMC_SPI_CH_ConfigureShiftClockOutput>
	                                     XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);

	/*Start SPI*/
	XMC_SPI_CH_Start(channel);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff feb7 	bl	8000d24 <XMC_SPI_CH_Start>

	/*Settings (Bit-Order, Word-Length, FIFO)*/
	if (SPI_MSB_FIRST) XMC_SPI_CH_SetBitOrderMsbFirst(channel);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff fec0 	bl	8000d3c <XMC_SPI_CH_SetBitOrderMsbFirst>
	else   XMC_SPI_CH_SetBitOrderLsbFirst(channel);

	XMC_SPI_CH_SetWordLength(channel, SPI_WORDLENGTH);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	f7ff fef6 	bl	8000db0 <XMC_SPI_CH_SetWordLength>
	XMC_USIC_CH_RXFIFO_Configure(channel, 0, 1, 0);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f7ff fde4 	bl	8000b98 <XMC_USIC_CH_RXFIFO_Configure>

	/*Input source selected*/
	XMC_SPI_CH_SetInputSource(channel, SPI_CH_INPUT, USIC_IN);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f7ff fef9 	bl	8000dcc <XMC_SPI_CH_SetInputSource>
}
 8000fda:	3788      	adds	r7, #136	; 0x88
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	48028100 	.word	0x48028100
 8000fe4:	48028400 	.word	0x48028400
 8000fe8:	08001678 	.word	0x08001678

08000fec <spi_transfer>:

void spi_transfer(XMC_USIC_CH_t *const channel, uint8_t selo, uint16_t *data_in, uint16_t *data_out, uint8_t length) {
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	72fb      	strb	r3, [r7, #11]
	if (selo < NUMBER_OF_SPI_SLAVES) {
 8000ffc:	7afb      	ldrb	r3, [r7, #11]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d826      	bhi.n	8001050 <spi_transfer+0x64>
		XMC_SPI_CH_EnableSlaveSelect(channel, XMC_SPI_CH_SLAVE_SELECT_0 << selo);
 8001002:	7afb      	ldrb	r3, [r7, #11]
 8001004:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	68f8      	ldr	r0, [r7, #12]
 800100e:	4619      	mov	r1, r3
 8001010:	f7ff fc8e 	bl	8000930 <XMC_SPI_CH_EnableSlaveSelect>

		for (uint8_t i = 0; i < length; i++) {
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
 8001018:	e012      	b.n	8001040 <spi_transfer+0x54>
			data_out[i] = spi_byte(channel, data_in[i]);
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	18d4      	adds	r4, r2, r3
 8001022:	7dfb      	ldrb	r3, [r7, #23]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	4619      	mov	r1, r3
 8001030:	f000 f812 	bl	8001058 <spi_byte>
 8001034:	4603      	mov	r3, r0
 8001036:	b29b      	uxth	r3, r3
 8001038:	8023      	strh	r3, [r4, #0]

void spi_transfer(XMC_USIC_CH_t *const channel, uint8_t selo, uint16_t *data_in, uint16_t *data_out, uint8_t length) {
	if (selo < NUMBER_OF_SPI_SLAVES) {
		XMC_SPI_CH_EnableSlaveSelect(channel, XMC_SPI_CH_SLAVE_SELECT_0 << selo);

		for (uint8_t i = 0; i < length; i++) {
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	3301      	adds	r3, #1
 800103e:	75fb      	strb	r3, [r7, #23]
 8001040:	7dfa      	ldrb	r2, [r7, #23]
 8001042:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <spi_transfer+0x2e>
			data_out[i] = spi_byte(channel, data_in[i]);
		}

		XMC_SPI_CH_DisableSlaveSelect(channel);
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f7ff fc86 	bl	800095c <XMC_SPI_CH_DisableSlaveSelect>
	}
}
 8001050:	371c      	adds	r7, #28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd90      	pop	{r4, r7, pc}
 8001056:	bf00      	nop

08001058 <spi_byte>:

uint8_t spi_byte(XMC_USIC_CH_t *const channel, uint16_t data) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
	XMC_SPI_CH_Transmit(channel, data, XMC_SPI_CH_MODE_STANDARD);
 8001064:	887b      	ldrh	r3, [r7, #2]
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4619      	mov	r1, r3
 800106a:	2200      	movs	r2, #0
 800106c:	f7ff fc88 	bl	8000980 <XMC_SPI_CH_Transmit>

	/*Wait till the byte has been transmitted*/
	while (!(XMC_SPI_CH_GetStatusFlag(channel) & XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION)) {
 8001070:	bf00      	nop
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fe72 	bl	8000d5c <XMC_SPI_CH_GetStatusFlag>
 8001078:	4603      	mov	r3, r0
 800107a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f7      	beq.n	8001072 <spi_byte+0x1a>
		/* wait for ACK */
	}

	XMC_SPI_CH_ClearStatusFlag(channel, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001088:	f7ff fe74 	bl	8000d74 <XMC_SPI_CH_ClearStatusFlag>

	while (XMC_USIC_CH_RXFIFO_IsEmpty(channel)) ;
 800108c:	bf00      	nop
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fe0a 	bl	8000ca8 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f9      	bne.n	800108e <spi_byte+0x36>

	return (uint8_t)XMC_SPI_CH_GetReceivedData(channel);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fca6 	bl	80009ec <XMC_SPI_CH_GetReceivedData>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b2db      	uxtb	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_init>:
  }
}

/* Init */
void _init(void)
{}
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <delay>:
 */
#include "Header_general.h" //including all Header files

//aditional functions
void delay (unsigned long delay)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  while (delay--)
 80010c0:	e000      	b.n	80010c4 <delay+0xc>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80010c2:	bf00      	nop
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f9      	bne.n	80010c2 <delay+0xa>
  {
    __NOP();
  }
}
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <init>:



//init

void init(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

	//sets LED Pins as Outputs
	XMC_GPIO_SetMode(XMC_GPIO_PORT6, PIN_LED_1, XMC_GPIO_MODE_OUTPUT_PUSH_PULL); //LED1
 80010dc:	4820      	ldr	r0, [pc, #128]	; (8001160 <init+0x88>)
 80010de:	2100      	movs	r1, #0
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	f7ff fb91 	bl	8000808 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(XMC_GPIO_PORT6, PIN_LED_2, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80010e6:	481e      	ldr	r0, [pc, #120]	; (8001160 <init+0x88>)
 80010e8:	2101      	movs	r1, #1
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	f7ff fb8c 	bl	8000808 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(XMC_GPIO_PORT6, PIN_LED_3, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80010f0:	481b      	ldr	r0, [pc, #108]	; (8001160 <init+0x88>)
 80010f2:	2102      	movs	r1, #2
 80010f4:	2280      	movs	r2, #128	; 0x80
 80010f6:	f7ff fb87 	bl	8000808 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(XMC_GPIO_PORT6, PIN_LED_4, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 80010fa:	4819      	ldr	r0, [pc, #100]	; (8001160 <init+0x88>)
 80010fc:	2103      	movs	r1, #3
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	f7ff fb82 	bl	8000808 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(XMC_GPIO_PORT6, PIN_LED_5, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 8001104:	4816      	ldr	r0, [pc, #88]	; (8001160 <init+0x88>)
 8001106:	2104      	movs	r1, #4
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	f7ff fb7d 	bl	8000808 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(XMC_GPIO_PORT6, PIN_LED_6, XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
 800110e:	4814      	ldr	r0, [pc, #80]	; (8001160 <init+0x88>)
 8001110:	2105      	movs	r1, #5
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	f7ff fb78 	bl	8000808 <XMC_GPIO_SetMode>
	XMC_GPIO_SetMode(XMC_GPIO_PORT6, PIN_LED_7, XMC_GPIO_MODE_OUTPUT_PUSH_PULL); //LED7
 8001118:	4811      	ldr	r0, [pc, #68]	; (8001160 <init+0x88>)
 800111a:	2106      	movs	r1, #6
 800111c:	2280      	movs	r2, #128	; 0x80
 800111e:	f7ff fb73 	bl	8000808 <XMC_GPIO_SetMode>

	//set P_ON Pins as Output
	XMC_GPIO_SetMode(XMC_GPIO_PORT0, PIN_P_ON_TDA_1,
 8001122:	4810      	ldr	r0, [pc, #64]	; (8001164 <init+0x8c>)
 8001124:	2102      	movs	r1, #2
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	f7ff fb6e 	bl	8000808 <XMC_GPIO_SetMode>
			XMC_GPIO_MODE_OUTPUT_PUSH_PULL); //TDA1
	XMC_GPIO_SetMode(XMC_GPIO_PORT1, PIN_P_ON_TDA_2,
 800112c:	480e      	ldr	r0, [pc, #56]	; (8001168 <init+0x90>)
 800112e:	2108      	movs	r1, #8
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	f7ff fb69 	bl	8000808 <XMC_GPIO_SetMode>
			XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
	XMC_GPIO_SetMode(XMC_GPIO_PORT5, PIN_P_ON_TDA_3,
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <init+0x94>)
 8001138:	2105      	movs	r1, #5
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	f7ff fb64 	bl	8000808 <XMC_GPIO_SetMode>
			XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
	XMC_GPIO_SetMode(XMC_GPIO_PORT5, PIN_P_ON_TDA_4,
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <init+0x94>)
 8001142:	2104      	movs	r1, #4
 8001144:	2280      	movs	r2, #128	; 0x80
 8001146:	f7ff fb5f 	bl	8000808 <XMC_GPIO_SetMode>
			XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
	XMC_GPIO_SetMode(XMC_GPIO_PORT3, PIN_P_ON_TDA_5,
 800114a:	4809      	ldr	r0, [pc, #36]	; (8001170 <init+0x98>)
 800114c:	2107      	movs	r1, #7
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	f7ff fb5a 	bl	8000808 <XMC_GPIO_SetMode>
			XMC_GPIO_MODE_OUTPUT_PUSH_PULL);
	XMC_GPIO_SetMode(XMC_GPIO_PORT0, PIN_P_ON_TDA_6,
 8001154:	4803      	ldr	r0, [pc, #12]	; (8001164 <init+0x8c>)
 8001156:	2109      	movs	r1, #9
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	f7ff fb55 	bl	8000808 <XMC_GPIO_SetMode>
			XMC_GPIO_MODE_OUTPUT_PUSH_PULL); //TDA6

}
 800115e:	bd80      	pop	{r7, pc}
 8001160:	48028600 	.word	0x48028600
 8001164:	48028000 	.word	0x48028000
 8001168:	48028100 	.word	0x48028100
 800116c:	48028500 	.word	0x48028500
 8001170:	48028300 	.word	0x48028300

08001174 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	2201      	movs	r2, #1
 8001184:	409a      	lsls	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	605a      	str	r2, [r3, #4]
}
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011a6:	409a      	lsls	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	605a      	str	r2, [r3, #4]
}
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <led_on>:
 * Param led: 	0 -> all leds
 * 1 -> first led(top of the bord)
 * ...
 * 7 -> last led
 */
void led_on(uint8_t led) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
	//set corresonding LED Pin low (active low); Pins were set as Output in init()
	switch (led) {
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	d853      	bhi.n	8001270 <led_on+0xb8>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <led_on+0x18>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011f1 	.word	0x080011f1
 80011d4:	0800122b 	.word	0x0800122b
 80011d8:	08001235 	.word	0x08001235
 80011dc:	0800123f 	.word	0x0800123f
 80011e0:	08001249 	.word	0x08001249
 80011e4:	08001253 	.word	0x08001253
 80011e8:	0800125d 	.word	0x0800125d
 80011ec:	08001267 	.word	0x08001267
	case 0:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_1);
 80011f0:	4821      	ldr	r0, [pc, #132]	; (8001278 <led_on+0xc0>)
 80011f2:	2100      	movs	r1, #0
 80011f4:	f7ff ffce 	bl	8001194 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_2);
 80011f8:	481f      	ldr	r0, [pc, #124]	; (8001278 <led_on+0xc0>)
 80011fa:	2101      	movs	r1, #1
 80011fc:	f7ff ffca 	bl	8001194 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_3);
 8001200:	481d      	ldr	r0, [pc, #116]	; (8001278 <led_on+0xc0>)
 8001202:	2102      	movs	r1, #2
 8001204:	f7ff ffc6 	bl	8001194 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_4);
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <led_on+0xc0>)
 800120a:	2103      	movs	r1, #3
 800120c:	f7ff ffc2 	bl	8001194 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_5);
 8001210:	4819      	ldr	r0, [pc, #100]	; (8001278 <led_on+0xc0>)
 8001212:	2104      	movs	r1, #4
 8001214:	f7ff ffbe 	bl	8001194 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_6);
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <led_on+0xc0>)
 800121a:	2105      	movs	r1, #5
 800121c:	f7ff ffba 	bl	8001194 <XMC_GPIO_SetOutputLow>
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_7);
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <led_on+0xc0>)
 8001222:	2106      	movs	r1, #6
 8001224:	f7ff ffb6 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 8001228:	e022      	b.n	8001270 <led_on+0xb8>
	case 1:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_1);
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <led_on+0xc0>)
 800122c:	2100      	movs	r1, #0
 800122e:	f7ff ffb1 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 8001232:	e01d      	b.n	8001270 <led_on+0xb8>
	case 2:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_2);
 8001234:	4810      	ldr	r0, [pc, #64]	; (8001278 <led_on+0xc0>)
 8001236:	2101      	movs	r1, #1
 8001238:	f7ff ffac 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 800123c:	e018      	b.n	8001270 <led_on+0xb8>
	case 3:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_3);
 800123e:	480e      	ldr	r0, [pc, #56]	; (8001278 <led_on+0xc0>)
 8001240:	2102      	movs	r1, #2
 8001242:	f7ff ffa7 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 8001246:	e013      	b.n	8001270 <led_on+0xb8>
	case 4:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_4);
 8001248:	480b      	ldr	r0, [pc, #44]	; (8001278 <led_on+0xc0>)
 800124a:	2103      	movs	r1, #3
 800124c:	f7ff ffa2 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 8001250:	e00e      	b.n	8001270 <led_on+0xb8>
	case 5:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_5);
 8001252:	4809      	ldr	r0, [pc, #36]	; (8001278 <led_on+0xc0>)
 8001254:	2104      	movs	r1, #4
 8001256:	f7ff ff9d 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 800125a:	e009      	b.n	8001270 <led_on+0xb8>
	case 6:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_6);
 800125c:	4806      	ldr	r0, [pc, #24]	; (8001278 <led_on+0xc0>)
 800125e:	2105      	movs	r1, #5
 8001260:	f7ff ff98 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 8001264:	e004      	b.n	8001270 <led_on+0xb8>
	case 7:
		XMC_GPIO_SetOutputLow(XMC_GPIO_PORT6, PIN_LED_7);
 8001266:	4804      	ldr	r0, [pc, #16]	; (8001278 <led_on+0xc0>)
 8001268:	2106      	movs	r1, #6
 800126a:	f7ff ff93 	bl	8001194 <XMC_GPIO_SetOutputLow>
		break;
 800126e:	bf00      	nop
	}
}
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	48028600 	.word	0x48028600

0800127c <led_off>:
 * Param led: 	0 -> all leds
 * 1 -> first led(top of the bord)
 * ...
 * 7 -> last led
 */
void led_off(uint8_t led) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	//set corresonding LED Pin high (active low); Pins were set as Output in init()
	switch (led) {
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b07      	cmp	r3, #7
 800128a:	d853      	bhi.n	8001334 <led_off+0xb8>
 800128c:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <led_off+0x18>)
 800128e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001292:	bf00      	nop
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012ef 	.word	0x080012ef
 800129c:	080012f9 	.word	0x080012f9
 80012a0:	08001303 	.word	0x08001303
 80012a4:	0800130d 	.word	0x0800130d
 80012a8:	08001317 	.word	0x08001317
 80012ac:	08001321 	.word	0x08001321
 80012b0:	0800132b 	.word	0x0800132b
		case 0:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_1);
 80012b4:	4821      	ldr	r0, [pc, #132]	; (800133c <led_off+0xc0>)
 80012b6:	2100      	movs	r1, #0
 80012b8:	f7ff ff5c 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_2);
 80012bc:	481f      	ldr	r0, [pc, #124]	; (800133c <led_off+0xc0>)
 80012be:	2101      	movs	r1, #1
 80012c0:	f7ff ff58 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_3);
 80012c4:	481d      	ldr	r0, [pc, #116]	; (800133c <led_off+0xc0>)
 80012c6:	2102      	movs	r1, #2
 80012c8:	f7ff ff54 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_4);
 80012cc:	481b      	ldr	r0, [pc, #108]	; (800133c <led_off+0xc0>)
 80012ce:	2103      	movs	r1, #3
 80012d0:	f7ff ff50 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_5);
 80012d4:	4819      	ldr	r0, [pc, #100]	; (800133c <led_off+0xc0>)
 80012d6:	2104      	movs	r1, #4
 80012d8:	f7ff ff4c 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_6);
 80012dc:	4817      	ldr	r0, [pc, #92]	; (800133c <led_off+0xc0>)
 80012de:	2105      	movs	r1, #5
 80012e0:	f7ff ff48 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_7);
 80012e4:	4815      	ldr	r0, [pc, #84]	; (800133c <led_off+0xc0>)
 80012e6:	2106      	movs	r1, #6
 80012e8:	f7ff ff44 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 80012ec:	e022      	b.n	8001334 <led_off+0xb8>
		case 1:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_1);
 80012ee:	4813      	ldr	r0, [pc, #76]	; (800133c <led_off+0xc0>)
 80012f0:	2100      	movs	r1, #0
 80012f2:	f7ff ff3f 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 80012f6:	e01d      	b.n	8001334 <led_off+0xb8>
		case 2:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_2);
 80012f8:	4810      	ldr	r0, [pc, #64]	; (800133c <led_off+0xc0>)
 80012fa:	2101      	movs	r1, #1
 80012fc:	f7ff ff3a 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 8001300:	e018      	b.n	8001334 <led_off+0xb8>
		case 3:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_3);
 8001302:	480e      	ldr	r0, [pc, #56]	; (800133c <led_off+0xc0>)
 8001304:	2102      	movs	r1, #2
 8001306:	f7ff ff35 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 800130a:	e013      	b.n	8001334 <led_off+0xb8>
		case 4:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_4);
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <led_off+0xc0>)
 800130e:	2103      	movs	r1, #3
 8001310:	f7ff ff30 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 8001314:	e00e      	b.n	8001334 <led_off+0xb8>
		case 5:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_5);
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <led_off+0xc0>)
 8001318:	2104      	movs	r1, #4
 800131a:	f7ff ff2b 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 800131e:	e009      	b.n	8001334 <led_off+0xb8>
		case 6:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_6);
 8001320:	4806      	ldr	r0, [pc, #24]	; (800133c <led_off+0xc0>)
 8001322:	2105      	movs	r1, #5
 8001324:	f7ff ff26 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 8001328:	e004      	b.n	8001334 <led_off+0xb8>
		case 7:
			XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT6, PIN_LED_7);
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <led_off+0xc0>)
 800132c:	2106      	movs	r1, #6
 800132e:	f7ff ff21 	bl	8001174 <XMC_GPIO_SetOutputHigh>
			break;
 8001332:	bf00      	nop
		}
}
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	48028600 	.word	0x48028600

08001340 <main>:


#define SPI_TX_ARRAY_LENGH 20
#define SPI_RX_ARRAY_LENGH 20

int main(void){
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b099      	sub	sp, #100	; 0x64
 8001344:	af02      	add	r7, sp, #8

	init();
 8001346:	f7ff fec7 	bl	80010d8 <init>


led_on(0);
 800134a:	2000      	movs	r0, #0
 800134c:	f7ff ff34 	bl	80011b8 <led_on>
delay(4000000);
 8001350:	485a      	ldr	r0, [pc, #360]	; (80014bc <main+0x17c>)
 8001352:	f7ff feb1 	bl	80010b8 <delay>
led_off(0);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ff90 	bl	800127c <led_off>
led_on(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f7ff ff2b 	bl	80011b8 <led_on>
delay(4000000);
 8001362:	4856      	ldr	r0, [pc, #344]	; (80014bc <main+0x17c>)
 8001364:	f7ff fea8 	bl	80010b8 <delay>
led_off(0);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ff87 	bl	800127c <led_off>
led_on(1);
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff ff22 	bl	80011b8 <led_on>


	uint16_t spi_array_tx[SPI_TX_ARRAY_LENGH] = { 0 };
 8001374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	3304      	adds	r3, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	3304      	adds	r3, #4
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	3304      	adds	r3, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	3304      	adds	r3, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	3304      	adds	r3, #4
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	3304      	adds	r3, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	3304      	adds	r3, #4
	spi_array_tx[0] =0x05;
 80013b4:	2305      	movs	r3, #5
 80013b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
	spi_array_tx[1] =10;
 80013b8:	230a      	movs	r3, #10
 80013ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t spi_array_rx[SPI_RX_ARRAY_LENGH] = { 0 };
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	3304      	adds	r3, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	3304      	adds	r3, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	3304      	adds	r3, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	3304      	adds	r3, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	3304      	adds	r3, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	3304      	adds	r3, #4
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	3304      	adds	r3, #4
	led_on(2);
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff fedc 	bl	80011b8 <led_on>


	set_TDA_status(0,1);
 8001400:	2000      	movs	r0, #0
 8001402:	2101      	movs	r1, #1
 8001404:	f000 f880 	bl	8001508 <set_TDA_status>


led_on(6);
 8001408:	2006      	movs	r0, #6
 800140a:	f7ff fed5 	bl	80011b8 <led_on>
led_on(7);
 800140e:	2007      	movs	r0, #7
 8001410:	f7ff fed2 	bl	80011b8 <led_on>

			if (spi_array_rx[0]  ==  0 &&spi_array_rx[1]  ==  0&&spi_array_rx[2]  ==  0&&spi_array_rx[3]  ==  0&&spi_array_rx[4]  ==  0&&spi_array_rx[5]  ==  0
 8001414:	88bb      	ldrh	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d120      	bne.n	800145c <main+0x11c>
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d11d      	bne.n	800145c <main+0x11c>
 8001420:	893b      	ldrh	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d11a      	bne.n	800145c <main+0x11c>
 8001426:	897b      	ldrh	r3, [r7, #10]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d117      	bne.n	800145c <main+0x11c>
 800142c:	89bb      	ldrh	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d114      	bne.n	800145c <main+0x11c>
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d111      	bne.n	800145c <main+0x11c>
					&& spi_array_rx[6]  ==  0 &&spi_array_rx[7]  ==  0&&spi_array_rx[7]  ==  0&&spi_array_rx[8]  ==  0&&spi_array_rx[9]  ==  0	) {
 8001438:	8a3b      	ldrh	r3, [r7, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10e      	bne.n	800145c <main+0x11c>
 800143e:	8a7b      	ldrh	r3, [r7, #18]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <main+0x11c>
 8001444:	8a7b      	ldrh	r3, [r7, #18]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d108      	bne.n	800145c <main+0x11c>
 800144a:	8abb      	ldrh	r3, [r7, #20]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d105      	bne.n	800145c <main+0x11c>
 8001450:	8afb      	ldrh	r3, [r7, #22]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <main+0x11c>
				led_off(6);
 8001456:	2006      	movs	r0, #6
 8001458:	f7ff ff10 	bl	800127c <led_off>
			}


spi_init(spi_master_ch);
 800145c:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <main+0x180>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fcd5 	bl	8000e10 <spi_init>
delay(4000000);
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <main+0x17c>)
 8001468:	f7ff fe26 	bl	80010b8 <delay>
delay(4000000);
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <main+0x17c>)
 800146e:	f7ff fe23 	bl	80010b8 <delay>
delay(4000000);
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <main+0x17c>)
 8001474:	f7ff fe20 	bl	80010b8 <delay>
	spi_transfer(spi_master_ch, 0, spi_array_tx, spi_array_rx, 20);
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <main+0x180>)
 800147a:	6819      	ldr	r1, [r3, #0]
 800147c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001480:	1d3c      	adds	r4, r7, #4
 8001482:	2314      	movs	r3, #20
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	4608      	mov	r0, r1
 8001488:	2100      	movs	r1, #0
 800148a:	4623      	mov	r3, r4
 800148c:	f7ff fdae 	bl	8000fec <spi_transfer>




	for (int var = 0; var < SPI_RX_ARRAY_LENGH; var++) {
 8001490:	2300      	movs	r3, #0
 8001492:	657b      	str	r3, [r7, #84]	; 0x54
 8001494:	e00e      	b.n	80014b4 <main+0x174>
		if (spi_array_rx[var]  !=  0) {
 8001496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800149e:	4413      	add	r3, r2
 80014a0:	f833 3c54 	ldrh.w	r3, [r3, #-84]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <main+0x16e>
			led_on(5);
 80014a8:	2005      	movs	r0, #5
 80014aa:	f7ff fe85 	bl	80011b8 <led_on>
	spi_transfer(spi_master_ch, 0, spi_array_tx, spi_array_rx, 20);




	for (int var = 0; var < SPI_RX_ARRAY_LENGH; var++) {
 80014ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b0:	3301      	adds	r3, #1
 80014b2:	657b      	str	r3, [r7, #84]	; 0x54
 80014b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b6:	2b13      	cmp	r3, #19
 80014b8:	dded      	ble.n	8001496 <main+0x156>
		}
	}

	while (1) {

	}
 80014ba:	e7fe      	b.n	80014ba <main+0x17a>
 80014bc:	003d0900 	.word	0x003d0900
 80014c0:	20000000 	.word	0x20000000

080014c4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2201      	movs	r2, #1
 80014d4:	409a      	lsls	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	605a      	str	r2, [r3, #4]
}
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f6:	409a      	lsls	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	605a      	str	r2, [r3, #4]
}
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <set_TDA_status>:
 * 				1 -> TDA1
 * 				2 -> TDA2  ...
 * Param status:0 -> Power down mode
 * 				1 -> Sleep mode
 */
void set_TDA_status(uint8_t TDA, uint8_t status){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	4613      	mov	r3, r2
 8001516:	71bb      	strb	r3, [r7, #6]
if(status==0){
 8001518:	79bb      	ldrb	r3, [r7, #6]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d13c      	bne.n	8001598 <set_TDA_status+0x90>
//set P_ON Pin low; Pins were set as Output in init()
if(TDA==0||TDA==1){ XMC_GPIO_SetOutputLow(XMC_GPIO_PORT0, PIN_P_ON_TDA_1);}
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <set_TDA_status+0x22>
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d103      	bne.n	8001532 <set_TDA_status+0x2a>
 800152a:	483c      	ldr	r0, [pc, #240]	; (800161c <set_TDA_status+0x114>)
 800152c:	2102      	movs	r1, #2
 800152e:	f7ff ffd9 	bl	80014e4 <XMC_GPIO_SetOutputLow>
if(TDA==0||TDA==2){ XMC_GPIO_SetOutputLow(XMC_GPIO_PORT1, PIN_P_ON_TDA_2);}
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <set_TDA_status+0x36>
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d103      	bne.n	8001546 <set_TDA_status+0x3e>
 800153e:	4838      	ldr	r0, [pc, #224]	; (8001620 <set_TDA_status+0x118>)
 8001540:	2108      	movs	r1, #8
 8001542:	f7ff ffcf 	bl	80014e4 <XMC_GPIO_SetOutputLow>
if(TDA==0||TDA==3){ XMC_GPIO_SetOutputLow(XMC_GPIO_PORT5, PIN_P_ON_TDA_3);}
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <set_TDA_status+0x4a>
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d103      	bne.n	800155a <set_TDA_status+0x52>
 8001552:	4834      	ldr	r0, [pc, #208]	; (8001624 <set_TDA_status+0x11c>)
 8001554:	2105      	movs	r1, #5
 8001556:	f7ff ffc5 	bl	80014e4 <XMC_GPIO_SetOutputLow>
if(TDA==0||TDA==4){ XMC_GPIO_SetOutputLow(XMC_GPIO_PORT5, PIN_P_ON_TDA_4);}
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <set_TDA_status+0x5e>
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d103      	bne.n	800156e <set_TDA_status+0x66>
 8001566:	482f      	ldr	r0, [pc, #188]	; (8001624 <set_TDA_status+0x11c>)
 8001568:	2104      	movs	r1, #4
 800156a:	f7ff ffbb 	bl	80014e4 <XMC_GPIO_SetOutputLow>
if(TDA==0||TDA==5){ XMC_GPIO_SetOutputLow(XMC_GPIO_PORT3, PIN_P_ON_TDA_5);}
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <set_TDA_status+0x72>
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d103      	bne.n	8001582 <set_TDA_status+0x7a>
 800157a:	482b      	ldr	r0, [pc, #172]	; (8001628 <set_TDA_status+0x120>)
 800157c:	2107      	movs	r1, #7
 800157e:	f7ff ffb1 	bl	80014e4 <XMC_GPIO_SetOutputLow>
if(TDA==0||TDA==6){ XMC_GPIO_SetOutputLow(XMC_GPIO_PORT0, PIN_P_ON_TDA_6);}
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <set_TDA_status+0x86>
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	2b06      	cmp	r3, #6
 800158c:	d143      	bne.n	8001616 <set_TDA_status+0x10e>
 800158e:	4823      	ldr	r0, [pc, #140]	; (800161c <set_TDA_status+0x114>)
 8001590:	2109      	movs	r1, #9
 8001592:	f7ff ffa7 	bl	80014e4 <XMC_GPIO_SetOutputLow>
 8001596:	e03e      	b.n	8001616 <set_TDA_status+0x10e>

}else if(status==1){
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d13b      	bne.n	8001616 <set_TDA_status+0x10e>
//set P_ON Pin high; Pins were set as Output in init()
	if(TDA==0||TDA==1){ XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT0, PIN_P_ON_TDA_1);}
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d002      	beq.n	80015aa <set_TDA_status+0xa2>
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d103      	bne.n	80015b2 <set_TDA_status+0xaa>
 80015aa:	481c      	ldr	r0, [pc, #112]	; (800161c <set_TDA_status+0x114>)
 80015ac:	2102      	movs	r1, #2
 80015ae:	f7ff ff89 	bl	80014c4 <XMC_GPIO_SetOutputHigh>
	if(TDA==0||TDA==2){ XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT1, PIN_P_ON_TDA_2);}
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <set_TDA_status+0xb6>
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d103      	bne.n	80015c6 <set_TDA_status+0xbe>
 80015be:	4818      	ldr	r0, [pc, #96]	; (8001620 <set_TDA_status+0x118>)
 80015c0:	2108      	movs	r1, #8
 80015c2:	f7ff ff7f 	bl	80014c4 <XMC_GPIO_SetOutputHigh>
	if(TDA==0||TDA==3){ XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT5, PIN_P_ON_TDA_3);}
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <set_TDA_status+0xca>
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d103      	bne.n	80015da <set_TDA_status+0xd2>
 80015d2:	4814      	ldr	r0, [pc, #80]	; (8001624 <set_TDA_status+0x11c>)
 80015d4:	2105      	movs	r1, #5
 80015d6:	f7ff ff75 	bl	80014c4 <XMC_GPIO_SetOutputHigh>
	if(TDA==0||TDA==4){ XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT5, PIN_P_ON_TDA_4);}
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d002      	beq.n	80015e6 <set_TDA_status+0xde>
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d103      	bne.n	80015ee <set_TDA_status+0xe6>
 80015e6:	480f      	ldr	r0, [pc, #60]	; (8001624 <set_TDA_status+0x11c>)
 80015e8:	2104      	movs	r1, #4
 80015ea:	f7ff ff6b 	bl	80014c4 <XMC_GPIO_SetOutputHigh>
	if(TDA==0||TDA==5){ XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT3, PIN_P_ON_TDA_5);}
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <set_TDA_status+0xf2>
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b05      	cmp	r3, #5
 80015f8:	d103      	bne.n	8001602 <set_TDA_status+0xfa>
 80015fa:	480b      	ldr	r0, [pc, #44]	; (8001628 <set_TDA_status+0x120>)
 80015fc:	2107      	movs	r1, #7
 80015fe:	f7ff ff61 	bl	80014c4 <XMC_GPIO_SetOutputHigh>
	if(TDA==0||TDA==6){ XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT0, PIN_P_ON_TDA_6);}
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <set_TDA_status+0x106>
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b06      	cmp	r3, #6
 800160c:	d103      	bne.n	8001616 <set_TDA_status+0x10e>
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <set_TDA_status+0x114>)
 8001610:	2109      	movs	r1, #9
 8001612:	f7ff ff57 	bl	80014c4 <XMC_GPIO_SetOutputHigh>
}

}
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	48028000 	.word	0x48028000
 8001620:	48028100 	.word	0x48028100
 8001624:	48028500 	.word	0x48028500
 8001628:	48028300 	.word	0x48028300

0800162c <__libc_init_array>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <__libc_init_array+0x3c>)
 8001630:	4c0e      	ldr	r4, [pc, #56]	; (800166c <__libc_init_array+0x40>)
 8001632:	1ae4      	subs	r4, r4, r3
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	2500      	movs	r5, #0
 8001638:	461e      	mov	r6, r3
 800163a:	42a5      	cmp	r5, r4
 800163c:	d004      	beq.n	8001648 <__libc_init_array+0x1c>
 800163e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001642:	4798      	blx	r3
 8001644:	3501      	adds	r5, #1
 8001646:	e7f8      	b.n	800163a <__libc_init_array+0xe>
 8001648:	f7ff fd30 	bl	80010ac <_init>
 800164c:	4c08      	ldr	r4, [pc, #32]	; (8001670 <__libc_init_array+0x44>)
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <__libc_init_array+0x48>)
 8001650:	1ae4      	subs	r4, r4, r3
 8001652:	10a4      	asrs	r4, r4, #2
 8001654:	2500      	movs	r5, #0
 8001656:	461e      	mov	r6, r3
 8001658:	42a5      	cmp	r5, r4
 800165a:	d004      	beq.n	8001666 <__libc_init_array+0x3a>
 800165c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001660:	4798      	blx	r3
 8001662:	3501      	adds	r5, #1
 8001664:	e7f8      	b.n	8001658 <__libc_init_array+0x2c>
 8001666:	bd70      	pop	{r4, r5, r6, pc}
 8001668:	20000004 	.word	0x20000004
 800166c:	20000004 	.word	0x20000004
 8001670:	20000004 	.word	0x20000004
 8001674:	20000004 	.word	0x20000004
 8001678:	000186a0 	.word	0x000186a0
 800167c:	00000400 	.word	0x00000400

   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "spi.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_SetInputSource,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_SetInputSource:
  25              	.LFB140:
  26              	 .file 1 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc_usic.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @file xmc_usic.h
   3:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @date 2016-04-10
   4:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   *************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-02-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Initial draft<br>
  41:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  43:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-05-08:
  44:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *      
  46:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-06-20:
  47:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  49:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-17:
  50:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  52:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-24:
  53:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  56:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-25:
  57:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  61:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-27:
  62:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  66:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-28:
  67:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  70:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2016-03-09:
  71:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  73:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2016-04-10:
  74:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  76:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @endcond
  77:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  78:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
  79:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
  80:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #ifndef XMC_USIC_H
  81:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC_H
  82:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
  83:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * HEADER FILES
  84:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
  85:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
  86:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #include "xmc_common.h"
  87:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
  88:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
  89:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  90:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
  91:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
  92:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
  93:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
  94:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup USIC
  95:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
  96:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
  97:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
  98:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
  99:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * communication protocols.
 104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
 105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC driver features:
 106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  friendly format.
 109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
 115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * MACROS
 119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC1)
 126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC2)
 132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * ENUMS
 159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel driver status
 163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel kernel mode
 173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel operating mode
 184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel inputs
 196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input combination mode
 218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel events
 255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel parity mode
 269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data output mode
 279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status
 288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive buffer status
 308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel output signal passive data level
 317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO size
 326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO status
 358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO status
 386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
 436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * DATA STRUCTURES
 444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma push
 449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma anon_unions
 450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning 586
 452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC module structure
 456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * except for some registers.
 462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   };
 486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   };
 496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_t;
 518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma pop
 523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning restore
 525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * API PROTOTYPES
 529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  ******************************************************************************/
 530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #ifdef __cplusplus
 532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** extern "C" {
 533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /* Common APIs */
 566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
 572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * disabling sequence for the selected device.
 590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * baudrate.
 640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 												 const uint32_t oversampling,
 668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * </tr></table>
 679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *  
 686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
  27              	 .loc 1 691 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
  45 000c 1346     	 mov r3,r2
  46 000e BB70     	 strb r3,[r7,#2]
 692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
  47              	 .loc 1 692 0
  48 0010 F878     	 ldrb r0,[r7,#3]
  49 0012 FB78     	 ldrb r3,[r7,#3]
  50 0014 7A68     	 ldr r2,[r7,#4]
  51 0016 0633     	 adds r3,r3,#6
  52 0018 9B00     	 lsls r3,r3,#2
  53 001a 1344     	 add r3,r3,r2
  54 001c 5B68     	 ldr r3,[r3,#4]
  55 001e 23F00702 	 bic r2,r3,#7
 693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
  56              	 .loc 1 693 0
  57 0022 BB78     	 ldrb r3,[r7,#2]
 692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
  58              	 .loc 1 692 0
  59 0024 1A43     	 orrs r2,r2,r3
  60 0026 7968     	 ldr r1,[r7,#4]
  61 0028 831D     	 adds r3,r0,#6
  62 002a 9B00     	 lsls r3,r3,#2
  63 002c 0B44     	 add r3,r3,r1
  64 002e 5A60     	 str r2,[r3,#4]
 694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
  65              	 .loc 1 694 0
  66 0030 0C37     	 adds r7,r7,#12
  67              	.LCFI3:
  68              	 .cfi_def_cfa_offset 4
  69 0032 BD46     	 mov sp,r7
  70              	.LCFI4:
  71              	 .cfi_def_cfa_register 13
  72              	 
  73 0034 5DF8047B 	 ldr r7,[sp],#4
  74              	.LCFI5:
  75              	 .cfi_restore 7
  76              	 .cfi_def_cfa_offset 0
  77 0038 7047     	 bx lr
  78              	 .cfi_endproc
  79              	.LFE140:
  81 003a 00BF     	 .section .text.XMC_USIC_CH_SetWordLength,"ax",%progbits
  82              	 .align 2
  83              	 .thumb
  84              	 .thumb_func
  86              	XMC_USIC_CH_SetWordLength:
  87              	.LFB156:
 695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * the selected data input line. \n\n
 724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * This setting is used
 726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * if the signals are directly derived from an input
 727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
 965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint16_t data,
 979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
 982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
 984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
 985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
 989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
 990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
 994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
 996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
 998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
 999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
  88              	 .loc 1 1000 0
  89              	 .cfi_startproc
  90              	 
  91              	 
  92              	 
  93 0000 80B4     	 push {r7}
  94              	.LCFI6:
  95              	 .cfi_def_cfa_offset 4
  96              	 .cfi_offset 7,-4
  97 0002 83B0     	 sub sp,sp,#12
  98              	.LCFI7:
  99              	 .cfi_def_cfa_offset 16
 100 0004 00AF     	 add r7,sp,#0
 101              	.LCFI8:
 102              	 .cfi_def_cfa_register 7
 103 0006 7860     	 str r0,[r7,#4]
 104 0008 0B46     	 mov r3,r1
 105 000a FB70     	 strb r3,[r7,#3]
1001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 106              	 .loc 1 1001 0
 107 000c 7B68     	 ldr r3,[r7,#4]
 108 000e 5B6B     	 ldr r3,[r3,#52]
 109 0010 23F07062 	 bic r2,r3,#251658240
1002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 110              	 .loc 1 1002 0
 111 0014 FB78     	 ldrb r3,[r7,#3]
 112 0016 013B     	 subs r3,r3,#1
 113 0018 1B06     	 lsls r3,r3,#24
1001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 114              	 .loc 1 1001 0
 115 001a 1A43     	 orrs r2,r2,r3
 116 001c 7B68     	 ldr r3,[r7,#4]
 117 001e 5A63     	 str r2,[r3,#52]
1003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 118              	 .loc 1 1003 0
 119 0020 0C37     	 adds r7,r7,#12
 120              	.LCFI9:
 121              	 .cfi_def_cfa_offset 4
 122 0022 BD46     	 mov sp,r7
 123              	.LCFI10:
 124              	 .cfi_def_cfa_register 13
 125              	 
 126 0024 5DF8047B 	 ldr r7,[sp],#4
 127              	.LCFI11:
 128              	 .cfi_restore 7
 129              	 .cfi_def_cfa_offset 0
 130 0028 7047     	 bx lr
 131              	 .cfi_endproc
 132              	.LFE156:
 134 002a 00BF     	 .section .text.XMC_USIC_CH_RXFIFO_IsEmpty,"ax",%progbits
 135              	 .align 2
 136              	 .thumb
 137              	 .thumb_func
 139              	XMC_USIC_CH_RXFIFO_IsEmpty:
 140              	.LFB187:
1004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1008:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1009:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1010:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1011:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1012:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1013:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1014:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Define the data frame length.\n\n
1015:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1016:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1017:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * has to be controlled explicitly. 
1018:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1019:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1020:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1021:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1022:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1023:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1024:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1025:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1026:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1027:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1028:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1029:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1030:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1031:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1032:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1033:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1034:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1035:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1036:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1037:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1038:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1039:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1040:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1041:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1042:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1043:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1044:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1045:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1046:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1047:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR |= event;
1048:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1049:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1050:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1051:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1052:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1053:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1054:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1055:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1056:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1057:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1058:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1059:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1060:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1061:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1062:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1063:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1064:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1065:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
1066:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1067:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1068:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1069:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1070:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1071:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1072:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1073:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1074:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1075:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1076:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1077:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request Service request number.\n
1078:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1079:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1080:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1081:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1082:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1083:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1084:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1085:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1086:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1087:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1088:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1089:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1090:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1091:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1092:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                          const uint32_t service_request);
1093:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1094:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1095:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1098:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1099:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
1113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief API to get receive buffer status
1117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * can be read from RBUF.
1131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *                              
1148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures data transmission. \n\n
1152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * IN[x] register.
1195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * for event driven transfer starts.
1235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * generated if enabled. 
1272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * configured passive level.
1311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /* TX FIFO APIs */
1323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR |= event;
1393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[0] = data;
1463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
1469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint16_t data,
1484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
1493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint16_t data,
1508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * FIFO empty flag is set.
1560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level.
1579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = event;
1633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** */
1657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR |= event;
1704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * until receive FIFO is empty.
1770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 141              	 .loc 1 1831 0
 142              	 .cfi_startproc
 143              	 
 144              	 
 145              	 
 146 0000 80B4     	 push {r7}
 147              	.LCFI12:
 148              	 .cfi_def_cfa_offset 4
 149              	 .cfi_offset 7,-4
 150 0002 83B0     	 sub sp,sp,#12
 151              	.LCFI13:
 152              	 .cfi_def_cfa_offset 16
 153 0004 00AF     	 add r7,sp,#0
 154              	.LCFI14:
 155              	 .cfi_def_cfa_register 7
 156 0006 7860     	 str r0,[r7,#4]
1832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 157              	 .loc 1 1832 0
 158 0008 7B68     	 ldr r3,[r7,#4]
 159 000a D3F81431 	 ldr r3,[r3,#276]
 160 000e 03F00803 	 and r3,r3,#8
 161 0012 002B     	 cmp r3,#0
 162 0014 14BF     	 ite ne
 163 0016 0123     	 movne r3,#1
 164 0018 0023     	 moveq r3,#0
 165 001a DBB2     	 uxtb r3,r3
1833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 166              	 .loc 1 1833 0
 167 001c 1846     	 mov r0,r3
 168 001e 0C37     	 adds r7,r7,#12
 169              	.LCFI15:
 170              	 .cfi_def_cfa_offset 4
 171 0020 BD46     	 mov sp,r7
 172              	.LCFI16:
 173              	 .cfi_def_cfa_register 13
 174              	 
 175 0022 5DF8047B 	 ldr r7,[sp],#4
 176              	.LCFI17:
 177              	 .cfi_restore 7
 178              	 .cfi_def_cfa_offset 0
 179 0026 7047     	 bx lr
 180              	 .cfi_endproc
 181              	.LFE187:
 183              	 .section .text.XMC_USIC_CH_ConfigureShiftClockOutput,"ax",%progbits
 184              	 .align 2
 185              	 .thumb
 186              	 .thumb_func
 188              	XMC_USIC_CH_ConfigureShiftClockOutput:
 189              	.LFB194:
1834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * receive FIFO.
1846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = event;
1904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
1930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
1931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
1934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
1936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
1938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
1944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
1945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
1949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
1951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
1952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
1953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
1954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
1955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
1959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
1960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
1961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
1962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
1963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
1964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
1965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
1966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
1970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
1971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
1972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
1973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
1974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
1975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
1977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
1978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
1979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
1980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 190              	 .loc 1 1980 0
 191              	 .cfi_startproc
 192              	 
 193              	 
 194              	 
 195 0000 80B4     	 push {r7}
 196              	.LCFI18:
 197              	 .cfi_def_cfa_offset 4
 198              	 .cfi_offset 7,-4
 199 0002 85B0     	 sub sp,sp,#20
 200              	.LCFI19:
 201              	 .cfi_def_cfa_offset 24
 202 0004 00AF     	 add r7,sp,#0
 203              	.LCFI20:
 204              	 .cfi_def_cfa_register 7
 205 0006 F860     	 str r0,[r7,#12]
 206 0008 B960     	 str r1,[r7,#8]
 207 000a 7A60     	 str r2,[r7,#4]
1981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 208              	 .loc 1 1981 0
 209 000c FB68     	 ldr r3,[r7,#12]
 210 000e 5B69     	 ldr r3,[r3,#20]
 211 0010 23F05042 	 bic r2,r3,#-805306368
1982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
1983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)passive_level |
 212              	 .loc 1 1983 0
 213 0014 BB68     	 ldr r3,[r7,#8]
1982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
 214              	 .loc 1 1982 0
 215 0016 1A43     	 orrs r2,r2,r3
 216              	 .loc 1 1983 0
 217 0018 7B68     	 ldr r3,[r7,#4]
 218 001a 1A43     	 orrs r2,r2,r3
1981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 219              	 .loc 1 1981 0
 220 001c FB68     	 ldr r3,[r7,#12]
 221 001e 5A61     	 str r2,[r3,#20]
1984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)clock_output;
1985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 222              	 .loc 1 1985 0
 223 0020 1437     	 adds r7,r7,#20
 224              	.LCFI21:
 225              	 .cfi_def_cfa_offset 4
 226 0022 BD46     	 mov sp,r7
 227              	.LCFI22:
 228              	 .cfi_def_cfa_register 13
 229              	 
 230 0024 5DF8047B 	 ldr r7,[sp],#4
 231              	.LCFI23:
 232              	 .cfi_restore 7
 233              	 .cfi_def_cfa_offset 0
 234 0028 7047     	 bx lr
 235              	 .cfi_endproc
 236              	.LFE194:
 238 002a 00BF     	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
 239              	 .align 2
 240              	 .thumb
 241              	 .thumb_func
 243              	XMC_USIC_CH_SetMode:
 244              	.LFB195:
1986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** 
1987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** /**
1988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
1991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
1992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
1993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
1994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
1996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
1998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
1999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  *
2001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****  */
2004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** {
 245              	 .loc 1 2005 0
 246              	 .cfi_startproc
 247              	 
 248              	 
 249              	 
 250 0000 80B4     	 push {r7}
 251              	.LCFI24:
 252              	 .cfi_def_cfa_offset 4
 253              	 .cfi_offset 7,-4
 254 0002 83B0     	 sub sp,sp,#12
 255              	.LCFI25:
 256              	 .cfi_def_cfa_offset 16
 257 0004 00AF     	 add r7,sp,#0
 258              	.LCFI26:
 259              	 .cfi_def_cfa_register 7
 260 0006 7860     	 str r0,[r7,#4]
 261 0008 0B46     	 mov r3,r1
 262 000a FB70     	 strb r3,[r7,#3]
2006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 263              	 .loc 1 2006 0
 264 000c 7B68     	 ldr r3,[r7,#4]
 265 000e 1B6C     	 ldr r3,[r3,#64]
 266 0010 23F00F02 	 bic r2,r3,#15
 267 0014 FB78     	 ldrb r3,[r7,#3]
 268 0016 1A43     	 orrs r2,r2,r3
 269 0018 7B68     	 ldr r3,[r7,#4]
 270 001a 1A64     	 str r2,[r3,#64]
2007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_usic.h **** }
 271              	 .loc 1 2007 0
 272 001c 0C37     	 adds r7,r7,#12
 273              	.LCFI27:
 274              	 .cfi_def_cfa_offset 4
 275 001e BD46     	 mov sp,r7
 276              	.LCFI28:
 277              	 .cfi_def_cfa_register 13
 278              	 
 279 0020 5DF8047B 	 ldr r7,[sp],#4
 280              	.LCFI29:
 281              	 .cfi_restore 7
 282              	 .cfi_def_cfa_offset 0
 283 0024 7047     	 bx lr
 284              	 .cfi_endproc
 285              	.LFE195:
 287 0026 00BF     	 .section .text.XMC_SPI_CH_Start,"ax",%progbits
 288              	 .align 2
 289              	 .thumb
 290              	 .thumb_func
 292              	XMC_SPI_CH_Start:
 293              	.LFB196:
 294              	 .file 2 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc_spi.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @file xmc_spi.h
   3:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @date 2016-04-10
   4:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   *************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-02-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Initial
  41:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *   
  42:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-05-20:
  43:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Documentation improved <br>
  44:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and 
  45:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  46:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  47:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  48:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-06-20:
  49:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  51:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-08-24:
  52:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  53:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  54:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  55:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-08-27:
  56:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  57:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  58:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-09-01:
  59:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  60:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  61:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *       for supporting multiple events configuration <br>
  62:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  63:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-09-08:
  64:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  65:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  66:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 2016-04-10:
  67:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  68:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  69:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @endcond 
  70:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
  71:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
  72:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
  73:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #ifndef XMC_SPI_H
  74:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI_H
  75:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
  76:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
  77:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * HEADER FILES
  78:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
  79:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #include "xmc_usic.h"
  80:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
  81:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
  82:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
  83:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @{
  84:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
  85:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
  86:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
  87:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @addtogroup SPI
  88:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
  89:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  90:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module. 
  91:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
  92:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
  93:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
  94:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
  95:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
  96:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  97:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
  98:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * and also for data transaction.<br>
  99:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI driver features:
 100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @{
 108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * MACROS
 112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
 113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #if defined(USIC0)
 115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #if defined(USIC1)
 120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #if defined(USIC2)
 125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * ENUMS
 131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
 132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines return status of SPI driver APIs
 135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines the SPI bus mode
 144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                   (active high) */
 158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                   polarity to the M
 160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                   (active low)*/
 161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines the Polarity of the data inputs.
 165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines Slave Select lines
 174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines SPI specific events
 189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines SPI event status
 207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             select(
 212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             input(D
 214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             output 
 216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             input s
 218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             parity 
 220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             event *
 222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             event *
 225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             event *
 227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             receive
 230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             generat
 232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Define data and clock input stages
 247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */ 
 251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Define SPI data transfer mode
 260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */ 
 264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 4UL, /**< SPI standard half duplex mode */ 
 265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL= 6UL,                 /**< SPI half duplex mode with dual data lines */ 
 266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD= 7UL                  /**< SPI half duplex mode with quad data lines */
 267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** */
 288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI channel interrupt node pointers
 296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * DATA STRUCTURES
 308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** ***************************************************************************************************
 309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Structure for initializing SPI channel.
 312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   uint32_t baudrate;							  /**< Module baud rate for communication */
 316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                        MSLS signal  */
 319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * API PROTOTYPES
 324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
 325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #ifdef __cplusplus
 327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** extern "C" {
 328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <ul>
 341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Baudrate,</li>
 342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * </ul>
 351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * And if master mode is selected,
 352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <ul>
 353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * </ul>
 358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);
 360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 295              	 .loc 2 375 0
 296              	 .cfi_startproc
 297              	 
 298              	 
 299 0000 80B5     	 push {r7,lr}
 300              	.LCFI30:
 301              	 .cfi_def_cfa_offset 8
 302              	 .cfi_offset 7,-8
 303              	 .cfi_offset 14,-4
 304 0002 82B0     	 sub sp,sp,#8
 305              	.LCFI31:
 306              	 .cfi_def_cfa_offset 16
 307 0004 00AF     	 add r7,sp,#0
 308              	.LCFI32:
 309              	 .cfi_def_cfa_register 7
 310 0006 7860     	 str r0,[r7,#4]
 376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   /* USIC channel in SPI mode */
 377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 311              	 .loc 2 377 0
 312 0008 7868     	 ldr r0,[r7,#4]
 313 000a 0121     	 movs r1,#1
 314 000c FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 315              	 .loc 2 378 0
 316 0010 0837     	 adds r7,r7,#8
 317              	.LCFI33:
 318              	 .cfi_def_cfa_offset 8
 319 0012 BD46     	 mov sp,r7
 320              	.LCFI34:
 321              	 .cfi_def_cfa_register 13
 322              	 
 323 0014 80BD     	 pop {r7,pc}
 324              	 .cfi_endproc
 325              	.LFE196:
 327 0016 00BF     	 .section .text.XMC_SPI_CH_SetBitOrderMsbFirst,"ax",%progbits
 328              	 .align 2
 329              	 .thumb
 330              	 .thumb_func
 332              	XMC_SPI_CH_SetBitOrderMsbFirst:
 333              	.LFB200:
 379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * invoked to start the communication again.
 391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Start()
 394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param slave Slave select signal.\n
 416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * mode to ensure the proper communication.
 456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param data Data to be transmitted
 469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.      
 491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   /* Transmit dummy data */
 505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * the program.
 532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init(). 
 549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 334              	 .loc 2 555 0
 335              	 .cfi_startproc
 336              	 
 337              	 
 338              	 
 339 0000 80B4     	 push {r7}
 340              	.LCFI35:
 341              	 .cfi_def_cfa_offset 4
 342              	 .cfi_offset 7,-4
 343 0002 83B0     	 sub sp,sp,#12
 344              	.LCFI36:
 345              	 .cfi_def_cfa_offset 16
 346 0004 00AF     	 add r7,sp,#0
 347              	.LCFI37:
 348              	 .cfi_def_cfa_register 7
 349 0006 7860     	 str r0,[r7,#4]
 556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 350              	 .loc 2 556 0
 351 0008 7B68     	 ldr r3,[r7,#4]
 352 000a 5B6B     	 ldr r3,[r3,#52]
 353 000c 43F00102 	 orr r2,r3,#1
 354 0010 7B68     	 ldr r3,[r7,#4]
 355 0012 5A63     	 str r2,[r3,#52]
 557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 356              	 .loc 2 557 0
 357 0014 0C37     	 adds r7,r7,#12
 358              	.LCFI38:
 359              	 .cfi_def_cfa_offset 4
 360 0016 BD46     	 mov sp,r7
 361              	.LCFI39:
 362              	 .cfi_def_cfa_register 13
 363              	 
 364 0018 5DF8047B 	 ldr r7,[sp],#4
 365              	.LCFI40:
 366              	 .cfi_restore 7
 367              	 .cfi_def_cfa_offset 0
 368 001c 7047     	 bx lr
 369              	 .cfi_endproc
 370              	.LFE200:
 372 001e 00BF     	 .section .text.XMC_SPI_CH_GetStatusFlag,"ax",%progbits
 373              	 .align 2
 374              	 .thumb
 375              	 .thumb_func
 377              	XMC_SPI_CH_GetStatusFlag:
 378              	.LFB201:
 558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *              as input.
 564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent(). 
 570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *              as input.
 582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication. 
 602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 379              	 .loc 2 607 0
 380              	 .cfi_startproc
 381              	 
 382              	 
 383              	 
 384 0000 80B4     	 push {r7}
 385              	.LCFI41:
 386              	 .cfi_def_cfa_offset 4
 387              	 .cfi_offset 7,-4
 388 0002 83B0     	 sub sp,sp,#12
 389              	.LCFI42:
 390              	 .cfi_def_cfa_offset 16
 391 0004 00AF     	 add r7,sp,#0
 392              	.LCFI43:
 393              	 .cfi_def_cfa_register 7
 394 0006 7860     	 str r0,[r7,#4]
 608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   return channel->PSR_SSCMode;
 395              	 .loc 2 608 0
 396 0008 7B68     	 ldr r3,[r7,#4]
 397 000a 9B6C     	 ldr r3,[r3,#72]
 609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 398              	 .loc 2 609 0
 399 000c 1846     	 mov r0,r3
 400 000e 0C37     	 adds r7,r7,#12
 401              	.LCFI44:
 402              	 .cfi_def_cfa_offset 4
 403 0010 BD46     	 mov sp,r7
 404              	.LCFI45:
 405              	 .cfi_def_cfa_register 13
 406              	 
 407 0012 5DF8047B 	 ldr r7,[sp],#4
 408              	.LCFI46:
 409              	 .cfi_restore 7
 410              	 .cfi_def_cfa_offset 0
 411 0016 7047     	 bx lr
 412              	 .cfi_endproc
 413              	.LFE201:
 415              	 .section .text.XMC_SPI_CH_ClearStatusFlag,"ax",%progbits
 416              	 .align 2
 417              	 .thumb
 418              	 .thumb_func
 420              	XMC_SPI_CH_ClearStatusFlag:
 421              	.LFB202:
 610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *              as input.
 616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 422              	 .loc 2 628 0
 423              	 .cfi_startproc
 424              	 
 425              	 
 426              	 
 427 0000 80B4     	 push {r7}
 428              	.LCFI47:
 429              	 .cfi_def_cfa_offset 4
 430              	 .cfi_offset 7,-4
 431 0002 83B0     	 sub sp,sp,#12
 432              	.LCFI48:
 433              	 .cfi_def_cfa_offset 16
 434 0004 00AF     	 add r7,sp,#0
 435              	.LCFI49:
 436              	 .cfi_def_cfa_register 7
 437 0006 7860     	 str r0,[r7,#4]
 438 0008 3960     	 str r1,[r7]
 629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PSCR |= flag;
 439              	 .loc 2 629 0
 440 000a 7B68     	 ldr r3,[r7,#4]
 441 000c DA6C     	 ldr r2,[r3,#76]
 442 000e 3B68     	 ldr r3,[r7]
 443 0010 1A43     	 orrs r2,r2,r3
 444 0012 7B68     	 ldr r3,[r7,#4]
 445 0014 DA64     	 str r2,[r3,#76]
 630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 446              	 .loc 2 630 0
 447 0016 0C37     	 adds r7,r7,#12
 448              	.LCFI50:
 449              	 .cfi_def_cfa_offset 4
 450 0018 BD46     	 mov sp,r7
 451              	.LCFI51:
 452              	 .cfi_def_cfa_register 13
 453              	 
 454 001a 5DF8047B 	 ldr r7,[sp],#4
 455              	.LCFI52:
 456              	 .cfi_restore 7
 457              	 .cfi_def_cfa_offset 0
 458 001e 7047     	 bx lr
 459              	 .cfi_endproc
 460              	.LFE202:
 462              	 .section .text.XMC_SPI_CH_ConfigureShiftClockOutput,"ax",%progbits
 463              	 .align 2
 464              	 .thumb
 465              	 .thumb_func
 467              	XMC_SPI_CH_ConfigureShiftClockOutput:
 468              	.LFB211:
 631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Enables the generation of Master clock by setting PCR.MCLK bit.\n\n
 639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This clock can be used as a clock reference for external devices. This is not enabled during ini
 640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Init(). Invoke XMC_SPI_CH_EnableMasterClock() to enable as needed in the program, or 
 641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableMasterClock().
 642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableMasterClock()
 645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableMasterClock(XMC_USIC_CH_t *const channel)
 647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_MCLK_Msk;
 649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Disables the generation of Master clock by clearing PCR.MCLK bit.\n\n
 658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This clock can be enabled by invoking XMC_SPI_CH_EnableMasterClock() as needed in the program.
 659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableMasterClock()
 662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableMasterClock(XMC_USIC_CH_t *const channel)
 664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_MCLK_Msk;
 666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #ifdef USIC_CH_PCR_SSCMode_SLPHSEL_Msk
 668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Data bits are shifted out with the leading edge of the shift clock signal and latched in with th
 675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DataLatchedInLeadingEdge()
 678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DataLatchedInTrailingEdge(XMC_USIC_CH_t *const channel)
 680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SLPHSEL_Msk;
 682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * The first data bit is shifted out when the data shift unit receives a low to high transition fro
 691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * stage. Subsequent bits are shifted out with the trailing edge of the shift clock signal. Data bi
 692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * always latched in with the leading edge.
 693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DataLatchedInTrailingEdge()
 696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DataLatchedInLeadingEdge(XMC_USIC_CH_t *const channel)
 698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode |= USIC_CH_PCR_SSCMode_SLPHSEL_Msk;
 700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Enables the delay after each word, by setting PCR.TIWEN bit.\n\n
 709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * The inter word delay starts at the end of last SCLK cycle of data word. During this time no cloc
 710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * generated and MSLS signal stays active. If inter word delay is not enabled, last data bit of a d
 711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * followed by the first data bit of the next data word. This is not enabled in XMC_SPI_CH_Init(). 
 712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay() has to be invoked as needed in the program. And can be disable
 713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableInterwordDelay().
 714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableInterwordDelay()
 717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableInterwordDelay(XMC_USIC_CH_t *const channel)
 719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_TIWEN_Msk;
 721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Disables the delay after after each word, by clearing PCR.TIWEN bit.\n\n
 730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * So the last data bit of a data word is directly followed by the first data bit of the next data 
 731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * be enabled by invoking XMC_SPI_CH_EnableInterwordDelay().
 732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay()
 735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableInterwordDelay(XMC_USIC_CH_t *const channel)
 737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_TIWEN_Msk;
 739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param tinterword_delay_ns delay in terms of nano seconds.
 744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields.\n\n
 749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * The inter word delay is dependent on the peripheral clock. The maximum possible value is calcula
 750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * below formula\n
 751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *            Maximum inter word delay = ((1 + PCTQ1_max)(1 + DCTQ1_max)) / peripheral clock\n
 752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                                       where PCTQ1_max = 3 and DCTQ1_max = 31\n
 753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * After configuring the inter word delay, this has to be enabled by invoking XMC_SPI_CH_EnableInte
 754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay(),XMC_SPI_CH_SetInterwordDelaySCLK()
 757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel,uint32_t tinterword_delay_ns);
 759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param sclk_period  in terms of clk cycles.
 763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configures the inter word delay by setting PCR.DCTQ1 bit fields.\n\n
 768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This delay is dependent on the peripheral clock. The maximum possible value supported by this AP
 769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * is 32 clock cycles.
 770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * After configuring the inter word delay, this has to be enabled by invoking XMC_SPI_CH_EnableInte
 771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableInterwordDelay(),XMC_SPI_CH_EnableInterwordDelay()
 774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetInterwordDelaySCLK(XMC_USIC_CH_t *const channel,uint32_t sclk_pe
 776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                                 USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) 
 780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                          (((sclk_period - 1U) <<  USIC_CH_PCR_SSCMode_DCTQ1_Pos) |
 781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                          (0x02U <<  USIC_CH_PCR_SSCMode_CTQSEL1_Pos));
 782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param sclk_period delay in terms of sclk clock cycles.
 787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configures the leading/trailing delay by setting BRG.DCTQ bit field.\n\n
 792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This delay is dependent on the peripheral clock. The maximum possible value supported by this AP
 793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * is 30 clock cycles.
 794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_peri
 797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 								   USIC_CH_BRG_PCTQ_Msk)) |
 801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                  (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configure to keep MSLS(Slave select signal) active even after finishing the current data frame,
 812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * by setting PCR.FEM bit.\n\n
 813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This is typically used during the transmission of multi-data word frames, where there is possibi
 814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * delivering the data. Frame end mode is enabled in XMC_SPI_CH_Init() during initialization. To di
 815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableFEM() can be invoked as needed in the program.
 816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableFEM()
 819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableFEM(XMC_USIC_CH_t *const channel)
 821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode |= (uint32_t)USIC_CH_PCR_SSCMode_FEM_Msk;
 823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configure to disable the MSLS(Slave select signal) if the current data frame is considered as fi
 832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * by setting PCR.FEM bit.\n\n
 833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * When the last bit of a data word has been sent out and the transmit buffer TBUF does not contain
 835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * considered as frame is ended and MSLS(Slave select signal) is disabled.
 836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableFEM()
 839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
 841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param passive_level polarity and delay of the selected shift clock.\n
 848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                      Refer @ref XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t for valid inputs.
 849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param clock_output shift clock source.\n
 850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                     Refer @ref XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t for valid inputs.
 851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configures the shift clock source with the selected polarity and delay by setting BRG.SCLKOSEL a
 856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * In Master mode operation, shift clock is generated by the internal baud rate generator. This SCL
 857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * for external slave devices by SCLKOUT signal.\n
 858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * In Slave mode, the signal is received from the external master. So the DX1(input) stage has to b
 859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * The shift clock output(SCLKOUT) signal polarity can be set relative to SCLK, with the delay of h
 860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * period. These settings are applicable only in master mode.
 861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
 863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                           const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_
 864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                           const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t
 865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 469              	 .loc 2 865 0
 470              	 .cfi_startproc
 471              	 
 472              	 
 473 0000 80B5     	 push {r7,lr}
 474              	.LCFI53:
 475              	 .cfi_def_cfa_offset 8
 476              	 .cfi_offset 7,-8
 477              	 .cfi_offset 14,-4
 478 0002 84B0     	 sub sp,sp,#16
 479              	.LCFI54:
 480              	 .cfi_def_cfa_offset 24
 481 0004 00AF     	 add r7,sp,#0
 482              	.LCFI55:
 483              	 .cfi_def_cfa_register 7
 484 0006 F860     	 str r0,[r7,#12]
 485 0008 B960     	 str r1,[r7,#8]
 486 000a 7A60     	 str r2,[r7,#4]
 866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passi
 487              	 .loc 2 866 0
 488 000c F868     	 ldr r0,[r7,#12]
 489 000e B968     	 ldr r1,[r7,#8]
 490 0010 7A68     	 ldr r2,[r7,#4]
 491 0012 FFF7FEFF 	 bl XMC_USIC_CH_ConfigureShiftClockOutput
 867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
 868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 492              	 .loc 2 868 0
 493 0016 1037     	 adds r7,r7,#16
 494              	.LCFI56:
 495              	 .cfi_def_cfa_offset 8
 496 0018 BD46     	 mov sp,r7
 497              	.LCFI57:
 498              	 .cfi_def_cfa_register 13
 499              	 
 500 001a 80BD     	 pop {r7,pc}
 501              	 .cfi_endproc
 502              	.LFE211:
 504              	 .section .text.XMC_SPI_CH_SetWordLength,"ax",%progbits
 505              	 .align 2
 506              	 .thumb
 507              	 .thumb_func
 509              	XMC_SPI_CH_SetWordLength:
 510              	.LFB212:
 869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *         \b Range: 1 to 16.
 874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description</b><br>
 878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines the data word length.\n\n
 879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_SetFrameLength()
 883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_leng
 885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 511              	 .loc 2 885 0
 512              	 .cfi_startproc
 513              	 
 514              	 
 515 0000 80B5     	 push {r7,lr}
 516              	.LCFI58:
 517              	 .cfi_def_cfa_offset 8
 518              	 .cfi_offset 7,-8
 519              	 .cfi_offset 14,-4
 520 0002 82B0     	 sub sp,sp,#8
 521              	.LCFI59:
 522              	 .cfi_def_cfa_offset 16
 523 0004 00AF     	 add r7,sp,#0
 524              	.LCFI60:
 525              	 .cfi_def_cfa_register 7
 526 0006 7860     	 str r0,[r7,#4]
 527 0008 0B46     	 mov r3,r1
 528 000a FB70     	 strb r3,[r7,#3]
 886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 529              	 .loc 2 886 0
 530 000c FB78     	 ldrb r3,[r7,#3]
 531 000e 7868     	 ldr r0,[r7,#4]
 532 0010 1946     	 mov r1,r3
 533 0012 FFF7FEFF 	 bl XMC_USIC_CH_SetWordLength
 887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 534              	 .loc 2 887 0
 535 0016 0837     	 adds r7,r7,#8
 536              	.LCFI61:
 537              	 .cfi_def_cfa_offset 8
 538 0018 BD46     	 mov sp,r7
 539              	.LCFI62:
 540              	 .cfi_def_cfa_register 13
 541              	 
 542 001a 80BD     	 pop {r7,pc}
 543              	 .cfi_endproc
 544              	.LFE212:
 546              	 .section .text.XMC_SPI_CH_SetInputSource,"ax",%progbits
 547              	 .align 2
 548              	 .thumb
 549              	 .thumb_func
 551              	XMC_SPI_CH_SetInputSource:
 552              	.LFB218:
 888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  frame_length Number of bits in a frame. \n
 892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                \b Range: 1 to 64. If the value 64 is configured, then the frame does not
 893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                automatically end. User should explicitly end the frame.
 894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description</b><br>
 898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Define the data frame length.\n\n
 899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the number of bits to be serially transmitted in a frame.
 900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * The frame length should be multiples of word length. If the value is set to 64, the frame does n
 901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * automatically end. Use XMC_SPI_CH_DisableSlaveSelect() to end the frame after all the data
 902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * is transmitted.
 903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSele
 906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_le
 908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description</b><br>
 918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configure the handling of start of frame through software, by setting TCSR.SOF bit.\n\n
 919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This can be used if the software handles the TBUF data without FIFO. If SOF is set, a valid cont
 920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * considered as first word of a new frame by finishing the currently running frame. For software h
 921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * it is recommended to configure TCSR.WLEMD as 0. This is not configured during initialization. XM
 922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * can be called as needed in the program and can be disabled by XMC_SPI_CH_DisableSOF(). 
 923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSOF()
 926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableSOF(XMC_USIC_CH_t *const channel)
 928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_SOF_Msk;
 930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description</b><br>
 938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the control of the handling start of frame through hardware, by clearing TCSR.SOF bit.\n\n
 939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Typically this can be disabled, where the transmission control is done by the hardware.
 940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSOF()
 943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableSOF(XMC_USIC_CH_t *const channel)
 945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_SOF_Msk;
 947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description</b><br>
 955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configure the handling of end of frame through software, by setting TCSR.EOF bit.\n\n
 956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * This can be used if the software handles the TBUF data without FIFO. If EOF is set, a valid cont
 957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * considered as last word of a frame. After transfer of the last word, MSLS signal becomes inactiv
 958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * handling of EOF bit, it is recommended to configure TCSR.WLEMD as 0. \n
 959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \b Note: The API should be called before putting the last data word of the frame to TBUF.
 960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEOF()
 963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_EnableEOF(XMC_USIC_CH_t *const channel)
 965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_EOF_Msk;
 967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description</b><br>
 975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Configure the handling of end of frame through hardware, by clearing TCSR.EOF bit.\n\n
 976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Typically this can be disabled, where the transmission control is done by the hardware.
 977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEOF()
 980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
 981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_DisableEOF(XMC_USIC_CH_t *const channel)
 982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_EOF_Msk;
 984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** 
 986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** /**
 987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  input SPI channel input stage.\n
 989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *               Refer @ref XMC_SPI_CH_INPUT_t for valid values
 990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @param  source Input source select for the input stage.
 991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *                Range : [0 to 7]
 992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  *
 995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description</b><br>
 996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Selects the data source for SPI input stage, by configuring DXCR.DSEL bits.\n\n
 997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * input stages like DX0CR, DX1CR etc. This is not done during initialization. This has to be confi
 999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  * the SPI communication.
1000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****  */
1001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
1002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                const XMC_SPI_CH_INPUT_t input,
1003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****                                                const uint8_t source)
1004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** {
 553              	 .loc 2 1004 0
 554              	 .cfi_startproc
 555              	 
 556              	 
 557 0000 80B5     	 push {r7,lr}
 558              	.LCFI63:
 559              	 .cfi_def_cfa_offset 8
 560              	 .cfi_offset 7,-8
 561              	 .cfi_offset 14,-4
 562 0002 82B0     	 sub sp,sp,#8
 563              	.LCFI64:
 564              	 .cfi_def_cfa_offset 16
 565 0004 00AF     	 add r7,sp,#0
 566              	.LCFI65:
 567              	 .cfi_def_cfa_register 7
 568 0006 7860     	 str r0,[r7,#4]
 569 0008 0B46     	 mov r3,r1
 570 000a FB70     	 strb r3,[r7,#3]
 571 000c 1346     	 mov r3,r2
 572 000e BB70     	 strb r3,[r7,#2]
1005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0
 573              	 .loc 2 1005 0
 574 0010 F878     	 ldrb r0,[r7,#3]
 575 0012 FB78     	 ldrb r3,[r7,#3]
 576 0014 7A68     	 ldr r2,[r7,#4]
 577 0016 0633     	 adds r3,r3,#6
 578 0018 9B00     	 lsls r3,r3,#2
 579 001a 1344     	 add r3,r3,r2
 580 001c 5B68     	 ldr r3,[r3,#4]
 581 001e 23F05003 	 bic r3,r3,#80
 582 0022 43F01002 	 orr r2,r3,#16
 583 0026 7968     	 ldr r1,[r7,#4]
 584 0028 831D     	 adds r3,r0,#6
 585 002a 9B00     	 lsls r3,r3,#2
 586 002c 0B44     	 add r3,r3,r1
 587 002e 5A60     	 str r2,[r3,#4]
1006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 588              	 .loc 2 1006 0
 589 0030 FA78     	 ldrb r2,[r7,#3]
 590 0032 BB78     	 ldrb r3,[r7,#2]
 591 0034 7868     	 ldr r0,[r7,#4]
 592 0036 1146     	 mov r1,r2
 593 0038 1A46     	 mov r2,r3
 594 003a FFF7FEFF 	 bl XMC_USIC_CH_SetInputSource
1007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_spi.h **** }
 595              	 .loc 2 1007 0
 596 003e 0837     	 adds r7,r7,#8
 597              	.LCFI66:
 598              	 .cfi_def_cfa_offset 8
 599 0040 BD46     	 mov sp,r7
 600              	.LCFI67:
 601              	 .cfi_def_cfa_register 13
 602              	 
 603 0042 80BD     	 pop {r7,pc}
 604              	 .cfi_endproc
 605              	.LFE218:
 607              	 .global spi_master_ch
 608              	 .section .data.spi_master_ch,"aw",%progbits
 609              	 .align 2
 612              	spi_master_ch:
 613 0000 00000340 	 .word 1073938432
 614              	 .section .rodata
 615              	 .align 2
 616              	.LC0:
 617 0000 A0860100 	 .word 100000
 618 0004 00       	 .byte 0
 619 0005 04       	 .byte 4
 620 0006 0000     	 .short 0
 621              	 .section .text.spi_init,"ax",%progbits
 622              	 .align 2
 623              	 .global spi_init
 624              	 .thumb
 625              	 .thumb_func
 627              	spi_init:
 628              	.LFB230:
 629              	 .file 3 "../Libraries/SPI/spi.c"
   1:../Libraries/SPI/spi.c **** /*
   2:../Libraries/SPI/spi.c ****  * spi.c
   3:../Libraries/SPI/spi.c ****  *
   4:../Libraries/SPI/spi.c ****  *  Created on: Oct 1, 2015
   5:../Libraries/SPI/spi.c ****  *      Author: pflaum
   6:../Libraries/SPI/spi.c ****  */
   7:../Libraries/SPI/spi.c **** 
   8:../Libraries/SPI/spi.c **** #include <XMC4500.h>
   9:../Libraries/SPI/spi.c **** 
  10:../Libraries/SPI/spi.c **** #include <xmc_gpio.h>
  11:../Libraries/SPI/spi.c **** #include <xmc_usic.h>
  12:../Libraries/SPI/spi.c **** #include <xmc_spi.h>
  13:../Libraries/SPI/spi.c **** 
  14:../Libraries/SPI/spi.c **** #include "spi.h"
  15:../Libraries/SPI/spi.c **** #include "portmakros.h"
  16:../Libraries/SPI/spi.c **** 
  17:../Libraries/SPI/spi.c **** XMC_USIC_CH_t *spi_master_ch = SPI_CHANNEL;
  18:../Libraries/SPI/spi.c **** 
  19:../Libraries/SPI/spi.c **** void spi_init(XMC_USIC_CH_t *const channel) {
 630              	 .loc 3 19 0
 631              	 .cfi_startproc
 632              	 
 633              	 
 634 0000 80B5     	 push {r7,lr}
 635              	.LCFI68:
 636              	 .cfi_def_cfa_offset 8
 637              	 .cfi_offset 7,-8
 638              	 .cfi_offset 14,-4
 639 0002 A2B0     	 sub sp,sp,#136
 640              	.LCFI69:
 641              	 .cfi_def_cfa_offset 144
 642 0004 00AF     	 add r7,sp,#0
 643              	.LCFI70:
 644              	 .cfi_def_cfa_register 7
 645 0006 7860     	 str r0,[r7,#4]
  20:../Libraries/SPI/spi.c **** 	XMC_GPIO_PORT_t *master_rx_pin     = SPI_RX_P;
 646              	 .loc 3 20 0
 647 0008 714B     	 ldr r3,.L16
 648 000a C7F88430 	 str r3,[r7,#132]
  21:../Libraries/SPI/spi.c **** 	const uint8_t master_rx_pin_nr     = SPI_RX_PIN;
 649              	 .loc 3 21 0
 650 000e 0523     	 movs r3,#5
 651 0010 87F88330 	 strb r3,[r7,#131]
  22:../Libraries/SPI/spi.c **** 	XMC_GPIO_PORT_t *master_tx_pin     = SPI_TX_P;
 652              	 .loc 3 22 0
 653 0014 6E4B     	 ldr r3,.L16
 654 0016 FB67     	 str r3,[r7,#124]
  23:../Libraries/SPI/spi.c **** 	const uint8_t master_tx_pin_nr     = SPI_TX_PIN;
 655              	 .loc 3 23 0
 656 0018 0723     	 movs r3,#7
 657 001a 87F87B30 	 strb r3,[r7,#123]
  24:../Libraries/SPI/spi.c **** 	XMC_GPIO_PORT_t *master_clck_pin   = SPI_CLCK_P;
 658              	 .loc 3 24 0
 659 001e 6C4B     	 ldr r3,.L16
 660 0020 7B67     	 str r3,[r7,#116]
  25:../Libraries/SPI/spi.c **** 	const uint8_t master_clck_pin_nr   = SPI_CLCK_PIN;
 661              	 .loc 3 25 0
 662 0022 0623     	 movs r3,#6
 663 0024 87F87330 	 strb r3,[r7,#115]
  26:../Libraries/SPI/spi.c **** 	XMC_GPIO_PORT_t *master_selo_pin_0 = SPI_SELO_P_0;
 664              	 .loc 3 26 0
 665 0028 694B     	 ldr r3,.L16
 666 002a FB66     	 str r3,[r7,#108]
  27:../Libraries/SPI/spi.c **** 	const uint8_t master_selo_pin_0_nr = SPI_SELO_PIN_0;
 667              	 .loc 3 27 0
 668 002c 0B23     	 movs r3,#11
 669 002e 87F86B30 	 strb r3,[r7,#107]
  28:../Libraries/SPI/spi.c **** 
  29:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 1)
  30:../Libraries/SPI/spi.c **** 		XMC_GPIO_PORT_t *master_selo_pin_1 = SPI_SELO_P_1;
 670              	 .loc 3 30 0
 671 0032 674B     	 ldr r3,.L16
 672 0034 7B66     	 str r3,[r7,#100]
  31:../Libraries/SPI/spi.c **** 		const uint8_t master_selo_pin_1_nr = SPI_SELO_PIN_1;
 673              	 .loc 3 31 0
 674 0036 0823     	 movs r3,#8
 675 0038 87F86330 	 strb r3,[r7,#99]
  32:../Libraries/SPI/spi.c **** 	#endif
  33:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 2)
  34:../Libraries/SPI/spi.c **** 		XMC_GPIO_PORT_t *master_selo_pin_2 = SPI_SELO_P_2;
 676              	 .loc 3 34 0
 677 003c 654B     	 ldr r3,.L16+4
 678 003e FB65     	 str r3,[r7,#92]
  35:../Libraries/SPI/spi.c **** 		const uint8_t master_selo_pin_2_nr = SPI_SELO_PIN_2;
 679              	 .loc 3 35 0
 680 0040 0623     	 movs r3,#6
 681 0042 87F85B30 	 strb r3,[r7,#91]
  36:../Libraries/SPI/spi.c **** 	#endif
  37:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 3)
  38:../Libraries/SPI/spi.c **** 		XMC_GPIO_PORT_t *master_selo_pin_3 = SPI_SELO_P_3;
 682              	 .loc 3 38 0
 683 0046 634B     	 ldr r3,.L16+4
 684 0048 7B65     	 str r3,[r7,#84]
  39:../Libraries/SPI/spi.c **** 		const uint8_t master_selo_pin_3_nr = SPI_SELO_PIN_3;
 685              	 .loc 3 39 0
 686 004a 0523     	 movs r3,#5
 687 004c 87F85330 	 strb r3,[r7,#83]
  40:../Libraries/SPI/spi.c **** 	#endif
  41:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 4)
  42:../Libraries/SPI/spi.c **** 		XMC_GPIO_PORT_t *master_selo_pin_4 = SPI_SELO_P_4;
 688              	 .loc 3 42 0
 689 0050 604B     	 ldr r3,.L16+4
 690 0052 FB64     	 str r3,[r7,#76]
  43:../Libraries/SPI/spi.c **** 		const uint8_t master_selo_pin_4_nr = SPI_SELO_PIN_4;
 691              	 .loc 3 43 0
 692 0054 0423     	 movs r3,#4
 693 0056 87F84B30 	 strb r3,[r7,#75]
  44:../Libraries/SPI/spi.c **** 	#endif
  45:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 5)
  46:../Libraries/SPI/spi.c **** 		XMC_GPIO_PORT_t *master_selo_pin_5 = SPI_SELO_P_5;
 694              	 .loc 3 46 0
 695 005a 5E4B     	 ldr r3,.L16+4
 696 005c 7B64     	 str r3,[r7,#68]
  47:../Libraries/SPI/spi.c **** 		const uint8_t master_selo_pin_5_nr = SPI_SELO_PIN_5;
 697              	 .loc 3 47 0
 698 005e 0323     	 movs r3,#3
 699 0060 87F84330 	 strb r3,[r7,#67]
  48:../Libraries/SPI/spi.c **** 	#endif
  49:../Libraries/SPI/spi.c **** 
  50:../Libraries/SPI/spi.c **** 	//Master Mode
  51:../Libraries/SPI/spi.c **** 	/*SPI Configuration*/
  52:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_CONFIG_t spi_config = {
 700              	 .loc 3 52 0
 701 0064 5C4A     	 ldr r2,.L16+8
 702 0066 07F13803 	 add r3,r7,#56
 703 006a 92E80300 	 ldmia r2,{r0,r1}
 704 006e 83E80300 	 stmia r3,{r0,r1}
  53:../Libraries/SPI/spi.c **** 		.baudrate       = SPI_BAUDRATE,
  54:../Libraries/SPI/spi.c **** 		.bus_mode       = XMC_SPI_CH_BUS_MODE_MASTER,
  55:../Libraries/SPI/spi.c **** 		.selo_inversion = SPI_SLAVE_SEL_POLARITY,
  56:../Libraries/SPI/spi.c **** 		.parity_mode    = XMC_USIC_CH_PARITY_MODE_NONE,
  57:../Libraries/SPI/spi.c **** 	};
  58:../Libraries/SPI/spi.c **** 
  59:../Libraries/SPI/spi.c **** 	/*GPIO Input pin configuration*/
  60:../Libraries/SPI/spi.c **** 	XMC_GPIO_CONFIG_t master_rx_pin_config = {
 705              	 .loc 3 60 0
 706 0072 07F12C03 	 add r3,r7,#44
 707 0076 0022     	 movs r2,#0
 708 0078 1A60     	 str r2,[r3]
 709 007a 0433     	 adds r3,r3,#4
 710 007c 0022     	 movs r2,#0
 711 007e 1A60     	 str r2,[r3]
 712 0080 0433     	 adds r3,r3,#4
 713 0082 0022     	 movs r2,#0
 714 0084 1A60     	 str r2,[r3]
 715 0086 0433     	 adds r3,r3,#4
 716 0088 1023     	 movs r3,#16
 717 008a 87F82C30 	 strb r3,[r7,#44]
  61:../Libraries/SPI/spi.c **** 		.mode = XMC_GPIO_MODE_INPUT_PULL_UP
  62:../Libraries/SPI/spi.c **** 	};
  63:../Libraries/SPI/spi.c **** 	XMC_GPIO_Init(master_rx_pin, master_rx_pin_nr, &master_rx_pin_config);
 718              	 .loc 3 63 0
 719 008e 97F88320 	 ldrb r2,[r7,#131]
 720 0092 07F12C03 	 add r3,r7,#44
 721 0096 D7F88400 	 ldr r0,[r7,#132]
 722 009a 1146     	 mov r1,r2
 723 009c 1A46     	 mov r2,r3
 724 009e FFF7FEFF 	 bl XMC_GPIO_Init
  64:../Libraries/SPI/spi.c **** 
  65:../Libraries/SPI/spi.c **** 	/*GPIO Output pin configuration*/
  66:../Libraries/SPI/spi.c **** 	XMC_GPIO_CONFIG_t master_tx_pin_config = {
 725              	 .loc 3 66 0
 726 00a2 07F12003 	 add r3,r7,#32
 727 00a6 0022     	 movs r2,#0
 728 00a8 1A60     	 str r2,[r3]
 729 00aa 0433     	 adds r3,r3,#4
 730 00ac 0022     	 movs r2,#0
 731 00ae 1A60     	 str r2,[r3]
 732 00b0 0433     	 adds r3,r3,#4
 733 00b2 0022     	 movs r2,#0
 734 00b4 1A60     	 str r2,[r3]
 735 00b6 0433     	 adds r3,r3,#4
 736 00b8 9023     	 movs r3,#144
 737 00ba 87F82030 	 strb r3,[r7,#32]
 738 00be 4FF48033 	 mov r3,#65536
 739 00c2 7B62     	 str r3,[r7,#36]
  67:../Libraries/SPI/spi.c **** 		.mode         = SPI_ALT_OUT,
  68:../Libraries/SPI/spi.c **** 		.output_level = XMC_GPIO_OUTPUT_LEVEL_LOW
  69:../Libraries/SPI/spi.c **** 	};
  70:../Libraries/SPI/spi.c **** 	XMC_GPIO_Init(master_tx_pin, master_tx_pin_nr, &master_tx_pin_config);
 740              	 .loc 3 70 0
 741 00c4 97F87B20 	 ldrb r2,[r7,#123]
 742 00c8 07F12003 	 add r3,r7,#32
 743 00cc F86F     	 ldr r0,[r7,#124]
 744 00ce 1146     	 mov r1,r2
 745 00d0 1A46     	 mov r2,r3
 746 00d2 FFF7FEFF 	 bl XMC_GPIO_Init
  71:../Libraries/SPI/spi.c **** 
  72:../Libraries/SPI/spi.c **** 	/*GPIO Clock pin configuration*/
  73:../Libraries/SPI/spi.c **** 	XMC_GPIO_CONFIG_t master_clck_pin_config = { .mode = SPI_ALT_OUT };
 747              	 .loc 3 73 0
 748 00d6 07F11403 	 add r3,r7,#20
 749 00da 0022     	 movs r2,#0
 750 00dc 1A60     	 str r2,[r3]
 751 00de 0433     	 adds r3,r3,#4
 752 00e0 0022     	 movs r2,#0
 753 00e2 1A60     	 str r2,[r3]
 754 00e4 0433     	 adds r3,r3,#4
 755 00e6 0022     	 movs r2,#0
 756 00e8 1A60     	 str r2,[r3]
 757 00ea 0433     	 adds r3,r3,#4
 758 00ec 9023     	 movs r3,#144
 759 00ee 3B75     	 strb r3,[r7,#20]
  74:../Libraries/SPI/spi.c **** 	XMC_GPIO_Init(master_clck_pin, master_clck_pin_nr, &master_clck_pin_config);
 760              	 .loc 3 74 0
 761 00f0 97F87320 	 ldrb r2,[r7,#115]
 762 00f4 07F11403 	 add r3,r7,#20
 763 00f8 786F     	 ldr r0,[r7,#116]
 764 00fa 1146     	 mov r1,r2
 765 00fc 1A46     	 mov r2,r3
 766 00fe FFF7FEFF 	 bl XMC_GPIO_Init
  75:../Libraries/SPI/spi.c **** 
  76:../Libraries/SPI/spi.c **** 	XMC_GPIO_CONFIG_t master_selo_pin_config = { .mode = SPI_ALT_OUT };
 767              	 .loc 3 76 0
 768 0102 07F10803 	 add r3,r7,#8
 769 0106 0022     	 movs r2,#0
 770 0108 1A60     	 str r2,[r3]
 771 010a 0433     	 adds r3,r3,#4
 772 010c 0022     	 movs r2,#0
 773 010e 1A60     	 str r2,[r3]
 774 0110 0433     	 adds r3,r3,#4
 775 0112 0022     	 movs r2,#0
 776 0114 1A60     	 str r2,[r3]
 777 0116 0433     	 adds r3,r3,#4
 778 0118 9023     	 movs r3,#144
 779 011a 3B72     	 strb r3,[r7,#8]
  77:../Libraries/SPI/spi.c **** 	XMC_GPIO_Init(master_selo_pin_0, master_selo_pin_0_nr, &master_selo_pin_config);
 780              	 .loc 3 77 0
 781 011c 97F86B20 	 ldrb r2,[r7,#107]
 782 0120 07F10803 	 add r3,r7,#8
 783 0124 F86E     	 ldr r0,[r7,#108]
 784 0126 1146     	 mov r1,r2
 785 0128 1A46     	 mov r2,r3
 786 012a FFF7FEFF 	 bl XMC_GPIO_Init
  78:../Libraries/SPI/spi.c **** 
  79:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 1)
  80:../Libraries/SPI/spi.c **** 		XMC_GPIO_Init(master_selo_pin_1, master_selo_pin_1_nr, &master_selo_pin_config);
 787              	 .loc 3 80 0
 788 012e 97F86320 	 ldrb r2,[r7,#99]
 789 0132 07F10803 	 add r3,r7,#8
 790 0136 786E     	 ldr r0,[r7,#100]
 791 0138 1146     	 mov r1,r2
 792 013a 1A46     	 mov r2,r3
 793 013c FFF7FEFF 	 bl XMC_GPIO_Init
  81:../Libraries/SPI/spi.c **** 	#endif
  82:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 2)
  83:../Libraries/SPI/spi.c **** 		XMC_GPIO_Init(master_selo_pin_2, master_selo_pin_2_nr, &master_selo_pin_config);
 794              	 .loc 3 83 0
 795 0140 97F85B20 	 ldrb r2,[r7,#91]
 796 0144 07F10803 	 add r3,r7,#8
 797 0148 F86D     	 ldr r0,[r7,#92]
 798 014a 1146     	 mov r1,r2
 799 014c 1A46     	 mov r2,r3
 800 014e FFF7FEFF 	 bl XMC_GPIO_Init
  84:../Libraries/SPI/spi.c **** 	#endif
  85:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 3)
  86:../Libraries/SPI/spi.c **** 		XMC_GPIO_Init(master_selo_pin_3, master_selo_pin_3_nr, &master_selo_pin_config);
 801              	 .loc 3 86 0
 802 0152 97F85320 	 ldrb r2,[r7,#83]
 803 0156 07F10803 	 add r3,r7,#8
 804 015a 786D     	 ldr r0,[r7,#84]
 805 015c 1146     	 mov r1,r2
 806 015e 1A46     	 mov r2,r3
 807 0160 FFF7FEFF 	 bl XMC_GPIO_Init
  87:../Libraries/SPI/spi.c **** 	#endif
  88:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 4)
  89:../Libraries/SPI/spi.c **** 		XMC_GPIO_Init(master_selo_pin_4, master_selo_pin_4_nr, &master_selo_pin_config);
 808              	 .loc 3 89 0
 809 0164 97F84B20 	 ldrb r2,[r7,#75]
 810 0168 07F10803 	 add r3,r7,#8
 811 016c F86C     	 ldr r0,[r7,#76]
 812 016e 1146     	 mov r1,r2
 813 0170 1A46     	 mov r2,r3
 814 0172 FFF7FEFF 	 bl XMC_GPIO_Init
  90:../Libraries/SPI/spi.c **** 	#endif
  91:../Libraries/SPI/spi.c **** 	#if (NUMBER_OF_SPI_SLAVES > 5)
  92:../Libraries/SPI/spi.c **** 		XMC_GPIO_Init(master_selo_pin_5, master_selo_pin_5_nr, &master_selo_pin_config);
 815              	 .loc 3 92 0
 816 0176 97F84320 	 ldrb r2,[r7,#67]
 817 017a 07F10803 	 add r3,r7,#8
 818 017e 786C     	 ldr r0,[r7,#68]
 819 0180 1146     	 mov r1,r2
 820 0182 1A46     	 mov r2,r3
 821 0184 FFF7FEFF 	 bl XMC_GPIO_Init
  93:../Libraries/SPI/spi.c **** 	#endif
  94:../Libraries/SPI/spi.c **** 
  95:../Libraries/SPI/spi.c **** 	/*Initialize SPI*/
  96:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_Init(channel, &spi_config);
 822              	 .loc 3 96 0
 823 0188 07F13803 	 add r3,r7,#56
 824 018c 7868     	 ldr r0,[r7,#4]
 825 018e 1946     	 mov r1,r3
 826 0190 FFF7FEFF 	 bl XMC_SPI_CH_Init
  97:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_ConfigureShiftClockOutput(channel, SPI_CLK_MODE,
 827              	 .loc 3 97 0
 828 0194 7868     	 ldr r0,[r7,#4]
 829 0196 4FF08041 	 mov r1,#1073741824
 830 019a 0022     	 movs r2,#0
 831 019c FFF7FEFF 	 bl XMC_SPI_CH_ConfigureShiftClockOutput
  98:../Libraries/SPI/spi.c **** 	                                     XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  99:../Libraries/SPI/spi.c **** 
 100:../Libraries/SPI/spi.c **** 	/*Start SPI*/
 101:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_Start(channel);
 832              	 .loc 3 101 0
 833 01a0 7868     	 ldr r0,[r7,#4]
 834 01a2 FFF7FEFF 	 bl XMC_SPI_CH_Start
 102:../Libraries/SPI/spi.c **** 
 103:../Libraries/SPI/spi.c **** 	/*Settings (Bit-Order, Word-Length, FIFO)*/
 104:../Libraries/SPI/spi.c **** 	if (SPI_MSB_FIRST) XMC_SPI_CH_SetBitOrderMsbFirst(channel);
 835              	 .loc 3 104 0
 836 01a6 7868     	 ldr r0,[r7,#4]
 837 01a8 FFF7FEFF 	 bl XMC_SPI_CH_SetBitOrderMsbFirst
 105:../Libraries/SPI/spi.c **** 	else   XMC_SPI_CH_SetBitOrderLsbFirst(channel);
 106:../Libraries/SPI/spi.c **** 
 107:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_SetWordLength(channel, SPI_WORDLENGTH);
 838              	 .loc 3 107 0
 839 01ac 7868     	 ldr r0,[r7,#4]
 840 01ae 0821     	 movs r1,#8
 841 01b0 FFF7FEFF 	 bl XMC_SPI_CH_SetWordLength
 108:../Libraries/SPI/spi.c **** 	XMC_USIC_CH_RXFIFO_Configure(channel, 0, 1, 0);
 842              	 .loc 3 108 0
 843 01b4 7868     	 ldr r0,[r7,#4]
 844 01b6 0021     	 movs r1,#0
 845 01b8 0122     	 movs r2,#1
 846 01ba 0023     	 movs r3,#0
 847 01bc FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_Configure
 109:../Libraries/SPI/spi.c **** 
 110:../Libraries/SPI/spi.c **** 	/*Input source selected*/
 111:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_SetInputSource(channel, SPI_CH_INPUT, USIC_IN);
 848              	 .loc 3 111 0
 849 01c0 7868     	 ldr r0,[r7,#4]
 850 01c2 0021     	 movs r1,#0
 851 01c4 0022     	 movs r2,#0
 852 01c6 FFF7FEFF 	 bl XMC_SPI_CH_SetInputSource
 112:../Libraries/SPI/spi.c **** }
 853              	 .loc 3 112 0
 854 01ca 8837     	 adds r7,r7,#136
 855              	.LCFI71:
 856              	 .cfi_def_cfa_offset 8
 857 01cc BD46     	 mov sp,r7
 858              	.LCFI72:
 859              	 .cfi_def_cfa_register 13
 860              	 
 861 01ce 80BD     	 pop {r7,pc}
 862              	.L17:
 863              	 .align 2
 864              	.L16:
 865 01d0 00810248 	 .word 1208123648
 866 01d4 00840248 	 .word 1208124416
 867 01d8 00000000 	 .word .LC0
 868              	 .cfi_endproc
 869              	.LFE230:
 871              	 .section .text.spi_transfer,"ax",%progbits
 872              	 .align 2
 873              	 .global spi_transfer
 874              	 .thumb
 875              	 .thumb_func
 877              	spi_transfer:
 878              	.LFB231:
 113:../Libraries/SPI/spi.c **** 
 114:../Libraries/SPI/spi.c **** void spi_transfer(XMC_USIC_CH_t *const channel, uint8_t selo, uint16_t *data_in, uint16_t *data_out
 879              	 .loc 3 114 0
 880              	 .cfi_startproc
 881              	 
 882              	 
 883 0000 90B5     	 push {r4,r7,lr}
 884              	.LCFI73:
 885              	 .cfi_def_cfa_offset 12
 886              	 .cfi_offset 4,-12
 887              	 .cfi_offset 7,-8
 888              	 .cfi_offset 14,-4
 889 0002 87B0     	 sub sp,sp,#28
 890              	.LCFI74:
 891              	 .cfi_def_cfa_offset 40
 892 0004 00AF     	 add r7,sp,#0
 893              	.LCFI75:
 894              	 .cfi_def_cfa_register 7
 895 0006 F860     	 str r0,[r7,#12]
 896 0008 7A60     	 str r2,[r7,#4]
 897 000a 3B60     	 str r3,[r7]
 898 000c 0B46     	 mov r3,r1
 899 000e FB72     	 strb r3,[r7,#11]
 115:../Libraries/SPI/spi.c **** 	if (selo < NUMBER_OF_SPI_SLAVES) {
 900              	 .loc 3 115 0
 901 0010 FB7A     	 ldrb r3,[r7,#11]
 902 0012 052B     	 cmp r3,#5
 903 0014 26D8     	 bhi .L18
 116:../Libraries/SPI/spi.c **** 		XMC_SPI_CH_EnableSlaveSelect(channel, XMC_SPI_CH_SLAVE_SELECT_0 << selo);
 904              	 .loc 3 116 0
 905 0016 FB7A     	 ldrb r3,[r7,#11]
 906 0018 4FF48032 	 mov r2,#65536
 907 001c 02FA03F3 	 lsl r3,r2,r3
 908 0020 F868     	 ldr r0,[r7,#12]
 909 0022 1946     	 mov r1,r3
 910 0024 FFF7FEFF 	 bl XMC_SPI_CH_EnableSlaveSelect
 911              	.LBB2:
 117:../Libraries/SPI/spi.c **** 
 118:../Libraries/SPI/spi.c **** 		for (uint8_t i = 0; i < length; i++) {
 912              	 .loc 3 118 0
 913 0028 0023     	 movs r3,#0
 914 002a FB75     	 strb r3,[r7,#23]
 915 002c 12E0     	 b .L20
 916              	.L21:
 119:../Libraries/SPI/spi.c **** 			data_out[i] = spi_byte(channel, data_in[i]);
 917              	 .loc 3 119 0 discriminator 3
 918 002e FB7D     	 ldrb r3,[r7,#23]
 919 0030 5B00     	 lsls r3,r3,#1
 920 0032 3A68     	 ldr r2,[r7]
 921 0034 D418     	 adds r4,r2,r3
 922 0036 FB7D     	 ldrb r3,[r7,#23]
 923 0038 5B00     	 lsls r3,r3,#1
 924 003a 7A68     	 ldr r2,[r7,#4]
 925 003c 1344     	 add r3,r3,r2
 926 003e 1B88     	 ldrh r3,[r3]
 927 0040 F868     	 ldr r0,[r7,#12]
 928 0042 1946     	 mov r1,r3
 929 0044 FFF7FEFF 	 bl spi_byte
 930 0048 0346     	 mov r3,r0
 931 004a 9BB2     	 uxth r3,r3
 932 004c 2380     	 strh r3,[r4]
 118:../Libraries/SPI/spi.c **** 			data_out[i] = spi_byte(channel, data_in[i]);
 933              	 .loc 3 118 0 discriminator 3
 934 004e FB7D     	 ldrb r3,[r7,#23]
 935 0050 0133     	 adds r3,r3,#1
 936 0052 FB75     	 strb r3,[r7,#23]
 937              	.L20:
 118:../Libraries/SPI/spi.c **** 			data_out[i] = spi_byte(channel, data_in[i]);
 938              	 .loc 3 118 0 is_stmt 0 discriminator 1
 939 0054 FA7D     	 ldrb r2,[r7,#23]
 940 0056 97F82830 	 ldrb r3,[r7,#40]
 941 005a 9A42     	 cmp r2,r3
 942 005c E7D3     	 bcc .L21
 943              	.LBE2:
 120:../Libraries/SPI/spi.c **** 		}
 121:../Libraries/SPI/spi.c **** 
 122:../Libraries/SPI/spi.c **** 		XMC_SPI_CH_DisableSlaveSelect(channel);
 944              	 .loc 3 122 0 is_stmt 1
 945 005e F868     	 ldr r0,[r7,#12]
 946 0060 FFF7FEFF 	 bl XMC_SPI_CH_DisableSlaveSelect
 947              	.L18:
 123:../Libraries/SPI/spi.c **** 	}
 124:../Libraries/SPI/spi.c **** }
 948              	 .loc 3 124 0
 949 0064 1C37     	 adds r7,r7,#28
 950              	.LCFI76:
 951              	 .cfi_def_cfa_offset 12
 952 0066 BD46     	 mov sp,r7
 953              	.LCFI77:
 954              	 .cfi_def_cfa_register 13
 955              	 
 956 0068 90BD     	 pop {r4,r7,pc}
 957              	 .cfi_endproc
 958              	.LFE231:
 960 006a 00BF     	 .section .text.spi_byte,"ax",%progbits
 961              	 .align 2
 962              	 .global spi_byte
 963              	 .thumb
 964              	 .thumb_func
 966              	spi_byte:
 967              	.LFB232:
 125:../Libraries/SPI/spi.c **** 
 126:../Libraries/SPI/spi.c **** uint8_t spi_byte(XMC_USIC_CH_t *const channel, uint16_t data) {
 968              	 .loc 3 126 0
 969              	 .cfi_startproc
 970              	 
 971              	 
 972 0000 80B5     	 push {r7,lr}
 973              	.LCFI78:
 974              	 .cfi_def_cfa_offset 8
 975              	 .cfi_offset 7,-8
 976              	 .cfi_offset 14,-4
 977 0002 82B0     	 sub sp,sp,#8
 978              	.LCFI79:
 979              	 .cfi_def_cfa_offset 16
 980 0004 00AF     	 add r7,sp,#0
 981              	.LCFI80:
 982              	 .cfi_def_cfa_register 7
 983 0006 7860     	 str r0,[r7,#4]
 984 0008 0B46     	 mov r3,r1
 985 000a 7B80     	 strh r3,[r7,#2]
 127:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_Transmit(channel, data, XMC_SPI_CH_MODE_STANDARD);
 986              	 .loc 3 127 0
 987 000c 7B88     	 ldrh r3,[r7,#2]
 988 000e 7868     	 ldr r0,[r7,#4]
 989 0010 1946     	 mov r1,r3
 990 0012 0022     	 movs r2,#0
 991 0014 FFF7FEFF 	 bl XMC_SPI_CH_Transmit
 128:../Libraries/SPI/spi.c **** 
 129:../Libraries/SPI/spi.c **** 	/*Wait till the byte has been transmitted*/
 130:../Libraries/SPI/spi.c **** 	while (!(XMC_SPI_CH_GetStatusFlag(channel) & XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION)) {
 992              	 .loc 3 130 0
 993 0018 00BF     	 nop
 994              	.L23:
 995              	 .loc 3 130 0 is_stmt 0 discriminator 1
 996 001a 7868     	 ldr r0,[r7,#4]
 997 001c FFF7FEFF 	 bl XMC_SPI_CH_GetStatusFlag
 998 0020 0346     	 mov r3,r0
 999 0022 03F48053 	 and r3,r3,#4096
 1000 0026 002B     	 cmp r3,#0
 1001 0028 F7D0     	 beq .L23
 131:../Libraries/SPI/spi.c **** 		/* wait for ACK */
 132:../Libraries/SPI/spi.c **** 	}
 133:../Libraries/SPI/spi.c **** 
 134:../Libraries/SPI/spi.c **** 	XMC_SPI_CH_ClearStatusFlag(channel, XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION);
 1002              	 .loc 3 134 0 is_stmt 1
 1003 002a 7868     	 ldr r0,[r7,#4]
 1004 002c 4FF48051 	 mov r1,#4096
 1005 0030 FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
 135:../Libraries/SPI/spi.c **** 
 136:../Libraries/SPI/spi.c **** 	while (XMC_USIC_CH_RXFIFO_IsEmpty(channel)) ;
 1006              	 .loc 3 136 0
 1007 0034 00BF     	 nop
 1008              	.L24:
 1009              	 .loc 3 136 0 is_stmt 0 discriminator 1
 1010 0036 7868     	 ldr r0,[r7,#4]
 1011 0038 FFF7FEFF 	 bl XMC_USIC_CH_RXFIFO_IsEmpty
 1012 003c 0346     	 mov r3,r0
 1013 003e 002B     	 cmp r3,#0
 1014 0040 F9D1     	 bne .L24
 137:../Libraries/SPI/spi.c **** 
 138:../Libraries/SPI/spi.c **** 	return (uint8_t)XMC_SPI_CH_GetReceivedData(channel);
 1015              	 .loc 3 138 0 is_stmt 1
 1016 0042 7868     	 ldr r0,[r7,#4]
 1017 0044 FFF7FEFF 	 bl XMC_SPI_CH_GetReceivedData
 1018 0048 0346     	 mov r3,r0
 1019 004a DBB2     	 uxtb r3,r3
 139:../Libraries/SPI/spi.c **** }
 1020              	 .loc 3 139 0
 1021 004c 1846     	 mov r0,r3
 1022 004e 0837     	 adds r7,r7,#8
 1023              	.LCFI81:
 1024              	 .cfi_def_cfa_offset 8
 1025 0050 BD46     	 mov sp,r7
 1026              	.LCFI82:
 1027              	 .cfi_def_cfa_register 13
 1028              	 
 1029 0052 80BD     	 pop {r7,pc}
 1030              	 .cfi_endproc
 1031              	.LFE232:
 1033              	 .text
 1034              	.Letext0:
 1035              	 .file 4 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1036              	 .file 5 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1037              	 .file 6 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc_gpio.h"
 1038              	 .file 7 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc4_gpio.h"
 1039              	 .file 8 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 spi.c
    {standard input}:20     .text.XMC_USIC_CH_SetInputSource:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_SetInputSource:00000000 XMC_USIC_CH_SetInputSource
    {standard input}:82     .text.XMC_USIC_CH_SetWordLength:00000000 $t
    {standard input}:86     .text.XMC_USIC_CH_SetWordLength:00000000 XMC_USIC_CH_SetWordLength
    {standard input}:135    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 $t
    {standard input}:139    .text.XMC_USIC_CH_RXFIFO_IsEmpty:00000000 XMC_USIC_CH_RXFIFO_IsEmpty
    {standard input}:184    .text.XMC_USIC_CH_ConfigureShiftClockOutput:00000000 $t
    {standard input}:188    .text.XMC_USIC_CH_ConfigureShiftClockOutput:00000000 XMC_USIC_CH_ConfigureShiftClockOutput
    {standard input}:239    .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:243    .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:288    .text.XMC_SPI_CH_Start:00000000 $t
    {standard input}:292    .text.XMC_SPI_CH_Start:00000000 XMC_SPI_CH_Start
    {standard input}:328    .text.XMC_SPI_CH_SetBitOrderMsbFirst:00000000 $t
    {standard input}:332    .text.XMC_SPI_CH_SetBitOrderMsbFirst:00000000 XMC_SPI_CH_SetBitOrderMsbFirst
    {standard input}:373    .text.XMC_SPI_CH_GetStatusFlag:00000000 $t
    {standard input}:377    .text.XMC_SPI_CH_GetStatusFlag:00000000 XMC_SPI_CH_GetStatusFlag
    {standard input}:416    .text.XMC_SPI_CH_ClearStatusFlag:00000000 $t
    {standard input}:420    .text.XMC_SPI_CH_ClearStatusFlag:00000000 XMC_SPI_CH_ClearStatusFlag
    {standard input}:463    .text.XMC_SPI_CH_ConfigureShiftClockOutput:00000000 $t
    {standard input}:467    .text.XMC_SPI_CH_ConfigureShiftClockOutput:00000000 XMC_SPI_CH_ConfigureShiftClockOutput
    {standard input}:505    .text.XMC_SPI_CH_SetWordLength:00000000 $t
    {standard input}:509    .text.XMC_SPI_CH_SetWordLength:00000000 XMC_SPI_CH_SetWordLength
    {standard input}:547    .text.XMC_SPI_CH_SetInputSource:00000000 $t
    {standard input}:551    .text.XMC_SPI_CH_SetInputSource:00000000 XMC_SPI_CH_SetInputSource
    {standard input}:612    .data.spi_master_ch:00000000 spi_master_ch
    {standard input}:609    .data.spi_master_ch:00000000 $d
    {standard input}:615    .rodata:00000000 $d
    {standard input}:622    .text.spi_init:00000000 $t
    {standard input}:627    .text.spi_init:00000000 spi_init
    {standard input}:865    .text.spi_init:000001d0 $d
    {standard input}:872    .text.spi_transfer:00000000 $t
    {standard input}:877    .text.spi_transfer:00000000 spi_transfer
    {standard input}:966    .text.spi_byte:00000000 spi_byte
    {standard input}:961    .text.spi_byte:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_GPIO_Init
XMC_SPI_CH_Init
XMC_USIC_CH_RXFIFO_Configure
XMC_SPI_CH_EnableSlaveSelect
XMC_SPI_CH_DisableSlaveSelect
XMC_SPI_CH_Transmit
XMC_SPI_CH_GetReceivedData

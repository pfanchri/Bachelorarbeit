   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "system_XMC4500.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .global SystemCoreClock
  20              	 .section .no_init,"aw",%progbits
  21              	 .align 2
  24              	SystemCoreClock:
  25 0000 00000000 	 .space 4
  26              	 .global g_chipid
  27              	 .align 2
  30              	g_chipid:
  31 0004 00000000 	 .space 16
  31      00000000 
  31      00000000 
  31      00000000 
  32              	 .section .text.delay,"ax",%progbits
  33              	 .align 2
  34              	 .thumb
  35              	 .thumb_func
  37              	delay:
  38              	.LFB123:
  39              	 .file 1 "../Startup/system_XMC4500.c"
   1:../Startup/system_XMC4500.c **** /******************************************************************************
   2:../Startup/system_XMC4500.c ****  * @file     system_XMC4500.c
   3:../Startup/system_XMC4500.c ****  * @brief    CMSIS Cortex-M4 Device Peripheral Access Layer Header File
   4:../Startup/system_XMC4500.c ****  *           for the Infineon XMC4500 Device Series
   5:../Startup/system_XMC4500.c ****  * @version  V3.1.0
   6:../Startup/system_XMC4500.c ****  * @date     20. Dec 2014
   7:../Startup/system_XMC4500.c ****  *
   8:../Startup/system_XMC4500.c ****  * Copyright (C) 2014 Infineon Technologies AG. All rights reserved.
   9:../Startup/system_XMC4500.c ****  *
  10:../Startup/system_XMC4500.c ****  *
  11:../Startup/system_XMC4500.c ****  * @par
  12:../Startup/system_XMC4500.c ****  * Infineon Technologies AG (Infineon) is supplying this software for use with 
  13:../Startup/system_XMC4500.c ****  * Infineon's microcontrollers.  This file can be freely distributed
  14:../Startup/system_XMC4500.c ****  * within development tools that are supporting such microcontrollers.
  15:../Startup/system_XMC4500.c ****  *
  16:../Startup/system_XMC4500.c ****  * @par
  17:../Startup/system_XMC4500.c ****  * THIS SOFTWARE IS PROVIDED AS IS.  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  18:../Startup/system_XMC4500.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  19:../Startup/system_XMC4500.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  20:../Startup/system_XMC4500.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  21:../Startup/system_XMC4500.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  22:../Startup/system_XMC4500.c ****  *
  23:../Startup/system_XMC4500.c ****  ******************************************************************************/
  24:../Startup/system_XMC4500.c **** 
  25:../Startup/system_XMC4500.c **** /********************** Version History ***************************************
  26:../Startup/system_XMC4500.c ****  * V3.1.0, Dec 2014, Added options to configure clock settings
  27:../Startup/system_XMC4500.c ****  ******************************************************************************/
  28:../Startup/system_XMC4500.c **** 
  29:../Startup/system_XMC4500.c **** /*******************************************************************************
  30:../Startup/system_XMC4500.c ****  * HEADER FILES
  31:../Startup/system_XMC4500.c ****  *******************************************************************************/
  32:../Startup/system_XMC4500.c **** #include <string.h>
  33:../Startup/system_XMC4500.c **** 
  34:../Startup/system_XMC4500.c **** #include <XMC4500.h>
  35:../Startup/system_XMC4500.c **** #include "system_XMC4500.h"
  36:../Startup/system_XMC4500.c **** 
  37:../Startup/system_XMC4500.c **** /*******************************************************************************
  38:../Startup/system_XMC4500.c ****  * MACROS
  39:../Startup/system_XMC4500.c ****  *******************************************************************************/
  40:../Startup/system_XMC4500.c **** 
  41:../Startup/system_XMC4500.c **** #define CHIPID_LOC ((uint8_t *)0x20000000UL)
  42:../Startup/system_XMC4500.c **** 
  43:../Startup/system_XMC4500.c **** /* Define WEAK attribute */
  44:../Startup/system_XMC4500.c **** #if !defined(__WEAK)
  45:../Startup/system_XMC4500.c **** #if defined ( __CC_ARM )
  46:../Startup/system_XMC4500.c **** #define __WEAK __attribute__ ((weak))
  47:../Startup/system_XMC4500.c **** #elif defined ( __ICCARM__ )
  48:../Startup/system_XMC4500.c **** #define __WEAK __weak
  49:../Startup/system_XMC4500.c **** #elif defined ( __GNUC__ )
  50:../Startup/system_XMC4500.c **** #define __WEAK __attribute__ ((weak))
  51:../Startup/system_XMC4500.c **** #elif defined ( __TASKING__ )
  52:../Startup/system_XMC4500.c **** #define __WEAK __attribute__ ((weak))
  53:../Startup/system_XMC4500.c **** #endif
  54:../Startup/system_XMC4500.c **** #endif
  55:../Startup/system_XMC4500.c **** 
  56:../Startup/system_XMC4500.c **** #define PMU_FLASH_WS          (0x3U)
  57:../Startup/system_XMC4500.c **** 
  58:../Startup/system_XMC4500.c **** #define FPLL_FREQUENCY        (120000000U)
  59:../Startup/system_XMC4500.c **** #define FOSCREF               (2500000U)
  60:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_50MHZ  (2500UL)
  61:../Startup/system_XMC4500.c **** #define DELAY_CNT_150US_50MHZ (7500UL)
  62:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_60MHZ  (3000UL)
  63:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_90MHZ  (4500UL)
  64:../Startup/system_XMC4500.c **** #define DELAY_CNT_50US_120MHZ (6000UL)
  65:../Startup/system_XMC4500.c **** 
  66:../Startup/system_XMC4500.c **** #define SCU_PLL_PLLSTAT_OSC_USABLE  (SCU_PLL_PLLSTAT_PLLHV_Msk | \
  67:../Startup/system_XMC4500.c ****                                      SCU_PLL_PLLSTAT_PLLLV_Msk | \
  68:../Startup/system_XMC4500.c ****                                      SCU_PLL_PLLSTAT_PLLSP_Msk)
  69:../Startup/system_XMC4500.c **** 
  70:../Startup/system_XMC4500.c **** /*
  71:../Startup/system_XMC4500.c **** //-------- <<< Use Configuration Wizard in Context Menu >>> ------------------
  72:../Startup/system_XMC4500.c **** */
  73:../Startup/system_XMC4500.c **** 
  74:../Startup/system_XMC4500.c **** /*
  75:../Startup/system_XMC4500.c **** // <h> Clock configuration
  76:../Startup/system_XMC4500.c **** */
  77:../Startup/system_XMC4500.c **** 
  78:../Startup/system_XMC4500.c **** /*
  79:../Startup/system_XMC4500.c **** //    <o> External crystal frequency [Hz]
  80:../Startup/system_XMC4500.c **** //       <8000000=> 8MHz
  81:../Startup/system_XMC4500.c **** //       <12000000=> 12MHz
  82:../Startup/system_XMC4500.c **** //       <16000000=> 16MHz
  83:../Startup/system_XMC4500.c **** //    <i> Defines external crystal frequency
  84:../Startup/system_XMC4500.c **** //    <i> Default: 8MHz
  85:../Startup/system_XMC4500.c **** */
  86:../Startup/system_XMC4500.c **** #define OSCHP_FREQUENCY (12000000U)
  87:../Startup/system_XMC4500.c **** 
  88:../Startup/system_XMC4500.c **** #if OSCHP_FREQUENCY == 8000000U
  89:../Startup/system_XMC4500.c **** #define USB_PDIV (1U)
  90:../Startup/system_XMC4500.c **** #define USB_NDIV (95U)
  91:../Startup/system_XMC4500.c **** #define USB_DIV (3U)
  92:../Startup/system_XMC4500.c **** 
  93:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 12000000U
  94:../Startup/system_XMC4500.c **** #define USB_PDIV (1U)
  95:../Startup/system_XMC4500.c **** #define USB_NDIV (63U)
  96:../Startup/system_XMC4500.c **** #define USB_DIV (3U)
  97:../Startup/system_XMC4500.c **** 
  98:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 16000000U
  99:../Startup/system_XMC4500.c **** #define USB_PDIV (1U)
 100:../Startup/system_XMC4500.c **** #define USB_NDIV (47U)
 101:../Startup/system_XMC4500.c **** #define USB_DIV (3U)
 102:../Startup/system_XMC4500.c **** 
 103:../Startup/system_XMC4500.c **** #else
 104:../Startup/system_XMC4500.c **** #error "External crystal frequency not supported"
 105:../Startup/system_XMC4500.c **** 
 106:../Startup/system_XMC4500.c **** #endif
 107:../Startup/system_XMC4500.c **** 
 108:../Startup/system_XMC4500.c **** /*
 109:../Startup/system_XMC4500.c **** //    <o> System clock (fSYS) source selection
 110:../Startup/system_XMC4500.c **** //       <0=> Backup clock (24MHz)
 111:../Startup/system_XMC4500.c **** //       <1=> Maximum clock frequency using PLL (120MHz)
 112:../Startup/system_XMC4500.c **** //    <i> Default: Maximum clock frequency using PLL (120MHz)
 113:../Startup/system_XMC4500.c **** */
 114:../Startup/system_XMC4500.c **** #define SYS_CLOCK_SRC 1
 115:../Startup/system_XMC4500.c **** #define SYS_CLOCK_SRC_OFI 0
 116:../Startup/system_XMC4500.c **** #define SYS_CLOCK_SRC_PLL 1
 117:../Startup/system_XMC4500.c **** 
 118:../Startup/system_XMC4500.c **** /*
 119:../Startup/system_XMC4500.c **** //    <o> Backup clock calibration mode
 120:../Startup/system_XMC4500.c **** //       <0=> Factory calibration
 121:../Startup/system_XMC4500.c **** //       <1=> Automatic calibration
 122:../Startup/system_XMC4500.c **** //    <i> Default: Automatic calibration
 123:../Startup/system_XMC4500.c **** */
 124:../Startup/system_XMC4500.c **** #define FOFI_CALIBRATION_MODE 1
 125:../Startup/system_XMC4500.c **** #define FOFI_CALIBRATION_MODE_FACTORY 0
 126:../Startup/system_XMC4500.c **** #define FOFI_CALIBRATION_MODE_AUTOMATIC 1
 127:../Startup/system_XMC4500.c **** 
 128:../Startup/system_XMC4500.c **** /*
 129:../Startup/system_XMC4500.c **** //    <o> Standby clock (fSTDBY) source selection
 130:../Startup/system_XMC4500.c **** //       <0=> Internal slow oscillator (32768Hz)
 131:../Startup/system_XMC4500.c **** //       <1=> External crystal (32768Hz)
 132:../Startup/system_XMC4500.c **** //    <i> Default: Internal slow oscillator (32768Hz)
 133:../Startup/system_XMC4500.c **** */
 134:../Startup/system_XMC4500.c **** #define STDBY_CLOCK_SRC 0
 135:../Startup/system_XMC4500.c **** #define STDBY_CLOCK_SRC_OSI 0
 136:../Startup/system_XMC4500.c **** #define STDBY_CLOCK_SRC_OSCULP 1
 137:../Startup/system_XMC4500.c **** 
 138:../Startup/system_XMC4500.c **** /*
 139:../Startup/system_XMC4500.c **** //    <o> PLL clock source selection
 140:../Startup/system_XMC4500.c **** //       <0=> External crystal
 141:../Startup/system_XMC4500.c **** //       <1=> External direct input
 142:../Startup/system_XMC4500.c **** //       <2=> Internal fast oscillator
 143:../Startup/system_XMC4500.c **** //    <i> Default: External crystal
 144:../Startup/system_XMC4500.c **** */
 145:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC 0
 146:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC_EXT_XTAL 0
 147:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC_EXT_DIRECT 1
 148:../Startup/system_XMC4500.c **** #define PLL_CLOCK_SRC_OFI 2
 149:../Startup/system_XMC4500.c **** 
 150:../Startup/system_XMC4500.c **** #if PLL_CLOCK_SRC == PLL_CLOCK_SRC_EXT_XTAL
 151:../Startup/system_XMC4500.c **** #if OSCHP_FREQUENCY == 8000000U
 152:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 153:../Startup/system_XMC4500.c **** #define PLL_NDIV (89U)
 154:../Startup/system_XMC4500.c **** #define PLL_K2DIV (2U)
 155:../Startup/system_XMC4500.c **** 
 156:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 12000000U
 157:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 158:../Startup/system_XMC4500.c **** #define PLL_NDIV (79U)
 159:../Startup/system_XMC4500.c **** #define PLL_K2DIV (3U)
 160:../Startup/system_XMC4500.c **** 
 161:../Startup/system_XMC4500.c **** #elif OSCHP_FREQUENCY == 16000000U
 162:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 163:../Startup/system_XMC4500.c **** #define PLL_NDIV (59U)
 164:../Startup/system_XMC4500.c **** #define PLL_K2DIV (3U)
 165:../Startup/system_XMC4500.c **** 
 166:../Startup/system_XMC4500.c **** #else
 167:../Startup/system_XMC4500.c **** #error "External crystal frequency not supported"
 168:../Startup/system_XMC4500.c **** 
 169:../Startup/system_XMC4500.c **** #endif
 170:../Startup/system_XMC4500.c **** 
 171:../Startup/system_XMC4500.c **** #define VCO ((OSCHP_FREQUENCY / (PLL_PDIV + 1UL)) * (PLL_NDIV + 1UL))
 172:../Startup/system_XMC4500.c **** 
 173:../Startup/system_XMC4500.c **** #else /* PLL_CLOCK_SRC == PLL_CLOCK_SRC_EXT_XTAL */
 174:../Startup/system_XMC4500.c **** 
 175:../Startup/system_XMC4500.c **** #define PLL_PDIV (1U)
 176:../Startup/system_XMC4500.c **** #define PLL_NDIV (39U)
 177:../Startup/system_XMC4500.c **** #define PLL_K2DIV (3U)
 178:../Startup/system_XMC4500.c **** 
 179:../Startup/system_XMC4500.c **** #define VCO ((OFI_FREQUENCY / (PLL_PDIV + 1UL)) * (PLL_NDIV + 1UL))
 180:../Startup/system_XMC4500.c **** 
 181:../Startup/system_XMC4500.c **** #endif /* PLL_CLOCK_SRC == PLL_CLOCK_SRC_OFI */
 182:../Startup/system_XMC4500.c **** 
 183:../Startup/system_XMC4500.c **** #define PLL_K2DIV_0 ((VCO / OFI_FREQUENCY) - 1UL)
 184:../Startup/system_XMC4500.c **** #define PLL_K2DIV_1 ((VCO / 60000000U) - 1UL)
 185:../Startup/system_XMC4500.c **** #define PLL_K2DIV_2 ((VCO / 90000000U) - 1UL)
 186:../Startup/system_XMC4500.c **** 
 187:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_USBCLK SCU_CLK_CLKCLR_USBCDI_Msk
 188:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_MMCCLK SCU_CLK_CLKCLR_MMCCDI_Msk
 189:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_ETHCLK SCU_CLK_CLKCLR_USBCDI_Msk
 190:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_EBUCLK SCU_CLK_CLKCLR_EBUCDI_Msk
 191:../Startup/system_XMC4500.c **** #define SCU_CLK_CLKCLR_ENABLE_CCUCLK SCU_CLK_CLKCLR_CCUCDI_Msk
 192:../Startup/system_XMC4500.c **** 
 193:../Startup/system_XMC4500.c **** #define SCU_CLK_USBCLKCR_USBSEL_USBPLL (0U << SCU_CLK_USBCLKCR_USBSEL_Pos)
 194:../Startup/system_XMC4500.c **** #define SCU_CLK_USBCLKCR_USBSEL_PLL    (1U << SCU_CLK_USBCLKCR_USBSEL_Pos)
 195:../Startup/system_XMC4500.c **** 
 196:../Startup/system_XMC4500.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_OFI      (0U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 197:../Startup/system_XMC4500.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_STANDBY  (1U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 198:../Startup/system_XMC4500.c **** #define SCU_CLK_WDTCLKCR_WDTSEL_PLL      (2U << SCU_CLK_WDTCLKCR_WDTSEL_Pos)
 199:../Startup/system_XMC4500.c **** 
 200:../Startup/system_XMC4500.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_SYS      (0U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 201:../Startup/system_XMC4500.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_USBPLL   (2U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 202:../Startup/system_XMC4500.c **** #define SCU_CLK_EXTCLKCR_ECKSEL_PLL      (3U << SCU_CLK_EXTCLKCR_ECKSEL_Pos)
 203:../Startup/system_XMC4500.c **** 
 204:../Startup/system_XMC4500.c **** #define EXTCLK_PIN_P0_8  (0)
 205:../Startup/system_XMC4500.c **** #define EXTCLK_PIN_P1_15 (1)
 206:../Startup/system_XMC4500.c **** 
 207:../Startup/system_XMC4500.c **** /*
 208:../Startup/system_XMC4500.c **** //    <h> Clock tree
 209:../Startup/system_XMC4500.c **** //        <o1.0> CPU clock divider
 210:../Startup/system_XMC4500.c **** //                   <0=> fCPU = fSYS
 211:../Startup/system_XMC4500.c **** //                   <1=> fCPU = fSYS / 2
 212:../Startup/system_XMC4500.c **** //        <o2.0>  Peripheral clock divider
 213:../Startup/system_XMC4500.c **** //                     <0=> fPB	= fCPU
 214:../Startup/system_XMC4500.c **** //                     <1=> fPB	= fCPU / 2
 215:../Startup/system_XMC4500.c **** //        <e.4> Enable CCU clock
 216:../Startup/system_XMC4500.c **** //             <o3.0>  CCU clock divider
 217:../Startup/system_XMC4500.c **** //                     <0=> fCCU = fCPU
 218:../Startup/system_XMC4500.c **** //                     <1=> fCCU = fCPU / 2
 219:../Startup/system_XMC4500.c **** //        </e>
 220:../Startup/system_XMC4500.c **** //        <e.5> Enable WDT clock
 221:../Startup/system_XMC4500.c **** //             <o4.0..7>  WDT clock divider <1-256><#-1>
 222:../Startup/system_XMC4500.c **** //             <o4.16..17> WDT clock source <0=> fOFI
 223:../Startup/system_XMC4500.c **** //                                          <1=> fSTDBY
 224:../Startup/system_XMC4500.c **** //                                          <2=> fPLL
 225:../Startup/system_XMC4500.c **** //        </e>
 226:../Startup/system_XMC4500.c **** //        <e.3> Enable EBU clock
 227:../Startup/system_XMC4500.c **** //             <o5.0..5>  EBU clock divider  <1-64><#-1>
 228:../Startup/system_XMC4500.c **** //        </e>
 229:../Startup/system_XMC4500.c **** //        <e.2> Enable ETH clock
 230:../Startup/system_XMC4500.c **** //        </e>
 231:../Startup/system_XMC4500.c **** //        <e.1> Enable MMC clock
 232:../Startup/system_XMC4500.c **** //        </e>
 233:../Startup/system_XMC4500.c **** //        <e.0> Enable USB clock
 234:../Startup/system_XMC4500.c **** //             <o6.16> USB clock source <0=> USBPLL
 235:../Startup/system_XMC4500.c **** //                                      <1=> PLL
 236:../Startup/system_XMC4500.c **** //        </e>
 237:../Startup/system_XMC4500.c **** //        <e7> External Clock configuration
 238:../Startup/system_XMC4500.c **** //            <o8.0..1> External Clock Source Selection
 239:../Startup/system_XMC4500.c **** //                  <0=> System clock
 240:../Startup/system_XMC4500.c **** //                  <2=> USB PLL clock
 241:../Startup/system_XMC4500.c **** //                  <3=> PLL clock
 242:../Startup/system_XMC4500.c **** //            <o8.16..24> External Clock divider <1-512><#-1>
 243:../Startup/system_XMC4500.c **** //            <i> Only valid for USB PLL and PLL clocks
 244:../Startup/system_XMC4500.c **** //            <o9.0> External Clock Pin Selection
 245:../Startup/system_XMC4500.c **** //                  <0=> P0.8
 246:../Startup/system_XMC4500.c **** //                  <1=> P1.15
 247:../Startup/system_XMC4500.c **** //        </e>
 248:../Startup/system_XMC4500.c **** //    </h>
 249:../Startup/system_XMC4500.c **** */
 250:../Startup/system_XMC4500.c **** #define ENABLE_SCUCLK (0U)
 251:../Startup/system_XMC4500.c **** #define CPUCLKDIV (0U)
 252:../Startup/system_XMC4500.c **** #define PBCLKDIV (0U)
 253:../Startup/system_XMC4500.c **** #define CCUCLKDIV (0U)
 254:../Startup/system_XMC4500.c **** #define WDTCLKDIV (0U | SCU_CLK_WDTCLKCR_WDTSEL_OFI)
 255:../Startup/system_XMC4500.c **** #define EBUCLKDIV (0U)
 256:../Startup/system_XMC4500.c **** #define USBCLKDIV (0U | SCU_CLK_USBCLKCR_USBSEL_USBPLL | USB_DIV)
 257:../Startup/system_XMC4500.c **** 
 258:../Startup/system_XMC4500.c **** #define ENABLE_EXTCLK (0U)
 259:../Startup/system_XMC4500.c **** #define EXTCLKDIV (0U | SCU_CLK_EXTCLKCR_ECKSEL_SYS)
 260:../Startup/system_XMC4500.c **** #define EXTCLK_PIN (0U)
 261:../Startup/system_XMC4500.c **** 
 262:../Startup/system_XMC4500.c **** #define ENABLE_PLL \
 263:../Startup/system_XMC4500.c ****     (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL) || \
 264:../Startup/system_XMC4500.c ****     ((ENABLE_SCUCLK & SCU_CLK_CLKSET_EBUCEN_Msk) != 0) || \
 265:../Startup/system_XMC4500.c ****     (((ENABLE_SCUCLK & SCU_CLK_CLKSET_USBCEN_Msk) != 0) && ((USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Ms
 266:../Startup/system_XMC4500.c ****     (((ENABLE_SCUCLK & SCU_CLK_CLKSET_WDTCEN_Msk) != 0) && ((WDTCLKDIV & SCU_CLK_WDTCLKCR_WDTSEL_Ms
 267:../Startup/system_XMC4500.c **** 
 268:../Startup/system_XMC4500.c **** /*
 269:../Startup/system_XMC4500.c **** // </h>
 270:../Startup/system_XMC4500.c **** */
 271:../Startup/system_XMC4500.c **** 
 272:../Startup/system_XMC4500.c **** /*
 273:../Startup/system_XMC4500.c **** //-------- <<< end of configuration section >>> ------------------
 274:../Startup/system_XMC4500.c **** */
 275:../Startup/system_XMC4500.c ****                                      
 276:../Startup/system_XMC4500.c **** /*******************************************************************************
 277:../Startup/system_XMC4500.c ****  * GLOBAL VARIABLES
 278:../Startup/system_XMC4500.c ****  *******************************************************************************/
 279:../Startup/system_XMC4500.c **** #if defined ( __CC_ARM )
 280:../Startup/system_XMC4500.c **** uint32_t SystemCoreClock __attribute__((at(0x2000FFC0)));
 281:../Startup/system_XMC4500.c **** uint8_t g_chipid[16] __attribute__((at(0x2000FFC4)));
 282:../Startup/system_XMC4500.c **** #elif defined ( __ICCARM__ )
 283:../Startup/system_XMC4500.c **** __no_init uint32_t SystemCoreClock;
 284:../Startup/system_XMC4500.c **** __no_init uint8_t g_chipid[16];
 285:../Startup/system_XMC4500.c **** #elif defined ( __GNUC__ )
 286:../Startup/system_XMC4500.c **** uint32_t SystemCoreClock __attribute__((section(".no_init")));
 287:../Startup/system_XMC4500.c **** uint8_t g_chipid[16] __attribute__((section(".no_init")));
 288:../Startup/system_XMC4500.c **** #elif defined ( __TASKING__ )
 289:../Startup/system_XMC4500.c **** uint32_t SystemCoreClock __at( 0x2000FFC0 );
 290:../Startup/system_XMC4500.c **** uint8_t g_chipid[16] __at( 0x2000FFC4 );
 291:../Startup/system_XMC4500.c **** #endif
 292:../Startup/system_XMC4500.c **** 
 293:../Startup/system_XMC4500.c **** extern uint32_t __Vectors;
 294:../Startup/system_XMC4500.c **** 
 295:../Startup/system_XMC4500.c **** /*******************************************************************************
 296:../Startup/system_XMC4500.c ****  * LOCAL FUNCTIONS
 297:../Startup/system_XMC4500.c ****  *******************************************************************************/
 298:../Startup/system_XMC4500.c **** static void delay(uint32_t cycles)
 299:../Startup/system_XMC4500.c **** {
  40              	 .loc 1 299 0
  41              	 .cfi_startproc
  42              	 
  43              	 
  44              	 
  45 0000 80B4     	 push {r7}
  46              	.LCFI0:
  47              	 .cfi_def_cfa_offset 4
  48              	 .cfi_offset 7,-4
  49 0002 85B0     	 sub sp,sp,#20
  50              	.LCFI1:
  51              	 .cfi_def_cfa_offset 24
  52 0004 00AF     	 add r7,sp,#0
  53              	.LCFI2:
  54              	 .cfi_def_cfa_register 7
  55 0006 7860     	 str r0,[r7,#4]
 300:../Startup/system_XMC4500.c ****   volatile uint32_t i;
 301:../Startup/system_XMC4500.c **** 
 302:../Startup/system_XMC4500.c ****   for(i = 0UL; i < cycles ;++i)
  56              	 .loc 1 302 0
  57 0008 0023     	 movs r3,#0
  58 000a FB60     	 str r3,[r7,#12]
  59 000c 03E0     	 b .L2
  60              	.L3:
  61              	.LBB10:
  62              	.LBB11:
  63              	 .file 2 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V4.30
   5:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     20. October 2015
   6:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
   9:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    All rights reserved.
  10:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****      specific prior written permission.
  20:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    *
  21:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  35:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  38:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  39:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  41:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  45:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  46:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  47:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
  51:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  52:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  53:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  54:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  58:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  60:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  62:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  63:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  64:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  65:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  69:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  71:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  73:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  74:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  75:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  76:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
  77:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
  79:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  80:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  82:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
  83:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  84:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
  86:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  87:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  88:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  89:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  90:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
  91:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  94:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  96:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  98:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  99:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****     \return               xPSR Register value
 133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****    return(0);
 326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("nop");
  64              	 .loc 2 375 0 discriminator 3
  65              	
  66 000e 00BF     	 nop
  67              	
  68              	 .thumb
  69              	.LBE11:
  70              	.LBE10:
  71              	 .loc 1 302 0 discriminator 3
  72 0010 FB68     	 ldr r3,[r7,#12]
  73 0012 0133     	 adds r3,r3,#1
  74 0014 FB60     	 str r3,[r7,#12]
  75              	.L2:
  76              	 .loc 1 302 0 is_stmt 0 discriminator 1
  77 0016 FA68     	 ldr r2,[r7,#12]
  78 0018 7B68     	 ldr r3,[r7,#4]
  79 001a 9A42     	 cmp r2,r3
  80 001c F7D3     	 bcc .L3
 303:../Startup/system_XMC4500.c ****   {
 304:../Startup/system_XMC4500.c ****     __NOP();
 305:../Startup/system_XMC4500.c ****   }
 306:../Startup/system_XMC4500.c **** }
  81              	 .loc 1 306 0 is_stmt 1
  82 001e 1437     	 adds r7,r7,#20
  83              	.LCFI3:
  84              	 .cfi_def_cfa_offset 4
  85 0020 BD46     	 mov sp,r7
  86              	.LCFI4:
  87              	 .cfi_def_cfa_register 13
  88              	 
  89 0022 5DF8047B 	 ldr r7,[sp],#4
  90              	.LCFI5:
  91              	 .cfi_restore 7
  92              	 .cfi_def_cfa_offset 0
  93 0026 7047     	 bx lr
  94              	 .cfi_endproc
  95              	.LFE123:
  97              	 .section .text.SystemInit,"ax",%progbits
  98              	 .align 2
  99              	 .weak SystemInit
 100              	 .thumb
 101              	 .thumb_func
 103              	SystemInit:
 104              	.LFB124:
 307:../Startup/system_XMC4500.c **** 
 308:../Startup/system_XMC4500.c **** /*******************************************************************************
 309:../Startup/system_XMC4500.c ****  * API IMPLEMENTATION
 310:../Startup/system_XMC4500.c ****  *******************************************************************************/
 311:../Startup/system_XMC4500.c **** 
 312:../Startup/system_XMC4500.c **** __WEAK void SystemInit(void)
 313:../Startup/system_XMC4500.c **** {
 105              	 .loc 1 313 0
 106              	 .cfi_startproc
 107              	 
 108              	 
 109 0000 98B5     	 push {r3,r4,r7,lr}
 110              	.LCFI6:
 111              	 .cfi_def_cfa_offset 16
 112              	 .cfi_offset 3,-16
 113              	 .cfi_offset 4,-12
 114              	 .cfi_offset 7,-8
 115              	 .cfi_offset 14,-4
 116 0002 00AF     	 add r7,sp,#0
 117              	.LCFI7:
 118              	 .cfi_def_cfa_register 7
 314:../Startup/system_XMC4500.c ****   memcpy(g_chipid, CHIPID_LOC, 16);
 119              	 .loc 1 314 0
 120 0004 054A     	 ldr r2,.L5
 121 0006 4FF00053 	 mov r3,#536870912
 122 000a 1446     	 mov r4,r2
 123 000c 0FCB     	 ldmia r3,{r0,r1,r2,r3}
 124 000e 84E80F00 	 stmia r4,{r0,r1,r2,r3}
 315:../Startup/system_XMC4500.c **** 
 316:../Startup/system_XMC4500.c ****   SystemCoreSetup();
 125              	 .loc 1 316 0
 126 0012 FFF7FEFF 	 bl SystemCoreSetup
 317:../Startup/system_XMC4500.c ****   SystemCoreClockSetup(); 
 127              	 .loc 1 317 0
 128 0016 FFF7FEFF 	 bl SystemCoreClockSetup
 318:../Startup/system_XMC4500.c **** }
 129              	 .loc 1 318 0
 130 001a 98BD     	 pop {r3,r4,r7,pc}
 131              	.L6:
 132              	 .align 2
 133              	.L5:
 134 001c 00000000 	 .word g_chipid
 135              	 .cfi_endproc
 136              	.LFE124:
 138              	 .section .text.SystemCoreSetup,"ax",%progbits
 139              	 .align 2
 140              	 .weak SystemCoreSetup
 141              	 .thumb
 142              	 .thumb_func
 144              	SystemCoreSetup:
 145              	.LFB125:
 319:../Startup/system_XMC4500.c **** 
 320:../Startup/system_XMC4500.c **** __WEAK void SystemCoreSetup(void)
 321:../Startup/system_XMC4500.c **** {
 146              	 .loc 1 321 0
 147              	 .cfi_startproc
 148              	 
 149              	 
 150              	 
 151 0000 80B4     	 push {r7}
 152              	.LCFI8:
 153              	 .cfi_def_cfa_offset 4
 154              	 .cfi_offset 7,-4
 155 0002 83B0     	 sub sp,sp,#12
 156              	.LCFI9:
 157              	 .cfi_def_cfa_offset 16
 158 0004 00AF     	 add r7,sp,#0
 159              	.LCFI10:
 160              	 .cfi_def_cfa_register 7
 161              	.LBB12:
 162              	.LBB13:
  71:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 163              	 .loc 2 71 0
 164              	
 165 0006 72B6     	 cpsid i
 166              	
 167              	 .thumb
 168              	.LBE13:
 169              	.LBE12:
 322:../Startup/system_XMC4500.c ****   uint32_t temp;
 323:../Startup/system_XMC4500.c **** 	
 324:../Startup/system_XMC4500.c ****   /* relocate vector table */
 325:../Startup/system_XMC4500.c ****   __disable_irq();
 326:../Startup/system_XMC4500.c ****   SCB->VTOR = (uint32_t)(&__Vectors);
 170              	 .loc 1 326 0
 171 0008 164B     	 ldr r3,.L8
 172 000a 174A     	 ldr r2,.L8+4
 173 000c 9A60     	 str r2,[r3,#8]
 174              	.LBB14:
 175              	.LBB15:
 376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Wait For Event
 391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Send Event
 402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("sev");
 407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****            after the instruction has been completed.
 415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 176              	 .loc 2 429 0
 177              	
 178 000e BFF34F8F 	 dsb 0xF
 179              	
 180              	 .thumb
 181              	.LBE15:
 182              	.LBE14:
 183              	.LBB16:
 184              	.LBB17:
  60:D:\Bachelorarbeit\Dave\Basisstation\Basisstation/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 185              	 .loc 2 60 0
 186              	
 187 0012 62B6     	 cpsie i
 188              	
 189              	 .thumb
 190              	.LBE17:
 191              	.LBE16:
 327:../Startup/system_XMC4500.c ****   __DSB();
 328:../Startup/system_XMC4500.c ****   __enable_irq();
 329:../Startup/system_XMC4500.c ****     
 330:../Startup/system_XMC4500.c **** #if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
 331:../Startup/system_XMC4500.c ****   SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 192              	 .loc 1 331 0
 193 0014 134A     	 ldr r2,.L8
 194 0016 134B     	 ldr r3,.L8
 195 0018 D3F88830 	 ldr r3,[r3,#136]
 196 001c 43F47003 	 orr r3,r3,#15728640
 197 0020 C2F88830 	 str r3,[r2,#136]
 332:../Startup/system_XMC4500.c ****                  (3UL << 11*2)  );               /* set CP11 Full Access */
 333:../Startup/system_XMC4500.c **** #endif
 334:../Startup/system_XMC4500.c **** 
 335:../Startup/system_XMC4500.c ****   /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
 336:../Startup/system_XMC4500.c ****   SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 198              	 .loc 1 336 0
 199 0024 0F4A     	 ldr r2,.L8
 200 0026 0F4B     	 ldr r3,.L8
 201 0028 5B69     	 ldr r3,[r3,#20]
 202 002a 23F00803 	 bic r3,r3,#8
 203 002e 5361     	 str r3,[r2,#20]
 337:../Startup/system_XMC4500.c **** 
 338:../Startup/system_XMC4500.c ****   temp = FLASH0->FCON;
 204              	 .loc 1 338 0
 205 0030 0E4B     	 ldr r3,.L8+8
 206 0032 03F58053 	 add r3,r3,#4096
 207 0036 1433     	 adds r3,r3,#20
 208 0038 1B68     	 ldr r3,[r3]
 209 003a 7B60     	 str r3,[r7,#4]
 339:../Startup/system_XMC4500.c ****   temp &= ~FLASH_FCON_WSPFLASH_Msk;
 210              	 .loc 1 339 0
 211 003c 7B68     	 ldr r3,[r7,#4]
 212 003e 23F00F03 	 bic r3,r3,#15
 213 0042 7B60     	 str r3,[r7,#4]
 340:../Startup/system_XMC4500.c ****   temp |= PMU_FLASH_WS;
 214              	 .loc 1 340 0
 215 0044 7B68     	 ldr r3,[r7,#4]
 216 0046 43F00303 	 orr r3,r3,#3
 217 004a 7B60     	 str r3,[r7,#4]
 341:../Startup/system_XMC4500.c ****   FLASH0->FCON = temp;
 218              	 .loc 1 341 0
 219 004c 074B     	 ldr r3,.L8+8
 220 004e 03F58053 	 add r3,r3,#4096
 221 0052 1433     	 adds r3,r3,#20
 222 0054 7A68     	 ldr r2,[r7,#4]
 223 0056 1A60     	 str r2,[r3]
 342:../Startup/system_XMC4500.c **** }
 224              	 .loc 1 342 0
 225 0058 0C37     	 adds r7,r7,#12
 226              	.LCFI11:
 227              	 .cfi_def_cfa_offset 4
 228 005a BD46     	 mov sp,r7
 229              	.LCFI12:
 230              	 .cfi_def_cfa_register 13
 231              	 
 232 005c 5DF8047B 	 ldr r7,[sp],#4
 233              	.LCFI13:
 234              	 .cfi_restore 7
 235              	 .cfi_def_cfa_offset 0
 236 0060 7047     	 bx lr
 237              	.L9:
 238 0062 00BF     	 .align 2
 239              	.L8:
 240 0064 00ED00E0 	 .word -536810240
 241 0068 00000000 	 .word __Vectors
 242 006c 00100058 	 .word 1476399104
 243              	 .cfi_endproc
 244              	.LFE125:
 246              	 .section .text.SystemCoreClockSetup,"ax",%progbits
 247              	 .align 2
 248              	 .weak SystemCoreClockSetup
 249              	 .thumb
 250              	 .thumb_func
 252              	SystemCoreClockSetup:
 253              	.LFB126:
 343:../Startup/system_XMC4500.c **** 
 344:../Startup/system_XMC4500.c **** __WEAK void SystemCoreClockSetup(void)
 345:../Startup/system_XMC4500.c **** {
 254              	 .loc 1 345 0
 255              	 .cfi_startproc
 256              	 
 257              	 
 258 0000 80B5     	 push {r7,lr}
 259              	.LCFI14:
 260              	 .cfi_def_cfa_offset 8
 261              	 .cfi_offset 7,-8
 262              	 .cfi_offset 14,-4
 263 0002 00AF     	 add r7,sp,#0
 264              	.LCFI15:
 265              	 .cfi_def_cfa_register 7
 346:../Startup/system_XMC4500.c **** #if FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_FACTORY
 347:../Startup/system_XMC4500.c ****   /* Enable factory calibration */
 348:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FOTR_Msk;
 349:../Startup/system_XMC4500.c **** #else
 350:../Startup/system_XMC4500.c ****   /* Automatic calibration uses the fSTDBY */
 351:../Startup/system_XMC4500.c **** 
 352:../Startup/system_XMC4500.c ****   /* Enable HIB domain */
 353:../Startup/system_XMC4500.c ****   /* Power up HIB domain if and only if it is currently powered down */
 354:../Startup/system_XMC4500.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 266              	 .loc 1 354 0
 267 0004 744B     	 ldr r3,.L21
 268 0006 1B68     	 ldr r3,[r3]
 269 0008 03F00103 	 and r3,r3,#1
 270 000c 002B     	 cmp r3,#0
 271 000e 0CD1     	 bne .L11
 355:../Startup/system_XMC4500.c ****   {
 356:../Startup/system_XMC4500.c ****     SCU_POWER->PWRSET |= SCU_POWER_PWRSET_HIB_Msk;
 272              	 .loc 1 356 0
 273 0010 714A     	 ldr r2,.L21
 274 0012 714B     	 ldr r3,.L21
 275 0014 5B68     	 ldr r3,[r3,#4]
 276 0016 43F00103 	 orr r3,r3,#1
 277 001a 5360     	 str r3,[r2,#4]
 357:../Startup/system_XMC4500.c **** 
 358:../Startup/system_XMC4500.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0)
 278              	 .loc 1 358 0
 279 001c 00BF     	 nop
 280              	.L12:
 281              	 .loc 1 358 0 is_stmt 0 discriminator 1
 282 001e 6E4B     	 ldr r3,.L21
 283 0020 1B68     	 ldr r3,[r3]
 284 0022 03F00103 	 and r3,r3,#1
 285 0026 002B     	 cmp r3,#0
 286 0028 F9D0     	 beq .L12
 287              	.L11:
 359:../Startup/system_XMC4500.c ****     {
 360:../Startup/system_XMC4500.c ****       /* wait until HIB domain is enabled */
 361:../Startup/system_XMC4500.c ****     }
 362:../Startup/system_XMC4500.c ****   }
 363:../Startup/system_XMC4500.c **** 
 364:../Startup/system_XMC4500.c ****   /* Remove the reset only if HIB domain were in a state of reset */
 365:../Startup/system_XMC4500.c ****   if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 288              	 .loc 1 365 0 is_stmt 1
 289 002a 6C4B     	 ldr r3,.L21+4
 290 002c 1B68     	 ldr r3,[r3]
 291 002e 03F40073 	 and r3,r3,#512
 292 0032 002B     	 cmp r3,#0
 293 0034 09D0     	 beq .L13
 366:../Startup/system_XMC4500.c ****   {
 367:../Startup/system_XMC4500.c ****     SCU_RESET->RSTCLR |= SCU_RESET_RSTCLR_HIBRS_Msk;
 294              	 .loc 1 367 0
 295 0036 694A     	 ldr r2,.L21+4
 296 0038 684B     	 ldr r3,.L21+4
 297 003a 9B68     	 ldr r3,[r3,#8]
 298 003c 43F40073 	 orr r3,r3,#512
 299 0040 9360     	 str r3,[r2,#8]
 368:../Startup/system_XMC4500.c ****     delay(DELAY_CNT_150US_50MHZ);
 300              	 .loc 1 368 0
 301 0042 41F64C50 	 movw r0,#7500
 302 0046 FFF7FEFF 	 bl delay
 303              	.L13:
 369:../Startup/system_XMC4500.c ****   }
 370:../Startup/system_XMC4500.c ****   
 371:../Startup/system_XMC4500.c **** #if STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP
 372:../Startup/system_XMC4500.c ****   /* Enable OSC_ULP */
 373:../Startup/system_XMC4500.c ****   if ((SCU_HIBERNATE->OSCULCTRL & SCU_HIBERNATE_OSCULCTRL_MODE_Msk) != 0UL)
 374:../Startup/system_XMC4500.c ****   {
 375:../Startup/system_XMC4500.c ****     /*enable OSC_ULP*/
 376:../Startup/system_XMC4500.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 377:../Startup/system_XMC4500.c ****     {
 378:../Startup/system_XMC4500.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 379:../Startup/system_XMC4500.c ****     }
 380:../Startup/system_XMC4500.c ****     SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 381:../Startup/system_XMC4500.c **** 
 382:../Startup/system_XMC4500.c ****     /* Check if the clock is OK using OSCULP Oscillator Watchdog*/
 383:../Startup/system_XMC4500.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 384:../Startup/system_XMC4500.c ****     {
 385:../Startup/system_XMC4500.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 386:../Startup/system_XMC4500.c ****     }
 387:../Startup/system_XMC4500.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 388:../Startup/system_XMC4500.c **** 
 389:../Startup/system_XMC4500.c ****     /* wait till clock is stable */
 390:../Startup/system_XMC4500.c ****     do
 391:../Startup/system_XMC4500.c ****     {
 392:../Startup/system_XMC4500.c ****       while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 393:../Startup/system_XMC4500.c ****       {
 394:../Startup/system_XMC4500.c ****         /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 395:../Startup/system_XMC4500.c ****       }
 396:../Startup/system_XMC4500.c ****       SCU_HIBERNATE->HDCLR |= SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 397:../Startup/system_XMC4500.c **** 
 398:../Startup/system_XMC4500.c ****       delay(DELAY_CNT_50US_50MHZ);
 399:../Startup/system_XMC4500.c **** 
 400:../Startup/system_XMC4500.c ****     } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 401:../Startup/system_XMC4500.c **** 
 402:../Startup/system_XMC4500.c ****   }
 403:../Startup/system_XMC4500.c **** 
 404:../Startup/system_XMC4500.c ****   /* now OSC_ULP is running and can be used*/
 405:../Startup/system_XMC4500.c ****   /* Select OSC_ULP as the clock source for RTC and STDBY*/
 406:../Startup/system_XMC4500.c ****   while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 407:../Startup/system_XMC4500.c ****   {
 408:../Startup/system_XMC4500.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 409:../Startup/system_XMC4500.c ****   }
 410:../Startup/system_XMC4500.c ****   SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_RCS_Msk | SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
 411:../Startup/system_XMC4500.c **** 
 412:../Startup/system_XMC4500.c **** #endif /* STDBY_CLOCK_SRC == STDBY_CLOCK_SRC_OSCULP */
 413:../Startup/system_XMC4500.c **** 
 414:../Startup/system_XMC4500.c ****   /* Enable automatic calibration of internal fast oscillator */
 415:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_AOTREN_Msk;
 304              	 .loc 1 415 0
 305 004a 654A     	 ldr r2,.L21+8
 306 004c 644B     	 ldr r3,.L21+8
 307 004e 5B68     	 ldr r3,[r3,#4]
 308 0050 43F40023 	 orr r3,r3,#524288
 309 0054 5360     	 str r3,[r2,#4]
 416:../Startup/system_XMC4500.c **** #endif /* FOFI_CALIBRATION_MODE == FOFI_CALIBRATION_MODE_AUTOMATIC */
 417:../Startup/system_XMC4500.c **** 
 418:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_50MHZ);
 310              	 .loc 1 418 0
 311 0056 40F6C410 	 movw r0,#2500
 312 005a FFF7FEFF 	 bl delay
 419:../Startup/system_XMC4500.c **** 
 420:../Startup/system_XMC4500.c **** #if ENABLE_PLL
 421:../Startup/system_XMC4500.c **** 
 422:../Startup/system_XMC4500.c ****   /* enable PLL */
 423:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 313              	 .loc 1 423 0
 314 005e 604A     	 ldr r2,.L21+8
 315 0060 5F4B     	 ldr r3,.L21+8
 316 0062 5B68     	 ldr r3,[r3,#4]
 317 0064 23F48033 	 bic r3,r3,#65536
 318 0068 23F00203 	 bic r3,r3,#2
 319 006c 5360     	 str r3,[r2,#4]
 424:../Startup/system_XMC4500.c **** 
 425:../Startup/system_XMC4500.c **** #if PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI
 426:../Startup/system_XMC4500.c ****   /* enable OSC_HP */
 427:../Startup/system_XMC4500.c ****   if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 320              	 .loc 1 427 0
 321 006e 5D4B     	 ldr r3,.L21+12
 322 0070 5B68     	 ldr r3,[r3,#4]
 323 0072 03F03003 	 and r3,r3,#48
 324 0076 002B     	 cmp r3,#0
 325 0078 27D0     	 beq .L14
 428:../Startup/system_XMC4500.c ****   {
 429:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Pos);
 326              	 .loc 1 429 0
 327 007a 5A4A     	 ldr r2,.L21+12
 328 007c 594B     	 ldr r3,.L21+12
 329 007e 5B68     	 ldr r3,[r3,#4]
 330 0080 23F03003 	 bic r3,r3,#48
 331 0084 5360     	 str r3,[r2,#4]
 430:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 332              	 .loc 1 430 0
 333 0086 FFF7FEFF 	 bl OSCHP_GetFrequency
 334 008a 0246     	 mov r2,r0
 335 008c 564B     	 ldr r3,.L21+16
 336 008e A3FB0223 	 umull r2,r3,r3,r2
 337 0092 1B0D     	 lsrs r3,r3,#20
 338 0094 013B     	 subs r3,r3,#1
 339 0096 1B04     	 lsls r3,r3,#16
 340 0098 5249     	 ldr r1,.L21+12
 341 009a 524A     	 ldr r2,.L21+12
 342 009c 5268     	 ldr r2,[r2,#4]
 343 009e 1343     	 orrs r3,r3,r2
 344 00a0 4B60     	 str r3,[r1,#4]
 431:../Startup/system_XMC4500.c **** 
 432:../Startup/system_XMC4500.c ****     /* select OSC_HP clock as PLL input */
 433:../Startup/system_XMC4500.c ****     SCU_PLL->PLLCON2 &= ~SCU_PLL_PLLCON2_PINSEL_Msk;
 345              	 .loc 1 433 0
 346 00a2 4F4A     	 ldr r2,.L21+8
 347 00a4 4E4B     	 ldr r3,.L21+8
 348 00a6 DB68     	 ldr r3,[r3,#12]
 349 00a8 23F00103 	 bic r3,r3,#1
 350 00ac D360     	 str r3,[r2,#12]
 434:../Startup/system_XMC4500.c **** 
 435:../Startup/system_XMC4500.c ****     /* restart OSC Watchdog */
 436:../Startup/system_XMC4500.c ****     SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 351              	 .loc 1 436 0
 352 00ae 4C4A     	 ldr r2,.L21+8
 353 00b0 4B4B     	 ldr r3,.L21+8
 354 00b2 5B68     	 ldr r3,[r3,#4]
 355 00b4 23F40033 	 bic r3,r3,#131072
 356 00b8 5360     	 str r3,[r2,#4]
 437:../Startup/system_XMC4500.c **** 
 438:../Startup/system_XMC4500.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 357              	 .loc 1 438 0
 358 00ba 00BF     	 nop
 359              	.L15:
 360              	 .loc 1 438 0 is_stmt 0 discriminator 1
 361 00bc 484B     	 ldr r3,.L21+8
 362 00be 1B68     	 ldr r3,[r3]
 363 00c0 03F46073 	 and r3,r3,#896
 364 00c4 B3F5607F 	 cmp r3,#896
 365 00c8 F8D1     	 bne .L15
 366              	.L14:
 439:../Startup/system_XMC4500.c ****     {
 440:../Startup/system_XMC4500.c ****       /* wait till OSC_HP output frequency is usable */
 441:../Startup/system_XMC4500.c ****     }
 442:../Startup/system_XMC4500.c ****   }
 443:../Startup/system_XMC4500.c **** #else /* PLL_CLOCK_SRC != PLL_CLOCK_SRC_OFI */
 444:../Startup/system_XMC4500.c **** 
 445:../Startup/system_XMC4500.c ****   /* select backup clock as PLL input */
 446:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON2 |= SCU_PLL_PLLCON2_PINSEL_Msk;
 447:../Startup/system_XMC4500.c **** #endif
 448:../Startup/system_XMC4500.c **** 
 449:../Startup/system_XMC4500.c ****   /* Go to bypass the Main PLL */
 450:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_VCOBYP_Msk;
 367              	 .loc 1 450 0 is_stmt 1
 368 00ca 454A     	 ldr r2,.L21+8
 369 00cc 444B     	 ldr r3,.L21+8
 370 00ce 5B68     	 ldr r3,[r3,#4]
 371 00d0 43F00103 	 orr r3,r3,#1
 372 00d4 5360     	 str r3,[r2,#4]
 451:../Startup/system_XMC4500.c **** 
 452:../Startup/system_XMC4500.c ****   /* disconnect Oscillator from PLL */
 453:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_FINDIS_Msk;
 373              	 .loc 1 453 0
 374 00d6 424A     	 ldr r2,.L21+8
 375 00d8 414B     	 ldr r3,.L21+8
 376 00da 5B68     	 ldr r3,[r3,#4]
 377 00dc 43F01003 	 orr r3,r3,#16
 378 00e0 5360     	 str r3,[r2,#4]
 454:../Startup/system_XMC4500.c **** 
 455:../Startup/system_XMC4500.c ****   /* Setup divider settings for main PLL */
 456:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 379              	 .loc 1 456 0
 380 00e2 3F4B     	 ldr r3,.L21+8
 381 00e4 414A     	 ldr r2,.L21+20
 382 00e6 9A60     	 str r2,[r3,#8]
 457:../Startup/system_XMC4500.c ****                       (PLL_K2DIV_0 << SCU_PLL_PLLCON1_K2DIV_Pos) |
 458:../Startup/system_XMC4500.c ****                       (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 459:../Startup/system_XMC4500.c **** 
 460:../Startup/system_XMC4500.c ****   /* Set OSCDISCDIS */
 461:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 383              	 .loc 1 461 0
 384 00e8 3D4A     	 ldr r2,.L21+8
 385 00ea 3D4B     	 ldr r3,.L21+8
 386 00ec 5B68     	 ldr r3,[r3,#4]
 387 00ee 43F04003 	 orr r3,r3,#64
 388 00f2 5360     	 str r3,[r2,#4]
 462:../Startup/system_XMC4500.c **** 
 463:../Startup/system_XMC4500.c ****   /* connect Oscillator to PLL */
 464:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_FINDIS_Msk;
 389              	 .loc 1 464 0
 390 00f4 3A4A     	 ldr r2,.L21+8
 391 00f6 3A4B     	 ldr r3,.L21+8
 392 00f8 5B68     	 ldr r3,[r3,#4]
 393 00fa 23F01003 	 bic r3,r3,#16
 394 00fe 5360     	 str r3,[r2,#4]
 465:../Startup/system_XMC4500.c **** 
 466:../Startup/system_XMC4500.c ****   /* restart PLL Lock detection */
 467:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 |= SCU_PLL_PLLCON0_RESLD_Msk;
 395              	 .loc 1 467 0
 396 0100 374A     	 ldr r2,.L21+8
 397 0102 374B     	 ldr r3,.L21+8
 398 0104 5B68     	 ldr r3,[r3,#4]
 399 0106 43F48023 	 orr r3,r3,#262144
 400 010a 5360     	 str r3,[r2,#4]
 468:../Startup/system_XMC4500.c **** 
 469:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 401              	 .loc 1 469 0
 402 010c 00BF     	 nop
 403              	.L16:
 404              	 .loc 1 469 0 is_stmt 0 discriminator 1
 405 010e 344B     	 ldr r3,.L21+8
 406 0110 1B68     	 ldr r3,[r3]
 407 0112 03F00403 	 and r3,r3,#4
 408 0116 002B     	 cmp r3,#0
 409 0118 F9D0     	 beq .L16
 470:../Startup/system_XMC4500.c ****   {
 471:../Startup/system_XMC4500.c ****     /* wait for PLL Lock */
 472:../Startup/system_XMC4500.c ****   }
 473:../Startup/system_XMC4500.c **** 
 474:../Startup/system_XMC4500.c ****   /* Disable bypass- put PLL clock back */
 475:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_VCOBYP_Msk;
 410              	 .loc 1 475 0 is_stmt 1
 411 011a 314A     	 ldr r2,.L21+8
 412 011c 304B     	 ldr r3,.L21+8
 413 011e 5B68     	 ldr r3,[r3,#4]
 414 0120 23F00103 	 bic r3,r3,#1
 415 0124 5360     	 str r3,[r2,#4]
 476:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 416              	 .loc 1 476 0
 417 0126 00BF     	 nop
 418              	.L17:
 419              	 .loc 1 476 0 is_stmt 0 discriminator 1
 420 0128 2D4B     	 ldr r3,.L21+8
 421 012a 1B68     	 ldr r3,[r3]
 422 012c 03F00103 	 and r3,r3,#1
 423 0130 002B     	 cmp r3,#0
 424 0132 F9D1     	 bne .L17
 477:../Startup/system_XMC4500.c ****   {
 478:../Startup/system_XMC4500.c ****     /* wait for normal mode */
 479:../Startup/system_XMC4500.c ****   }
 480:../Startup/system_XMC4500.c **** #endif /* ENABLE_PLL */
 481:../Startup/system_XMC4500.c **** 
 482:../Startup/system_XMC4500.c **** #if (SYS_CLOCK_SRC == SYS_CLOCK_SRC_PLL)
 483:../Startup/system_XMC4500.c ****   /* Switch system clock to PLL */
 484:../Startup/system_XMC4500.c ****   SCU_CLK->SYSCLKCR |= SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 425              	 .loc 1 484 0 is_stmt 1
 426 0134 2E4A     	 ldr r2,.L21+24
 427 0136 2E4B     	 ldr r3,.L21+24
 428 0138 DB68     	 ldr r3,[r3,#12]
 429 013a 43F48033 	 orr r3,r3,#65536
 430 013e D360     	 str r3,[r2,#12]
 485:../Startup/system_XMC4500.c **** #else
 486:../Startup/system_XMC4500.c ****   /* Switch system clock to backup clock */
 487:../Startup/system_XMC4500.c ****   SCU_CLK->SYSCLKCR &= ~SCU_CLK_SYSCLKCR_SYSSEL_Msk;
 488:../Startup/system_XMC4500.c **** #endif
 489:../Startup/system_XMC4500.c **** 
 490:../Startup/system_XMC4500.c ****   /* Before scaling to final frequency we need to setup the clock dividers */
 491:../Startup/system_XMC4500.c ****   SCU_CLK->PBCLKCR = PBCLKDIV;
 431              	 .loc 1 491 0
 432 0140 2B4B     	 ldr r3,.L21+24
 433 0142 0022     	 movs r2,#0
 434 0144 5A61     	 str r2,[r3,#20]
 492:../Startup/system_XMC4500.c ****   SCU_CLK->CPUCLKCR = CPUCLKDIV;
 435              	 .loc 1 492 0
 436 0146 2A4B     	 ldr r3,.L21+24
 437 0148 0022     	 movs r2,#0
 438 014a 1A61     	 str r2,[r3,#16]
 493:../Startup/system_XMC4500.c ****   SCU_CLK->CCUCLKCR = CCUCLKDIV;
 439              	 .loc 1 493 0
 440 014c 284B     	 ldr r3,.L21+24
 441 014e 0022     	 movs r2,#0
 442 0150 1A62     	 str r2,[r3,#32]
 494:../Startup/system_XMC4500.c ****   SCU_CLK->WDTCLKCR = WDTCLKDIV;
 443              	 .loc 1 494 0
 444 0152 274B     	 ldr r3,.L21+24
 445 0154 0022     	 movs r2,#0
 446 0156 5A62     	 str r2,[r3,#36]
 495:../Startup/system_XMC4500.c ****   SCU_CLK->EBUCLKCR = EBUCLKDIV;
 447              	 .loc 1 495 0
 448 0158 254B     	 ldr r3,.L21+24
 449 015a 0022     	 movs r2,#0
 450 015c DA61     	 str r2,[r3,#28]
 496:../Startup/system_XMC4500.c ****   SCU_CLK->USBCLKCR = USBCLKDIV;
 451              	 .loc 1 496 0
 452 015e 244B     	 ldr r3,.L21+24
 453 0160 0322     	 movs r2,#3
 454 0162 9A61     	 str r2,[r3,#24]
 497:../Startup/system_XMC4500.c **** 
 498:../Startup/system_XMC4500.c **** #if ENABLE_PLL
 499:../Startup/system_XMC4500.c ****   /* PLL frequency stepping...*/
 500:../Startup/system_XMC4500.c ****   /* Reset OSCDISCDIS */
 501:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 455              	 .loc 1 501 0
 456 0164 1E4A     	 ldr r2,.L21+8
 457 0166 1E4B     	 ldr r3,.L21+8
 458 0168 5B68     	 ldr r3,[r3,#4]
 459 016a 23F04003 	 bic r3,r3,#64
 460 016e 5360     	 str r3,[r2,#4]
 502:../Startup/system_XMC4500.c **** 
 503:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 461              	 .loc 1 503 0
 462 0170 1B4B     	 ldr r3,.L21+8
 463 0172 204A     	 ldr r2,.L21+28
 464 0174 9A60     	 str r2,[r3,#8]
 504:../Startup/system_XMC4500.c **** 	                    (PLL_K2DIV_1 << SCU_PLL_PLLCON1_K2DIV_Pos) |
 505:../Startup/system_XMC4500.c **** 	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 506:../Startup/system_XMC4500.c **** 
 507:../Startup/system_XMC4500.c **** 
 508:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_60MHZ);
 465              	 .loc 1 508 0
 466 0176 40F6B830 	 movw r0,#3000
 467 017a FFF7FEFF 	 bl delay
 509:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 468              	 .loc 1 509 0
 469 017e 00BF     	 nop
 470              	.L18:
 471              	 .loc 1 509 0 is_stmt 0 discriminator 1
 472 0180 174B     	 ldr r3,.L21+8
 473 0182 1B68     	 ldr r3,[r3]
 474 0184 03F00403 	 and r3,r3,#4
 475 0188 002B     	 cmp r3,#0
 476 018a F9D0     	 beq .L18
 510:../Startup/system_XMC4500.c ****   {
 511:../Startup/system_XMC4500.c ****     /* wait for PLL Lock */
 512:../Startup/system_XMC4500.c ****   }
 513:../Startup/system_XMC4500.c **** 
 514:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 477              	 .loc 1 514 0 is_stmt 1
 478 018c 144B     	 ldr r3,.L21+8
 479 018e 1A4A     	 ldr r2,.L21+32
 480 0190 9A60     	 str r2,[r3,#8]
 515:../Startup/system_XMC4500.c **** 	                    (PLL_K2DIV_2 << SCU_PLL_PLLCON1_K2DIV_Pos) |
 516:../Startup/system_XMC4500.c **** 	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 517:../Startup/system_XMC4500.c **** 
 518:../Startup/system_XMC4500.c **** 
 519:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_90MHZ);
 481              	 .loc 1 519 0
 482 0192 41F29410 	 movw r0,#4500
 483 0196 FFF7FEFF 	 bl delay
 520:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 484              	 .loc 1 520 0
 485 019a 00BF     	 nop
 486              	.L19:
 487              	 .loc 1 520 0 is_stmt 0 discriminator 1
 488 019c 104B     	 ldr r3,.L21+8
 489 019e 1B68     	 ldr r3,[r3]
 490 01a0 03F00403 	 and r3,r3,#4
 491 01a4 002B     	 cmp r3,#0
 492 01a6 F9D0     	 beq .L19
 521:../Startup/system_XMC4500.c ****   {
 522:../Startup/system_XMC4500.c ****     /* wait for PLL Lock */
 523:../Startup/system_XMC4500.c ****   }
 524:../Startup/system_XMC4500.c **** 
 525:../Startup/system_XMC4500.c ****   SCU_PLL->PLLCON1 = ((PLL_NDIV << SCU_PLL_PLLCON1_NDIV_Pos) |
 493              	 .loc 1 525 0 is_stmt 1
 494 01a8 0D4B     	 ldr r3,.L21+8
 495 01aa 144A     	 ldr r2,.L21+36
 496 01ac 9A60     	 str r2,[r3,#8]
 526:../Startup/system_XMC4500.c **** 	                    (PLL_K2DIV << SCU_PLL_PLLCON1_K2DIV_Pos) |
 527:../Startup/system_XMC4500.c **** 	                    (PLL_PDIV << SCU_PLL_PLLCON1_PDIV_Pos));
 528:../Startup/system_XMC4500.c **** 
 529:../Startup/system_XMC4500.c **** 
 530:../Startup/system_XMC4500.c ****   delay(DELAY_CNT_50US_120MHZ);
 497              	 .loc 1 530 0
 498 01ae 41F27070 	 movw r0,#6000
 499 01b2 FFF7FEFF 	 bl delay
 531:../Startup/system_XMC4500.c ****   while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 500              	 .loc 1 531 0
 501 01b6 00BF     	 nop
 502              	.L20:
 503              	 .loc 1 531 0 is_stmt 0 discriminator 1
 504 01b8 094B     	 ldr r3,.L21+8
 505 01ba 1B68     	 ldr r3,[r3]
 506 01bc 03F00403 	 and r3,r3,#4
 507 01c0 002B     	 cmp r3,#0
 508 01c2 F9D0     	 beq .L20
 532:../Startup/system_XMC4500.c ****   {
 533:../Startup/system_XMC4500.c ****     /* wait for PLL Lock */
 534:../Startup/system_XMC4500.c ****   }
 535:../Startup/system_XMC4500.c **** 
 536:../Startup/system_XMC4500.c ****   SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 509              	 .loc 1 536 0 is_stmt 1
 510 01c4 0E4B     	 ldr r3,.L21+40
 511 01c6 0522     	 movs r2,#5
 512 01c8 DA60     	 str r2,[r3,#12]
 537:../Startup/system_XMC4500.c **** #endif /* ENABLE_PLL */
 538:../Startup/system_XMC4500.c **** 
 539:../Startup/system_XMC4500.c **** #if (((ENABLE_SCUCLK & SCU_CLK_CLKSET_USBCEN_Msk) != 0) && ((USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Ms
 540:../Startup/system_XMC4500.c ****   /* enable USB PLL first */
 541:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON &= ~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 542:../Startup/system_XMC4500.c **** 
 543:../Startup/system_XMC4500.c ****   /* USB PLL uses as clock input the OSC_HP */
 544:../Startup/system_XMC4500.c ****   /* check and if not already running enable OSC_HP */
 545:../Startup/system_XMC4500.c ****   if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != 0U)
 546:../Startup/system_XMC4500.c ****   {
 547:../Startup/system_XMC4500.c ****     /* check if Main PLL is switched on for OSC WDG*/
 548:../Startup/system_XMC4500.c ****     if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0UL)
 549:../Startup/system_XMC4500.c ****     {
 550:../Startup/system_XMC4500.c ****       /* enable PLL first */
 551:../Startup/system_XMC4500.c ****       SCU_PLL->PLLCON0 &= ~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 552:../Startup/system_XMC4500.c ****     }
 553:../Startup/system_XMC4500.c **** 
 554:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL &= ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Pos);
 555:../Startup/system_XMC4500.c ****     SCU_OSC->OSCHPCTRL |= ((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos;
 556:../Startup/system_XMC4500.c **** 
 557:../Startup/system_XMC4500.c ****     /* restart OSC Watchdog */
 558:../Startup/system_XMC4500.c ****     SCU_PLL->PLLCON0 &= ~SCU_PLL_PLLCON0_OSCRES_Msk;
 559:../Startup/system_XMC4500.c **** 
 560:../Startup/system_XMC4500.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_OSC_USABLE) != SCU_PLL_PLLSTAT_OSC_USABLE)
 561:../Startup/system_XMC4500.c ****     {
 562:../Startup/system_XMC4500.c ****       /* wait till OSC_HP output frequency is usable */
 563:../Startup/system_XMC4500.c ****     }
 564:../Startup/system_XMC4500.c ****   }
 565:../Startup/system_XMC4500.c **** 
 566:../Startup/system_XMC4500.c ****   /* Setup USB PLL */
 567:../Startup/system_XMC4500.c ****   /* Go to bypass the USB PLL */
 568:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_VCOBYP_Msk;
 569:../Startup/system_XMC4500.c **** 
 570:../Startup/system_XMC4500.c ****   /* disconnect Oscillator from USB PLL */
 571:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_FINDIS_Msk;
 572:../Startup/system_XMC4500.c **** 
 573:../Startup/system_XMC4500.c ****   /* Setup Divider settings for USB PLL */
 574:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON = ((USB_NDIV << SCU_PLL_USBPLLCON_NDIV_Pos) |
 575:../Startup/system_XMC4500.c ****                         (USB_PDIV << SCU_PLL_USBPLLCON_PDIV_Pos));
 576:../Startup/system_XMC4500.c **** 
 577:../Startup/system_XMC4500.c ****   /* Set OSCDISCDIS */
 578:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 579:../Startup/system_XMC4500.c **** 
 580:../Startup/system_XMC4500.c ****   /* connect Oscillator to USB PLL */
 581:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_FINDIS_Msk;
 582:../Startup/system_XMC4500.c **** 
 583:../Startup/system_XMC4500.c ****   /* restart PLL Lock detection */
 584:../Startup/system_XMC4500.c ****   SCU_PLL->USBPLLCON |= SCU_PLL_USBPLLCON_RESLD_Msk;
 585:../Startup/system_XMC4500.c **** 
 586:../Startup/system_XMC4500.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 587:../Startup/system_XMC4500.c ****   {
 588:../Startup/system_XMC4500.c ****     /* wait for PLL Lock */
 589:../Startup/system_XMC4500.c ****   }
 590:../Startup/system_XMC4500.c **** #endif /* (USBCLKDIV & SCU_CLK_USBCLKCR_USBSEL_Msk) */
 591:../Startup/system_XMC4500.c **** 
 592:../Startup/system_XMC4500.c ****   /* Enable selected clocks */
 593:../Startup/system_XMC4500.c ****   SCU_CLK->CLKSET = ENABLE_SCUCLK;
 513              	 .loc 1 593 0
 514 01ca 094B     	 ldr r3,.L21+24
 515 01cc 0022     	 movs r2,#0
 516 01ce 5A60     	 str r2,[r3,#4]
 594:../Startup/system_XMC4500.c **** 
 595:../Startup/system_XMC4500.c **** #if ENABLE_EXTCLK == 1
 596:../Startup/system_XMC4500.c ****   /* Configure external clock */
 597:../Startup/system_XMC4500.c ****   SCU_CLK->EXTCLKCR = EXTCLKDIV;
 598:../Startup/system_XMC4500.c **** 
 599:../Startup/system_XMC4500.c **** #if EXTCLK_PIN == EXTCLK_PIN_P1_15
 600:../Startup/system_XMC4500.c ****   /* P1.15 */
 601:../Startup/system_XMC4500.c ****   PORT1->PDR1 &= ~PORT1_PDR1_PD15_Msk;
 602:../Startup/system_XMC4500.c ****   PORT1->IOCR12 = (PORT1->IOCR12 & ~PORT0_IOCR12_PC15_Msk) | (0x11U << PORT0_IOCR12_PC15_Pos);
 603:../Startup/system_XMC4500.c **** #else
 604:../Startup/system_XMC4500.c ****   /* P0.8 */
 605:../Startup/system_XMC4500.c ****   PORT0->HWSEL &= ~PORT0_HWSEL_HW8_Msk;
 606:../Startup/system_XMC4500.c ****   PORT0->PDR1 &= ~PORT0_PDR1_PD8_Msk;
 607:../Startup/system_XMC4500.c ****   PORT0->IOCR8 = (PORT0->IOCR8 & ~PORT0_IOCR8_PC8_Msk) | (0x11U << PORT0_IOCR8_PC8_Pos);
 608:../Startup/system_XMC4500.c **** #endif
 609:../Startup/system_XMC4500.c **** 
 610:../Startup/system_XMC4500.c **** #endif  /* ENABLE_EXTCLK == 1  */
 611:../Startup/system_XMC4500.c **** 
 612:../Startup/system_XMC4500.c ****   SystemCoreClockUpdate();
 517              	 .loc 1 612 0
 518 01d0 FFF7FEFF 	 bl SystemCoreClockUpdate
 613:../Startup/system_XMC4500.c **** }
 519              	 .loc 1 613 0
 520 01d4 80BD     	 pop {r7,pc}
 521              	.L22:
 522 01d6 00BF     	 .align 2
 523              	.L21:
 524 01d8 00420050 	 .word 1342194176
 525 01dc 00440050 	 .word 1342194688
 526 01e0 10470050 	 .word 1342195472
 527 01e4 00470050 	 .word 1342195456
 528 01e8 6BCA5F6B 	 .word 1801439851
 529 01ec 004F1301 	 .word 18042624
 530 01f0 00460050 	 .word 1342195200
 531 01f4 004F0701 	 .word 17256192
 532 01f8 004F0401 	 .word 17059584
 533 01fc 004F0301 	 .word 16994048
 534 0200 60410050 	 .word 1342194016
 535              	 .cfi_endproc
 536              	.LFE126:
 538              	 .section .text.SystemCoreClockUpdate,"ax",%progbits
 539              	 .align 2
 540              	 .weak SystemCoreClockUpdate
 541              	 .thumb
 542              	 .thumb_func
 544              	SystemCoreClockUpdate:
 545              	.LFB127:
 614:../Startup/system_XMC4500.c **** 
 615:../Startup/system_XMC4500.c **** __WEAK void SystemCoreClockUpdate(void)
 616:../Startup/system_XMC4500.c **** {
 546              	 .loc 1 616 0
 547              	 .cfi_startproc
 548              	 
 549              	 
 550 0000 80B5     	 push {r7,lr}
 551              	.LCFI16:
 552              	 .cfi_def_cfa_offset 8
 553              	 .cfi_offset 7,-8
 554              	 .cfi_offset 14,-4
 555 0002 84B0     	 sub sp,sp,#16
 556              	.LCFI17:
 557              	 .cfi_def_cfa_offset 24
 558 0004 00AF     	 add r7,sp,#0
 559              	.LCFI18:
 560              	 .cfi_def_cfa_register 7
 617:../Startup/system_XMC4500.c ****   uint32_t pdiv;
 618:../Startup/system_XMC4500.c ****   uint32_t ndiv;
 619:../Startup/system_XMC4500.c ****   uint32_t kdiv;
 620:../Startup/system_XMC4500.c ****   uint32_t temp;
 621:../Startup/system_XMC4500.c **** 
 622:../Startup/system_XMC4500.c ****   if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 561              	 .loc 1 622 0
 562 0006 2F4B     	 ldr r3,.L30
 563 0008 DB68     	 ldr r3,[r3,#12]
 564 000a 03F48033 	 and r3,r3,#65536
 565 000e 002B     	 cmp r3,#0
 566 0010 3ED0     	 beq .L24
 623:../Startup/system_XMC4500.c ****   {
 624:../Startup/system_XMC4500.c ****     /* fPLL is clock source for fSYS */
 625:../Startup/system_XMC4500.c ****     if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 567              	 .loc 1 625 0
 568 0012 2D4B     	 ldr r3,.L30+4
 569 0014 DB68     	 ldr r3,[r3,#12]
 570 0016 03F00103 	 and r3,r3,#1
 571 001a 002B     	 cmp r3,#0
 572 001c 02D0     	 beq .L25
 626:../Startup/system_XMC4500.c ****     {
 627:../Startup/system_XMC4500.c ****       /* PLL input clock is the backup clock (fOFI) */
 628:../Startup/system_XMC4500.c ****       temp = OFI_FREQUENCY;
 573              	 .loc 1 628 0
 574 001e 2B4B     	 ldr r3,.L30+8
 575 0020 FB60     	 str r3,[r7,#12]
 576 0022 02E0     	 b .L26
 577              	.L25:
 629:../Startup/system_XMC4500.c ****     }
 630:../Startup/system_XMC4500.c ****     else
 631:../Startup/system_XMC4500.c ****     {
 632:../Startup/system_XMC4500.c ****       /* PLL input clock is the high performance osicllator (fOSCHP) */
 633:../Startup/system_XMC4500.c ****       temp = OSCHP_GetFrequency();
 578              	 .loc 1 633 0
 579 0024 FFF7FEFF 	 bl OSCHP_GetFrequency
 580 0028 F860     	 str r0,[r7,#12]
 581              	.L26:
 634:../Startup/system_XMC4500.c ****     }
 635:../Startup/system_XMC4500.c **** 
 636:../Startup/system_XMC4500.c ****     /* check if PLL is locked */
 637:../Startup/system_XMC4500.c ****     if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 582              	 .loc 1 637 0
 583 002a 274B     	 ldr r3,.L30+4
 584 002c 1B68     	 ldr r3,[r3]
 585 002e 03F00403 	 and r3,r3,#4
 586 0032 002B     	 cmp r3,#0
 587 0034 20D0     	 beq .L27
 638:../Startup/system_XMC4500.c ****     {
 639:../Startup/system_XMC4500.c ****       /* PLL normal mode */
 640:../Startup/system_XMC4500.c ****       /* read back divider settings */
 641:../Startup/system_XMC4500.c ****       pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 588              	 .loc 1 641 0
 589 0036 244B     	 ldr r3,.L30+4
 590 0038 9B68     	 ldr r3,[r3,#8]
 591 003a 03F07063 	 and r3,r3,#251658240
 592 003e 1B0E     	 lsrs r3,r3,#24
 593 0040 0133     	 adds r3,r3,#1
 594 0042 BB60     	 str r3,[r7,#8]
 642:../Startup/system_XMC4500.c ****       ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 595              	 .loc 1 642 0
 596 0044 204B     	 ldr r3,.L30+4
 597 0046 9B68     	 ldr r3,[r3,#8]
 598 0048 03F4FE43 	 and r3,r3,#32512
 599 004c 1B0A     	 lsrs r3,r3,#8
 600 004e 0133     	 adds r3,r3,#1
 601 0050 7B60     	 str r3,[r7,#4]
 643:../Startup/system_XMC4500.c ****       kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 602              	 .loc 1 643 0
 603 0052 1D4B     	 ldr r3,.L30+4
 604 0054 9B68     	 ldr r3,[r3,#8]
 605 0056 03F4FE03 	 and r3,r3,#8323072
 606 005a 1B0C     	 lsrs r3,r3,#16
 607 005c 0133     	 adds r3,r3,#1
 608 005e 3B60     	 str r3,[r7]
 644:../Startup/system_XMC4500.c **** 
 645:../Startup/system_XMC4500.c ****       temp = (temp / (pdiv * kdiv)) * ndiv;
 609              	 .loc 1 645 0
 610 0060 BB68     	 ldr r3,[r7,#8]
 611 0062 3A68     	 ldr r2,[r7]
 612 0064 02FB03F3 	 mul r3,r2,r3
 613 0068 FA68     	 ldr r2,[r7,#12]
 614 006a B2FBF3F3 	 udiv r3,r2,r3
 615 006e 7A68     	 ldr r2,[r7,#4]
 616 0070 02FB03F3 	 mul r3,r2,r3
 617 0074 FB60     	 str r3,[r7,#12]
 618 0076 0DE0     	 b .L29
 619              	.L27:
 646:../Startup/system_XMC4500.c ****     }
 647:../Startup/system_XMC4500.c ****     else
 648:../Startup/system_XMC4500.c ****     {
 649:../Startup/system_XMC4500.c ****       /* PLL prescalar mode */
 650:../Startup/system_XMC4500.c ****       /* read back divider settings */
 651:../Startup/system_XMC4500.c ****       kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 620              	 .loc 1 651 0
 621 0078 134B     	 ldr r3,.L30+4
 622 007a 9B68     	 ldr r3,[r3,#8]
 623 007c 03F07F03 	 and r3,r3,#127
 624 0080 0133     	 adds r3,r3,#1
 625 0082 3B60     	 str r3,[r7]
 652:../Startup/system_XMC4500.c ****       
 653:../Startup/system_XMC4500.c ****       temp = (temp / kdiv);
 626              	 .loc 1 653 0
 627 0084 FA68     	 ldr r2,[r7,#12]
 628 0086 3B68     	 ldr r3,[r7]
 629 0088 B2FBF3F3 	 udiv r3,r2,r3
 630 008c FB60     	 str r3,[r7,#12]
 631 008e 01E0     	 b .L29
 632              	.L24:
 654:../Startup/system_XMC4500.c ****     }
 655:../Startup/system_XMC4500.c ****   }
 656:../Startup/system_XMC4500.c ****   else
 657:../Startup/system_XMC4500.c ****   {
 658:../Startup/system_XMC4500.c ****     /* fOFI is clock source for fSYS */    
 659:../Startup/system_XMC4500.c ****     temp = OFI_FREQUENCY;
 633              	 .loc 1 659 0
 634 0090 0E4B     	 ldr r3,.L30+8
 635 0092 FB60     	 str r3,[r7,#12]
 636              	.L29:
 660:../Startup/system_XMC4500.c ****   }
 661:../Startup/system_XMC4500.c **** 
 662:../Startup/system_XMC4500.c ****   temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 637              	 .loc 1 662 0
 638 0094 0B4B     	 ldr r3,.L30
 639 0096 DB68     	 ldr r3,[r3,#12]
 640 0098 DBB2     	 uxtb r3,r3
 641 009a 0133     	 adds r3,r3,#1
 642 009c FA68     	 ldr r2,[r7,#12]
 643 009e B2FBF3F3 	 udiv r3,r2,r3
 644 00a2 FB60     	 str r3,[r7,#12]
 663:../Startup/system_XMC4500.c ****   temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 645              	 .loc 1 663 0
 646 00a4 074B     	 ldr r3,.L30
 647 00a6 1B69     	 ldr r3,[r3,#16]
 648 00a8 03F00103 	 and r3,r3,#1
 649 00ac 0133     	 adds r3,r3,#1
 650 00ae FA68     	 ldr r2,[r7,#12]
 651 00b0 B2FBF3F3 	 udiv r3,r2,r3
 652 00b4 FB60     	 str r3,[r7,#12]
 664:../Startup/system_XMC4500.c **** 
 665:../Startup/system_XMC4500.c ****   SystemCoreClock = temp;
 653              	 .loc 1 665 0
 654 00b6 064A     	 ldr r2,.L30+12
 655 00b8 FB68     	 ldr r3,[r7,#12]
 656 00ba 1360     	 str r3,[r2]
 666:../Startup/system_XMC4500.c **** }
 657              	 .loc 1 666 0
 658 00bc 1037     	 adds r7,r7,#16
 659              	.LCFI19:
 660              	 .cfi_def_cfa_offset 8
 661 00be BD46     	 mov sp,r7
 662              	.LCFI20:
 663              	 .cfi_def_cfa_register 13
 664              	 
 665 00c0 80BD     	 pop {r7,pc}
 666              	.L31:
 667 00c2 00BF     	 .align 2
 668              	.L30:
 669 00c4 00460050 	 .word 1342195200
 670 00c8 10470050 	 .word 1342195472
 671 00cc 00366E01 	 .word 24000000
 672 00d0 00000000 	 .word SystemCoreClock
 673              	 .cfi_endproc
 674              	.LFE127:
 676              	 .section .text.OSCHP_GetFrequency,"ax",%progbits
 677              	 .align 2
 678              	 .weak OSCHP_GetFrequency
 679              	 .thumb
 680              	 .thumb_func
 682              	OSCHP_GetFrequency:
 683              	.LFB128:
 667:../Startup/system_XMC4500.c **** 
 668:../Startup/system_XMC4500.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 669:../Startup/system_XMC4500.c **** {
 684              	 .loc 1 669 0
 685              	 .cfi_startproc
 686              	 
 687              	 
 688              	 
 689 0000 80B4     	 push {r7}
 690              	.LCFI21:
 691              	 .cfi_def_cfa_offset 4
 692              	 .cfi_offset 7,-4
 693 0002 00AF     	 add r7,sp,#0
 694              	.LCFI22:
 695              	 .cfi_def_cfa_register 7
 670:../Startup/system_XMC4500.c ****   return OSCHP_FREQUENCY;
 696              	 .loc 1 670 0
 697 0004 024B     	 ldr r3,.L34
 671:../Startup/system_XMC4500.c **** }
 698              	 .loc 1 671 0
 699 0006 1846     	 mov r0,r3
 700 0008 BD46     	 mov sp,r7
 701              	.LCFI23:
 702              	 .cfi_def_cfa_register 13
 703              	 
 704 000a 5DF8047B 	 ldr r7,[sp],#4
 705              	.LCFI24:
 706              	 .cfi_restore 7
 707              	 .cfi_def_cfa_offset 0
 708 000e 7047     	 bx lr
 709              	.L35:
 710              	 .align 2
 711              	.L34:
 712 0010 001BB700 	 .word 12000000
 713              	 .cfi_endproc
 714              	.LFE128:
 716              	 .text
 717              	.Letext0:
 718              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 719              	 .file 4 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 720              	 .file 5 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Include/core_cm4.h"
 721              	 .file 6 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_XMC4500.c
    {standard input}:24     .no_init:00000000 SystemCoreClock
    {standard input}:21     .no_init:00000000 $d
    {standard input}:30     .no_init:00000004 g_chipid
    {standard input}:33     .text.delay:00000000 $t
    {standard input}:37     .text.delay:00000000 delay
    {standard input}:98     .text.SystemInit:00000000 $t
    {standard input}:103    .text.SystemInit:00000000 SystemInit
    {standard input}:144    .text.SystemCoreSetup:00000000 SystemCoreSetup
    {standard input}:252    .text.SystemCoreClockSetup:00000000 SystemCoreClockSetup
    {standard input}:134    .text.SystemInit:0000001c $d
    {standard input}:139    .text.SystemCoreSetup:00000000 $t
    {standard input}:240    .text.SystemCoreSetup:00000064 $d
    {standard input}:247    .text.SystemCoreClockSetup:00000000 $t
    {standard input}:682    .text.OSCHP_GetFrequency:00000000 OSCHP_GetFrequency
    {standard input}:544    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
    {standard input}:524    .text.SystemCoreClockSetup:000001d8 $d
    {standard input}:539    .text.SystemCoreClockUpdate:00000000 $t
    {standard input}:669    .text.SystemCoreClockUpdate:000000c4 $d
    {standard input}:677    .text.OSCHP_GetFrequency:00000000 $t
    {standard input}:712    .text.OSCHP_GetFrequency:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__Vectors

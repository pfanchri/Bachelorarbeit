   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_sdmmc.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SDMMC_SetDataLineTimeout,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_SDMMC_SetDataLineTimeout:
  25              	.LFB160:
  26              	 .file 1 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc_sdmmc.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
   2:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
   3:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @file xmc_sdmmc.h
   4:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @date 2016-04-07
   5:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
   6:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @cond
   7:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  **************************************************************************************************
   8:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   9:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  10:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * All rights reserved.                        
  12:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *                                             
  13:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * following conditions are met:   
  15:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *                                                                              
  16:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * disclaimer.                        
  18:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 
  19:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 
  22:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * products derived from this software without specific prior written permission.                  
  24:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *                                                                              
  25:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *                                                                              
  33:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  **************************************************************************************************
  36:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  37:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Change History
  38:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * --------------
  39:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  40:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 2015-02-20:
  41:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *     - Initial version
  42:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *     - Documentation updates
  43:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  44:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 2015-06-20:
  45:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  46:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  47:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 2016-01-16:
  48:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *     - Added the following APIs to the XMC_SDMMC low level driver <br>
  49:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *         1) XMC_SDMMC_EnableDelayCmdDatLines <br>
  50:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *         2) XMC_SDMMC_DisableDelayCmdDatLines <br>
  51:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *         3) XMC_SDMMC_SetDelay <br>
  52:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *         4) XMC_SDMMC_EnableHighSpeed <br>
  53:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *         5) XMC_SDMMC_DisableHighSpeed <br>
  54:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  55:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 2016-04-07:
  56:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *     - Added XMC_SDMMC_COMMAND_RESPONSE_t
  57:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  58:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @endcond
  59:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
  60:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
  61:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #ifndef XMC_SDMMC_H
  62:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_H
  63:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
  64:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*******************************************************************************
  65:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * HEADER FILES
  66:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *******************************************************************************/
  67:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  
  68:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #include "xmc_common.h"
  69:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
  70:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #if defined (SDMMC)
  71:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
  72:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
  73:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @addtogroup XMClib XMC Peripheral Library
  74:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @{
  75:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
  76:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
  77:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
  78:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @addtogroup SDMMC
  79:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @brief Secure Digital/Multi Media Card (SDMMC) driver for the XMC4500 microcontroller
  80:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  81:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The SDMMC peripheral provides an interface between SD/SDIO/MMC cards and the AHB. It handles
  82:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the SD/SDIO protocol at transmission level. It automatically packs data and checks for CRC,
  83:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * start/end bits and format correctness. For SD cards, a maximum transfer rate of 24MB/sec is
  84:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * supported and for MMC cards, 48MB/sec.
  85:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  86:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The peripheral can be used for applications that require large storage memory; e.g. Data logging
  87:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * firmware updates or an embedded database.
  88:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
  89:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The SDMMC low level driver provides functions to configure and initialize the SDMMC hardware
  90:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * peripheral.
  91:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @{
  92:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
  93:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
  94:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*******************************************************************************
  95:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * MACROS
  96:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *******************************************************************************/
  97:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
  98:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
  99:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * A convenient symbol for the SDMMC peripheral base address
 100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #if defined (SDMMC)
 102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** # define XMC_SDMMC ((XMC_SDMMC_t *)SDMMC_BASE)
 103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #else
 104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** # error 'SDMMC' base peripheral pointer not defined
 105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #endif
 106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check for valid ACMD errors <br>
 109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_MODULE_PTR(p) ((p) == XMC_SDMMC)
 113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check for valid ACMD errors <br>
 116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_ACMD_ERR(v)\
 120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   ((v == XMC_SDMMC_ACMD12_NOT_EXEC_ERR) ||\
 121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_TIMEOUT_ERR)    ||\
 122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_CRC_ERR)        ||\
 123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_END_BIT_ERR)    ||\
 124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_ACMD_IND_ERR)        ||\
 125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (v == XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR))
 126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check for valid SDCLK divider frequency <br>
 129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_SDCLK_FREQ(f)\
 133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   ((f == XMC_SDMMC_CLK_DIV_1)           ||\
 134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_2)           ||\
 135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_4)           ||\
 136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_8)           ||\
 137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_16)          ||\
 138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_32)          ||\
 139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_64)          ||\
 140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_128)         ||\
 141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (f == XMC_SDMMC_CLK_DIV_256))
 142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check for valid bus voltage levels <br>
 145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_BUS_VOLTAGE(v)\
 149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   (v == XMC_SDMMC_BUS_VOLTAGE_3_3_VOLTS)
 150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check for valid data timeout counter values <br>
 153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_DAT_TIMEOUT_COUNTER(c)\
 157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   ((c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_13) ||\
 158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_14) ||\
 159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_15) ||\
 160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_16) ||\
 161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_17) ||\
 162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_18) ||\
 163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_19) ||\
 164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_20) ||\
 165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_21) ||\
 166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_22) ||\
 167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_23) ||\
 168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_24) ||\
 169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_25) ||\
 170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_26) ||\
 171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (c == XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_27))
 172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Valid number of data lines <br>
 175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_DATA_LINES(l)\
 179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   ((l == XMC_SDMMC_DATA_LINES_1)        ||\
 180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (l == XMC_SDMMC_DATA_LINES_4)        ||\
 181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (l == XMC_SDMMC_DATA_LINES_8))
 182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check data transfer dir: Host to card and vice-versa <br>
 185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_CHECK_DATA_TRANSFER_DIR(d)\
 189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   ((d == XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD)   ||\
 190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****    (d == XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST))
 191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*
 193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Min and max number of delay elements <br>
 194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_MIN_DELAY_ELEMENTS (0U)
 198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #define XMC_SDMMC_MAX_DELAY_ELEMENTS (15U)
 199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*******************************************************************************
 201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * ENUMS
 202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *******************************************************************************/
 203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Number of data lines for SDMMC data transfer
 206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_LINES_1 = 0x00U, /**< Single data line mode */
 210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_LINES_4 = 0x02U, /**< 4-bit mode */
 211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_LINES_8 = 0x20U  /**< SD 8-bit mode */
 212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_DATA_LINES_t;
 213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Valid SD clock frequency divider selection
 216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_1   = 0x00U, /**< Base clock (10 Mhz -> 63 Mhz) */
 220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_2   = 0x01U, /**< Base clock divided by 2 */
 221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_4   = 0x02U, /**< Base clock divided by 4 */
 222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_8   = 0x04U, /**< Base clock divided by 8 */
 223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_16  = 0x08U, /**< Base clock divided by 16 */
 224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_32  = 0x10U, /**< Base clock divided by 32 */
 225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_64  = 0x20U, /**< Base clock divided by 64 */
 226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_128 = 0x40U, /**< Base clock divided by 128 */
 227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CLK_DIV_256 = 0x80U  /**< Base clock divided by 256 */
 228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_SDCLK_FREQ_SEL_t;
 229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Status return values for the SDMMC low level driver
 232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_STATUS_SUCCESS       = 0U, /**< Operation successful */
 236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_STATUS_CMD_LINE_BUSY,      /**< Command line busy */
 237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_STATUS_DAT_LINE_BUSY       /**< Data line busy */
 238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_STATUS_t;
 239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC events (Normal and error events)
 242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_COMPLETE       = 0x01U, /**< Command complete event */
 246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TX_COMPLETE        = 0x02U, /**< Transmit complete event */
 247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_BLOCK_GAP_EVENT    = 0x04U, /**< Block gap event */
 248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_BUFFER_WRITE_READY = 0x10U, /**< Buffer write ready event */
 249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_BUFFER_READ_READY  = 0x20U, /**< Buffer read ready event */
 250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_INS           = 0x40U, /**< Card insert event */
 251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_REMOVAL       = 0x80U, /**< Card removal event */
 252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_INT           = 0x100U, /**< Card INT event */
 253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CARD_ERR           = 0x8000U, /**< Card error interrupt */
 254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_TIMEOUT_ERR    = ((uint32_t)0x01 << 16U),   /**< Command time-out error */
 255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_CRC_ERR        = ((uint32_t)0x02U << 16U),  /**< Command CRC error */
 256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_END_BIT_ERR    = ((uint32_t)0x04U << 16U),  /**< Command end bit error */
 257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_IND_ERR        = ((uint32_t)0x08U << 16U),  /**< Command index error */
 258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TIMEOUT_ERR   = ((uint32_t)0x10U << 16U),  /**< Data time-out error */
 259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_CRC_ERR       = ((uint32_t)0x20U << 16U),  /**< Data CRC error */
 260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_END_BIT_ERR   = ((uint32_t)0x40U << 16U),  /**< Data end bit error */
 261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CURRENT_LIMIT_ERR  = ((uint32_t)0x80U << 16U),  /**< Current limit error */
 262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_ERR           = ((uint32_t)0x100U << 16U), /**< ACMD error */
 263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TARGET_RESP_ERR    = ((uint32_t)0x1000U << 16U) /**< Target response error */
 264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_EVENT_t;
 265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC wakeup events
 268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_WAKEUP_EN_CARD_INT = SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INT_Msk, /**< Wakeup on card int
 272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_WAKEUP_EN_CARD_INS = SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_INS_Msk, /**< Wakeup on SD card 
 273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_WAKEUP_EN_CARD_REM = SDMMC_WAKEUP_CTRL_WAKEUP_EVENT_EN_REM_Msk  /**< Wakeup SD card rem
 274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_WAKEUP_EVENT_t;
 275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC software reset modes
 278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_SW_RESET_ALL    = SDMMC_SW_RESET_SW_RST_ALL_Msk,      /**< Software reset all */
 282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_SW_RST_CMD_LINE = SDMMC_SW_RESET_SW_RST_CMD_LINE_Msk, /**< Software reset command line 
 283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_SW_RST_DAT_LINE = SDMMC_SW_RESET_SW_RST_DAT_LINE_Msk  /**< Software reset data line */
 284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_SW_RESET_t;
 285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * CMD12 response errors of Auto CMD12
 288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD12_NOT_EXEC_ERR = SDMMC_ACMD_ERR_STATUS_ACMD12_NOT_EXEC_ERR_Msk, /**< ACMD12 not ex
 292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_TIMEOUT_ERR    = SDMMC_ACMD_ERR_STATUS_ACMD_TIMEOUT_ERR_Msk,    /**< ACMD timeout 
 293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_CRC_ERR        = SDMMC_ACMD_ERR_STATUS_ACMD_CRC_ERR_Msk,        /**< ACMD CRC erro
 294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_END_BIT_ERR    = SDMMC_ACMD_ERR_STATUS_ACMD_END_BIT_ERR_Msk,    /**< ACMD end bit 
 295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_ACMD_IND_ERR        = SDMMC_ACMD_ERR_STATUS_ACMD_IND_ERR_Msk,        /**< ACMD IND erro
 296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_CMD_NOT_ISSUED_BY_ACMD12_ERR = SDMMC_ACMD_ERR_STATUS_CMD_NOT_ISSUED_BY_ACMD12_ERR_Msk /
 297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_ACMD_ERR_t;
 298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC response types
 301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_NO_RESPONSE = 0U, /**< No response */
 305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R1,               /**< Response type: R1 */
 306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R1b,              /**< Response type: R1b */
 307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R2,               /**< Response type: R2 */
 308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R3,               /**< Response type: R3 */
 309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R6,               /**< Response type: R6 */
 310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_RESPONSE_TYPE_R7                /**< Response type: R7 */
 311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_RESPONSE_TYPE_t;
 312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** * Command response selection
 315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** */
 316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum XMC_SDMMC_COMMAND_RESPONSE
 317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_NONE = 0, /**< No Response */
 319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_LONG = 1, /**< Response length 136 */
 320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_SHORT = 2, /**< Response length 48 */
 321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_RESPONSE_SHORT_BUSY = 3, /**< Response length 48 check Busy after response */
 322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_COMMAND_RESPONSE_t;
 323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Types of SDMMC commands
 326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_NORMAL  = 0U, /**< Command normal */
 330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_SUSPEND,      /**< Command suspend */
 331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_RESUME,       /**< Command resume */
 332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_COMMAND_TYPE_ABORT         /**< Command abort */
 333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_COMMAND_TYPE_t;
 334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC transfer modes
 337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE        = 0x00U, /**< Transfer mode type: single */
 341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE      = 0x20U, /**< Transfer mode type: infinite */
 342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE      = 0x22U, /**< Transfer mode type: multiple */
 343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE = 0x22U  /**< Transfer mode type: multiple stop */
 344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_TRANSFER_MODE_TYPE_t;
 345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Auto command transfer modes
 348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_DISABLED = 0x00U, /**< ACMD mode disabled */
 352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_12                /**< ACMD12 mode */
 353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_t;
 354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC bus voltage level
 357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_BUS_VOLTAGE_3_3_VOLTS = 0x07U
 361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_BUS_VOLTAGE_t;
 362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Data line timeout counter values
 365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_13 = 0U, /** SDCLK * (2 ^ 13) */
 369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_14 = 1U, /** SDCLK * (2 ^ 14) */
 370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_15 = 2U, /** SDCLK * (2 ^ 15) */
 371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_16 = 3U, /** SDCLK * (2 ^ 16) */
 372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_17 = 4U, /** SDCLK * (2 ^ 17) */
 373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_18 = 5U, /** SDCLK * (2 ^ 18) */
 374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_19 = 6U, /** SDCLK * (2 ^ 19) */
 375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_20 = 7U, /** SDCLK * (2 ^ 20) */
 376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_21 = 8U, /** SDCLK * (2 ^ 21) */
 377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_22 = 9U, /** SDCLK * (2 ^ 22) */
 378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_23 = 10U, /** SDCLK * (2 ^ 23) */
 379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_24 = 11U, /** SDCLK * (2 ^ 24) */
 380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_25 = 12U, /** SDCLK * (2 ^ 25) */
 381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_26 = 13U, /** SDCLK * (2 ^ 26) */
 382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_27 = 14U, /** SDCLK * (2 ^ 27) */
 383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_DAT_TIMEOUT_COUNTER_t;
 384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC data transfer direction
 387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef enum
 389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TRANSFER_HOST_TO_CARD = 0U, /** Host to card */
 391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TRANSFER_CARD_TO_HOST       /** Card to host */
 392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_DATA_TRANSFER_DIR_t;
 393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*******************************************************************************
 395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * DATA STRUCTURES
 396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *******************************************************************************/
 397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC device structure <br>
 400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The structure represents a collection of all hardware registers used
 402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * to configure the SDMMC peripheral on the XMC4500 microcontroller. The
 403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * registers can be accessed with ::XMC_SDMMC.
 404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef struct
 406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED0;
 408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  BLOCK_SIZE;
 409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  BLOCK_COUNT;
 410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint32_t  ARGUMENT1;
 411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  TRANSFER_MODE;
 412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  COMMAND;
 413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint32_t  RESPONSE[4];
 414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint32_t  DATA_BUFFER;
 415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint32_t  PRESENT_STATE;
 416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint8_t   HOST_CTRL;
 417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint8_t   POWER_CTRL;
 418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint8_t   BLOCK_GAP_CTRL;
 419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint8_t   WAKEUP_CTRL;
 420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  CLOCK_CTRL;
 421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint8_t   TIMEOUT_CTRL;
 422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint8_t   SW_RESET;
 423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  INT_STATUS_NORM;
 424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  INT_STATUS_ERR;
 425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_STATUS_NORM;
 426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_STATUS_ERR;
 427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_SIGNAL_NORM;
 428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint16_t  EN_INT_SIGNAL_ERR;
 429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint16_t  ACMD_ERR_STATUS;
 430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint16_t  RESERVED1[9];
 431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __O  uint16_t  FORCE_EVENT_ACMD_ERR_STATUS;
 432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __O  uint16_t  FORCE_EVENT_ERR_STATUS;
 433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED2[8];
 434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __O  uint32_t  DEBUG_SEL;
 435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED3[30];
 436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __IO uint32_t  SPI;
 437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint32_t  RESERVED4[2];
 438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   __I  uint16_t  SLOT_INT_STATUS;
 439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_t;
 440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /* Anonymous structure/union guard start */
 442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #if defined (__CC_ARM)
 443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   #pragma push
 444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   #pragma anon_unions
 445:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #elif defined (__TASKING__)
 446:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   #pragma warning 586
 447:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #endif
 448:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 449:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 450:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Present state of the SDMMC host controller <br>
 451:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 452:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The structure presents a convenient way to obtain the SDMMC peripheral's
 453:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * present state information (for example, the write protect pin level). The
 454:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * XMC_SDMMC_GetPresentState() API can be used to populate the structure
 455:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * with the state of the SD host controller.
 456:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 457:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef union
 458:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 459:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   struct
 460:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   {
 461:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint32_t command_inihibit_cmd 	 : 1; /**< Command: Inhibit command */
 462:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t command_inihibit_dat 	 : 1; /**< Command: Inhibit data */
 463:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t dat_line_active 		 : 1; /**< Data line active */
 464:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t 						 : 5;
 465:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t write_transfer_active 	 : 1; /**< Write transfer active */
 466:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t read_transfer_active 	 : 1; /**< Read transfer active */
 467:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t buffer_write_enable 	 : 1; /**< Buffer write enable */
 468:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t buffer_read_enable 	 : 1; /**< Buffer read enable */
 469:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t 						 : 4;
 470:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t card_inserted 			 : 1; /**< Card inserted */
 471:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t card_state_stable 		 : 1; /**< Card state stable */
 472:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t card_detect_pin_level 	 : 1; /**< Card detect pin level */
 473:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t write_protect_pin_level : 1; /**< Write protect pin level */
 474:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t dat_3_0_pin_level 		 : 4; /**< Data 3_0 pin level */
 475:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t cmd_line_level          : 1; /**< Command line level */
 476:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t dat7_4_pin_level        : 4; /**< Data 7_4 pin level */
 477:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 	uint32_t                         : 3;
 478:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   };
 479:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint32_t b32;
 480:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_PRESENT_STATE_t;
 481:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 482:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 483:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC transfer mode configuration
 484:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 485:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef struct
 486:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 487:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint32_t block_size;
 488:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint32_t num_blocks;
 489:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_TYPE_t type;
 490:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_TRANSFER_MODE_AUTO_CMD_t auto_cmd;
 491:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_DATA_TRANSFER_DIR_t direction;
 492:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_TRANSFER_MODE_t;
 493:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 494:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 495:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Represent an SDMMC command <br>
 496:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 497:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The structure holds the configuration for an SDMMC command. The SDMMC
 498:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * COMMAND register is a 16-bit register which is responsible for enabling
 499:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * configuration parameters like command type, response type, index check
 500:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * enable (and a few more). Once SDMMC.COMMAND is configured, the
 501:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * XMC_SDMMC_SendCommand() function can be used to send the command.
 502:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 503:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef union
 504:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 505:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   struct
 506:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   {
 507:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t response_type_sel : 2; /**< Response type select ::XMC_SDMMC_COMMAND_RESPONSE_t */
 508:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t                   : 1;
 509:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t crc_check_en      : 1; /**< Command CRC check enable */
 510:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t index_check_en    : 1; /**< Command index check enable */
 511:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t dat_present_sel   : 1; /**< Data present select */
 512:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t cmd_type          : 2; /**< Command type ::XMC_SDMMC_COMMAND_TYPE_t */
 513:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t cmd_index         : 6; /**< Command index */
 514:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****     uint16_t                   : 2;
 515:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   };
 516:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint16_t cmd;
 517:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_COMMAND_t;
 518:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 519:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /* Anonymous structure/union guard end */
 520:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #if defined (__CC_ARM)
 521:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   #pragma pop
 522:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #elif defined (__TASKING__)
 523:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   #pragma warning restore
 524:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #endif
 525:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 526:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 527:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Card response structure
 528:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 529:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef struct
 530:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 531:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint32_t response_0;
 532:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint32_t response_2;
 533:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint32_t response_4;
 534:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint32_t response_6;
 535:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_RESPONSE_t;
 536:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 537:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 538:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC configuration data structure <br>
 539:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 540:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The structure is used to configure the bus width and the clock divider.
 541:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 542:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** typedef struct
 543:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 544:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   uint8_t bus_width; /**< SDMMC bus width */
 545:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_SDCLK_FREQ_SEL_t clock_divider; /**< SDMMC clock divider */
 546:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** } XMC_SDMMC_CONFIG_t;
 547:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 548:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /*******************************************************************************
 549:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * API PROTOTYPES
 550:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *******************************************************************************/
 551:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 552:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #ifdef __cplusplus
 553:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** extern "C" {
 554:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** #endif
 555:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 556:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 557:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 558:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool
 559:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 560:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 561:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get power status of the SDMMC peripheral <br>
 562:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 563:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 564:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function checks the SD_BUS_POWER bit-field of the POWER_CTRL register and returns
 565:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * a boolean value - "on" or "off".
 566:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 567:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc);
 568:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 569:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 570:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 571:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 572:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 573:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 574:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable SDMMC peripheral <br>
 575:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 576:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 577:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function de-asserts the peripheral reset. The peripheral needs to be initialized.
 578:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 579:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc);
 580:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 581:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 582:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 583:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 584:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 585:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 586:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable SDMMC peripheral <br>
 587:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 588:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 589:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function asserts the peripheral reset.
 590:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 591:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc);
 592:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 593:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 594:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 595:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param config A pointer to a constant XMC_SDMMC_CONFIG_t structure containing the
 596:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *               bus width and clock divider configuration
 597:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return ::XMC_SDMMC_STATUS_SUCCESS
 598:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 599:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 600:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Initialize the SDMMC peripheral <br>
 601:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 602:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 603:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function enables the SDMMC peripheral, sets the internal clock divider register
 604:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * and sets the bus width.
 605:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 606:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config);
 607:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 608:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 609:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 610:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 611:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              logically OR'd events
 612:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 613:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 614:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 615:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable SDMMC normal and error event(s) <br>
 616:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 617:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 618:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function first sets the bit-fields of EN_INT_STATUS_NORM and EN_INT_STATUS_ERR
 619:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * registers to enable interrupt status for requested normal/error SDMMC events. It then
 620:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * sets the bit-fields of EN_INT_SIGNAL_NORM and EN_INT_SIGNAL_ERR to enable the
 621:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * interrupt generation for the requested events.
 622:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 623:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event);
 624:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 625:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 626:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 627:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 628:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              logically OR'd events
 629:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 630:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 631:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 632:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable normal and error SDMMC event(s) <br>
 633:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 634:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 635:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function disables the interrupt generation for the requested events by clearing
 636:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the bit-fields of EN_INT_SIGNAL_NORM and EN_INT_SIGNAL_ERR registers.
 637:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 638:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Note:</b><br>
 639:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The XMC_SDMMC_DisableEvent() function doesn't reset the the interrupt status. One
 640:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * may still use XMC_SDMMC_GetEvent() to check the status of requested events even if
 641:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the interrupt generation is already disabled.
 642:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 643:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event);
 644:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 645:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 646:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 647:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 648:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              logically OR'd events
 649:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 650:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 651:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 652:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Clear SDMMC event(s) <br>
 653:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 654:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 655:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function clears requested normal/error events by settings the bit-fields of
 656:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the INT_STATUS register. Please check SDMMC_INT_STATUS_NORM in the XMC45000
 657:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * manual for more details.
 658:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 659:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event);
 660:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 661:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 662:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 663:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t)
 664:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool
 665:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 666:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 667:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get SDMMC event status <br>
 668:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 669:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 670:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function returns the status of a single requested (normal/error) event by
 671:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * reading the appropriate bit-fields of the INT_STATUS register.
 672:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 673:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event);
 674:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 675:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 676:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 677:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 678:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              logically OR'd events
 679:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 680:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 681:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 682:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable event status <br>
 683:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 684:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 685:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function sets the bit-fields of EN_INT_STATUS_NORM and EN_INT_STATUS_ERR
 686:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * registers to enable interrupt status for requested normal/error SDMMC events.
 687:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 688:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event);
 689:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 690:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 691:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 692:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (XMC_SDMMC_EVENT_t) or a valid combination of
 693:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              logically OR'd events
 694:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 695:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 696:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 697:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable event status <br>
 698:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 699:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 700:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function resets the bit-fields of EN_INT_STATUS_NORM and EN_INT_STATUS_ERR
 701:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * registers to disable interrupt status for requested normal/error SDMMC events.
 702:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 703:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event);
 704:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 705:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 706:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 707:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC event (::XMC_SDMMC_EVENT_t) or a valid combination of
 708:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              logically OR'd events
 709:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 710:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 711:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 712:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Trigger SDMMC error events <br>
 713:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 714:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 715:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The SDMMC peripheral supports triggering of following error events: <br>
 716:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 717:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_CMD_TIMEOUT_ERR, ::XMC_SDMMC_CMD_CRC_ERR, ::XMC_SDMMC_CMD_END_BIT_ERR,
 718:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_CMD_IND_ERR, ::XMC_SDMMC_DATA_TIMEOUT_ERR, ::XMC_SDMMC_DATA_CRC_ERR,
 719:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_DATA_END_BIT_ERR, ::XMC_SDMMC_CURRENT_LIMIT_ERR, ::XMC_SDMMC_ACMD_ERR,
 720:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * ::XMC_SDMMC_TARGET_RESP_ERR
 721:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 722:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * For triggering Auto CMD12 error, see XMC_SDMMC_TriggerACMDErr()
 723:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 724:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_TriggerEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 725:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 726:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_TriggerEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 727:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
 728:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->FORCE_EVENT_ERR_STATUS |= (uint16_t)(event >> 16U);
 729:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 730:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 731:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 732:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 733:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool
 734:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 735:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 736:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check if any error event has occured <br>
 737:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 738:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 739:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function can typically be used for writing an error interrupt recovery routine.
 740:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Should any error be indicated (If XMC_SDMMC_IsAnyErrorEvent() returns true), the
 741:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * routine may then clear the event after indicating the error event and reset the
 742:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC command and data lines.
 743:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 744:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsAnyErrorEvent(XMC_SDMMC_t *const sdmmc)
 745:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 746:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsAnyErrorEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc)
 747:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 748:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (bool)(sdmmc->INT_STATUS_ERR);
 749:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 750:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 751:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 752:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 753:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC wakeup event (::XMC_SDMMC_WAKEUP_EVENT_t) or a valid combination
 754:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              of logically OR'd wakeup events
 755:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 756:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 757:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 758:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable wakeup event(s) <br>
 759:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 760:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 761:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function enables SDMMC wakeup events by setting appropriate bit-fields of the WAKEUP_CTRL
 762:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * register. <br>
 763:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 764:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * List of supported wakeup events -> Wakeup on: <br>
 765:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 1) Card interrupt <br>
 766:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 2) SD card insertion <br>
 767:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 3) SD card removal <br>
 768:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 769:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_EnableWakeupEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 770:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 771:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableWakeupEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 772:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
 773:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->WAKEUP_CTRL |= (uint8_t)event;
 774:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 775:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 776:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 777:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 778:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param event A valid SDMMC wakeup event (::XMC_SDMMC_WAKEUP_EVENT_t) or a valid combination
 779:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              of logically OR'd wakeup events
 780:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 781:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 782:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 783:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable wakeup event(s) <br>
 784:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 785:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 786:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function disables SDMMC wakeup events by clearing appropriate bit-fields of the WAKEUP_CTRL
 787:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * register. <br>
 788:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 789:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * List of supported wakeup events -> Wakeup on: <br>
 790:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 1) Card interrupt <br>
 791:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 2) SD card insertion <br>
 792:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 3) SD card removal <br>
 793:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 794:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_DisableWakeupEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 795:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 796:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_DisableWakeupEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 797:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
 798:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->WAKEUP_CTRL &= (uint8_t)~event;
 799:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 800:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 801:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 802:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 803:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param error A valid SDMMC ACMD error (::XMC_SDMMC_ACMD_ERR_t)
 804:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool
 805:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 806:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 807:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get status of Auto CMD12 errors <br>
 808:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 809:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 810:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function detects the presence of an Auto CMD12 error. A boolean is returned to
 811:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * indicate if an error is detected.
 812:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 813:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_GetACMDErrStatus(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_ACMD_ERR_t erro
 814:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 815:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetACMDErrStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc
 816:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetACMDErrStatus: Invalid ACMD response error", XMC_SDMMC_CHECK_ACMD_ERR(er
 817:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
 818:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (bool)(sdmmc->ACMD_ERR_STATUS & (uint16_t)error);
 819:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 820:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 821:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 822:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 823:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param error A valid SDMMC ACMD error (::XMC_SDMMC_ACMD_ERR_t) or a valid combination
 824:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *              of logically OR'd ACMD error events
 825:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 826:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 827:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 828:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Triggers Auto CMD12 error(s) <br>
 829:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 830:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 831:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This function triggers Auto CMD12 error(s) by setting appropriate bit-fields of the
 832:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * FORCE_EVENT_ACMD_ERR_STATUS register.
 833:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 834:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Related APIs: </b><br>
 835:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * XMC_SDMMC_TriggerEvent()
 836:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 837:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_TriggerACMDErr(XMC_SDMMC_t *const sdmmc, uint32_t error)
 838:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 839:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_TriggerACMDErr: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 840:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
 841:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->FORCE_EVENT_ACMD_ERR_STATUS |= (uint16_t)error;
 842:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 843:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 844:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 845:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 846:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return uint32_t The value held in the SDMMC FIFO
 847:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 848:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 849:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Use this function to read a single word (32 bits) from the SDMMC FIFO. <br>
 850:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 851:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_ReadFIFO(XMC_SDMMC_t *const sdmmc)
 852:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 853:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_ReadFIFO: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 854:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 855:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (sdmmc->DATA_BUFFER);
 856:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 857:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 858:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 859:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 860:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param data Pointer to a data word (32 bits) that needs to be written to the FIFO
 861:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 862:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 863:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 864:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Use this function to write a single word (32 bits) to the SDMMC FIFO. <br>
 865:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 866:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_WriteFIFO(XMC_SDMMC_t *const sdmmc, uint32_t *data)
 867:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 868:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_WriteFIFO: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 869:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 870:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->DATA_BUFFER = *data;
 871:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 872:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 873:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 874:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 875:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 876:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 877:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 878:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable SDMMC bus power <br>
 879:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 880:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 881:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function sets the SD_BUS_POWER bit-field in the POWER_CTRL register, enabling the
 882:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * bus power. It may be invoked after enabling the SD clock (XMC_SDMMC_SDClockEnable()).
 883:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 884:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_BusPowerOn(XMC_SDMMC_t *const sdmmc)
 885:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 886:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_BusPowerOn: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 887:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 888:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->POWER_CTRL |= (uint8_t)(SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
 889:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 890:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 891:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 892:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 893:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 894:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 895:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 896:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable SDMMC bus power <br>
 897:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 898:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 899:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function resets the SD_BUS_POWER bit-field in the POWER_CTRL register, disabling the
 900:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * bus power.
 901:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 902:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_BusPowerOff(XMC_SDMMC_t *const sdmmc)
 903:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 904:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_BusPowerOff: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 905:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 906:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->POWER_CTRL &= (uint8_t)~SDMMC_POWER_CTRL_SD_BUS_POWER_Msk;
 907:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 908:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 909:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 910:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 911:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 912:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 913:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 914:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable the internal SDMMC clock <br>
 915:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 916:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 917:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function enables the internal clock of the SDMMC peripheral. To check if the
 918:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * clock is stable, use XMC_SDMMC_GetClockStability().
 919:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 920:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Note: </b><br>
 921:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Invoke XMC_SDMMC_Init() before using this function.
 922:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 923:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_Start(XMC_SDMMC_t *const sdmmc)
 924:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 925:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_Start: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 926:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
 927:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   /* Enable internal clock */
 928:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL |= (uint16_t)SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN_Msk;
 929:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 930:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 931:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 932:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 933:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool
 934:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 935:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 936:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check internal clock stability <br>
 937:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 938:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 939:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Use this function to check the internal SDMMC clock stability. The function returns a
 940:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * boolean value indicating internal clock stability (true = stable)
 941:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 942:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_GetClockStability(XMC_SDMMC_t *const sdmmc)
 943:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 944:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetClockStability: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 945:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
 946:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   /* Return clock stability */
 947:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (bool)(sdmmc->CLOCK_CTRL & SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_STABLE_Msk);
 948:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 949:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 950:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 951:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 952:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 953:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 954:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 955:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable internal SDMMC clock <br>
 956:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 957:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 958:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function disables the internal clock of the SDMMC peripheral. The SDMMC registers
 959:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * can still be read and written even if the internal clock is disabled.
 960:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 961:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_Stop(XMC_SDMMC_t *const sdmmc)
 962:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 963:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_Stop: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 964:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 965:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL &= (uint16_t)~SDMMC_CLOCK_CTRL_INTERNAL_CLOCK_EN_Msk;
 966:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 967:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 968:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 969:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 970:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 971:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 972:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 973:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable the SD clock <br>
 974:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 975:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 976:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function sets the SDCLOCK_EN bit-field of the CLOCK_CTRL register, enabling the
 977:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SD clock. It can be invoked after the internal clock has achieved stability. SD card
 978:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * initialization process may then follow.
 979:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 980:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SDClockEnable(XMC_SDMMC_t *const sdmmc)
 981:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
 982:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockEnable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 983:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 984:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL |= (uint16_t)SDMMC_CLOCK_CTRL_SDCLOCK_EN_Msk;
 985:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
 986:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
 987:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
 988:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
 989:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
 990:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 991:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
 992:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable the SD clock <br>
 993:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
 994:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
 995:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function resets the SDCLOCK_EN bit-field of the CLOCK_CTRL register, disabling the
 996:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SD clock. It can be used alongside a SD card information reset routine (if required).
 997:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
 998:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SDClockDisable(XMC_SDMMC_t *const sdmmc)
 999:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1000:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockDisable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
1001:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1002:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL &= (uint16_t)~SDMMC_CLOCK_CTRL_SDCLOCK_EN_Msk;
1003:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1004:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1005:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1006:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1007:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param reset_mode Reset mode or a bitwise combination of modes
1008:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1009:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1010:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1011:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Set SDMMC software reset request <br>
1012:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1013:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1014:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function sets in the SDMMC SW_RESET register: <br>
1015:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 1) bit 0 to reset all <br>
1016:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 2) bit 1 to reset CMD line <br>
1017:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 3) bit 2 reset DAT line <br>
1018:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1019:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * It is typically used to reset the SD HOST controller's registers.
1020:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1021:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetSWReset(XMC_SDMMC_t *const sdmmc, uint32_t reset_mode)
1022:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1023:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetSWReset: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
1024:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1025:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->SW_RESET |= (uint8_t)reset_mode;
1026:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1027:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1028:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1029:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1030:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return Software reset status
1031:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1032:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1033:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get SDMMC software reset status <br>
1034:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1035:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1036:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The SD host takes some time to reset its registers after invoking XMC_SDMMC_SetSWReset().
1037:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Since XMC_SDMMC_SetSWReset() is a non-blocking function, XMC_SDMMC_GetSWResetStatus() has
1038:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * been provided to check the software reset status. The return value needs to be masked
1039:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * with the reset mode (XMC_SDMMC_SW_RESET_t) to get a specific software reset status value.
1040:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1041:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetSWResetStatus(XMC_SDMMC_t *const sdmmc)
1042:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1043:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetSWResetStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc
1044:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
1045:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (uint32_t)(sdmmc->SW_RESET);
1046:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1047:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1048:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1049:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1050:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return XMC_SDMMC_PRESENT_STATE_t A structure storing the present state of the host controller
1051:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1052:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1053:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get the present state of the SDMMC host controller <br>
1054:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1055:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1056:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get the values of each bit-field in SDMMC_PRESENT_STATE register
1057:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function call populates an instance of the XMC_SDMMC_PRESENT_STATE_t structure with
1058:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the state of the SD host controller and returns it to the caller.
1059:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1060:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE XMC_SDMMC_PRESENT_STATE_t XMC_SDMMC_GetPresentState(const XMC_SDMMC_t *const sdmmc)
1061:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1062:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_SDMMC_PRESENT_STATE_t result;
1063:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1064:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetPresentState: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc)
1065:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1066:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   result.b32 = (uint32_t)sdmmc->PRESENT_STATE;
1067:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1068:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return result;
1069:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1070:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1071:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1072:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1073:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool SDMMC command line status
1074:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1075:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1076:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check if the command line is busy <br>
1077:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1078:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1079:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function reads the SDMMC PRESENT_STATE register and returns "true" if the command
1080:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * line is busy ("false" otherwise). The command line must be free before sending an SDMMC
1081:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * command with XMC_SDMMC_SendCommand().
1082:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1083:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsCommandLineBusy(XMC_SDMMC_t *const sdmmc)
1084:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1085:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsCommandLineBusy: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
1086:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1087:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (bool)(sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_COMMAND_INHIBIT_CMD_Msk);
1088:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1089:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1090:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1091:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1092:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool SDMMC data line status
1093:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1094:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1095:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check if the data line is busy <br>
1096:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1097:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1098:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function reads the SDMMC PRESENT_STATE register and returns "true" if the data
1099:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * line is busy ("false" otherwise). The data line must be free before sending an SDMMC
1100:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * command with XMC_SDMMC_SendCommand().
1101:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1102:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsDataLineBusy(XMC_SDMMC_t *const sdmmc)
1103:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1104:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsDataLineBusy: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
1105:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1106:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (bool)(sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_COMMAND_INHIBIT_DAT_Msk);
1107:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1108:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1109:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1110:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1111:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool Status of all data lines
1112:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1113:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1114:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Check if all data line are high <br>
1115:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1116:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1117:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function reads the SDMMC PRESENT_STATE register and returns "true" if all data
1118:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * lines are high. It can be used to handle SDMMC error conditions. For example, if an
1119:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * error event (XMC_SDMMC_IsAnyErrorEvent()) is detected and all data lines are high,
1120:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the user code can conclude that the error is of a "recoverable" type.
1121:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1122:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_IsAllDataLinesHigh(XMC_SDMMC_t *const sdmmc)
1123:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1124:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_IsAllDataLinesHigh: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1125:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1126:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return ((((sdmmc->PRESENT_STATE & SDMMC_PRESENT_STATE_DAT_3_0_PIN_LEVEL_Msk) >>
1127:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 		    SDMMC_PRESENT_STATE_DAT_3_0_PIN_LEVEL_Pos) == 0x0FU) ? true : false);
1128:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1129:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1130:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1131:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1132:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param command A pointer to a constant of type XMC_SDMMC_COMMAND_t, pointing to the command conf
1133:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param arg Command argument
1134:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return ::XMC_SDMMC_STATUS_SUCCESS
1135:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1136:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1137:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Send normal SDMMC command <br>
1138:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1139:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1140:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Use this function to send a normal SDMMC command. This non-blocking function sets the
1141:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * ARGUMENT1 and COMMAND registers. It is the user's responsibility to check if the command
1142:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * and data lines are busy (XMC_SDMMC_IsDataLineBusy(), XMC_SDMMC_IsCommandLineBusy()).
1143:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1144:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *comma
1145:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1146:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1147:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1148:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return uint32_t SDMMC command response
1149:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1150:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1151:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get card response (no Auto command) <br>
1152:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1153:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1154:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This function returns [39:8] bits of the card response. The others are checked automatically
1155:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * by the peripheral. This function can be used with response type R1, R1b, R3, R4, R5, R5b, R6
1156:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * but it doesn't support the retrieving of R1 of Auto CMD 23 and R1b of Auto CMD 12. To get
1157:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * these responses, use XMC_SDMMC_GetAutoCommandResponse().
1158:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1159:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetCommandResponse(XMC_SDMMC_t *const sdmmc)
1160:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1161:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetCommandResponse: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1162:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   
1163:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (sdmmc->RESPONSE[0]);
1164:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1165:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1166:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1167:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1168:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return uint32_t Auto command response value
1169:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1170:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1171:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get card response of Auto commands <br>
1172:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1173:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1174:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This function returns card response [39:8] bits of auto commands: R1 of Auto CMD 23 and
1175:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * R1b of Auto CMD 12.
1176:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1177:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetAutoCommandResponse(const XMC_SDMMC_t *const sdmmc)
1178:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1179:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetAutoCommandResponse: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR
1180:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1181:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (sdmmc->RESPONSE[3]);
1182:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1183:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1184:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1185:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1186:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param response Pointer to structure type XMC_SDMMC_RESPONSE_t to store the full response
1187:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1188:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1189:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1190:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get card R2 response <br>
1191:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1192:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1193:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The R2 response is 120 bits wide. The function reads all peripheral registers and store in
1194:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the response data structure.
1195:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1196:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response);
1197:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1198:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1199:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1200:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param transfer_mode Transfer mode configuration
1201:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1202:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1203:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1204:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Configure data transfer mode <br>
1205:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1206:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1207:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function configures block size, block count, type of data transfer, response type
1208:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * and sets the auto command configuration. Use this function to configure a multi-block
1209:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * SDMMC transfer.
1210:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1211:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const trans
1212:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1213:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1214:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1215:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return uint32_t Number of blocks that need to be transferred
1216:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1217:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1218:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get the number of blocks that need to be transferred <br>
1219:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1220:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1221:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This function is valid only for multiple block transfers. The host controller
1222:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * decrements the block count after each block transfer and stops when the count reaches
1223:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * zero. It can only be accessed when no transaction is happening (i.e after a transaction
1224:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * has stopped). This function returns an invalid value during the transfer. <br>
1225:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1226:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * When saving transfer context as a result of the suspend command, the number of blocks
1227:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * yet to be transferred can be determined by using this function.
1228:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1229:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE uint32_t XMC_SDMMC_GetTransferBlocksNum(XMC_SDMMC_t *const sdmmc)
1230:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1231:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetTransferBlocksNum: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(s
1232:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1233:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (uint32_t)(sdmmc->BLOCK_COUNT);
1234:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1235:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1236:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1237:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1238:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param enabled "true" to enable read wait control, "false" to disable read wait control.
1239:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1240:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1241:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1242:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Configure read wait control <br>
1243:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1244:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1245:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The read wait function is optional for SDIO cards. If the card supports read wait and
1246:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * XMC_SDMMC_GetTransferBlocksNum() is executed, the SDMMC peripheral will stop read data
1247:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * using DAT[2] line. If this feature is not enabled the peripheral has to stop the SD
1248:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * clock to hold read data, restricting commands generation. <br>
1249:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1250:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * When the host driver detects an SD card insertion, it sets this bit according to the
1251:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * CCCR of the SDIO card. If the card does not support read wait, this feature shall
1252:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * never be enabled otherwise a DAT line conflict may occur. If this feature is disabled,
1253:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Suspend/Resume cannot be supported.
1254:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1255:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetReadWaitControl(XMC_SDMMC_t *const sdmmc, bool enabled)
1256:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1257:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetReadWaitControl: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1258:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1259:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL = (uint8_t)((sdmmc->BLOCK_GAP_CTRL & (uint8_t)~SDMMC_BLOCK_GAP_CTRL_READ_WA
1260:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****                                     (uint8_t)((uint8_t)enabled << SDMMC_BLOCK_GAP_CTRL_READ_WAIT_CT
1261:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1262:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1263:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1264:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1265:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param enabled "true" to set stop at block gap, "false" for transfer
1266:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1267:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1268:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1269:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Stop at block gap request <br>
1270:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1271:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1272:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function is used to terminate a transaction execution at the next block gap for
1273:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * non-DMA transfers.
1274:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1275:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetStopAtBlockGap(XMC_SDMMC_t *const sdmmc, bool enabled)
1276:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1277:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetStopAtBlockGap: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
1278:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1279:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL = (uint8_t)((sdmmc->BLOCK_GAP_CTRL & (uint8_t)~SDMMC_BLOCK_GAP_CTRL_STOP_AT
1280:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****                                     (uint8_t)((uint8_t)enabled << SDMMC_BLOCK_GAP_CTRL_STOP_AT_BLOC
1281:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1282:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1283:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1284:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1285:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param enabled "true" to restart transaction, "false" is ignored
1286:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1287:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1288:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1289:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Issue a continue request <br>
1290:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1291:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1292:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function is used to restart a transaction which was stopped using the "Stop at
1293:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * block gap" request. (XMC_SDMMC_SetStopAtBlockGap())
1294:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1295:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetContinueRequest(XMC_SDMMC_t *const sdmmc, bool enabled)
1296:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1297:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetContinueRequest: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1298:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1299:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL = ((sdmmc->BLOCK_GAP_CTRL & (uint8_t)~SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ_Msk
1300:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****                            (uint8_t)((uint8_t)enabled << SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ_Pos));
1301:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1302:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1303:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1304:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1305:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return bool
1306:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1307:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1308:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Get continue request <br>
1309:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1310:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1311:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function returns the status of the BLOCK_GAP_CTRL.CONTINUE_REQ bit-field. It
1312:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * returns "true" if the transaction is restarted after a "stop at block gap" request.
1313:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1314:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE bool XMC_SDMMC_GetContinueRequest(XMC_SDMMC_t *const sdmmc)
1315:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1316:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_GetContinueRequest: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1317:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1318:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   return (bool)(sdmmc->BLOCK_GAP_CTRL & (uint8_t)(1U << SDMMC_BLOCK_GAP_CTRL_CONTINUE_REQ_Pos));
1319:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1320:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1321:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1322:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1323:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param config A pointer to the SDMMC configuration structure (::XMC_SDMMC_CONFIG_t)
1324:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1325:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1326:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1327:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Enable interrupt at block gap <br>
1328:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1329:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1330:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function sets the BLOCK_GAP_CTRL.INT_AT_BLOCK_GAP bit-field to enable interrupt
1331:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * at block gap for a multi-block transfer. This bit is only valid in a 4-bit mode of
1332:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * the SDIO card.
1333:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1334:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_EnableInterruptAtBlockGap(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_
1335:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1336:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_
1337:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: This operation is only valid in 4-bit mode",
1338:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****              (config->bus_width == XMC_SDMMC_DATA_LINES_1));
1339:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1340:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL |= (uint8_t)SDMMC_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP_Msk;
1341:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1342:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1343:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1344:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1345:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param config A pointer to the SDMMC configuration structure (::XMC_SDMMC_CONFIG_t)
1346:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1347:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1348:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1349:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Disable interrupt at block gap <br>
1350:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1351:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1352:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function resets the BLOCK_GAP_CTRL.INT_AT_BLOCK_GAP bit-field to disable interrupt
1353:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * at block gap. This bit is only valid in a 4-bit mode of the SDIO card.
1354:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1355:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_DisableInterruptAtBlockGap(XMC_SDMMC_t *const sdmmc,
1356:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****                                                           const XMC_SDMMC_CONFIG_t *config)
1357:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1358:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1359:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_
1360:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_EnableInterruptAtBlockGap: This operation is only valid in 4-bit mode",
1361:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****              (config->bus_width == XMC_SDMMC_DATA_LINES_1));
1362:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1363:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->BLOCK_GAP_CTRL &= (uint8_t)~SDMMC_BLOCK_GAP_CTRL_INT_AT_BLOCK_GAP_Msk;
1364:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1365:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1366:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1367:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1368:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param clk Desired clock frequency (::XMC_SDMMC_SDCLK_FREQ_SEL_t)
1369:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1370:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1371:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1372:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Set SD clock frequency <br>
1373:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1374:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1375:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function sets the CLOCK_CTRL register to configure the frequency of the SD clock
1376:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * pin. The register is programmed with the divisor of the base clock frequency (clk).
1377:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1378:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The following settings are permitted (8-bit divided clock mode): <br>
1379:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 00H: base clock (10MHz->63MHz) <br>
1380:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 01H: base clock divided by 2   <br>
1381:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 10H: base clock divided by 32  <br>
1382:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 02H: base clock divided by 4   <br>
1383:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 04H: base clock divided by 8   <br>
1384:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 08H: base clock divided by 16  <br>
1385:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 20H: base clock divided by 64  <br>
1386:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 40H: base clock divided by 128 <br>
1387:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 80H: base clock divided by 256 <br>
1388:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1389:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Note: </b><br>
1390:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The internal clock should be disabled before updating frequency clock select. Please
1391:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * see section 2.2.14 -> "Clock Control Register" in the SD HOST specification for more
1392:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * information.
1393:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1394:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SDClockFreqSelect(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_SDCLK_FREQ_SEL
1395:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1396:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockFreqSelect: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
1397:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SDClockFreqSelect: Invalid clock frequency selection", XMC_SDMMC_CHECK_SDCL
1398:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1399:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Msk &
1400:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****                                   (uint32_t)((uint32_t)clk << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SEL_Pos))
1401:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1402:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1403:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1404:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1405:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param bus_voltage Desired bus voltage (::XMC_SDMMC_BUS_VOLTAGE_t)
1406:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1407:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1408:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1409:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Set SDMMC bus voltage <br>
1410:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1411:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1412:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * The function sets the CLOCK_CTRL register to configure the bus voltage. Currently,
1413:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * 3.3 volts is the supported voltage level. This function is relevant within the host
1414:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * controller initialization routine.
1415:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1416:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetBusVoltage(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_BUS_VOLTAGE_t bus_
1417:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
1418:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetBusVoltage: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
1419:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetBusVoltage: Invalid bus voltage", XMC_SDMMC_CHECK_BUS_VOLTAGE(bus_voltag
1420:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1421:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->POWER_CTRL |= (uint8_t)((uint32_t)bus_voltage << SDMMC_POWER_CTRL_SD_BUS_VOLTAGE_SEL_Pos);
1422:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
1423:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1424:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** /**
1425:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param sdmmc A constant pointer to XMC_SDMMC_t, pointing to the SDMMC base address
1426:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @param timeout Data line timeout value
1427:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * @return None
1428:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1429:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par<b>Description: </b><br>
1430:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Set data line timeout <br>
1431:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  *
1432:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * \par
1433:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * Use the function to set the interval by which the data line timeouts are detected. The
1434:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * timeout clock frequency is generated by dividing the SD clock (TMCLK) by the timeout argument.
1435:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  * This function must be called before setting the bus voltage (XMC_SDMMC_SetBusVoltage()).
1436:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****  */
1437:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** __STATIC_INLINE void XMC_SDMMC_SetDataLineTimeout(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_DAT_TIMEOUT_C
1438:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** {
  27              	 .loc 1 1438 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 0B46     	 mov r3,r1
  44 000a FB70     	 strb r3,[r7,#3]
1439:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetDataLineTimeout: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
1440:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   XMC_ASSERT("XMC_SDMMC_SetDataLineTimeout: Invalid timeout", XMC_SDMMC_CHECK_DAT_TIMEOUT_COUNTER(t
1441:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** 
1442:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****   sdmmc->TIMEOUT_CTRL |= (uint8_t)(((uint32_t)timeout << SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL_Pos
  45              	 .loc 1 1442 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e 93F82E30 	 ldrb r3,[r3,#46]
  48 0012 DBB2     	 uxtb r3,r3
  49 0014 DAB2     	 uxtb r2,r3
  50 0016 FB78     	 ldrb r3,[r7,#3]
  51 0018 03F00F03 	 and r3,r3,#15
  52 001c DBB2     	 uxtb r3,r3
  53 001e 1343     	 orrs r3,r3,r2
  54 0020 DBB2     	 uxtb r3,r3
  55 0022 DAB2     	 uxtb r2,r3
  56 0024 7B68     	 ldr r3,[r7,#4]
  57 0026 83F82E20 	 strb r2,[r3,#46]
1443:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h ****                                    (uint32_t)SDMMC_TIMEOUT_CTRL_DAT_TIMEOUT_CNT_VAL_Msk);
1444:D:\Bachelorarbeit\Dave\Basisstation\Basisstation\Libraries\XMCLib\inc\xmc_sdmmc.h **** }
  58              	 .loc 1 1444 0
  59 002a 0C37     	 adds r7,r7,#12
  60              	.LCFI3:
  61              	 .cfi_def_cfa_offset 4
  62 002c BD46     	 mov sp,r7
  63              	.LCFI4:
  64              	 .cfi_def_cfa_register 13
  65              	 
  66 002e 5DF8047B 	 ldr r7,[sp],#4
  67              	.LCFI5:
  68              	 .cfi_restore 7
  69              	 .cfi_def_cfa_offset 0
  70 0032 7047     	 bx lr
  71              	 .cfi_endproc
  72              	.LFE160:
  74              	 .section .text.XMC_SDMMC_GetPowerStatus,"ax",%progbits
  75              	 .align 2
  76              	 .global XMC_SDMMC_GetPowerStatus
  77              	 .thumb
  78              	 .thumb_func
  80              	XMC_SDMMC_GetPowerStatus:
  81              	.LFB198:
  82              	 .file 2 "../Libraries/XMCLib/src/xmc_sdmmc.c"
   1:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
   2:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
   3:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @file xmc_sdmmc.c
   4:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @date 2016-03-14
   5:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
   6:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  10:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  19:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 
  22:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_sdmmc.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  37:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  40:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-02-20:
  41:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Initial <br>
  42:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed GetDriverVersion API <br>
  43:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  44:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2015-06-20:
  45:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Removed definition of GetDriverVersion API <br>
  46:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  47:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * 2016-03-14:
  48:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *     - Values are directly assigned to the int status registers <br>
  49:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  50:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @endcond
  51:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  52:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  53:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  54:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup XMClib
  55:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  56:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  57:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  58:../Libraries/XMCLib/src/xmc_sdmmc.c **** /**
  59:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @addtogroup SDMMC
  60:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @brief SDMMC driver
  61:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * @{
  62:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  63:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  64:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  65:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * HEADER FILES
  66:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  67:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
  68:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_sdmmc.h"
  69:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  70:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  71:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * The SDMMC peripheral is only available on the
  72:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * XMC4500. The SDMMC definition can be found in
  73:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * the XMC4500.h (device header file).
  74:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  75:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined (SDMMC)
  76:../Libraries/XMCLib/src/xmc_sdmmc.c **** #include "xmc_scu.h"
  77:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  78:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
  79:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * MACROS
  80:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
  81:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  82:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
  83:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC error events <br>
  84:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
  85:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
  86:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
  87:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_ERROR_EVENT(e)\
  88:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_TIMEOUT_ERR)     ||\
  89:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_CRC_ERR)         ||\
  90:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_END_BIT_ERR)     ||\
  91:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CMD_IND_ERR)         ||\
  92:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_TIMEOUT_ERR)    ||\
  93:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_CRC_ERR)        ||\
  94:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_DATA_END_BIT_ERR)    ||\
  95:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CURRENT_LIMIT_ERR)   ||\
  96:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_ACMD_ERR)            ||\
  97:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TARGET_RESP_ERR))
  98:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
  99:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 100:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC normal events <br>
 101:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 102:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 103:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 104:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_NORMAL_EVENT(e)\
 105:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((e == XMC_SDMMC_CMD_COMPLETE)        ||\
 106:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_TX_COMPLETE)         ||\
 107:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BLOCK_GAP_EVENT)     ||\
 108:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_WRITE_READY)  ||\
 109:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_BUFFER_READ_READY)   ||\
 110:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INS)            ||\
 111:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_REMOVAL)        ||\
 112:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (e == XMC_SDMMC_CARD_INT))
 113:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 114:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 115:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for both normal and error events <br>
 116:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 117:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 118:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 119:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_EVENT(e)\
 120:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((XMC_SDMMC_CHECK_NORMAL_EVENT(e))    ||\
 121:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (XMC_SDMMC_CHECK_ERROR_EVENT(e)))
 122:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 123:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 124:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC wakeup events <br>
 125:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 126:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 127:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 128:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_WAKEUP_EVENT(w)\
 129:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((w == XMC_SDMMC_WAKEUP_EN_CARD_INT)  ||\
 130:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_INS)  ||\
 131:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (w == XMC_SDMMC_WAKEUP_EN_CARD_REM))
 132:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 133:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 134:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC software reset modes <br>
 135:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 136:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 137:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 138:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_SW_RESET_MODE(m)\
 139:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_SW_RESET_ALL)        ||\
 140:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_CMD_LINE)     ||\
 141:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_SW_RST_DAT_LINE))
 142:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 143:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 144:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * Check for valid SDMMC transfer modes <br>
 145:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *
 146:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * This macro is used in the LLD for assertion checks (XMC_ASSERT).
 147:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 148:../Libraries/XMCLib/src/xmc_sdmmc.c **** #define XMC_SDMMC_CHECK_TRANSFER_MODE(m)\
 149:../Libraries/XMCLib/src/xmc_sdmmc.c ****   ((m == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)    ||\
 150:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_INFINITE)  ||\
 151:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_MULTIPLE)  ||\
 152:../Libraries/XMCLib/src/xmc_sdmmc.c ****    (m == XMC_SDMMC_TRANSFER_MODE_TYPE_STOP_MULTIPLE))
 153:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 154:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 155:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*******************************************************************************
 156:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * API IMPLEMENTATION
 157:../Libraries/XMCLib/src/xmc_sdmmc.c ****  *******************************************************************************/
 158:../Libraries/XMCLib/src/xmc_sdmmc.c ****  
 159:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get power status of the SDMMC peripheral */
 160:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetPowerStatus(XMC_SDMMC_t *const sdmmc)
 161:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
  83              	 .loc 2 161 0
  84              	 .cfi_startproc
  85              	 
  86              	 
  87              	 
  88 0000 80B4     	 push {r7}
  89              	.LCFI6:
  90              	 .cfi_def_cfa_offset 4
  91              	 .cfi_offset 7,-4
  92 0002 83B0     	 sub sp,sp,#12
  93              	.LCFI7:
  94              	 .cfi_def_cfa_offset 16
  95 0004 00AF     	 add r7,sp,#0
  96              	.LCFI8:
  97              	 .cfi_def_cfa_register 7
  98 0006 7860     	 str r0,[r7,#4]
 162:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetPowerStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc))
 163:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 164:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return (bool)(sdmmc->POWER_CTRL & SDMMC_POWER_CTRL_SD_BUS_POWER_Msk);
  99              	 .loc 2 164 0
 100 0008 7B68     	 ldr r3,[r7,#4]
 101 000a 93F82930 	 ldrb r3,[r3,#41]
 102 000e DBB2     	 uxtb r3,r3
 103 0010 03F00103 	 and r3,r3,#1
 104 0014 002B     	 cmp r3,#0
 105 0016 14BF     	 ite ne
 106 0018 0123     	 movne r3,#1
 107 001a 0023     	 moveq r3,#0
 108 001c DBB2     	 uxtb r3,r3
 165:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 109              	 .loc 2 165 0
 110 001e 1846     	 mov r0,r3
 111 0020 0C37     	 adds r7,r7,#12
 112              	.LCFI9:
 113              	 .cfi_def_cfa_offset 4
 114 0022 BD46     	 mov sp,r7
 115              	.LCFI10:
 116              	 .cfi_def_cfa_register 13
 117              	 
 118 0024 5DF8047B 	 ldr r7,[sp],#4
 119              	.LCFI11:
 120              	 .cfi_restore 7
 121              	 .cfi_def_cfa_offset 0
 122 0028 7047     	 bx lr
 123              	 .cfi_endproc
 124              	.LFE198:
 126 002a 00BF     	 .section .text.XMC_SDMMC_Enable,"ax",%progbits
 127              	 .align 2
 128              	 .global XMC_SDMMC_Enable
 129              	 .thumb
 130              	 .thumb_func
 132              	XMC_SDMMC_Enable:
 133              	.LFB199:
 166:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 167:../Libraries/XMCLib/src/xmc_sdmmc.c **** /*
 168:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * De-assert the peripheral reset. The SDMMC peripheral
 169:../Libraries/XMCLib/src/xmc_sdmmc.c ****  * needs to be initialized
 170:../Libraries/XMCLib/src/xmc_sdmmc.c ****  */
 171:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Enable(XMC_SDMMC_t *const sdmmc)
 172:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 134              	 .loc 2 172 0
 135              	 .cfi_startproc
 136              	 
 137              	 
 138 0000 80B5     	 push {r7,lr}
 139              	.LCFI12:
 140              	 .cfi_def_cfa_offset 8
 141              	 .cfi_offset 7,-8
 142              	 .cfi_offset 14,-4
 143 0002 82B0     	 sub sp,sp,#8
 144              	.LCFI13:
 145              	 .cfi_def_cfa_offset 16
 146 0004 00AF     	 add r7,sp,#0
 147              	.LCFI14:
 148              	 .cfi_def_cfa_register 7
 149 0006 7860     	 str r0,[r7,#4]
 173:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Enable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 174:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 175:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 176:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 177:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 178:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 179:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 150              	 .loc 2 179 0
 151 0008 0248     	 ldr r0,.L5
 152 000a FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 180:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 181:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 153              	 .loc 2 181 0
 154 000e 0837     	 adds r7,r7,#8
 155              	.LCFI15:
 156              	 .cfi_def_cfa_offset 8
 157 0010 BD46     	 mov sp,r7
 158              	.LCFI16:
 159              	 .cfi_def_cfa_register 13
 160              	 
 161 0012 80BD     	 pop {r7,pc}
 162              	.L6:
 163              	 .align 2
 164              	.L5:
 165 0014 40000010 	 .word 268435520
 166              	 .cfi_endproc
 167              	.LFE199:
 169              	 .section .text.XMC_SDMMC_Disable,"ax",%progbits
 170              	 .align 2
 171              	 .global XMC_SDMMC_Disable
 172              	 .thumb
 173              	 .thumb_func
 175              	XMC_SDMMC_Disable:
 176              	.LFB200:
 182:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 183:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Assert the peripheral reset */
 184:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_Disable(XMC_SDMMC_t *const sdmmc)
 185:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 177              	 .loc 2 185 0
 178              	 .cfi_startproc
 179              	 
 180              	 
 181 0000 80B5     	 push {r7,lr}
 182              	.LCFI17:
 183              	 .cfi_def_cfa_offset 8
 184              	 .cfi_offset 7,-8
 185              	 .cfi_offset 14,-4
 186 0002 82B0     	 sub sp,sp,#8
 187              	.LCFI18:
 188              	 .cfi_def_cfa_offset 16
 189 0004 00AF     	 add r7,sp,#0
 190              	.LCFI19:
 191              	 .cfi_def_cfa_register 7
 192 0006 7860     	 str r0,[r7,#4]
 186:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Disable: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 187:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 188:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(PERIPHERAL_RESET_SUPPORTED)
 189:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_SDMMC);
 193              	 .loc 2 189 0
 194 0008 0248     	 ldr r0,.L8
 195 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 190:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif  
 191:../Libraries/XMCLib/src/xmc_sdmmc.c **** #if defined(CLOCK_GATING_SUPPORTED)
 192:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_SDMMC);
 193:../Libraries/XMCLib/src/xmc_sdmmc.c **** #endif
 194:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 196              	 .loc 2 194 0
 197 000e 0837     	 adds r7,r7,#8
 198              	.LCFI20:
 199              	 .cfi_def_cfa_offset 8
 200 0010 BD46     	 mov sp,r7
 201              	.LCFI21:
 202              	 .cfi_def_cfa_register 13
 203              	 
 204 0012 80BD     	 pop {r7,pc}
 205              	.L9:
 206              	 .align 2
 207              	.L8:
 208 0014 40000010 	 .word 268435520
 209              	 .cfi_endproc
 210              	.LFE200:
 212              	 .section .text.XMC_SDMMC_Init,"ax",%progbits
 213              	 .align 2
 214              	 .global XMC_SDMMC_Init
 215              	 .thumb
 216              	 .thumb_func
 218              	XMC_SDMMC_Init:
 219              	.LFB201:
 195:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 196:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Initialize SDMMC peripheral */
 197:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_Init(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_CONFIG_t *config)
 198:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 220              	 .loc 2 198 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224 0000 80B5     	 push {r7,lr}
 225              	.LCFI22:
 226              	 .cfi_def_cfa_offset 8
 227              	 .cfi_offset 7,-8
 228              	 .cfi_offset 14,-4
 229 0002 82B0     	 sub sp,sp,#8
 230              	.LCFI23:
 231              	 .cfi_def_cfa_offset 16
 232 0004 00AF     	 add r7,sp,#0
 233              	.LCFI24:
 234              	 .cfi_def_cfa_register 7
 235 0006 7860     	 str r0,[r7,#4]
 236 0008 3960     	 str r1,[r7]
 199:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 200:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid clock divider value", XMC_SDMMC_CHECK_SDCLK_FREQ(config->cloc
 201:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_Init: Invalid bus width", XMC_SDMMC_CHECK_DATA_LINES(config->bus_width));
 202:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 203:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Enable SDMMC peripheral */
 204:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_Enable(sdmmc);
 237              	 .loc 2 204 0
 238 000a 7868     	 ldr r0,[r7,#4]
 239 000c FFF7FEFF 	 bl XMC_SDMMC_Enable
 205:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 206:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Write internal clock divider register */
 207:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->CLOCK_CTRL |= (uint16_t)((uint32_t)config->clock_divider << SDMMC_CLOCK_CTRL_SDCLK_FREQ_SE
 240              	 .loc 2 207 0
 241 0010 7B68     	 ldr r3,[r7,#4]
 242 0012 9B8D     	 ldrh r3,[r3,#44]
 243 0014 9AB2     	 uxth r2,r3
 244 0016 3B68     	 ldr r3,[r7]
 245 0018 5B78     	 ldrb r3,[r3,#1]
 246 001a 9BB2     	 uxth r3,r3
 247 001c 1B02     	 lsls r3,r3,#8
 248 001e 9BB2     	 uxth r3,r3
 249 0020 1343     	 orrs r3,r3,r2
 250 0022 9AB2     	 uxth r2,r3
 251 0024 7B68     	 ldr r3,[r7,#4]
 252 0026 9A85     	 strh r2,[r3,#44]
 208:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 209:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set bus width */
 210:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->HOST_CTRL = (uint8_t)((sdmmc->HOST_CTRL & (uint8_t)~SDMMC_HOST_CTRL_DATA_TX_WIDTH_Msk) |
 253              	 .loc 2 210 0
 254 0028 7B68     	 ldr r3,[r7,#4]
 255 002a 93F82830 	 ldrb r3,[r3,#40]
 256 002e DBB2     	 uxtb r3,r3
 257 0030 DBB2     	 uxtb r3,r3
 258 0032 23F00203 	 bic r3,r3,#2
 259 0036 DAB2     	 uxtb r2,r3
 211:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 260              	 .loc 2 211 0
 261 0038 3B68     	 ldr r3,[r7]
 262 003a 1B78     	 ldrb r3,[r3]
 263 003c 5B00     	 lsls r3,r3,#1
 210:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                ((uint8_t)config->bus_width << SDMMC_HOST_CTRL_DATA_TX_WIDTH_Pos));
 264              	 .loc 2 210 0
 265 003e DBB2     	 uxtb r3,r3
 266 0040 1343     	 orrs r3,r3,r2
 267 0042 DBB2     	 uxtb r3,r3
 268 0044 DAB2     	 uxtb r2,r3
 269 0046 7B68     	 ldr r3,[r7,#4]
 270 0048 83F82820 	 strb r2,[r3,#40]
 212:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 213:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 271              	 .loc 2 213 0
 272 004c 0023     	 movs r3,#0
 214:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 273              	 .loc 2 214 0
 274 004e 1846     	 mov r0,r3
 275 0050 0837     	 adds r7,r7,#8
 276              	.LCFI25:
 277              	 .cfi_def_cfa_offset 8
 278 0052 BD46     	 mov sp,r7
 279              	.LCFI26:
 280              	 .cfi_def_cfa_register 13
 281              	 
 282 0054 80BD     	 pop {r7,pc}
 283              	 .cfi_endproc
 284              	.LFE201:
 286 0056 00BF     	 .section .text.XMC_SDMMC_EnableEventStatus,"ax",%progbits
 287              	 .align 2
 288              	 .global XMC_SDMMC_EnableEventStatus
 289              	 .thumb
 290              	 .thumb_func
 292              	XMC_SDMMC_EnableEventStatus:
 293              	.LFB202:
 215:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 216:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable event status */
 217:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 218:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 294              	 .loc 2 218 0
 295              	 .cfi_startproc
 296              	 
 297              	 
 298              	 
 299 0000 80B4     	 push {r7}
 300              	.LCFI27:
 301              	 .cfi_def_cfa_offset 4
 302              	 .cfi_offset 7,-4
 303 0002 83B0     	 sub sp,sp,#12
 304              	.LCFI28:
 305              	 .cfi_def_cfa_offset 16
 306 0004 00AF     	 add r7,sp,#0
 307              	.LCFI29:
 308              	 .cfi_def_cfa_register 7
 309 0006 7860     	 str r0,[r7,#4]
 310 0008 3960     	 str r1,[r7]
 219:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmm
 220:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 221:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Set INT status enable register */
 222:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM |= (uint16_t)event;
 311              	 .loc 2 222 0
 312 000a 7B68     	 ldr r3,[r7,#4]
 313 000c 9B8E     	 ldrh r3,[r3,#52]
 314 000e 9AB2     	 uxth r2,r3
 315 0010 3B68     	 ldr r3,[r7]
 316 0012 9BB2     	 uxth r3,r3
 317 0014 1343     	 orrs r3,r3,r2
 318 0016 9AB2     	 uxth r2,r3
 319 0018 7B68     	 ldr r3,[r7,#4]
 320 001a 9A86     	 strh r2,[r3,#52]
 223:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR |= (uint16_t)(event >> 16U);
 321              	 .loc 2 223 0
 322 001c 7B68     	 ldr r3,[r7,#4]
 323 001e DB8E     	 ldrh r3,[r3,#54]
 324 0020 9AB2     	 uxth r2,r3
 325 0022 3B68     	 ldr r3,[r7]
 326 0024 1B0C     	 lsrs r3,r3,#16
 327 0026 9BB2     	 uxth r3,r3
 328 0028 1343     	 orrs r3,r3,r2
 329 002a 9AB2     	 uxth r2,r3
 330 002c 7B68     	 ldr r3,[r7,#4]
 331 002e DA86     	 strh r2,[r3,#54]
 224:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 332              	 .loc 2 224 0
 333 0030 0C37     	 adds r7,r7,#12
 334              	.LCFI30:
 335              	 .cfi_def_cfa_offset 4
 336 0032 BD46     	 mov sp,r7
 337              	.LCFI31:
 338              	 .cfi_def_cfa_register 13
 339              	 
 340 0034 5DF8047B 	 ldr r7,[sp],#4
 341              	.LCFI32:
 342              	 .cfi_restore 7
 343              	 .cfi_def_cfa_offset 0
 344 0038 7047     	 bx lr
 345              	 .cfi_endproc
 346              	.LFE202:
 348 003a 00BF     	 .section .text.XMC_SDMMC_DisableEventStatus,"ax",%progbits
 349              	 .align 2
 350              	 .global XMC_SDMMC_DisableEventStatus
 351              	 .thumb
 352              	 .thumb_func
 354              	XMC_SDMMC_DisableEventStatus:
 355              	.LFB203:
 225:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 226:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable event status */
 227:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEventStatus(XMC_SDMMC_t *const sdmmc, uint32_t event)
 228:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 356              	 .loc 2 228 0
 357              	 .cfi_startproc
 358              	 
 359              	 
 360              	 
 361 0000 80B4     	 push {r7}
 362              	.LCFI33:
 363              	 .cfi_def_cfa_offset 4
 364              	 .cfi_offset 7,-4
 365 0002 83B0     	 sub sp,sp,#12
 366              	.LCFI34:
 367              	 .cfi_def_cfa_offset 16
 368 0004 00AF     	 add r7,sp,#0
 369              	.LCFI35:
 370              	 .cfi_def_cfa_register 7
 371 0006 7860     	 str r0,[r7,#4]
 372 0008 3960     	 str r1,[r7]
 229:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEventStatus: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdm
 230:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 231:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT status enable register */
 232:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_NORM &= (uint16_t)~event;
 373              	 .loc 2 232 0
 374 000a 7B68     	 ldr r3,[r7,#4]
 375 000c 9B8E     	 ldrh r3,[r3,#52]
 376 000e 9AB2     	 uxth r2,r3
 377 0010 3B68     	 ldr r3,[r7]
 378 0012 9BB2     	 uxth r3,r3
 379 0014 DB43     	 mvns r3,r3
 380 0016 9BB2     	 uxth r3,r3
 381 0018 1340     	 ands r3,r3,r2
 382 001a 9AB2     	 uxth r2,r3
 383 001c 7B68     	 ldr r3,[r7,#4]
 384 001e 9A86     	 strh r2,[r3,#52]
 233:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_STATUS_ERR &= (uint16_t)~(event >> 16U);
 385              	 .loc 2 233 0
 386 0020 7B68     	 ldr r3,[r7,#4]
 387 0022 DB8E     	 ldrh r3,[r3,#54]
 388 0024 9AB2     	 uxth r2,r3
 389 0026 3B68     	 ldr r3,[r7]
 390 0028 1B0C     	 lsrs r3,r3,#16
 391 002a 9BB2     	 uxth r3,r3
 392 002c DB43     	 mvns r3,r3
 393 002e 9BB2     	 uxth r3,r3
 394 0030 1340     	 ands r3,r3,r2
 395 0032 9AB2     	 uxth r2,r3
 396 0034 7B68     	 ldr r3,[r7,#4]
 397 0036 DA86     	 strh r2,[r3,#54]
 234:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 398              	 .loc 2 234 0
 399 0038 0C37     	 adds r7,r7,#12
 400              	.LCFI36:
 401              	 .cfi_def_cfa_offset 4
 402 003a BD46     	 mov sp,r7
 403              	.LCFI37:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 003c 5DF8047B 	 ldr r7,[sp],#4
 407              	.LCFI38:
 408              	 .cfi_restore 7
 409              	 .cfi_def_cfa_offset 0
 410 0040 7047     	 bx lr
 411              	 .cfi_endproc
 412              	.LFE203:
 414 0042 00BF     	 .section .text.XMC_SDMMC_EnableEvent,"ax",%progbits
 415              	 .align 2
 416              	 .global XMC_SDMMC_EnableEvent
 417              	 .thumb
 418              	 .thumb_func
 420              	XMC_SDMMC_EnableEvent:
 421              	.LFB204:
 235:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 236:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Enable SDMMC event */
 237:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_EnableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 238:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 422              	 .loc 2 238 0
 423              	 .cfi_startproc
 424              	 
 425              	 
 426 0000 80B5     	 push {r7,lr}
 427              	.LCFI39:
 428              	 .cfi_def_cfa_offset 8
 429              	 .cfi_offset 7,-8
 430              	 .cfi_offset 14,-4
 431 0002 82B0     	 sub sp,sp,#8
 432              	.LCFI40:
 433              	 .cfi_def_cfa_offset 16
 434 0004 00AF     	 add r7,sp,#0
 435              	.LCFI41:
 436              	 .cfi_def_cfa_register 7
 437 0006 7860     	 str r0,[r7,#4]
 438 0008 3960     	 str r1,[r7]
 239:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_EnableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 240:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 241:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_EnableEventStatus(sdmmc, event);
 439              	 .loc 2 241 0
 440 000a 7868     	 ldr r0,[r7,#4]
 441 000c 3968     	 ldr r1,[r7]
 442 000e FFF7FEFF 	 bl XMC_SDMMC_EnableEventStatus
 242:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 243:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM |= (uint16_t)event;
 443              	 .loc 2 243 0
 444 0012 7B68     	 ldr r3,[r7,#4]
 445 0014 1B8F     	 ldrh r3,[r3,#56]
 446 0016 9AB2     	 uxth r2,r3
 447 0018 3B68     	 ldr r3,[r7]
 448 001a 9BB2     	 uxth r3,r3
 449 001c 1343     	 orrs r3,r3,r2
 450 001e 9AB2     	 uxth r2,r3
 451 0020 7B68     	 ldr r3,[r7,#4]
 452 0022 1A87     	 strh r2,[r3,#56]
 244:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR |= (uint16_t)(event >> 16U);
 453              	 .loc 2 244 0
 454 0024 7B68     	 ldr r3,[r7,#4]
 455 0026 5B8F     	 ldrh r3,[r3,#58]
 456 0028 9AB2     	 uxth r2,r3
 457 002a 3B68     	 ldr r3,[r7]
 458 002c 1B0C     	 lsrs r3,r3,#16
 459 002e 9BB2     	 uxth r3,r3
 460 0030 1343     	 orrs r3,r3,r2
 461 0032 9AB2     	 uxth r2,r3
 462 0034 7B68     	 ldr r3,[r7,#4]
 463 0036 5A87     	 strh r2,[r3,#58]
 245:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 464              	 .loc 2 245 0
 465 0038 0837     	 adds r7,r7,#8
 466              	.LCFI42:
 467              	 .cfi_def_cfa_offset 8
 468 003a BD46     	 mov sp,r7
 469              	.LCFI43:
 470              	 .cfi_def_cfa_register 13
 471              	 
 472 003c 80BD     	 pop {r7,pc}
 473              	 .cfi_endproc
 474              	.LFE204:
 476 003e 00BF     	 .section .text.XMC_SDMMC_DisableEvent,"ax",%progbits
 477              	 .align 2
 478              	 .global XMC_SDMMC_DisableEvent
 479              	 .thumb
 480              	 .thumb_func
 482              	XMC_SDMMC_DisableEvent:
 483              	.LFB205:
 246:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 247:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Disable SDMMC event without disabling event status */
 248:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_DisableEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 249:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 484              	 .loc 2 249 0
 485              	 .cfi_startproc
 486              	 
 487              	 
 488              	 
 489 0000 80B4     	 push {r7}
 490              	.LCFI44:
 491              	 .cfi_def_cfa_offset 4
 492              	 .cfi_offset 7,-4
 493 0002 83B0     	 sub sp,sp,#12
 494              	.LCFI45:
 495              	 .cfi_def_cfa_offset 16
 496 0004 00AF     	 add r7,sp,#0
 497              	.LCFI46:
 498              	 .cfi_def_cfa_register 7
 499 0006 7860     	 str r0,[r7,#4]
 500 0008 3960     	 str r1,[r7]
 250:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_DisableEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 251:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 252:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Clear INT signal enable register */
 253:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_NORM &= (uint16_t)~event;
 501              	 .loc 2 253 0
 502 000a 7B68     	 ldr r3,[r7,#4]
 503 000c 1B8F     	 ldrh r3,[r3,#56]
 504 000e 9AB2     	 uxth r2,r3
 505 0010 3B68     	 ldr r3,[r7]
 506 0012 9BB2     	 uxth r3,r3
 507 0014 DB43     	 mvns r3,r3
 508 0016 9BB2     	 uxth r3,r3
 509 0018 1340     	 ands r3,r3,r2
 510 001a 9AB2     	 uxth r2,r3
 511 001c 7B68     	 ldr r3,[r7,#4]
 512 001e 1A87     	 strh r2,[r3,#56]
 254:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->EN_INT_SIGNAL_ERR &= (uint16_t)~(event >> 16U);
 513              	 .loc 2 254 0
 514 0020 7B68     	 ldr r3,[r7,#4]
 515 0022 5B8F     	 ldrh r3,[r3,#58]
 516 0024 9AB2     	 uxth r2,r3
 517 0026 3B68     	 ldr r3,[r7]
 518 0028 1B0C     	 lsrs r3,r3,#16
 519 002a 9BB2     	 uxth r3,r3
 520 002c DB43     	 mvns r3,r3
 521 002e 9BB2     	 uxth r3,r3
 522 0030 1340     	 ands r3,r3,r2
 523 0032 9AB2     	 uxth r2,r3
 524 0034 7B68     	 ldr r3,[r7,#4]
 525 0036 5A87     	 strh r2,[r3,#58]
 255:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 526              	 .loc 2 255 0
 527 0038 0C37     	 adds r7,r7,#12
 528              	.LCFI47:
 529              	 .cfi_def_cfa_offset 4
 530 003a BD46     	 mov sp,r7
 531              	.LCFI48:
 532              	 .cfi_def_cfa_register 13
 533              	 
 534 003c 5DF8047B 	 ldr r7,[sp],#4
 535              	.LCFI49:
 536              	 .cfi_restore 7
 537              	 .cfi_def_cfa_offset 0
 538 0040 7047     	 bx lr
 539              	 .cfi_endproc
 540              	.LFE205:
 542 0042 00BF     	 .section .text.XMC_SDMMC_ClearEvent,"ax",%progbits
 543              	 .align 2
 544              	 .global XMC_SDMMC_ClearEvent
 545              	 .thumb
 546              	 .thumb_func
 548              	XMC_SDMMC_ClearEvent:
 549              	.LFB206:
 256:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 257:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Clear SDMMC event(s) */
 258:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_ClearEvent(XMC_SDMMC_t *const sdmmc, uint32_t event)
 259:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 550              	 .loc 2 259 0
 551              	 .cfi_startproc
 552              	 
 553              	 
 554              	 
 555 0000 80B4     	 push {r7}
 556              	.LCFI50:
 557              	 .cfi_def_cfa_offset 4
 558              	 .cfi_offset 7,-4
 559 0002 83B0     	 sub sp,sp,#12
 560              	.LCFI51:
 561              	 .cfi_def_cfa_offset 16
 562 0004 00AF     	 add r7,sp,#0
 563              	.LCFI52:
 564              	 .cfi_def_cfa_register 7
 565 0006 7860     	 str r0,[r7,#4]
 566 0008 3960     	 str r1,[r7]
 260:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 261:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_ClearEvent: Invalid bit-field", !(event & XMC_SDMMC_TARGET_RESP_ERR));
 262:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 263:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_NORM = (uint16_t)event;
 567              	 .loc 2 263 0
 568 000a 3B68     	 ldr r3,[r7]
 569 000c 9AB2     	 uxth r2,r3
 570 000e 7B68     	 ldr r3,[r7,#4]
 571 0010 1A86     	 strh r2,[r3,#48]
 264:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->INT_STATUS_ERR = (uint16_t)(event >> 16U);
 572              	 .loc 2 264 0
 573 0012 3B68     	 ldr r3,[r7]
 574 0014 1B0C     	 lsrs r3,r3,#16
 575 0016 9AB2     	 uxth r2,r3
 576 0018 7B68     	 ldr r3,[r7,#4]
 577 001a 5A86     	 strh r2,[r3,#50]
 265:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 578              	 .loc 2 265 0
 579 001c 0C37     	 adds r7,r7,#12
 580              	.LCFI53:
 581              	 .cfi_def_cfa_offset 4
 582 001e BD46     	 mov sp,r7
 583              	.LCFI54:
 584              	 .cfi_def_cfa_register 13
 585              	 
 586 0020 5DF8047B 	 ldr r7,[sp],#4
 587              	.LCFI55:
 588              	 .cfi_restore 7
 589              	 .cfi_def_cfa_offset 0
 590 0024 7047     	 bx lr
 591              	 .cfi_endproc
 592              	.LFE206:
 594 0026 00BF     	 .section .text.XMC_SDMMC_GetEvent,"ax",%progbits
 595              	 .align 2
 596              	 .global XMC_SDMMC_GetEvent
 597              	 .thumb
 598              	 .thumb_func
 600              	XMC_SDMMC_GetEvent:
 601              	.LFB207:
 266:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 267:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Get the status of an SDMMC event */
 268:../Libraries/XMCLib/src/xmc_sdmmc.c **** bool XMC_SDMMC_GetEvent(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_EVENT_t event)
 269:../Libraries/XMCLib/src/xmc_sdmmc.c **** {  
 602              	 .loc 2 269 0
 603              	 .cfi_startproc
 604              	 
 605              	 
 606              	 
 607 0000 80B4     	 push {r7}
 608              	.LCFI56:
 609              	 .cfi_def_cfa_offset 4
 610              	 .cfi_offset 7,-4
 611 0002 85B0     	 sub sp,sp,#20
 612              	.LCFI57:
 613              	 .cfi_def_cfa_offset 24
 614 0004 00AF     	 add r7,sp,#0
 615              	.LCFI58:
 616              	 .cfi_def_cfa_register 7
 617 0006 7860     	 str r0,[r7,#4]
 618 0008 3960     	 str r1,[r7]
 270:../Libraries/XMCLib/src/xmc_sdmmc.c ****   bool status;
 271:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 272:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 273:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetEvent: Invalid SDMMC event", XMC_SDMMC_CHECK_EVENT(event));
 274:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 275:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (event < XMC_SDMMC_CMD_TIMEOUT_ERR)
 619              	 .loc 2 275 0
 620 000a 3B68     	 ldr r3,[r7]
 621 000c B3F5803F 	 cmp r3,#65536
 622 0010 0CD2     	 bcs .L18
 276:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 277:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_NORM & (uint16_t)event);
 623              	 .loc 2 277 0
 624 0012 7B68     	 ldr r3,[r7,#4]
 625 0014 1B8E     	 ldrh r3,[r3,#48]
 626 0016 9AB2     	 uxth r2,r3
 627 0018 3B68     	 ldr r3,[r7]
 628 001a 9BB2     	 uxth r3,r3
 629 001c 1340     	 ands r3,r3,r2
 630 001e 9BB2     	 uxth r3,r3
 631 0020 002B     	 cmp r3,#0
 632 0022 14BF     	 ite ne
 633 0024 0123     	 movne r3,#1
 634 0026 0023     	 moveq r3,#0
 635 0028 FB73     	 strb r3,[r7,#15]
 636 002a 0CE0     	 b .L19
 637              	.L18:
 278:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 279:../Libraries/XMCLib/src/xmc_sdmmc.c ****   else
 280:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 281:../Libraries/XMCLib/src/xmc_sdmmc.c ****     status = (bool)(sdmmc->INT_STATUS_ERR & (uint16_t)((uint32_t)event >> 16U));
 638              	 .loc 2 281 0
 639 002c 7B68     	 ldr r3,[r7,#4]
 640 002e 5B8E     	 ldrh r3,[r3,#50]
 641 0030 9AB2     	 uxth r2,r3
 642 0032 3B68     	 ldr r3,[r7]
 643 0034 1B0C     	 lsrs r3,r3,#16
 644 0036 9BB2     	 uxth r3,r3
 645 0038 1340     	 ands r3,r3,r2
 646 003a 9BB2     	 uxth r3,r3
 647 003c 002B     	 cmp r3,#0
 648 003e 14BF     	 ite ne
 649 0040 0123     	 movne r3,#1
 650 0042 0023     	 moveq r3,#0
 651 0044 FB73     	 strb r3,[r7,#15]
 652              	.L19:
 282:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 283:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 284:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return status;
 653              	 .loc 2 284 0
 654 0046 FB7B     	 ldrb r3,[r7,#15]
 285:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 655              	 .loc 2 285 0
 656 0048 1846     	 mov r0,r3
 657 004a 1437     	 adds r7,r7,#20
 658              	.LCFI59:
 659              	 .cfi_def_cfa_offset 4
 660 004c BD46     	 mov sp,r7
 661              	.LCFI60:
 662              	 .cfi_def_cfa_register 13
 663              	 
 664 004e 5DF8047B 	 ldr r7,[sp],#4
 665              	.LCFI61:
 666              	 .cfi_restore 7
 667              	 .cfi_def_cfa_offset 0
 668 0052 7047     	 bx lr
 669              	 .cfi_endproc
 670              	.LFE207:
 672              	 .section .text.XMC_SDMMC_GetR2Response,"ax",%progbits
 673              	 .align 2
 674              	 .global XMC_SDMMC_GetR2Response
 675              	 .thumb
 676              	 .thumb_func
 678              	XMC_SDMMC_GetR2Response:
 679              	.LFB208:
 286:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 287:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Read R2 response (CID, CSD register) */
 288:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_GetR2Response(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_RESPONSE_t *const response)
 289:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 680              	 .loc 2 289 0
 681              	 .cfi_startproc
 682              	 
 683              	 
 684              	 
 685 0000 80B4     	 push {r7}
 686              	.LCFI62:
 687              	 .cfi_def_cfa_offset 4
 688              	 .cfi_offset 7,-4
 689 0002 83B0     	 sub sp,sp,#12
 690              	.LCFI63:
 691              	 .cfi_def_cfa_offset 16
 692 0004 00AF     	 add r7,sp,#0
 693              	.LCFI64:
 694              	 .cfi_def_cfa_register 7
 695 0006 7860     	 str r0,[r7,#4]
 696 0008 3960     	 str r1,[r7]
 290:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_GetR2Response: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 291:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 292:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_0 = sdmmc->RESPONSE[0];
 697              	 .loc 2 292 0
 698 000a 7B68     	 ldr r3,[r7,#4]
 699 000c 1A69     	 ldr r2,[r3,#16]
 700 000e 3B68     	 ldr r3,[r7]
 701 0010 1A60     	 str r2,[r3]
 293:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_2 = sdmmc->RESPONSE[1];
 702              	 .loc 2 293 0
 703 0012 7B68     	 ldr r3,[r7,#4]
 704 0014 5A69     	 ldr r2,[r3,#20]
 705 0016 3B68     	 ldr r3,[r7]
 706 0018 5A60     	 str r2,[r3,#4]
 294:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_4 = sdmmc->RESPONSE[2];
 707              	 .loc 2 294 0
 708 001a 7B68     	 ldr r3,[r7,#4]
 709 001c 9A69     	 ldr r2,[r3,#24]
 710 001e 3B68     	 ldr r3,[r7]
 711 0020 9A60     	 str r2,[r3,#8]
 295:../Libraries/XMCLib/src/xmc_sdmmc.c ****   response->response_6 = sdmmc->RESPONSE[3];
 712              	 .loc 2 295 0
 713 0022 7B68     	 ldr r3,[r7,#4]
 714 0024 DA69     	 ldr r2,[r3,#28]
 715 0026 3B68     	 ldr r3,[r7]
 716 0028 DA60     	 str r2,[r3,#12]
 296:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 717              	 .loc 2 296 0
 718 002a 0C37     	 adds r7,r7,#12
 719              	.LCFI65:
 720              	 .cfi_def_cfa_offset 4
 721 002c BD46     	 mov sp,r7
 722              	.LCFI66:
 723              	 .cfi_def_cfa_register 13
 724              	 
 725 002e 5DF8047B 	 ldr r7,[sp],#4
 726              	.LCFI67:
 727              	 .cfi_restore 7
 728              	 .cfi_def_cfa_offset 0
 729 0032 7047     	 bx lr
 730              	 .cfi_endproc
 731              	.LFE208:
 733              	 .section .text.XMC_SDMMC_SendCommand,"ax",%progbits
 734              	 .align 2
 735              	 .global XMC_SDMMC_SendCommand
 736              	 .thumb
 737              	 .thumb_func
 739              	XMC_SDMMC_SendCommand:
 740              	.LFB209:
 297:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 298:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Send SDMMC command */
 299:../Libraries/XMCLib/src/xmc_sdmmc.c **** XMC_SDMMC_STATUS_t XMC_SDMMC_SendCommand(XMC_SDMMC_t *const sdmmc, const XMC_SDMMC_COMMAND_t *cmd, 
 300:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 741              	 .loc 2 300 0
 742              	 .cfi_startproc
 743              	 
 744              	 
 745              	 
 746 0000 80B4     	 push {r7}
 747              	.LCFI68:
 748              	 .cfi_def_cfa_offset 4
 749              	 .cfi_offset 7,-4
 750 0002 85B0     	 sub sp,sp,#20
 751              	.LCFI69:
 752              	 .cfi_def_cfa_offset 24
 753 0004 00AF     	 add r7,sp,#0
 754              	.LCFI70:
 755              	 .cfi_def_cfa_register 7
 756 0006 F860     	 str r0,[r7,#12]
 757 0008 B960     	 str r1,[r7,#8]
 758 000a 7A60     	 str r2,[r7,#4]
 301:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SendCommand: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sdmmc));
 302:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 303:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->ARGUMENT1 = arg;
 759              	 .loc 2 303 0
 760 000c FB68     	 ldr r3,[r7,#12]
 761 000e 7A68     	 ldr r2,[r7,#4]
 762 0010 9A60     	 str r2,[r3,#8]
 304:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->COMMAND = (uint16_t)(*(uint16_t *)cmd);
 763              	 .loc 2 304 0
 764 0012 BB68     	 ldr r3,[r7,#8]
 765 0014 1A88     	 ldrh r2,[r3]
 766 0016 FB68     	 ldr r3,[r7,#12]
 767 0018 DA81     	 strh r2,[r3,#14]
 305:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 306:../Libraries/XMCLib/src/xmc_sdmmc.c ****   return XMC_SDMMC_STATUS_SUCCESS;
 768              	 .loc 2 306 0
 769 001a 0023     	 movs r3,#0
 307:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 770              	 .loc 2 307 0
 771 001c 1846     	 mov r0,r3
 772 001e 1437     	 adds r7,r7,#20
 773              	.LCFI71:
 774              	 .cfi_def_cfa_offset 4
 775 0020 BD46     	 mov sp,r7
 776              	.LCFI72:
 777              	 .cfi_def_cfa_register 13
 778              	 
 779 0022 5DF8047B 	 ldr r7,[sp],#4
 780              	.LCFI73:
 781              	 .cfi_restore 7
 782              	 .cfi_def_cfa_offset 0
 783 0026 7047     	 bx lr
 784              	 .cfi_endproc
 785              	.LFE209:
 787              	 .section .text.XMC_SDMMC_SetDataTransferMode,"ax",%progbits
 788              	 .align 2
 789              	 .global XMC_SDMMC_SetDataTransferMode
 790              	 .thumb
 791              	 .thumb_func
 793              	XMC_SDMMC_SetDataTransferMode:
 794              	.LFB210:
 308:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 309:../Libraries/XMCLib/src/xmc_sdmmc.c **** /* Set data transfer mode */
 310:../Libraries/XMCLib/src/xmc_sdmmc.c **** void XMC_SDMMC_SetDataTransferMode(XMC_SDMMC_t *const sdmmc, XMC_SDMMC_TRANSFER_MODE_t *const respo
 311:../Libraries/XMCLib/src/xmc_sdmmc.c **** {
 795              	 .loc 2 311 0
 796              	 .cfi_startproc
 797              	 
 798              	 
 799 0000 80B5     	 push {r7,lr}
 800              	.LCFI74:
 801              	 .cfi_def_cfa_offset 8
 802              	 .cfi_offset 7,-8
 803              	 .cfi_offset 14,-4
 804 0002 82B0     	 sub sp,sp,#8
 805              	.LCFI75:
 806              	 .cfi_def_cfa_offset 16
 807 0004 00AF     	 add r7,sp,#0
 808              	.LCFI76:
 809              	 .cfi_def_cfa_register 7
 810 0006 7860     	 str r0,[r7,#4]
 811 0008 3960     	 str r1,[r7]
 312:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid module pointer", XMC_SDMMC_CHECK_MODULE_PTR(sd
 313:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_ASSERT("XMC_SDMMC_SetDataTransferMode: Invalid transfer type", XMC_SDMMC_CHECK_TRANSFER_MODE(
 314:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 315:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Data line time-out */
 316:../Libraries/XMCLib/src/xmc_sdmmc.c ****   XMC_SDMMC_SetDataLineTimeout(sdmmc, XMC_SDMMC_DAT_TIMEOUT_COUNTER_2_POW_27);
 812              	 .loc 2 316 0
 813 000a 7868     	 ldr r0,[r7,#4]
 814 000c 0E21     	 movs r1,#14
 815 000e FFF7FEFF 	 bl XMC_SDMMC_SetDataLineTimeout
 317:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 318:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Block size */
 319:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_SIZE = (uint16_t)(response->block_size);
 816              	 .loc 2 319 0
 817 0012 3B68     	 ldr r3,[r7]
 818 0014 1B68     	 ldr r3,[r3]
 819 0016 9AB2     	 uxth r2,r3
 820 0018 7B68     	 ldr r3,[r7,#4]
 821 001a 9A80     	 strh r2,[r3,#4]
 320:../Libraries/XMCLib/src/xmc_sdmmc.c ****   
 321:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Number of blocks */
 322:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->BLOCK_COUNT = (uint16_t)(response->num_blocks);
 822              	 .loc 2 322 0
 823 001c 3B68     	 ldr r3,[r7]
 824 001e 5B68     	 ldr r3,[r3,#4]
 825 0020 9AB2     	 uxth r2,r3
 826 0022 7B68     	 ldr r3,[r7,#4]
 827 0024 DA80     	 strh r2,[r3,#6]
 323:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 324:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Type of data transfer: single, infinite, multiple or stop multiple */
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_MULTI_BL
 828              	 .loc 2 325 0
 829 0026 7B68     	 ldr r3,[r7,#4]
 830 0028 9B89     	 ldrh r3,[r3,#12]
 831 002a 9BB2     	 uxth r3,r3
 832 002c 9BB2     	 uxth r3,r3
 833 002e 23F02003 	 bic r3,r3,#32
 834 0032 9AB2     	 uxth r2,r3
 326:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 835              	 .loc 2 326 0
 836 0034 3B68     	 ldr r3,[r7]
 837 0036 1B7A     	 ldrb r3,[r3,#8]
 325:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->type));
 838              	 .loc 2 325 0
 839 0038 9BB2     	 uxth r3,r3
 840 003a 1343     	 orrs r3,r3,r2
 841 003c 9BB2     	 uxth r3,r3
 842 003e 9AB2     	 uxth r2,r3
 843 0040 7B68     	 ldr r3,[r7,#4]
 844 0042 9A81     	 strh r2,[r3,#12]
 327:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 328:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /*
 329:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * Clear block count enable bit; that's only valid for
 330:../Libraries/XMCLib/src/xmc_sdmmc.c ****    * a multi-block transfer
 331:../Libraries/XMCLib/src/xmc_sdmmc.c ****    */
 332:../Libraries/XMCLib/src/xmc_sdmmc.c ****   if (response->type == XMC_SDMMC_TRANSFER_MODE_TYPE_SINGLE)
 845              	 .loc 2 332 0
 846 0044 3B68     	 ldr r3,[r7]
 847 0046 1B7A     	 ldrb r3,[r3,#8]
 848 0048 002B     	 cmp r3,#0
 849 004a 07D1     	 bne .L25
 333:../Libraries/XMCLib/src/xmc_sdmmc.c ****   {
 334:../Libraries/XMCLib/src/xmc_sdmmc.c ****     sdmmc->TRANSFER_MODE &= (uint16_t)~SDMMC_TRANSFER_MODE_BLOCK_COUNT_EN_Msk;
 850              	 .loc 2 334 0
 851 004c 7B68     	 ldr r3,[r7,#4]
 852 004e 9B89     	 ldrh r3,[r3,#12]
 853 0050 9BB2     	 uxth r3,r3
 854 0052 23F00203 	 bic r3,r3,#2
 855 0056 9AB2     	 uxth r2,r3
 856 0058 7B68     	 ldr r3,[r7,#4]
 857 005a 9A81     	 strh r2,[r3,#12]
 858              	.L25:
 335:../Libraries/XMCLib/src/xmc_sdmmc.c ****   }
 336:../Libraries/XMCLib/src/xmc_sdmmc.c **** 
 337:../Libraries/XMCLib/src/xmc_sdmmc.c ****   /* Auto CMD configuration */
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****   sdmmc->TRANSFER_MODE = (uint16_t)((sdmmc->TRANSFER_MODE & (uint16_t)~SDMMC_TRANSFER_MODE_ACMD_EN_
 859              	 .loc 2 338 0
 860 005c 7B68     	 ldr r3,[r7,#4]
 861 005e 9B89     	 ldrh r3,[r3,#12]
 862 0060 9BB2     	 uxth r3,r3
 863 0062 9BB2     	 uxth r3,r3
 864 0064 23F00C03 	 bic r3,r3,#12
 865 0068 9AB2     	 uxth r2,r3
 339:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 866              	 .loc 2 339 0
 867 006a 3B68     	 ldr r3,[r7]
 868 006c 5B7A     	 ldrb r3,[r3,#9]
 869 006e 9B00     	 lsls r3,r3,#2
 338:../Libraries/XMCLib/src/xmc_sdmmc.c ****                                     ((uint16_t)response->auto_cmd << SDMMC_TRANSFER_MODE_ACMD_EN_Po
 870              	 .loc 2 338 0
 871 0070 9BB2     	 uxth r3,r3
 872 0072 1343     	 orrs r3,r3,r2
 873 0074 9BB2     	 uxth r3,r3
 874 0076 9AB2     	 uxth r2,r3
 875 0078 7B68     	 ldr r3,[r7,#4]
 876 007a 9A81     	 strh r2,[r3,#12]
 340:../Libraries/XMCLib/src/xmc_sdmmc.c **** }
 877              	 .loc 2 340 0
 878 007c 0837     	 adds r7,r7,#8
 879              	.LCFI77:
 880              	 .cfi_def_cfa_offset 8
 881 007e BD46     	 mov sp,r7
 882              	.LCFI78:
 883              	 .cfi_def_cfa_register 13
 884              	 
 885 0080 80BD     	 pop {r7,pc}
 886              	 .cfi_endproc
 887              	.LFE210:
 889 0082 00BF     	 .text
 890              	.Letext0:
 891              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 892              	 .file 4 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 893              	 .file 5 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Include/core_cm4.h"
 894              	 .file 6 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
 895              	 .file 7 "D:\\Bachelorarbeit\\Dave\\Basisstation\\Basisstation\\Libraries\\XMCLib\\inc/xmc4_scu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_sdmmc.c
    {standard input}:20     .text.XMC_SDMMC_SetDataLineTimeout:00000000 $t
    {standard input}:24     .text.XMC_SDMMC_SetDataLineTimeout:00000000 XMC_SDMMC_SetDataLineTimeout
    {standard input}:75     .text.XMC_SDMMC_GetPowerStatus:00000000 $t
    {standard input}:80     .text.XMC_SDMMC_GetPowerStatus:00000000 XMC_SDMMC_GetPowerStatus
    {standard input}:127    .text.XMC_SDMMC_Enable:00000000 $t
    {standard input}:132    .text.XMC_SDMMC_Enable:00000000 XMC_SDMMC_Enable
    {standard input}:165    .text.XMC_SDMMC_Enable:00000014 $d
    {standard input}:170    .text.XMC_SDMMC_Disable:00000000 $t
    {standard input}:175    .text.XMC_SDMMC_Disable:00000000 XMC_SDMMC_Disable
    {standard input}:208    .text.XMC_SDMMC_Disable:00000014 $d
    {standard input}:213    .text.XMC_SDMMC_Init:00000000 $t
    {standard input}:218    .text.XMC_SDMMC_Init:00000000 XMC_SDMMC_Init
    {standard input}:287    .text.XMC_SDMMC_EnableEventStatus:00000000 $t
    {standard input}:292    .text.XMC_SDMMC_EnableEventStatus:00000000 XMC_SDMMC_EnableEventStatus
    {standard input}:349    .text.XMC_SDMMC_DisableEventStatus:00000000 $t
    {standard input}:354    .text.XMC_SDMMC_DisableEventStatus:00000000 XMC_SDMMC_DisableEventStatus
    {standard input}:415    .text.XMC_SDMMC_EnableEvent:00000000 $t
    {standard input}:420    .text.XMC_SDMMC_EnableEvent:00000000 XMC_SDMMC_EnableEvent
    {standard input}:477    .text.XMC_SDMMC_DisableEvent:00000000 $t
    {standard input}:482    .text.XMC_SDMMC_DisableEvent:00000000 XMC_SDMMC_DisableEvent
    {standard input}:543    .text.XMC_SDMMC_ClearEvent:00000000 $t
    {standard input}:548    .text.XMC_SDMMC_ClearEvent:00000000 XMC_SDMMC_ClearEvent
    {standard input}:595    .text.XMC_SDMMC_GetEvent:00000000 $t
    {standard input}:600    .text.XMC_SDMMC_GetEvent:00000000 XMC_SDMMC_GetEvent
    {standard input}:673    .text.XMC_SDMMC_GetR2Response:00000000 $t
    {standard input}:678    .text.XMC_SDMMC_GetR2Response:00000000 XMC_SDMMC_GetR2Response
    {standard input}:734    .text.XMC_SDMMC_SendCommand:00000000 $t
    {standard input}:739    .text.XMC_SDMMC_SendCommand:00000000 XMC_SDMMC_SendCommand
    {standard input}:788    .text.XMC_SDMMC_SetDataTransferMode:00000000 $t
    {standard input}:793    .text.XMC_SDMMC_SetDataTransferMode:00000000 XMC_SDMMC_SetDataTransferMode
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset

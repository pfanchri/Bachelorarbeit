package Model.APPS.CLOCK_XMC4.v4_0_6;

/*************** Revision History **********************************************
 Version    Date          Description //Retain this format
 4.0.0     16-Feb-2015   Initial version for DAVEv4      
 4.0.1     20-Feb-2015   Maximum value of PLL frequency (fPLL) has been changed into 120MHz.
 4.0.2     30-Apr-2015   Device specific clock diagrams are added in 'Clock control settings' page of GUI.             
 4.0.4     19-Jun-2015   Version check added for XMCLib dependency.             
 4.0.6     09-Jul-2015   Help doc updated.             
 *******************************************************************************/

/* Import statements */
import ifx.davex.app.manifest.*
import java.util.regex.Matcher
import java.util.regex.Pattern

class  CLOCK_XMC4 extends CLOCK_XMC4_GUI {

	/* Note  : Following App properties are mandatory and important */
	/* Begin : App property section */

	/**
	 * App version
	 * Format: a string with three digit separated by a dot.
	 */
	def version            = '4.0.6'

	/**
	 * App categories declaration. 
	 * It is list of strings. Sub-categories are separated by slash.
	 * No limits on number of categories and sub-categories depth.
	 */
	def categoriesDescription = ['System']

	/** 
	 * Minimum DAVE version required for this app.
	 * 
	 * It is string with three digit separated by a dot.
	 */
	def minDaveVersion           = '4.0.0'

	/** 
	 * Keywords used by search feature in Apps selection view
	 * 
	 * It is a list of string.
	 */
	def keywords      = ["System Clock", "PLL", "CLOCK", "Clock", "ALL"]
	/** 
	 * softwareIDs is used to declare which devices are compatible with this app.
	 * It is a map with key a string containing a pattern that shall match the SW id of
	 * the device and as value the minimal version of the app.
	 * 
	 * 
	 */

	def softwareIDs       = [
		"XMC4.5.*.*.*":"1.0.0",
		"XMC4.4.*.*.*":"1.0.0",
		"XMC4.2.*.*.*":"1.0.0",
		"XMC4.1.*.*.*":"1.0.0",
		]

	/**
	 * Singleton property:
	 * When it is true the app can be instantiated only once. 
	 */
	def singleton     = true


	/**
	 * initProvider property
	 * It shall be true to add a call to <AppName>_Init() 
	 */
	def initProvider  = false

	/**
	 * Deprecated app
	 * Set it to true to indicate that the app shall be not used for new projects.
	 */
	def deprecated    = false

	/**
	 * Sharable property.
	 * It shall be true to allows multiple apps to require the same instance of this app.
	 */
	def sharable      = true
	// This APP consumes direct HW pin resource/
	def ioApp         = true

	/**
	 *  App function description.
	 */
	def description = "APP to configure System and Peripheral Clocks."

	// End   : App property section

	// Begin : User app property section
	/* Object to point virtual resource groups/ functional blocks */
	MVirtualResourceGroup hwres_pll
	MVirtualResourceGroup hwres_sys
	MVirtualResourceGroup hwres_cpu
	MVirtualResourceGroup hwres_perbridge
	MVirtualResourceGroup hwres_ebu
	MVirtualResourceGroup hwres_ccu
	MVirtualResourceGroup hwres_wdt
	MVirtualResourceGroup hwres_usb
	MVirtualResourceGroup hwres_mmc
	MVirtualResourceGroup hwres_extclk
	MVirtualResourceGroup hwres_hibernate
	MVirtualResourceGroup hwres_rtcclksel
	MVirtualResourceGroup hwres_extclkpin
	/* Object to point virtual signals */
	MVirtualSignal vs_fpb
	MVirtualSignal vs_fccu
	MVirtualSignal vs_extclk
	MVirtualSignal vs_extclkpin
	/* Variable to hold PLL input clock frequency */
	GFloat gfloat_pll_input_freq = GFloat(widgetName:"gfloat_pll_input_freq")
	/* Variable to hold NDIV value of Main PLL */
	GInteger gint_mainpllndiv = GInteger(widgetName:"gint_mainpllndiv")
	/* Variable to hold PDIV value of Main PLL */
	GInteger gint_mainpllpdiv = GInteger(widgetName:"gint_mainpllpdiv")
	/* Variable to hold K2DIV value of Main PLL */
	GInteger gint_mainpllk2div = GInteger(widgetName:"gint_mainpllk2div")
	/* Variable to hold K1DIV value of Main PLL */
	GInteger gint_mainpllk1div = GInteger(widgetName:"gint_mainpllk1div")
	/* Variable to hold NDIV value of USB PLL */
	GInteger gint_usbpll_ndiv = GInteger(widgetName:"gint_usbpll_ndiv")
	/* Variable to hold PDIV value of USB PLL */
	GInteger gint_usbpll_pdiv = GInteger(widgetName:"gint_usbpll_pdiv")
	/* Variable to hold VCO frequency */
	GFloat gfloat_vco = GFloat(widgetName:"VCO Frequency")
	// End   : User app property section

	// App Constructor
	public CLOCK_XMC4(DaveEnv daveEnv) {
		// Target based variables for resource consumption, UI dependency etc.
		String family = daveEnv.project.selectedDevice.deviceId.family 	/* ex:XMC4 or XMC1 */
		String series = (daveEnv.project.selectedDevice.deviceId.family + daveEnv.project.selectedDevice.deviceId.series) /* ex:XMC45, 44.. */
		String device = daveEnv.project.selectedDevice.deviceId.device 	/* 00, 02, 04, 06 */
		String device_short_name = series + device /* XMC4500, XMC4502, XMC4400 ... */
		String device_name = daveEnv.project.selectedDevice.deviceId.deviceName 	/* XMC4500-F144x1024-AB... */
		String step = daveEnv.project.selectedDevice.deviceId.step 		/* AA, AB, AC.... */
		String device_package = daveEnv.project.selectedDevice.deviceId.icPackage /* F144, E144.. */
		String sofware_id  = daveEnv.project.selectedDevice.deviceId.softwareId   /* XMC4.5.00.F144.AB */
		/* For debug purpose */
//		String family = "XMC4"
//		String series = "XMC45"
//		String device = "02"
//		String device_short_name = "XMC4500"
//		String device_name = "XMC4500-F144x1024-AB"
//		String step = "AA"
//		String device_package = "F144"
//		String sofware_id  = "XMC4.5.00.F144.AB"

		/* Minimum value for vco frequency */
		float vco_min = 260
		/* Maximum value for vco frequency */
		float vco_max = 520
		/* Fixed PDIV value for USB PLL */
		int usb_pdiv = 2
		/* Fixed USB PLL target value */
		int usbpll_target = 192
		/* Backup clock const */
		float backup_clk = 24
		/* Standby clock const */
		float standby_clk = 0.032768
	
		/* Variables to hold availability information of peripherals */
		boolean is_ccu_available = true
		boolean is_usb_available = true
		boolean is_ebu_available = true
		boolean is_sdmmc_available = true
		boolean is_ethernet_available = true
		boolean is_can_available = true
		boolean is_extclkout_available = true

		/*----------------------------------------------------------------------------------------------------------------------
		 Device specific dependency
		 ----------------------------------------------------------------------------------------------------------------------*/
		if(series == "XMC45"){
			if(Integer.parseInt(device) >= 2) /* if XMC4502, 04.. */
			{
				is_ethernet_available = false
			}
			if(Integer.parseInt(device) >= 4) /* if XMC4504.. */
			{
				is_can_available = false
				is_usb_available = false
			}
		}
		else if(series == "XMC44"){
			is_ebu_available = false
			is_sdmmc_available = false
			if(Integer.parseInt(device) >= 2) /* if XMC4402, 04.. */
			{
				is_ethernet_available = false
			}
			if(Integer.parseInt(device) >= 4) /* if XMC4404.. */
			{
				is_can_available = false
				is_usb_available = false
			}
		}
		else if((series == "XMC42") || (series == "XMC41")){
			is_ebu_available = false
			is_sdmmc_available = false
			if(Integer.parseInt(device) >= 2) /* if XMC4202, 04.. or XMC4102, 04.. */
			{
				is_ethernet_available = false
			}
			if(Integer.parseInt(device) >= 4) /* if XMC4204.. or XMC4104.. */
			{
				is_can_available = false
				is_usb_available = false
			}
		}
		
		if(device_short_name == "XMC4500")
		{
			gimage_1.path = "doc/ClockTree.png"
		}
		else if(device_short_name == "XMC4502")
		{
			gimage_1.path = "doc/ClockTree_NO_ETH.png"
			gfloat_dia_ethclkfreq.visible = false
			glabel_dia_ethclkfreq.visible = false
		}
		else if(device_short_name == "XMC4504")
		{
			gimage_1.path = "doc/ClockTree_NO_USB_ETH.png"
			gfloat_dia_usbclkfreq.visible = false
			glabel_dia_usbclkfreq.visible = false
			gfloat_dia_ethclkfreq.visible = false
			glabel_dia_ethclkfreq.visible = false
			ggroup_usbfreq.text = "SDMMC Clock (fSDMMC)"
		}
		else if(device_short_name == "XMC4400")
		{
			gimage_1.path = "doc/ClockTree_NO_SDMMC_EBU.png"
			gfloat_dia_sdmmcclkfreq.visible = false
			glabel_dia_sdmmcclkfreq.visible = false
			gfloat_dia_ebuclkfreq.visible = false
			glabel_dia_ebuclkfreq.visible = false
			ggroup_usbfreq.text = "USB Clock (fUSB)"
		}
		else if((device_short_name == "XMC4402") || (device_short_name == "XMC4200") || (device_short_name == "XMC4100"))
		{
			gimage_1.path = "doc/ClockTree_NO_SDMMC_ETH_EBU.png"
			gfloat_dia_sdmmcclkfreq.visible = false
			glabel_dia_sdmmcclkfreq.visible = false
			gfloat_dia_ethclkfreq.visible = false
			glabel_dia_ethclkfreq.visible = false
			gfloat_dia_ebuclkfreq.visible = false
			glabel_dia_ebuclkfreq.visible = false
			ggroup_usbfreq.text = "USB Clock (fUSB)"
		}
		else if((device_short_name == "XMC4104") || (device_short_name == "XMC4108"))
		{
			gimage_1.path = "doc/ClockTree_NO_USBPLL_USB_SDMMC_ETH_EBU.png"
			gfloat_dia_ohpclkfreq.visible = false
			glabel_dia_ohpclkfreq.visible = false
			gfloat_dia_usbpllclkfreq.visible = false
			glabel_dia_usbpllclkfreq.visible = false
			ggroup_usbfreq.visible = false
			gfloat_dia_usbclkfreq.visible = false
			glabel_dia_usbclkfreq.visible = false
			gfloat_dia_sdmmcclkfreq.visible = false
			glabel_dia_sdmmcclkfreq.visible = false
			gfloat_dia_ethclkfreq.visible = false
			glabel_dia_ethclkfreq.visible = false
			gfloat_dia_ebuclkfreq.visible = false
			glabel_dia_ebuclkfreq.visible = false
		}
		else {gimage_1.path = "doc/ClockTree.png"}
		/*----------------------------------------------------------------------------------------------------------------------
		 Device specific combo options
		 ----------------------------------------------------------------------------------------------------------------------*/
		if((series == "XMC45") || (series == "XMC44"))
		{
			gcombo_extclkoutsrc.options = ["System Clock", "USB PLL Clock", "Main PLL Clock"]
			gfloat_actsysfreq.maxValue = 120.0
			gfloat_mainplldesfreq.value = 120.0
		}
		else
		{
			gcombo_extclkoutsrc.options = ["System Clock", "USB PLL Clock", "Main PLL Clock", "Standby Clock"]
			gfloat_actsysfreq.maxValue = 80.0
			gfloat_mainplldesfreq.value = 80.0
		}

		/*----------------------------------------------------------------------------------------------------------------------
		 GUI Visibility and  Enable control
		 ----------------------------------------------------------------------------------------------------------------------*/
		if(is_extclkout_available == false)
		{
			ggroup_extclkoutfreq.visible = false
		}
		else{
			glabel_extclkoutsrc.enabled = MF({gcheck_extclkout.value == true}, Boolean)
			gcombo_extclkoutsrc.enabled = MF({gcheck_extclkout.value == true}, Boolean)
			glabel_extclkplldiv.enabled = MF({(gcheck_extclkout.value == true) && ((gcombo_extclkoutsrc.value == "USB PLL Clock") || (gcombo_extclkoutsrc.value == "Main PLL Clock"))},Boolean)
			gint_extclkplldiv.enabled = MF({(gcheck_extclkout.value == true) && ((gcombo_extclkoutsrc.value == "USB PLL Clock") || (gcombo_extclkoutsrc.value == "Main PLL Clock"))},Boolean)
			glabel_extclkfreqact.enabled = MF({gcheck_extclkout.value == true}, Boolean)
		}

//		ggroup_usbfreq.visible = MF({(is_usb_available == true)}, Boolean)
		ggroup_ebufreq.visible = MF({(is_ebu_available == true)}, Boolean)
		gstring_note.visible = MF({false}, Boolean)

		/*----------------------------------------------------------------------------------------------------------------------
		 GUI Actions
		 ----------------------------------------------------------------------------------------------------------------------*/
		gfloat_mainplldesfreq.minValue = MF({
			if(gcombo_mainpllset.value == "Normal Mode")
			{
				float a = 3.0 /* fPLL = fvco/K2, where fvco range 260MHz to 520MHz, K2 Div is 7bit value  */
				(a)
			}
			else
			{
				float a = (gfloat_pll_input_freq.value / 128) /* fOSC/K1 */
				(a)
			}
		}, Float)

		gfloat_mainplldesfreq.maxValue = MF({
			if(gcombo_mainpllset.value == "Normal Mode")
			{
				float a = 120.0 /* fPLL = fvco/K2, where fvco range 260MHz to 520MHz, K2 Div is 7bit value  */
				(a)
			}
			else
			{
				float a = (gfloat_pll_input_freq.value) /* fOSC/K1 */
				(a)
			}
		}, Float)

		gfloat_mainpllactfreq.minValue = MF({gfloat_mainplldesfreq.minValue}, Float)
		gfloat_mainpllactfreq.maxValue = MF({gfloat_mainplldesfreq.maxValue}, Float)

		gfloat_actsysfreq.value = MF({
			if(gcombo_sysclksrc.value == "Internal Fast Oscillator")
			{
				float a = (backup_clk / gint_sysclkdiv.value)
				(a)
			}
			else if(gcombo_sysclksrc.value == "Main PLL Clock")
			{
				float b = (gfloat_mainpllactfreq.value / gint_sysclkdiv.value)
				(b)
			}
			else
			{
				float c = 120.0
				(c)
			}
		}, Float)

		gfloat_pll_input_freq.value = MF({
			if(gcombo_pllclksrc.value == "Internal Fast Oscillator"){
				(backup_clk)
			}
			else{
				(gfloat_extclkoscfreq.value)
			}
		}, Float)

		/* Calculation to find the Main PLL PDIV */
		gint_mainpllpdiv.value = MF({
			if(gcombo_mainpllset.value == "Normal Mode"){
				float a
				/* PDIV = (fOSC * NDIV) / (fPLL * K2DIV) */
				a = (gfloat_pll_input_freq.value * gint_mainpllndiv.value) / (gfloat_mainplldesfreq.value * gint_mainpllk2div.value)
				return Math.round(a)
			}
			else{
				1
			}
		},Integer)

		/* Calculation to find the Main PLL K2 PDIV */
		gint_mainpllk2div.value = MF ({
			if(gcombo_mainpllset.value == "Normal Mode"){
				float p_div = 2.0
				float k2_div = 2.0
				float fvco = 480.0
				/* NDIV = (fPLL * PDIV * K2DIV) / fOSC */
				float n_div =  (gfloat_mainplldesfreq.value * p_div * k2_div) / gfloat_pll_input_freq.value
				/* if temp_ndiv > desired_ndiv */
				if(gint_mainpllndiv.value > n_div)
				{
					/* K2DIV = K2DIV * ratio (temp_ndiv/desired_ndiv) */
					k2_div = k2_div * ((gint_mainpllndiv.value) / n_div)

					/* if K2DIV > 7Bit value */
					if(k2_div > 128)
					{
						k2_div = k2_div - 1
					}
				}
				else
				{
					k2_div
				}

				return Math.round(k2_div)
			}
			else{
				4
			}
		},Integer)

		/* Calculation to find the Main PLL N PDIV */
		gint_mainpllndiv.value = MF ({
			if(gcombo_mainpllset.value == "Normal Mode"){
				float p_div = 2.0
				float k2_div = 2.0
				float fvco = 480.0
				/* NDIV = (fPLL * PDIV * K2DIV) / fOSC */
				float n_div_init =  (gfloat_mainplldesfreq.value * p_div * k2_div) / gfloat_pll_input_freq.value
				float n_div = n_div_init
				float err = 0.0
				float actpllfreq = 0.0
				/* fvco = (NDIV * fOSC)/PDIV */
				fvco = (Math.round(n_div) * gfloat_pll_input_freq.value) / p_div

				/* if vco < vco_min then increase the NDIV */
				while(fvco < vco_min)
				{
					n_div = 2 * n_div
					fvco = (Math.round(n_div) * gfloat_pll_input_freq.value) / p_div
				}

				/* if vco > vco_max then decrease the NDIV */
				while(fvco > vco_max)
				{
					n_div = n_div - 1
					fvco = (Math.round(n_div) * gfloat_pll_input_freq.value) / p_div
				}

				k2_div = k2_div * (Math.round(n_div) / n_div_init)
				k2_div = Math.round(k2_div)
				/* fPLL = (NDIV * fOSC)/(PDIV * K2DIV) */
				actpllfreq = ((Math.round(n_div) * gfloat_pll_input_freq.value)/ (p_div * k2_div))
				/* Error = Desired PLL - Actual PLL */
				err = gfloat_mainplldesfreq.value - actpllfreq
				/* if Error > 100kHz */
				if(Math.abs(err) > 0.1)
				{
					/* Increase the PDIV and reverify the error */
					p_div = p_div + 1
					n_div = (gfloat_mainplldesfreq.value * p_div * k2_div) / gfloat_pll_input_freq.value
					actpllfreq = k2_div * ((Math.round(n_div) * gfloat_pll_input_freq.value)/ (gfloat_mainplldesfreq.value * p_div * k2_div))
					err = gfloat_mainplldesfreq.value - actpllfreq
				}

				return Math.round(n_div)
			}
			else{
				40
			}
		},Integer)

		gint_mainpllk1div.value = MF({
			if(gcombo_mainpllset.value == "Prescaler Mode")
			{
				int a = (gfloat_pll_input_freq.value / gfloat_mainplldesfreq.value)
				if(a < 1)
				{
					a = 1
				}
				else if(a > 128)
				{
					a = 128
				}
				else
				{
					a = a
				}
				(a)
			}
			else /* Normal Mode */
			{
				int a = 1
				(a)
			}
		}, Integer)

		gfloat_vco.value = MF({
			/* fvco = (NDIV * fOSC)/PDIV */
			float a = ((gint_mainpllndiv.value * gfloat_pll_input_freq.value) / (gint_mainpllpdiv.value))
			(a)
		}, Float)


		gfloat_mainpllactfreq.value = MF ({
			if(gcombo_pllclksrc.value == "External Crystal High Precision Oscillator"){
				if(gcombo_mainpllset.value == "Normal Mode"){
					/* fPLL = (NDIV * fOSC)/(PDIV * K2DIV) */
					float a = ((gint_mainpllndiv.value * gfloat_pll_input_freq.value) / (gint_mainpllpdiv.value * gint_mainpllk2div.value))
					(a)
				}
				else{
					/* fPLL = fOSC/K1DIV */
					(gfloat_pll_input_freq.value / gint_mainpllk1div.value)
				}
			}
			else{
				/* fPLL = (NDIV * fOSC)/(PDIV * K2DIV) */
				if(gcombo_mainpllset.value == "Normal Mode"){
					float a = ((gint_mainpllndiv.value * gfloat_pll_input_freq.value) / (gint_mainpllpdiv.value * gint_mainpllk2div.value))
					(a)
				}
				else{
					/* fPLL = fOSC/K1DIV */
					(gfloat_pll_input_freq.value / gint_mainpllk1div.value)
				}
			}
		},Float)

		/* CPU Clock derived from System Clock */
		gfloat_cpuclkfreq.value = MF({
			(gfloat_actsysfreq.value/gint_cpuclkdiv.value)
		},Float)

		/* Peripheral Clock derived from CPU Clock */
		gfloat_peribusfreq.value = MF({
			(gfloat_cpuclkfreq.value/gint_peribusdiv.value)
		},Float)
		/* CCU Clock derived from System Clock */
		gfloat_ccufreq.value = MF({
			(gfloat_actsysfreq.value/gint_ccufreqdiv.value)
		},Float)

//		if(is_usb_available == true)
//		{
			/* Calculation to find the USB PLL N DIV */
			gint_usbpll_ndiv.value = MF({
				int a = ((usbpll_target * usb_pdiv * 2) / gfloat_extclkoscfreq.value)
				(a)
			}, Integer)
			/* Calculation to find the actual frequency depending on USB PLL divider parameters */
			gfloat_usbactfreq.value = MF({
				if(gcombo_usbclksrc.value == "USB PLL Clock"){
					((gint_usbpll_ndiv.value * gfloat_extclkoscfreq.value) / (usb_pdiv * 2 * gint_usbdiv.value))
				}
				else{
					(gfloat_actsysfreq.value / gint_usbdiv.value)
				}
			}, Float)
//		}

		if(is_ebu_available == true)
		{
			gfloat_ebufreq.value = MF({gfloat_mainpllactfreq.value / gint_ebufreqdiv.value}, Float)
		}

		gfloat_wdtactfreq.value = MF({
			if(gcombo_wdtclksrc.value == "Internal Fast Oscillator"){
				float a = (backup_clk / ginteger_wdtclkdiv.value)
				(a)
			}
			else if(gcombo_wdtclksrc.value == "Standby Clock"){
				float a = (standby_clk / ginteger_wdtclkdiv.value)
				(a)
			}
			else if(gcombo_wdtclksrc.value == "Main PLL Clock"){
				float a = (gfloat_mainpllactfreq.value / ginteger_wdtclkdiv.value)
				(a)
			}
			else{
				float a = 32.0
				(a)
			}
		}, Float)

		if(is_extclkout_available == true)
		{
			gfloat_extclkfreqact.value = MF({
				if(gcombo_extclkoutsrc.value == "System Clock"){
					(gfloat_actsysfreq.value)
				}
				else if(gcombo_extclkoutsrc.value == "USB PLL Clock"){
					float a = (((gint_usbpll_ndiv.value * gfloat_extclkoscfreq.value) / (usb_pdiv * 2)) / gint_extclkplldiv.value)
					(a)
				}
				else if(gcombo_extclkoutsrc.value == "Main PLL Clock"){
					float b = (gfloat_mainpllactfreq.value/gint_extclkplldiv.value)
					(b)
				}
				else if(gcombo_extclkoutsrc.value == "Standby Clock"){
					float b = (standby_clk)
					(b)
				}
				else{
					float c = 50.0
					(c)
				}
			}, Float)
		}

		gfloat_dia_cpuclkfreq.value = MF({gfloat_cpuclkfreq.value}, Float);
		gfloat_dia_dmaclkfreq.value = MF({gfloat_cpuclkfreq.value}, Float);
		gfloat_dia_periphclkfreq.value = MF({gfloat_peribusfreq.value}, Float);
		gfloat_dia_ccuclkfreq.value = MF({gfloat_ccufreq.value}, Float);
		gfloat_dia_usbclkfreq.value = MF({gfloat_usbactfreq.value}, Float);
		gfloat_dia_sdmmcclkfreq.value = MF({gfloat_usbactfreq.value}, Float);
		gfloat_dia_ethclkfreq.value = MF({gfloat_actsysfreq.value}, Float);
		gfloat_dia_ebuclkfreq.value = MF({gfloat_ebufreq.value}, Float);
		gfloat_dia_wdtclkfreq.value = MF({gfloat_wdtactfreq.value}, Float);
		gfloat_dia_extclkoutfreq.value = MF({gfloat_extclkfreqact.value}, Float);
		gfloat_dia_usbpllclkfreq.value = MF({gfloat_usbactfreq.value}, Float);
		gfloat_dia_pllclkfreq.value = MF({gfloat_mainpllactfreq.value}, Float);
		gfloat_dia_oficlkfreq.value = MF({
			float a = 24.0
			(a)
		}, Float);
		gfloat_dia_ohpclkfreq.value = MF({gfloat_extclkoscfreq.value}, Float);
		gfloat_dia_oscclkfreq.value = MF({
			if(gcombo_pllclksrc.value == "External Crystal High Precision Oscillator")
			{
				gfloat_dia_ohpclkfreq.value
			}
			else
			{
				gfloat_dia_oficlkfreq.value
			}
		}, Float);

		ggroup_extclk.enabled = MF({
			if((gcombo_pllclksrc.value == "External Crystal High Precision Oscillator") || (gcombo_usbclksrc.value == "USB PLL Clock"))
			{
				true
			}
			else
			{
				false
			}
		}, Boolean)

		gfloat_extclkoscfreq.minValue = MF({
			if(gcombo_extclkmode.value == "External Crystal Mode")
			{
				float a = 8.0
				(a)
			}
			else
			{
				float a = 4.0
				(a)
			}
		}, Float)
		gfloat_extclkoscfreq.maxValue = MF({
			if(gcombo_extclkmode.value == "External Crystal Mode")
			{
				float a = 25.0
				(a)
			}
			else
			{
				float a = 40.0
				(a)
			}
		}, Float)

		gmessage_extclkoutfreq.visible = MF({(gcheck_extclkout.value == true) && (gfloat_extclkfreqact.value > 80.0)}, Boolean)

		gmessage_extclkoutfreq.text = MF({
			float a = 80.0
			String msg
			if(gfloat_extclkfreqact.value > a)
			{
				msg = "The output frequency at the pin is not supported (max. 80MHz)."
			}
			else
			{
				msg = ""
			}
			(msg)
		}, String)

		/*--------------------------------------------------------------------------------------------------------------
		 Consumed Resource Groups
		 -------------------------------------------------------------------------------------------------------------*/
		hwres_pll = MVirtualResourceGroup("PLL", ["peripheral", "scu", "0", "clkctrl", "0", "pll"])
		hwres_sys = MVirtualResourceGroup("SYSTEM", ["peripheral", "scu", "0", "clkctrl", "0", "sys"])
		hwres_cpu = MVirtualResourceGroup("CPU", ["peripheral", "scu", "0", "clkctrl", "0", "cpu"])
		hwres_perbridge = MVirtualResourceGroup("PERIBRIDGE", ["peripheral", "scu", "0", "clkctrl", "0", "perbridge"])
		if(is_ebu_available == true)
		{
			hwres_ebu = MVirtualResourceGroup("EBU", ["peripheral", "scu", "0", "clkctrl", "0", "ebu"])
		}
		if(is_ccu_available == true)
		{
			hwres_ccu = MVirtualResourceGroup("CCU", ["peripheral", "scu", "0", "clkctrl", "0", "ccu"])
		}
		hwres_wdt = MVirtualResourceGroup("WDT", ["peripheral", "scu", "0", "clkctrl", "0", "wdt"])
		if(is_usb_available == true)
		{
			hwres_usb = MVirtualResourceGroup("USB", ["peripheral", "scu", "0", "clkctrl", "0", "usb"])
		}
		if(is_sdmmc_available == true)
		{
			hwres_mmc = MVirtualResourceGroup("SDMMC", ["peripheral", "scu", "0", "clkctrl", "0", "sdmmc"])
		}
		hwres_extclk = MVirtualResourceGroup("EXTCLK", ["peripheral", "scu", "0", "clkctrl", "0", "extclk"], MF({(is_extclkout_available==true) && (gcheck_extclkout.value == true)}, Boolean))
		hwres_hibernate = MVirtualResourceGroup("HIBERNATE", ["peripheral", "scu", "0", "pwrctrl", "0", "hibernate"])
		hwres_rtcclksel = MVirtualResourceGroup("RTC", ["peripheral", "scu", "0", "rtcclksel"])
		hwres_extclkpin = MVirtualResourceGroup("External Clock Output Pin", ["port", "p", "*", "pad", "*"], MF({(is_extclkout_available==true) && (gcheck_extclkout.value == true)}, Boolean))

		/*--------------------------------------------------------------------------------------------------------------
		 Virtual Signals Definitions
		 --------------------------------------------------------------------------------------------------------------*/
		vs_fpb =  MVirtualSignal(hwres_perbridge, "clk_perbridge_output", "fpb", true, true) /* required{}, exposeToUser{} */
		vs_fccu =  MVirtualSignal(hwres_ccu, "clk_ccu_output", "fccu", MF({(is_ccu_available == true)}, Boolean), true) /* required{}, exposeToUser{} */
		vs_extclk =  MVirtualSignal(hwres_extclk, "clk_external_output", "extclk", MF({(is_extclkout_available==true) && (gcheck_extclkout.value == true)}, Boolean), false) /* required{}, exposeToUser{} */
		@AddPin(pinDisplayName ='external_clock_pin')
				vs_extclkpin =  MVirtualSignal(hwres_extclkpin, "external_clock_pin", "pad", MF({(is_extclkout_available==true) && (gcheck_extclkout.value == true)}, Boolean), false) /* required{}, exposeToUser{} */

		/*--------------------------------------------------------------------------------------------------------------
		 Virtual Signals Connections
		 --------------------------------------------------------------------------------------------------------------*/
		addConnectionConstraint(vs_extclk, vs_extclkpin)
	}

	/*------------------------------------------------------------------------------------------------------------------
	 Source Files Generation
	 ------------------------------------------------------------------------------------------------------------------*/
	// File Generation
	def generateFiles(){
		copy("clock_xmc4.c", "clock_xmc4.c")
		copy("clock_xmc4.h", "clock_xmc4.h")
		generate("clock_xmc4_confh.tmpl", "clock_xmc4_conf.h")
		generate("clock_xmc4_confc.tmpl", "clock_xmc4_conf.c")
		generate("clock_xmc4_externh.tmpl", "clock_xmc4_extern.h")
	}

	// testing purpose
		public static  main(args){
			CLOCK_XMC4 clock_xmc4 = new CLOCK_XMC4()
			println clock_xmc4.toString()
	//		clock_xmc4.gfloat_mainplldesfreq.value = 250.0
	//		clock_xmc4.gfloat_extclkoscfreq.value = 8
	//		println "Fosc = " + clock_xmc4.gfloat_extclkoscfreq.value
	//		println "N DIV = " + clock_xmc4.gint_mainpllndiv.value
	//		println "P DIV = " + clock_xmc4.gint_mainpllpdiv.value
	//		println "K2 DIV = " + clock_xmc4.gint_mainpllk2div.value
	//		println "VCO Freq = " + clock_xmc4.gfloat_vco.value
	//		println "Act PLL Freq = " + clock_xmc4.gfloat_mainpllactfreq.value
	//
		}
}

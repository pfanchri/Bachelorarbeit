package Model.APPS.USBD.v4_0_6;

/*************** Revision History **********************************************
 Version      Date          Description

  4.0.0       16-Feb-2015   Initial version for DAVEv4.<br>
  4.0.1       18-Mar-2015   Updated to fix the disconnect issue on self powered device.<br>
  4.0.2       26-Mar-2015   Updated the review comments from AEs.<br>
  4.0.4       19-Jun-2015   Removed the individual LLD version check from header file.<br>
  4.0.6       08-Jul-2015   Updated the documentation.<br>
*******************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

class  USBD extends USBD_GUI {
	// Note  : Following APP properties are mandatory and important
	// Begin : APP property section
	
	/**
	 * APP version
	 * Format: a string with three digit separated by a dot.
	 */
	def version            = '4.0.6'
	
	/**
	 * APP categories declaration. 
	 * It is list of strings. Subcategories are separated by slash.
	 * No limits on number of categories and subcategories depth.
	 */
	def categoriesDescription = [		
		"Communication/USB/Device"]

	/** 
	 * Minimum DAVE version required for this APP.
	 * 
	 * It is string with three digit separated by a dot.
	 */
	def minDaveVersion           = '4.0.0'
	
	/** 
	 * Keywords used by search feature in APPs selection view
	 * 
	 * It is a list of string.
	 */
	def keywords      = ["USB Core Driver",
		"usbd",		
		"all",
		"USB protocol layer"]
	
	/** 
	 * softwareIDs is used to declare which devices are compatible with this APP.
	 * It is a map with key a string containing a pattern that shall match the SW id of
	 * the device and as value the minimal version of the APP. 
	 */  
	def softwareIDs       = [	
		"XMC4.5.00.(E144|F144|F100).*":"1.0.0",
		"XMC4.[4-5].02.F100.*":"1.0.0",
		"XMC4.4.00.(F100|F64).*":"1.0.0",
		"XMC4.4.02.F64.*":"1.0.0",
		"XMC4.[1-2].00.(Q48|F64).*":"1.0.0"		
		]		
		


	/**
	 * Singleton property:
	 * When it is true the APP can be instantiated only once. 
	 */
	def singleton     = true
	
	/**
	 * initProvider property
	 * It shall be true to add a call to <APPName>_Init() 
	 */
	def initProvider  = false
	
	/**
	 * Deprecated APP
	 * Set it to true to indicate that the APP shall be not used for new projects.
	 */
	def deprecated    = false
	
	/**
	 * Sharable property.
	 * It shall be true to allows multiple APPs to require the same instance of this APP.
	 */
	def sharable      = false	

	/**
	 *  APP function description.
	 */
	def description = "USB device protocol layer APP.This APP handles the device and endpoint requests from the LLD.\nThe APP uses LUFA library to communicate to XMC USBD LLD."
		
	// End   : APP property section
	
	/* Begin : User variable section*/
	MRequiredApp appres_cpu
	MRequiredApp appres_clock_xmc4	
	MVirtualResourceGroup hwres_usb
		
	// APP Constructor
	public USBD(DaveEnv daveEnv) {
		/*Initialize manifest variables here*/	
		/*Consume usb peripheral*/	
		hwres_usb =  MVirtualResourceGroup("usbd", ["peripheral", "usb", "*","usb"])
		
		/********************************* Required APP ********************************************/
		appres_clock_xmc4 =  MRequiredApp("CLOCK_XMC4","clock_xmc4",RSHARABLE,"4.0.2")
		appres_cpu =  MRequiredApp("CPU_CTRL_XMC4", "CPU_CTRL_XMC4", RSHARABLE,"4.0.2")
		
		ginterruptprio_usb0.priorityValue = 63
		ginterruptprio_usb0.maxPriority = MF({
			Integer temp = appres_cpu.getVal(["gint_maxInterruptPreemptPriority", "value"]) as Integer
			return temp
		}, Integer)
		
		ginterruptprio_usb0.subPriorityValue = 0
		ginterruptprio_usb0.maxSubPriority =  MF({
			Integer temp = appres_cpu.getVal(["gint_maxInterruptSubPriority", "value"]) as Integer
			return temp
		}, Integer)
		
	}
	
	// File Generation
	def generateFiles(){	
		copy("usb", "usb")		
		generate("usbd_confc.tmpl", "usbd_conf.c")
		generate("usbd_confh.tmpl", "usbd_conf.h")
		copy("usbd.c", "usbd.c")
		copy("usbd.h", "usbd.h")
		copy("usbd_extern.h", "usbd_extern.h")		
				
	}	
	
	
}



   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_spi.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_USIC_CH_GetTransmitBufferStatus,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_USIC_CH_GetTransmitBufferStatus:
  25              	.LFB180:
  26              	 .file 1 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg\\Libraries\\XMCLib\\inc/xmc_usic.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @file xmc_usic.h
   3:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @date 2016-04-10
   4:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   *************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-02-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Initial draft<br>
  41:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Documentation improved <br>
  42:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  43:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-05-08:
  44:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added XMC_USIC_CH_SetInputTriggerCombinationMode() and XMC_USIC_CH_SetTransmitBufferStatus
  45:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *      
  46:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-06-20:
  47:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
  49:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-17:
  50:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Bug fixed in XMC_USIC_CH_SetTransmitBufferStatus API. OR operator removed.
  51:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  52:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-24:
  53:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_USIC_CH_DisableDelayCompensation(
  54:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *       XMC_USIC_CH_DisableDelayCompensation()
  55:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  56:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-25:
  57:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for defining if the data shift unit input is derived
  58:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *       from the input data path DXn or from the selected protocol pre-processors: XMC_USIC_CH_Con
  59:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *       and XMC_USIC_CH_ConnectInputDataShiftToDataInput()
  60:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  61:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-27:
  62:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Fixed bug in XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T value.
  63:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for direct TBUF access: XMC_USIC_CH_WriteToTBUF() and XMC_USIC_CH_WriteToTBUFTC
  64:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added APIs for external input for BRG configuration:XMC_USIC_CH_ConfigExternalInputSignalT
  65:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  66:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2015-08-28:
  67:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added API for enabling the transfer trigger unit to set bit TCSR.TE if the trigger signal 
  68:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *       Clear to Send (CTS) signal: XMC_USIC_CH_EnableTBUFDataValidTrigger() and XMC_USIC_CH_Disab
  69:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  70:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2016-03-09:
  71:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Optimization of write only registers
  72:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  73:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2016-04-10:
  74:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *     - Added an API to put the data into FIFO when hardware port control is enabled: XMC_USIC_CH_
  75:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  76:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @endcond
  77:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  78:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
  79:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
  80:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #ifndef XMC_USIC_H
  81:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC_H
  82:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
  83:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * HEADER FILES
  84:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
  85:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
  86:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #include "xmc_common.h"
  87:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
  88:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
  89:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup XMClib XMC Peripheral Library
  90:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
  91:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
  92:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
  93:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
  94:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @addtogroup USIC
  95:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief Universal Serial Interface Channel(USIC) driver for serial communication.
  96:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
  97:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The Universal Serial Interface Channel(USIC) module is a flexible interface module
  98:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * covering several serial communication protocols. A USIC module contains two
  99:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * independent communication channels named USICx_CH0 and USICx_CH1, with x
 100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * being the number of the USIC module. The user can program, during run-time, which protocol will 
 101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * by each communication channel and which pins are used.
 102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The driver provides APIs, configuration structures and enumerations to configure common features
 103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * communication protocols.
 104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
 105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC driver features:
 106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of FIFO for transmit and receive functions.
 107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides a structure type XMC_USIC_CH_t to represent the USIC channel registers in a programm
 108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  friendly format.
 109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of automatic update for frame length, word length, slave select or slave
 110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows transmission of data to FIFO using XMC_USIC_CH_TXFIFO_PutData() and XMC_USIC_CH_TXFIFO
 111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows reading of received data in FIFO using XMC_USIC_CH_RXFIFO_GetData()
 112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Allows configuration of baudrate using XMC_USIC_CH_SetBaudrate()
 113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * -# Provides API to trigger interrupts using XMC_USIC_CH_TriggerServiceRequest()
 114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @{
 115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * MACROS
 119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0 ((XMC_USIC_t *)USIC0_BASE)			/**< USIC0 module base address */
 122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH0 ((XMC_USIC_CH_t *)USIC0_CH0_BASE)	/**< USIC0 channel 0 base address */
 123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC0_CH1 ((XMC_USIC_CH_t *)USIC0_CH1_BASE)	/**< USIC0 channel 1 base address */
 124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC1)
 126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1 ((XMC_USIC_t *)USIC1_BASE)			/**< USIC1 module base address */
 127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH0 ((XMC_USIC_CH_t *)USIC1_CH0_BASE)	/**< USIC1 channel 0 base address */
 128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC1_CH1 ((XMC_USIC_CH_t *)USIC1_CH1_BASE)	/**< USIC1 channel 1 base address */
 129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(USIC2)
 132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2 ((XMC_USIC_t *)USIC2_BASE)			/**< USIC2 module base address */
 133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH0 ((XMC_USIC_CH_t *)USIC2_CH0_BASE)	/**< USIC2 channel 0 base address */
 134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define XMC_USIC2_CH1 ((XMC_USIC_CH_t *)USIC2_CH1_BASE)	/**< USIC2 channel 1 base address */
 135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Msk  USIC_CH_DX0CR_DSEL_Msk   /**< Common mask for DSEL bitfield mask in 
 138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEL_Pos  USIC_CH_DX0CR_DSEL_Pos   /**< Common mask for DSEL bitfield position
 139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Pos USIC_CH_DX0CR_SFSEL_Pos  /**< Common mask for SFSEL bitfield positio
 140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_SFSEL_Msk USIC_CH_DX0CR_SFSEL_Msk  /**< Common mask for SFSEL bitfield mask in
 141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DPOL_Msk  USIC_CH_DX0CR_DPOL_Msk   /**< Common mask for DPOL bitfield mask in 
 142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DFEN_Msk  USIC_CH_DX0CR_DFEN_Msk   /**< Common mask for DFEN bitfield mask in 
 143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_DSEN_Msk  USIC_CH_DX0CR_DSEN_Msk   /**< Common mask for DSEN bitfield mask in 
 144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Pos    USIC_CH_DX0CR_CM_Pos     /**< Common mask for CM bitfield position i
 145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_CM_Msk    USIC_CH_DX0CR_CM_Msk     /**< Common mask for CM bitfield mask in DX
 146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_Msk  USIC_CH_DX0CR_INSW_Msk   /**< Common mask for INSW bitfield mask in 
 147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #define USIC_CH_DXCR_INSW_pos  USIC_CH_DX0CR_INSW_Pos   /**< Common mask for INSW bitfield position
 148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC1
 150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc1_usic_map.h"
 151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if UC_FAMILY == XMC4
 154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  #include "xmc4_usic_map.h"
 155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * ENUMS
 159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel driver status
 163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_STATUS
 165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_OK,    /**< USIC driver status : OK */
 167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_ERROR, /**< USIC driver status : ERROR */
 168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_STATUS_BUSY   /**< USIC driver status : BUSY */
 169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_STATUS_t;
 170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel kernel mode
 173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_KERNEL_MODE
 175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_0  = 0x0UL,  /**< Run mode 0 (transmission and reception possible)*/
 177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_RUN_1  = 0x1UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Run mode 1 (transmissio
 178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_0 = 0x2UL << USIC_CH_KSCFG_NOMCFG_Pos,  /**< Stop mode 0 (no transmi
 179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_KERNEL_MODE_STOP_1 = 0x3UL << USIC_CH_KSCFG_NOMCFG_Pos   /**< Stop mode 1 (both trans
 180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_KERNEL_MODE_t;
 181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel operating mode
 184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_OPERATING_MODE
 186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_IDLE = 0x0UL, /**< USIC channel idle */
 188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_SPI  = 0x1UL << USIC_CH_CCR_MODE_Pos, /**< SPI mode */
 189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_UART = 0x2UL << USIC_CH_CCR_MODE_Pos, /**< UART mode */
 190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2S  = 0x3UL << USIC_CH_CCR_MODE_Pos, /**< I2S mode */
 191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_OPERATING_MODE_I2C  = 0x4UL << USIC_CH_CCR_MODE_Pos  /**< I2C mode */
 192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_OPERATING_MODE_t;
 193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel inputs
 196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT
 198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX0, /**< DX0 input */
 200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX1, /**< DX1 input */
 201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX2, /**< DX2 input */
 202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX3, /**< DX3 input */
 203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX4, /**< DX4 input */
 204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_DX5  /**< DX5 input */
 205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_t;
 206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input source sampling frequency
 209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_SAMPLING_FREQ
 211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH            = 0x0UL, /**< Use fperiph frequency for input 
 213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = 0x1UL << USIC_CH_DXCR_SFSEL_Pos  /**< Use fF
 214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_SAMPLING_FREQ_t;
 215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel input combination mode
 218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INPUT_COMBINATION_MODE
 220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_TRIGGER_DISABLED = 0x0UL, /**< The trigger activation is disab
 222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_RISING_EDGE      = 0x1UL, /**< A rising edge activates DXnT*/
 223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_FALLING_EDGE     = 0x2UL, /**< A falling edge activates DXnT*/
 224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INPUT_COMBINATION_MODE_BOTH_EDGES       = 0x3UL, /**< Both edges activate DXnT*/
 225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INPUT_COMBINATION_MODE_t;
 226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel data transmission start modes.
 229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Data shifted out of the transmit pin depends on the value configured for the
 230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * TDEN bitfield of the TCSR register. Following enum values are used for configuring
 231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * the TCSR->TDEN bitfield.
 232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_START_TRANSMISION_MODE
 234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_DISABLED      = 0x0U, /**< Passive data level is sent out on transm
 236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV        = 0x1UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_0 = 0x2UL << USIC_CH_TCSR_TDEN_Pos, /**< Transmission o
 238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1 = 0x3UL << USIC_CH_TCSR_TDEN_Pos  /**< Transmission o
 239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_START_TRANSMISION_MODE_t;
 240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel interrupt node pointers
 243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_INTERRUPT_NODE_POINTER
 245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = USIC_CH_INPR_TSINP_Pos, /**< Node pointe
 247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = USIC_CH_INPR_TBINP_Pos, /**< Node pointe
 248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE             = USIC_CH_INPR_RINP_Pos,  /**< Node pointe
 249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = USIC_CH_INPR_AINP_Pos,  /**< Node pointe
 250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = USIC_CH_INPR_PINP_Pos   /**< Node pointe
 251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_INTERRUPT_NODE_POINTER_t;
 252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel events
 255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_EVENT
 257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk /**< Baudrate generator event */
 265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_EVENT_t;
 266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel parity mode
 269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_PARITY_MODE
 271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_NONE     = 0x0UL,  /**< Disable parity mode */
 273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_EVEN     = 0x2UL << USIC_CH_CCR_PM_Pos,  /**< Enable even parity mode */
 274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PARITY_MODE_ODD      = 0x3UL << USIC_CH_CCR_PM_Pos   /**< Enable odd parity mode */
 275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PARITY_MODE_t;
 276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data output mode
 279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_DATA_OUTPUT_MODE
 281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL   = 0x0UL,  /**< Data output normal mode */
 283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTED = 0x1UL << USIC_CH_SCTR_DOCFG_Pos   /**< Data output invert
 284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_DATA_OUTPUT_MODE_t;
 285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status
 288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS
 290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_IDLE = 0x0UL,                 /**< Transfer buffer is currently idle*/
 292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_BUSY = USIC_CH_TCSR_TDV_Msk   /**< Transfer buffer is currently busy*/
 293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_t;
 294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel data transmit buffer status modification
 299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TBUF_STATUS_SET
 301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_BUSY   = 0x1UL, /**< Set Transfer buffer status to busy*/
 303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TBUF_STATUS_SET_IDLE   = 0x2UL  /**< Set Transfer buffer status to idle*/
 304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TBUF_STATUS_SET_t;
 305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive buffer status
 308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RBUF_STATUS
 310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 = USIC_CH_RBUFSR_RDV0_Msk, /**< RBUF0 data has not yet been r
 312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RBUF_STATUS_DATA_VALID1 = USIC_CH_RBUFSR_RDV1_Msk  /**< RBUF1 data has not yet been r
 313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RBUF_STATUS_t;
 314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel output signal passive data level
 317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USCI_CH_PASSIVE_DATA_LEVEL
 319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL0 = 0x0UL, /**< Passive level(idle mode signal level) 0 */
 321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_PASSIVE_DATA_LEVEL1 = 0x1UL << USIC_CH_SCTR_PDL_Pos  /**< Passive level(idle mode sig
 322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_PASSIVE_DATA_LEVEL_t;
 323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO size
 326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_FIFO_SIZE
 328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_DISABLED     = 0x0U,  /**< FIFO Disabled */
 330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_2WORDS  = 0x1U,  /**< FIFO size: 2 words */
 331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_4WORDS  = 0x2U,  /**< FIFO size: 4 words */
 332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_8WORDS  = 0x3U,  /**< FIFO size: 8 words */
 333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_16WORDS = 0x4U,  /**< FIFO size: 16 words */
 334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_32WORDS = 0x5U,  /**< FIFO size: 32 words */
 335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_FIFO_SIZE_64WORDS = 0x6U   /**< FIFO size: 64 words */
 336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_FIFO_SIZE_t;
 337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO interrupt node pointers
 340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER
 342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_TBCTR_STBINP_Pos,  /**< Node pointe
 344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_TBCTR_ATBINP_Pos   /**< Node pointe
 345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t;
 346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO event configuration
 349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT_CONF
 351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD  = USIC_CH_TBCTR_STBIEN_Msk,   /**< Enable FIFO standard t
 353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_TBCTR_TBERIEN_Msk  /**< Enable transmi
 354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_CONF_t;
 355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel transmit FIFO status
 358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_TXFIFO_EVENT
 360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_STANDARD = USIC_CH_TRBSR_STBI_Msk,    /**< Transmit FIFO status: Standar
 362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_TXFIFO_EVENT_ERROR    = USIC_CH_TRBSR_TBERI_Msk    /**< Transmit FIFO status: Error e
 363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_TXFIFO_EVENT_t;
 364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO interrupt node pointers
 367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER
 369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD  = USIC_CH_RBCTR_SRBINP_Pos, /**< Node pointer
 371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE = USIC_CH_RBCTR_ARBINP_Pos  /**< Node pointer
 372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t;
 373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO event configuration
 376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT_CONF
 378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD  = USIC_CH_RBCTR_SRBIEN_Msk,   /**< Enable FIFO standard r
 380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ERROR     = (int32_t)USIC_CH_RBCTR_RBERIEN_Msk,  /**< Enable receiv
 381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE = USIC_CH_RBCTR_ARBIEN_Msk   /**< Enable FIFO alternative
 382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_CONF_t;
 383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel receive FIFO status
 386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_RXFIFO_EVENT
 388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_STANDARD  = USIC_CH_TRBSR_SRBI_Msk,   /**< Receive FIFO status: Standard
 390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ERROR     = USIC_CH_TRBSR_RBERI_Msk,  /**< Receive FIFO status: Error ev
 391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE = USIC_CH_TRBSR_ARBI_Msk    /**< Receive FIFO status: Alternat
 392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_RXFIFO_EVENT_t;
 393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator clock source
 396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_SOURCE
 398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DIVIDER = 0x0UL, /**< Baudrate generator clock source : Source divid
 400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_SOURCE_DX1T    = 0x2UL << USIC_CH_BRG_CLKSEL_Pos  /**< Baudrate generator c
 401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_SOURCE_t;
 402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator divider mode
 405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE
 407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_DISABLED   = 0x0UL, /**< Baudrate generator clock divider: Dis
 409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL     = 0x1UL << USIC_CH_FDR_DM_Pos, /**< Baudrate genera
 410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL = 0x2UL << USIC_CH_FDR_DM_Pos  /**< Baudrate genera
 411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_t;
 412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator master clock passive level
 415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL
 417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0 = 0x0UL, /**< Baudrate generator master clock passiv
 419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_1 = 0x1UL << USIC_CH_BRG_MCLKCFG_Pos  /**< Baudrate ge
 420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_t;
 421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock passive level
 424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = 0x0UL, /**< Shift clock passive leve
 428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = 0x1UL << USIC_CH_BRG_SCLKCFG_Pos, /*
 429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = (int32_t)(0x2UL << USIC_CH_BRG_SCLKC
 430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = (int32_t)(0x3UL << USIC_CH_BRG_SCLKC
 431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** * USIC channel baudrate generator shift clock output
 435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
 436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef enum XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
 437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = 0x0UL, /**< Baudrate generator shift clock output: SCL.
 439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1 = 0x1UL << USIC_CH_BRG_SCLKOSEL_Pos   /**< Baudrate genera
 440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * DATA STRUCTURES
 444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *******************************************************************************/
 445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard start*/
 447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma push
 449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma anon_unions
 450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning 586
 452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC module structure
 456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef USIC_GLOBAL_TypeDef XMC_USIC_t;
 458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel structure.<br> The members of the structure are same as in the device header file, 
 461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * except for some registers.
 462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * DX0CR, DX1CR, DX2CR, DX3CR, DX4CR and DX5CR are replaced with the array DXCR[6].
 463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * TBUF0 to TBUF31 are replaced with TBUF[32].
 464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * IN0 to IN31 are replaced with IN[32].
 465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** typedef struct XMC_USIC_CH
 467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED0;
 469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  CCFG;			/**< Channel configuration register*/
 470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED1;
 471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  KSCFG;			/**< Kernel state configuration register*/
 472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  FDR;			/**< Fractional divider configuration register*/
 473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BRG;			/**< Baud rate generator register*/
 474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  INPR;			/**< Interrupt node pointer register*/
 475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  DXCR[6];		/**< Input control registers DX0 to DX5.*/
 476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  SCTR;			/**< Shift control register*/
 477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TCSR;
 478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IICMode;	/**< I2C protocol configuration register*/
 481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_IISMode; /**< I2S protocol configuration register*/
 482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_SSCMode;	/**< SPI protocol configuration register*/
 483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR;			/**< Protocol configuration register*/
 484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PCR_ASCMode;	/**< UART protocol configuration register*/
 485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   };
 486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CCR;			/**< Channel control register*/
 487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  CMTR;			/**< Capture mode timer register*/
 488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 489:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   union {
 490:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IICMode;	/**< I2C protocol status register*/
 491:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_IISMode;	/**< I2S protocol status register*/
 492:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_SSCMode;	/**< SPI protocol status register*/
 493:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR;			/**< Protocol status register*/
 494:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****     __IO uint32_t  PSR_ASCMode;	/**< UART protocol status register*/
 495:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   };
 496:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  PSCR;			/**< Protocol status clear register*/
 497:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFSR;		/**< Receive buffer status register*/
 498:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF;			/**< Receive buffer register*/
 499:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUFD;			/**< Debug mode receive buffer register*/
 500:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF0;			/**< Receive buffer 0*/
 501:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF1;			/**< Receive buffer 1*/
 502:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RBUF01SR;		/**< Receive buffer status register*/
 503:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  FMR;			/**< Flag modification register*/
 504:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED2[5];
 505:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBUF[32];		/**< Tranmsit buffer registers*/
 506:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYP;			/**< FIFO bypass register*/
 507:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  BYPCR;			/**< FIFO bypass control register*/
 508:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TBCTR;			/**< Transmit FIFO control register*/
 509:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  RBCTR;			/**< Receive FIFO control register*/
 510:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  TRBPTR;		/**< Transmit/recive buffer pointer register*/
 511:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __IO uint32_t  TRBSR;			/**< Transmit/receive buffer status register*/
 512:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  TRBSCR;		/**< Transmit/receive buffer status clear register*/
 513:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTR;			/**< Receive FIFO output register*/
 514:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  OUTDR;			/**< Receive FIFO debug output register*/
 515:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __I  uint32_t  RESERVED3[23];
 516:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   __O  uint32_t  IN[32];		/**< Transmit FIFO input register*/
 517:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** } XMC_USIC_CH_t;
 518:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 519:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 520:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /*Anonymous structure/union guard end*/
 521:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(__CC_ARM)
 522:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma pop
 523:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #elif defined(__TASKING__)
 524:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   #pragma warning restore
 525:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 526:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 527:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /*******************************************************************************
 528:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * API PROTOTYPES
 529:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  ******************************************************************************/
 530:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 531:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #ifdef __cplusplus
 532:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** extern "C" {
 533:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 534:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 535:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsModuleValid(const XMC_USIC_t *const module)
 536:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 537:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 538:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 539:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = (module == XMC_USIC0);
 540:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 541:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC1);
 542:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 543:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 544:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || (module == XMC_USIC2);
 545:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 546:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 547:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 548:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 549:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 550:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_IsChannelValid(const XMC_USIC_CH_t *const channel)
 551:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 552:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   bool tmp;
 553:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 554:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1));
 555:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC1)  
 556:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1));
 557:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 558:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #if defined(XMC_USIC2)  
 559:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   tmp = tmp || ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1));
 560:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** #endif
 561:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 562:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return tmp;
 563:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 564:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 565:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /* Common APIs */
 566:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 567:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 568:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 569:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 570:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 571:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
 572:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 573:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC module.\n\n
 574:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the clock for the USIC module by following the
 575:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * clock enabling sequence for the selected device.
 576:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 577:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 578:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 579:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 580:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Enable(XMC_USIC_t *const usic);
 581:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 582:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  usic Pointer to USIC module handler of type @ref XMC_USIC_t.\n
 583:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC0 to @ref XMC_USIC2 based on device support.
 584:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 585:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 586:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 587:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC module.\n\n
 588:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the clock for the USIC module by following the clock
 589:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * disabling sequence for the selected device.
 590:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 591:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 592:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 593:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 594:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_Disable(XMC_USIC_t *const usic);
 595:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 596:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 597:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 598:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 599:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 600:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 601:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the USIC channel. \n\n
 602:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is enabled by setting the module enable bit in KSCFG register bitfield MODEN.
 603:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * On enabling, the channel is set to idle mode.
 604:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 605:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 606:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Disable(), XMC_USIC_Enable() \n\n\n
 607:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 608:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel);
 609:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 610:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 611:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 612:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 613:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 614:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 615:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the USIC channel.\n\n
 616:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel is disabled by setting the module enable bit(MDEN) to 0 in the register KSCFG.
 617:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 618:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 619:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_Enable(), XMC_USIC_Disable() \n\n\n
 620:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 621:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_Disable(XMC_USIC_CH_t *const channel);
 622:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 623:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 624:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 625:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 626:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  rate Desired baudrate. \b Range: minimum value = 100, maximum value depends on the perip
 627:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/(10
 628:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 629:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 630:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 631:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status indicating the baudrate configuration.\n
 632:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 633:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 634:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 635:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 636:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the baudrate of the USIC channel. \n\n
 637:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Baudrate is configured by considering the peripheral frequency and the desired baudrate.
 638:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Optimum values of FDR->STEP and BRG->PDIV are calulated and used for generating the desired
 639:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * baudrate.
 640:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 641:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 642:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode(), XMC_USIC_CH_SetInputSource() \n\n\n
 643:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 644:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 645:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 646:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 647:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 648:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 649:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  pdiv Desired divider for the external frequency input. \b Range: minimum value = 1, maxi
 650:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 651:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						This can be related to the number of samples for each logic state of the data signal. \n
 652:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: 1 to 32. Value should be chosen based on the protocol used.
 653:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Selects which edge of the synchronized(and optionally filtered) signal 
 654:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *                          output DXnT of the input stage.
 655:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 656:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 657:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 658:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 659:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the external frequency input for the Baudrate Generator and configures the divider, over
 660:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * the combination mode of the USIC channel. \n\n
 661:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 662:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 663:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetBRGInputClockSource(), XMC_USIC_CH_SetInputTriggerCombinationMode() \n\n\n
 664:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 665:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_ConfigExternalInputSignalToBRG(XMC_USIC_CH_t *const channel,
 666:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 		                                         const uint16_t pdiv,
 667:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 												 const uint32_t oversampling,
 668:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 												 const XMC_USIC_CH_INPUT_COMBINATION_MODE_t combination_mode);
 669:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 670:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 671:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 672:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 673:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 674:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 675:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  source Input source select for the input stage. The table below maps the enum value with
 676:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * <table><tr><td>0</td><td>DXnA</td></tr><tr><td>1</td><td>DXnB</td></tr><tr><td>2</td><td>DXnC</t
 677:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * <tr><td>4</td><td>DXnE</td></tr><tr><td>5</td><td>DXnF</td></tr><tr><td>6</td><td>DXnG</td></tr>
 678:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * </tr></table>
 679:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 680:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 681:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 682:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the data source for USIC input stage.\n\n
 683:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects the input data signal source among DXnA, DXnB.. DXnG for the input stage. The API can be
 684:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * like DX0CR, DX1CR etc. 
 685:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *  
 686:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 687:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableIn
 688:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 689:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 690:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INP
 691:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 692:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 693:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 694:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 695:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 696:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 697:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 698:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 699:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 700:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 701:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 702:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 703:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is controlled by the
 704:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * protocol pre-processor. \n\n
 705:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 706:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 707:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToDataInput()\n\n\n
 708:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 709:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToPPP(XMC_USIC_CH_t *const channel, const XMC
 710:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 711:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_INSW_Msk;
 712:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 713:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 714:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 715:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 716:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 717:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 718:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 719:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 720:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 721:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 722:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The input of the data shift unit is connected to
 723:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * the selected data input line. \n\n
 724:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 725:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * This setting is used
 726:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * if the signals are directly derived from an input
 727:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * pin without treatment by the protocol preprocessor.
 728:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 729:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_ConnectInputDataShiftToPPP()\n\n\n
 730:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 731:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConnectInputDataShiftToDataInput(XMC_USIC_CH_t *const channel, con
 732:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 733:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_INSW_Msk;
 734:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 735:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 736:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 737:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 738:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 739:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 740:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 741:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 742:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 743:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 744:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input inversion for USIC channel input data signal. \n\n
 745:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 746:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Polarity of the input source can be changed to provide inverted data input.
 747:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 748:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputInversion()\n\n\n
 749:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 750:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC_
 751:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 752:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= USIC_CH_DXCR_DPOL_Msk;
 753:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 754:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 755:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 756:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 757:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 758:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 759:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 760:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 761:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 762:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 763:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input inversion for USIC channel. \n\n
 764:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 765:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Resets the input data polarity for the USIC channel input data signal.
 766:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 767:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputInversion()\n\n\n
 768:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 769:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputInversion(XMC_USIC_CH_t *const channel, const XMC_USIC
 770:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 771:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DPOL_Msk;
 772:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 773:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 774:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 775:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 776:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 777:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 778:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 779:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 780:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables delay compensation. \n\n
 781:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 782:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Delay compensation can be applied to the receive path.
 783:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 784:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableDelayCompensation()\n\n\n
 785:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 786:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableDelayCompensation(XMC_USIC_CH_t *const channel)
 787:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 788:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] |= USIC_CH_DX1CR_DCEN_Msk;
 789:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 790:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 791:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 792:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 793:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 794:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 795:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 796:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 797:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables delay compensation.. \n\n
 798:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 799:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 800:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableDelayCompensation()\n\n\n
 801:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 802:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableDelayCompensation(XMC_USIC_CH_t *const channel)
 803:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 804:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[1U] &=(uint32_t)~USIC_CH_DX1CR_DCEN_Msk;
 805:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 806:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 807:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 808:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 809:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 810:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 811:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 812:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 813:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 814:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 815:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the input digital filter for USIC channel input data signal. \n\n
 816:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be digitally filtered.
 817:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 818:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 819:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputDigitalFilter()\n\n\n
 820:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 821:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_U
 822:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 823:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |= (uint32_t)USIC_CH_DXCR_DFEN_Msk;
 824:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 825:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 826:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 827:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 828:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 829:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 830:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 831:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 832:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 833:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the input digital filter for USIC channel input data signal. \n\n
 834:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be digitally filtered.
 835:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 836:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 837:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 838:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 839:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputDigitalFilter(XMC_USIC_CH_t *const channel, const XMC_
 840:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 841:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DFEN_Msk;
 842:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 843:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 844:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 845:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 846:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 847:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 848:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 849:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 850:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 851:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables input synchronization for the USIC channel input data signal. \n\n
 852:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will be synchronized with fPERIPH.
 853:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * A noisy signal can be synchronized and filtered by enabling the digital filter.
 854:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 855:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 856:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableInputSync(), XMC_USIC_CH_EnableInputDigitalFilter()\n\n\n
 857:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 858:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_IN
 859:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 860:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] |=(uint32_t)USIC_CH_DXCR_DSEN_Msk;
 861:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 862:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 863:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 864:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 865:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 866:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 867:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 868:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 869:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 870:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables input synchronization for the USIC channel input data signal. \n\n
 871:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Input data signal from the selected multiplexer will not be synchronized.
 872:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 873:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 874:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_DisableInputDigitalFilter() \n\n\n
 875:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 876:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableInputSync(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_I
 877:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 878:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] &=(uint32_t)~USIC_CH_DXCR_DSEN_Msk;
 879:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 880:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 881:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 882:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 883:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 884:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 885:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  sampling_freq Sampling frequency value of type \a XMC_USIC_CH_INPUT_SAMPLING_FREQ_t.
 886:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 887:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 888:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 889:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets sampling frequency for USIC channel input data signal. \n\n
 890:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 891:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 892:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 893:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 894:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputSamplingFreq(XMC_USIC_CH_t *const channel,
 895:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_t input,
 896:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 		                                              const XMC_USIC_CH_INPUT_SAMPLING_FREQ_t sampling_fr
 897:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 898:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_SFSEL_Msk)) |
 899:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)sampling_freq);
 900:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 901:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 902:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 903:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 904:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 905:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  input USIC channel input stage of type @ref XMC_USIC_CH_INPUT_t. \n
 906:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				 \b Range: @ref XMC_USIC_CH_INPUT_DX0 to @ref XMC_USIC_CH_INPUT_DX5
 907:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  combination_mode Combination mode value of type \a XMC_USIC_CH_INPUT_COMBINATION_MODE_t.
 908:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 909:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 910:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 911:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Selects which edge of the synchronized signal DXnS activates the trigger output DXnT of the inpu
 912:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 913:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 914:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputSource(), XMC_USIC_CH_EnableInputSync(), XMC_USIC_CH_EnableInputDigitalFilte
 915:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 916:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetInputTriggerCombinationMode(XMC_USIC_CH_t *const channel,
 917:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_t input,
 918:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                        const XMC_USIC_CH_INPUT_COMBINATION_MODE_
 919:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 920:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DXCR_CM_Msk)) |
 921:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                          ((uint32_t)combination_mode << USIC_CH_DXCR_CM_Pos);
 922:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 923:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 924:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 925:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 926:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 927:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  clock_source clock source for the BRG.
 928:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 929:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 930:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 931:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the clock source for the BRG. \n\n
 932:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 933:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 934:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInputTriggerCombinationMode(), XMC_USIC_CH_SetExternalClockBRGDivider()\n\n\n
 935:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 936:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetBRGInputClockSource(XMC_USIC_CH_t *const channel, const XMC_USI
 937:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 938:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_CLKSEL_Msk)) | (uint32_t)(clock_source);
 939:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 940:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 941:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 942:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 943:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 944:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
 945:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
 946:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 947:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 948:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 949:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit buffer. \n\n
 950:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in TBUF[0U].
 951:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 952:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 953:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 954:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUFTCI() \n\n\n
 955:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 956:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUF(XMC_USIC_CH_t *const channel, const uint16_t data)
 957:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 958:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[0U] = data;
 959:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 960:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 961:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 962:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 963:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 964:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
 965:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param transmit_control_information transmit control information to be configured while transmit
 966:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31.
 967:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 968:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 969:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 970:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit buffer in a control mode. \n\n
 971:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the respective control mode is enabled , this API can be used.
 972:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 973:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 974:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 975:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_WriteToTBUF() \n\n\n
 976:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 977:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_WriteToTBUFTCI(XMC_USIC_CH_t *const channel,
 978:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint16_t data,
 979:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                              const uint32_t transmit_control_information)
 980:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
 981:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBUF[transmit_control_information] = data;
 982:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
 983:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
 984:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
 985:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 986:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
 987:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  word_length Number of bits to be configured for a data word. \n
 988:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   \b Range: minimum= 1, maximum= 16. \n
 989:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					   e.g: For word length of 8, \a word_length should be provided as 8.
 990:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
 991:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 992:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
 993:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the data word length in number of bits. \n\n
 994:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the number of bits to represent a data word. Frame length should be a multiple of word leng
 995:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
 996:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
 997:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetFrameLength()\n\n\n
 998:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
 999:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
1000:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1001:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
1002:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                   (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
1003:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1004:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1005:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1006:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1007:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1008:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  frame_length Number of bits in a frame. \n
1009:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						\b Range: minimum= 1, maximum= 0x3f. The maximum value for fixed frame size is 0x3f. \n
1010:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						e.g: For a frame length of 16, \a frame_length should be provided as 16.
1011:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1012:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1013:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1014:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Define the data frame length.\n\n
1015:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the number of bits to be serially transmitted in a frame.
1016:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The frame length should be multiples of word length. If the value is set to 0x40, the frame leng
1017:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * has to be controlled explicitly. 
1018:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1019:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1020:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1021:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1022:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
1023:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1024:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
1025:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                   (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
1026:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1027:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1028:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1029:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1030:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1031:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be enabled. Use @ref XMC_USIC_CH_EVENT_t for the 
1032:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1033:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1034:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1035:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1036:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1037:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enable the channel interrupt events.\n\n
1038:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Common channel events related to serial communication can be configured using this API.
1039:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1040:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1041:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1042:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1043:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1044:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1045:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1046:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1047:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR |= event;
1048:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1049:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1050:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1051:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1052:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1053:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Bit mask of the channel events to be disabled. Use @ref XMC_USIC_CH_EVENT_t for the
1054:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_EVENT_RECEIVE_START, @ref XMC_USIC_CH_EVENT_DATA_LOST etc. Multip
1055:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				can be combined using \a OR operation.
1056:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1057:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1058:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1059:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disable the channel interrupt events. \n\n
1060:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
1061:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EVENT_t enumerates multiple protocol event bitmasks. These enumerations can be used 
1062:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1063:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1064:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1065:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
1066:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
1067:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1068:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR &= (uint32_t)~event;
1069:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1070:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1071:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1072:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1073:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				  \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device sup
1074:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
1075:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
1076:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
1077:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request Service request number.\n
1078:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1079:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1080:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1081:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1082:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the interrupt node for USIC channel events. \n\n
1083:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
1084:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
1085:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
1086:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1087:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1088:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableEvent() \n\n\n
1089:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1090:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1091:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                          const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
1092:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                          const uint32_t service_request);
1093:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1094:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1095:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1096:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1097:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Stataus @ref XMC_USIC_CH_TBUF_STATUS_IDLE if transmit buffer is free,
1098:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *                 @ref XMC_USIC_CH_TBUF_STATUS_BUSY if transmit buffer is busy.
1099:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets transmit buffer status. \n\n
1102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Status indicates whether the transmit buffer is free, or busy transmitting data.
1103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The status depends on the value of TDV flag in TCSR register.
1104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * This status can be used while transmitting data. Transmit data when the transmit buffer
1105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * status is @ref XMC_USIC_CH_TBUF_STATUS_IDLE.
1106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetDataOutputMode() \n\n\n
1109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const 
1111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
  27              	 .loc 1 1111 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
1112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
  43              	 .loc 1 1112 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 9B6B     	 ldr r3,[r3,#56]
  46 000c DBB2     	 uxtb r3,r3
  47 000e 23F07F03 	 bic r3,r3,#127
  48 0012 DBB2     	 uxtb r3,r3
1113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
  49              	 .loc 1 1113 0
  50 0014 1846     	 mov r0,r3
  51 0016 0C37     	 adds r7,r7,#12
  52              	.LCFI3:
  53              	 .cfi_def_cfa_offset 4
  54 0018 BD46     	 mov sp,r7
  55              	.LCFI4:
  56              	 .cfi_def_cfa_register 13
  57              	 
  58 001a 5DF8047B 	 ldr r7,[sp],#4
  59              	.LCFI5:
  60              	 .cfi_restore 7
  61              	 .cfi_def_cfa_offset 0
  62 001e 7047     	 bx lr
  63              	 .cfi_endproc
  64              	.LFE180:
  66              	 .section .text.XMC_USIC_CH_SetMode,"ax",%progbits
  67              	 .align 2
  68              	 .thumb
  69              	 .thumb_func
  71              	XMC_USIC_CH_SetMode:
  72              	.LFB215:
1114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @brief API to get receive buffer status
1117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of data validity check for RBUF0 and RBUF1. \n
1120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   Returned value should be masked with RDV0 and RDV1 bits to know the status. \n
1121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		   \b Range: @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID0, @ref XMC_USIC_CH_RBUF_STATUS_DATA_VALID
1122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if RBUF0 and RBUF1 have valid unread data. \n\n
1125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * It checks the bits RDV0 and RDV1 of the RBUFSR register.
1126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Returns the value of RBUFSR masked with bitmasks of RDV0 and RDV1.
1127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * It can be used to decide whether 2bytes has to be read from RBUF or 1 byte. 
1128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * If both bitmasks XMC_USIC_CH_RBUF_STATUS_DATA_VALID0 and XMC_USIC_CH_RBUF_STATUS_DATA_VALID1
1129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * are set, then 2 bytes can be read from RBUF. If only either of them is set, then only one byte
1130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * can be read from RBUF.
1131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
1135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
1137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  start_transmision_mode Transmission mode to be enabled. \n
1144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 								\b Range: @ref XMC_USIC_CH_START_TRANSMISION_DISABLED,
1145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV, @ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2
1146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 								@ref XMC_USIC_CH_START_TRANSMISION_ON_TDV_DX2S_1
1147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *                              
1148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures data transmission. \n\n
1152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The configuration affects the data shifted on the DOUT0 pin.
1153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetDataOutputMode() \n\n\n
1156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetStartTransmisionMode(XMC_USIC_CH_t *const channel,
1158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                          const XMC_USIC_CH_START_TRANSMISION_MODE_t
1159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~USIC_CH_TCSR_TDEN_Msk)) | (uint32_t)start_transmisio
1161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  data_output_mode  Data output mode. \n
1168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_DATA_OUTPUT_MODE_NORMAL, @ref XMC_USIC_CH_DATA_OUTPUT_MODE_INVERTE
1169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the mode for data output. \n\n
1173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel can be configured to shift inverted data or direct data based on the input to the A
1174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetDataOutputMode(XMC_USIC_CH_t *const channel,
1179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const XMC_USIC_CH_DATA_OUTPUT_MODE_t data_output
1180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_DOCFG_Msk)) | (uint32_t)data_output_mod
1182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables automatic update of frame length. \n\n
1191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the automatic update of frame length is enabled, frame length is configured based on the 
1192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * index of the TBUF[]/IN[] register array. When the data is written to TBUF[x], frame length is co
1193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * with the mask value of \a x at the last 5 bit positions. Same logic is applicable if data is wri
1194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * IN[x] register.
1195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_TXFIFO_PutDataFLEMode() \n\n\n
1198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableFrameLengthControl(XMC_USIC_CH_t *const channel)
1200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR = (uint32_t)(channel->TCSR & (~(USIC_CH_TCSR_WLEMD_Msk |
1202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_SELMD_Msk |
1203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_WAMD_Msk |
1204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                          USIC_CH_TCSR_HPCMD_Msk))) |
1205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                          (uint32_t)USIC_CH_TCSR_FLEMD_Msk;
1206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables automatic update of frame length. \n\n
1215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When automatic update of frame length is disabled, frame length has to configured explicitly.
1216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Frame length remains fixed until it is changed again.
1217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableFrameLengthControl(), XMC_USIC_CH_SetFrameLength() \n\n\n
1220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableFrameLengthControl(XMC_USIC_CH_t *const channel)
1222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_FLEMD_Msk;
1224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is set if DX2T becomes active while TDV = 1. \n\n
1233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the transfer trigger unit to set bit TCSR.TE if the trigger signal DX2T becomes active
1234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * for event driven transfer starts.
1235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTBUFDataValidTrigger()\n\n\n
1238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR |= (uint32_t)USIC_CH_TCSR_TDVTR_Msk;
1242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the trigger of TDV depending on DX2T signal. \n\n
1251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Bit TCSR.TE is permanently set.
1252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTBUFDataValidTrigger() \n\n\n
1255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTBUFDataValidTrigger(XMC_USIC_CH_t *const channel)
1257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TCSR &= (uint32_t)~USIC_CH_TCSR_TDVTR_Msk;
1259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  service_request_line service request number of the event to be triggered. \n
1265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 0 to 5.
1266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Trigger a USIC interrupt service request.\n\n
1270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC service request is triggered, the NVIC interrupt associated with it will be 
1271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * generated if enabled. 
1272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
1275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
1277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
1279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  transmit_buffer_status clearing or setting the TDV flag. \n
1285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Modify TCSR.TDV and TCSR.TE to control the start of a data word transmission by software.
1290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
1293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetTransmitBufferStatus(XMC_USIC_CH_t *const channel,
1295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 		                                                 const XMC_USIC_CH_TBUF_STATUS_SET_t transmit_buf
1296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->FMR = (uint32_t)transmit_buffer_status;
1298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  passive_level Value of passive level for the channel. \n
1304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL0, @ref XMC_USIC_CH_PASSIVE_DATA_LEVEL1
1305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Set the passive data level of the output signal. \n\n
1309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the USIC channel transmit stage is idle, the output signal level stays at the 
1310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * configured passive level.
1311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_GetTransmitBufferStatus(), XMC_USIC_CH_SetStartTransmisionMode() \n\n\n
1314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetPassiveDataLevel(XMC_USIC_CH_t *const channel,
1316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                      const XMC_USIC_CH_PASSIVE_DATA_LEVEL_t passive
1317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR &= (~USIC_CH_SCTR_PDL_Msk);
1319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->SCTR |= (uint32_t)passive_level;
1320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /* TX FIFO APIs */
1323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of transmit FIFO filling level to be considered for generating events. \n
1331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Initializes the transmit FIFO. \n\n
1336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO is a subset of a common FIFO sized 64 words. This FIFO is shared between 2 channel
1337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * from where transmit data can be put, for the selected USIC channel. \a size represents the size 
1339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 2. Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A F
1340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * event is generated when the FIFO filling level falls below the \a limit value.
1341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent(), XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
1346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the transmit FIFO. \n
1354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for transmit FIFO filling level to be considered for generating events. \
1356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the transmit FIFO. \n\n
1361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the transmit FIFO. The API shall be used for the 
1362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of transmit FIFO trigger limit. FIFO start position will not be affected on execu
1363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit() \n\n\n
1366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t.
1381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation. Events are configured in the TBC
1383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
1389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR |= event;
1393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t \n
1400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the interrupt events related to transmit FIFO. \n\n
1404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_TXFIFO_GetEvent(). 
1406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_TXFIFO_EVENT_CONF_t. Fo
1407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TBCTR &= (uint32_t)~event;
1415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				      \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device
1420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the transmit FIFO events. \n
1421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: @ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  			@ref XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation. \n
1424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  \b Range: 0 to 5.
1425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the transmit FIFO events.\n\n
1429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * A transmit FIFO event can generate an interrupt only if the interrupt node is configured for the
1433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t i
1443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted. \n
1449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: 16bit unsigned data. minimum= 0, maximum= 65535
1450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data into the transmit FIFO. \n\n
1454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The data provided is placed in the transmit FIFO.
1455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The transmit FIFO should be configured before calling this API.
1456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
1459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutData(XMC_USIC_CH_t *const channel, const uint16_t data)
1461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[0] = data;
1463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
1469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit FIFO in frame length control mode. \n\n
1475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When frame length control is enabled for dynamic update of frame length, this API can be used.
1476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataFLEMode(XMC_USIC_CH_t *const channel,
1483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint16_t data,
1484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1489:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1490:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1491:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1492:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data Data to be transmitted.
1493:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param frame_length Frame length to be configured while transmitting the data. \n
1494:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: minimum= 0, maximum= 31. e.g: For a frame length of 16, set \a frame_length as 15.
1495:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1496:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1497:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1498:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Writes data to the transmit FIFO in hardware port control mode. \n\n
1499:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When hardware port control is enabled for dynamic update of frame length, this API can be used.
1500:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length represents the frame length to be updated by the peripheral. 
1501:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \a frame_length is used as index for the IN[] register array.
1502:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1503:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1504:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
1505:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1506:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_PutDataHPCMode(XMC_USIC_CH_t *const channel,
1507:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint16_t data,
1508:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                        const uint32_t frame_length)
1509:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1510:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->IN[frame_length] = data;
1511:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1512:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1513:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1514:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1515:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1516:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1517:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1518:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1519:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of transmit FIFO. \n\n
1520:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Transmit FIFO contents will be cleared and the filling level will be reset to 0.
1521:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1522:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1523:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
1524:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1525:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
1526:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1527:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
1528:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1529:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1530:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1531:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1532:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1533:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is full
1534:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO is not full.
1535:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1536:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1537:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is full. \n\n
1538:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO filling level reaches the configured size, FIFO full flag is set.
1539:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * User should not write to the FIFO when the transmit FIFO is full.
1540:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1541:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1542:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
1543:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1544:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1545:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1546:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
1547:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1548:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1549:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1550:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1551:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1552:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if transmit FIFO is empty
1553:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if transmit FIFO has some data.
1554:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1555:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1556:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if transmit FIFO is empty. \n\n
1557:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the transmit FIFO is empty, data can be written to FIFO.
1558:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last written word to the transmit FIFO is transmitted out of the FIFO, 
1559:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * FIFO empty flag is set.
1560:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1561:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1562:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1563:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1564:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1565:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1566:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
1567:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1568:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1569:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1570:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1571:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1572:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Transmit FIFO filling level. \n 
1573:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= transmit FIFO size.
1574:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1575:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1576:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO filling level. \n\n
1577:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word written to the FIFO, filling level is updated. The API gives the value
1578:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level.
1579:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1580:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1581:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
1582:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1583:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1584:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1585:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_TBFLVL_Msk) >> USIC_CH_TRBSR_TBFLVL_Pos);
1586:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1587:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1588:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1589:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1590:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1591:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard transmit and transmit buffer error events. @ref XMC_USIC_CH_TXFIFO_EV
1592:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1593:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1594:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the transmit FIFO event status. \n\n
1595:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of transmit FIFO standard transmit buffer event and transmit buffer error event
1596:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bit positions in the TRBSR register in the returned value.
1597:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the @ref XMC_USIC_CH_TXFIFO_EVENT_t enumeration for checking the status of 
1598:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1599:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1600:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1601:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1602:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1603:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_ClearEvent() \n\n\n
1604:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1605:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_TXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1606:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1607:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_STBI_Msk |
1608:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_TBERI_Msk));
1609:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1610:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1611:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1612:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1613:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1614:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Transmit FIFO events to be cleared. \n
1615:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			     \b Range: @ref XMC_USIC_CH_TXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_TXFIFO_EVENT_ERROR.
1616:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1617:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1618:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1619:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the transmit FIFO event flags in the status register. \n\n
1620:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1621:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1622:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_EVENT enumeration can be used as input. Multiple events
1623:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1624:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1625:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1626:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1627:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_GetEvent() \n\n\n
1628:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1629:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_TXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1630:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1631:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1632:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = event;
1633:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1634:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1635:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1636:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1637:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1638:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param data_pointer Start position inside the FIFO buffer. \n
1639:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to 63.
1640:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1641:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1642:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold of receive FIFO filling level to be considered for generating events. \n
1643:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1644:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1645:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1646:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1647:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Configures the receive FIFO. \n\n
1648:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO is the subset of a common FIFO sized 64 words. This FIFO is shared between 2 channe
1649:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Each channel can share the FIFO for transmission and reception. \a data_pointer represents the s
1650:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * from where received data can be put. \a size represents the size of receive FIFO as a multiple o
1651:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Since the FIFO is shared between 2 USIC channels, FIFO size should be carefully selected. A FIFO
1652:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * event or alternative receive buffer event is generated when the FIFO filling level exceeds the \
1653:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1654:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1655:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent(), XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1656:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** */
1657:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
1658:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t data_pointer,
1659:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                   const XMC_USIC_CH_FIFO_SIZE_t size,
1660:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                   const uint32_t limit);
1661:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1662:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1663:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1664:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1665:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param size Required size of the receive FIFO. \n
1666:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: @ref XMC_USIC_CH_FIFO_DISABLED, @ref XMC_USIC_CH_FIFO_SIZE_2WORDS.. @ref XMC_USIC_CH
1667:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param limit Threshold for receive FIFO filling level to be considered for generating events. \n
1668:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 		\b Range: 0 to \a size -1.
1669:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1670:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1671:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1672:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the size and trigger limit for the receive FIFO. \n\n
1673:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The API is not to be called for initializing the receive FIFO. The API shall be used for the 
1674:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * runtime change of receive FIFO trigger limit. FIFO start position will not be affected on execut
1675:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1676:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1677:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit()\ n\n\n
1678:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1679:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
1680:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                             const XMC_USIC_CH_FIFO_SIZE_t size,
1681:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                             const uint32_t limit);
1682:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1683:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1684:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1685:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1686:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be enabled. Multiple events can be bitwise OR combined. @ref XMC_USIC_CH_
1687:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1688:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1689:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1690:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables the interrupt events related to transmit FIFO. \n\n
1691:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_t.
1692:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Multiple events can be enabled by providing multiple events in a single call. For providing 
1693:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.<br>
1694:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1695:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: API only enables the events. For interrupt generation, interrupt node must be configured a
1696:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * must be enabled.
1697:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1698:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1699:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_SetInterruptNodePointer() \n\n\n
1700:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1701:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t ev
1702:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1703:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR |= event;
1704:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1705:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1706:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1707:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1708:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1709:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1710:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param event Events to be disabled. \n
1711:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ERR
1712:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			@ref XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE.
1713:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1714:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1715:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1716:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables the selected interrupt events related to receive FIFO. \n\n
1717:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * By disabling the interrupt events, generation of interrupt is stopped. User can poll the event 
1718:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * flags from the status register using the API XMC_USIC_CH_RXFIFO_GetEvent(). 
1719:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Event bitmasks can be constructed using the enumeration \a XMC_USIC_CH_RXFIFO_EVENT_CONF. For pr
1720:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple events, combine the events using bitwise OR operation.
1721:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1722:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1723:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1724:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1725:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t e
1726:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1727:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->RBCTR &= (uint32_t)~event;
1728:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1729:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1730:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1731:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1732:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1733:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param interrupt_node Node pointer representing the receive FIFO events. \n
1734:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
1735:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					@ref XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_ALTERNATE
1736:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param service_request The service request to be used for interrupt generation.\n
1737:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: 0 to 5.
1738:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1739:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1740:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1741:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets an interrupt node for the receive FIFO events. \n\n
1742:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * A node pointer represents one or more interrupt events. Service request represents the interrupt
1743:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * among the 6 interrupt nodes available for USIC module.
1744:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * API configures the service request to be used for interrupt generation for the events selected.
1745:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * A receive FIFO event can generate an interrupt only if the interrupt node is configured for the 
1746:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * the interrupt generation is enabled for the event. For example, transmit FIFO standard transmit 
1747:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * interrupt is generated if the interrupt node for the same is set and interrupt is enabled.<br>
1748:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1749:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: NVIC node should be explicitly enabled for the interrupt generation.
1750:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1751:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1752:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
1753:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1754:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** void XMC_USIC_CH_RXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
1755:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const XMC_USIC_CH_RXFIFO_INTERRUPT_NODE_POINTER_t i
1756:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                 const uint32_t service_request);
1757:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1758:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1759:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1760:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1761:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Value read from the receive FIFO. \n
1762:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: 16bit data. Length of data depends on the word length configuration.
1763:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1764:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1765:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets data from the receive FIFO. \n\n
1766:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO should be read only if data is availble in the FIFO. This can be checked using
1767:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * the API XMC_USIC_CH_RXFIFO_IsEmpty(). Receive FIFO error flag will be set if an attempt is made
1768:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO. To read all the received data, user should keep reading data
1769:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * until receive FIFO is empty.
1770:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1771:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1772:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent() \n\n\n
1773:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1774:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint16_t XMC_USIC_CH_RXFIFO_GetData(XMC_USIC_CH_t *const channel)
1775:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1776:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint16_t)(channel->OUTR);
1777:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1778:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1779:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1780:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1781:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1782:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1783:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1784:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1785:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the contents of receive FIFO. \n\n
1786:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Receive FIFO contents will be cleared and the filling level will be reset to 0.
1787:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1788:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1789:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetLevel() \n\n\n
1790:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1791:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_Flush(XMC_USIC_CH_t *const channel)
1792:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1793:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHRB_Msk;
1794:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1795:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1796:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1797:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1798:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1799:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is full
1800:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO is not full.
1801:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1802:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1803:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is full. \n\n
1804:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO filling level reaches the configured size, FIFO full flag is set.
1805:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Any data received when the receive FIFO is full, is lost.
1806:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1807:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1808:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_IsEmpty(), XMC_USIC_CH_RXFIFO_Flush() \n\n\n
1809:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1810:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsFull(XMC_USIC_CH_t *const channel)
1811:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1812:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_RFULL_Msk);
1813:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1814:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1815:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1816:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1817:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1818:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status \a true if receive FIFO is empty,
1819:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *              \a false if receive FIFO has some data.
1820:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1821:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1822:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Checks if receive FIFO is empty. \n\n
1823:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the receive FIFO is empty, received data will be put in receive FIFO.
1824:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * When the last received word in the FIFO is read, FIFO empty flag is set. Any attempt
1825:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * to read from an empty receive FIFO will set the receive FIFO error flag.
1826:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1827:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1828:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1829:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1830:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
1831:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1832:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
1833:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1834:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1835:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1836:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1837:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1838:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return uint32_t Receive FIFO filling level. \n
1839:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *           \b Range: minimum= 0(FIFO empty), maximum= receive FIFO size.
1840:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1841:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1842:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO filling level. \n\n
1843:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * For every word received, the filling level is incremented. The API gives the value
1844:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * of this filling level. The filling level is decremented when the data is read out of the 
1845:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * receive FIFO.
1846:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1847:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1848:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
1849:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1850:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetLevel(XMC_USIC_CH_t *const channel)
1851:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1852:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return ((uint32_t)(channel->TRBSR & USIC_CH_TRBSR_RBFLVL_Msk) >> USIC_CH_TRBSR_RBFLVL_Pos);
1853:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1854:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1855:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1856:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1857:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1858:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return Status of standard receive buffer, alternative receive buffer and receive buffer error e
1859:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1860:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1861:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1862:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1863:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gets the receive FIFO events' status. \n\n
1864:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Gives the status of receive FIFO standard receive buffer event, alternative receive buffer event
1865:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The status bits are located at their bitpositions in the TRBSR register in the returned value.
1866:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * User can make use of the XMC_USIC_CH_RXFIFO_EVENT enumeration for checking the status of return 
1867:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The status can be found by using the bitwise AND operation on the returned value with the enumer
1868:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1869:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Note: Event status flags should be cleared by the user explicitly.
1870:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1871:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1872:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_ClearEvent()\n\n\n
1873:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1874:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE uint32_t XMC_USIC_CH_RXFIFO_GetEvent(XMC_USIC_CH_t *const channel)
1875:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1876:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   return (uint32_t)((channel->TRBSR) & (USIC_CH_TRBSR_SRBI_Msk |
1877:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_RBERI_Msk |
1878:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                               USIC_CH_TRBSR_ARBI_Msk));
1879:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1880:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1881:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1882:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1883:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1884:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param  event Receive FIFO events to be cleared. \n
1885:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 			\b Range: @ref XMC_USIC_CH_RXFIFO_EVENT_STANDARD, @ref XMC_USIC_CH_RXFIFO_EVENT_ERROR,
1886:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					  @ref XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE.
1887:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1888:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1889:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1890:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Clears the receive FIFO event flags in the status register. \n\n
1891:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * USIC channel peripheral does not clear the event flags after they are read.
1892:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * This API clears the events provided in the \a mask value. 
1893:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_EVENT enumeration can be used as input. Multiple events
1894:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * can be cleared by providing a mask value obtained by bitwise OR operation of 
1895:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * multiple event enumerations.
1896:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1897:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1898:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_RXFIFO_GetEvent() \n\n\n
1899:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1900:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_RXFIFO_ClearEvent(XMC_USIC_CH_t *const channel,
1901:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                    const uint32_t event)
1902:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1903:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->TRBSCR = event;
1904:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1905:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1906:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1907:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1908:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1909:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1910:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1911:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1912:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Enables time measurement using the capture mode timer. \n\n
1913:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is enabled by setting the timer enable flag in BRG register.
1914:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1915:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1916:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_DisableTimeMeasurement() \n\n\n
1917:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1918:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_EnableTimeMeasurement(XMC_USIC_CH_t *const channel)
1919:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1920:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG |= (uint32_t)USIC_CH_BRG_TMEN_Msk;
1921:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1922:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1923:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1924:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1925:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1926:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1927:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1928:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1929:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Disables time measurement using the capture mode timer. \n\n
1930:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Time measurement is disabled by clearing the timer enable flag in BRG register.
1931:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1932:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
1933:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_CH_EnableTimeMeasurement() \n\n\n
1934:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1935:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_DisableTimeMeasurement(XMC_USIC_CH_t *const channel)
1936:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1937:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG &= (uint32_t)~USIC_CH_BRG_TMEN_Msk;
1938:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1939:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1940:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1941:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1942:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1943:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the master clock output. \n
1944:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_MASTER_CLOCK_PASSIVE_LEVEL_0, @ref XMC_USIC_CH_BRG_MASTER_CL
1945:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1946:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1947:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1948:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode pin level for the master clock output. \n
1949:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1950:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMclkOutputPassiveLevel(XMC_USIC_CH_t *const channel,
1951:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_MASTER_CLOCK_PASSI
1952:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1953:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~USIC_CH_BRG_MCLKCFG_Msk)) | (uint32_t)passive_level;
1954:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1955:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1956:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1957:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1958:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param passive_level Passive level for the clock output. \n
1959:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
1960:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED,
1961:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
1962:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *							  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED,
1963:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param clock_output Shift clock source selection. \n
1964:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 					\b Range: Use @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,
1965:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 								  @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1
1966:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1967:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1968:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1969:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the idle mode shift clock output level and selects the shift clock source. \n\n
1970:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock idle mode output level can be set to logic high or low. Shift clock output can be co
1971:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * delay of half shift clock period. Both the configurations are available as enumeration values de
1972:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @ref XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t.
1973:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * This value should be configured based on the slave device requirement.
1974:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Shift clock source can be selected between internal clock(master) and external input(slave).
1975:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 
1976:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
1977:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
1978:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIV
1979:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                                            const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT
1980:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
1981:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
1982:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                                              USIC_CH_BRG_SCLKOSEL_Msk))) |
1983:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)passive_level |
1984:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****                  (uint32_t)clock_output;
1985:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
1986:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** 
1987:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** /**
1988:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
1989:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				   \b Range: @ref XMC_USIC0_CH0, @ref XMC_USIC0_CH1 to @ref XMC_USIC2_CH1 based on device su
1990:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @param mode USIC channel operation mode. \n
1991:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 				\b Range: @ref XMC_USIC_CH_OPERATING_MODE_IDLE, @ref XMC_USIC_CH_OPERATING_MODE_SPI,
1992:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_UART, @ref XMC_USIC_CH_OPERATING_MODE_I2S,
1993:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * 						  @ref XMC_USIC_CH_OPERATING_MODE_I2C.
1994:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * @return None
1995:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
1996:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Description</b><br>
1997:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * Sets the USIC channel operation mode.\n\n
1998:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * A USIC channel can support multiple serial communication protocols like UART, SPI, I2C and I2S.
1999:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * The API sets the input operation mode to the USIC channel.
2000:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  *
2001:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * \par<b>Related APIs:</b><BR>
2002:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
2003:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****  */
2004:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** __STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_
2005:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** {
  73              	 .loc 1 2005 0
  74              	 .cfi_startproc
  75              	 
  76              	 
  77              	 
  78 0000 80B4     	 push {r7}
  79              	.LCFI6:
  80              	 .cfi_def_cfa_offset 4
  81              	 .cfi_offset 7,-4
  82 0002 83B0     	 sub sp,sp,#12
  83              	.LCFI7:
  84              	 .cfi_def_cfa_offset 16
  85 0004 00AF     	 add r7,sp,#0
  86              	.LCFI8:
  87              	 .cfi_def_cfa_register 7
  88 0006 7860     	 str r0,[r7,#4]
  89 0008 0B46     	 mov r3,r1
  90 000a FB70     	 strb r3,[r7,#3]
2006:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h ****   channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
  91              	 .loc 1 2006 0
  92 000c 7B68     	 ldr r3,[r7,#4]
  93 000e 1B6C     	 ldr r3,[r3,#64]
  94 0010 23F00F02 	 bic r2,r3,#15
  95 0014 FB78     	 ldrb r3,[r7,#3]
  96 0016 1A43     	 orrs r2,r2,r3
  97 0018 7B68     	 ldr r3,[r7,#4]
  98 001a 1A64     	 str r2,[r3,#64]
2007:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_usic.h **** }
  99              	 .loc 1 2007 0
 100 001c 0C37     	 adds r7,r7,#12
 101              	.LCFI9:
 102              	 .cfi_def_cfa_offset 4
 103 001e BD46     	 mov sp,r7
 104              	.LCFI10:
 105              	 .cfi_def_cfa_register 13
 106              	 
 107 0020 5DF8047B 	 ldr r7,[sp],#4
 108              	.LCFI11:
 109              	 .cfi_restore 7
 110              	 .cfi_def_cfa_offset 0
 111 0024 7047     	 bx lr
 112              	 .cfi_endproc
 113              	.LFE215:
 115 0026 00BF     	 .section .text.XMC_SPI_CH_ClearStatusFlag,"ax",%progbits
 116              	 .align 2
 117              	 .thumb
 118              	 .thumb_func
 120              	XMC_SPI_CH_ClearStatusFlag:
 121              	.LFB222:
 122              	 .file 2 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg\\Libraries\\XMCLib\\inc/xmc_spi.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @file xmc_spi.h
   3:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @date 2016-04-10
   4:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   *************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-02-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Initial
  41:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *   
  42:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-05-20:
  43:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Documentation improved <br>
  44:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetSlaveSelectDelay(), XMC_SPI_CH_TriggerServiceRequest() and 
  45:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *       XMC_SPI_CH_SelectInterruptNodePointer() <br>
  46:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added XMC_SPI_CH_SetInterwordDelaySCLK() <br>
  47:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  48:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-06-20:
  49:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  50:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  51:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-08-24:
  52:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added APIs for enabling/disabling delay compensation XMC_SPI_CH_DisableDelayCompensation()
  53:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *       XMC_SPI_CH_EnableDelayCompensation() <br>
  54:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  55:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-08-27:
  56:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added APIs for external input for BRG configuration:XMC_SPI_CH_ConfigExternalInputSignalTo
  57:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  58:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-09-01:
  59:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  60:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Modified XMC_SPI_CH_EVENT_t enum for supporting XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_Di
  61:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *       for supporting multiple events configuration <br>
  62:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  63:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2015-09-08:
  64:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Adding API for configuring the receiving clock phase in the slave:XMC_SPI_CH_DataLatchedIn
  65:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  66:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 2016-04-10:
  67:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *     - Added an API for configuring the transmit mode:XMC_SPI_CH_SetTransmitMode() <br>
  68:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  69:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @endcond 
  70:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
  71:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
  72:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
  73:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #ifndef XMC_SPI_H
  74:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI_H
  75:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
  76:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
  77:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * HEADER FILES
  78:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
  79:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #include "xmc_usic.h"
  80:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
  81:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
  82:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @addtogroup XMClib XMC Peripheral Library
  83:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @{
  84:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
  85:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
  86:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
  87:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @addtogroup SPI
  88:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @brief Synchronous serial channel driver for SPI-like communication.
  89:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  90:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * The SPI driver uses Universal Serial Interface Channel(USIC) module. 
  91:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * The USIC module supports multiple data lines for SPI communication. \n
  92:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Full duplex communication with 2 separate lines for transmission and reception.
  93:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Half duplex communication with 1 common line shared for transmission and reception.
  94:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Dual mode communication with 2 common lines shared for transmission and reception.
  95:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Quad mode communication with 4 common lines shared for transmission and reception.<br><br>
  96:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
  97:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI driver provides structures, enumerations and APIs for configuring the USIC channel for SPI c
  98:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * and also for data transaction.<br>
  99:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI driver features:
 100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Configuration structure XMC_SPI_CH_CONFIG_t and SPI initialization function XMC_SPI_CH_Init()
 101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Allows configuration of protocol word and frame length using XMC_SPI_CH_SetWordLength(), XMC_
 102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Allows manipulation of data frame at runtime using XMC_SPI_CH_EnableSOF(), XMC_SPI_CH_EnableE
 103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  XMC_SPI_CH_EnableSlaveSelect(), XMC_SPI_CH_DisableSlaveSelect()
 104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Provides APIs for transmitting data and receiving data using XMC_SPI_CH_Transmit(), XMC_SPI_C
 105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Allows configuration of shift clock using XMC_SPI_CH_ConfigureShiftClockOutput()
 106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * -# Provides enumeration of SPI protocol events using @ref XMC_SPI_CH_STATUS_FLAG_t
 107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @{
 108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * MACROS
 112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
 113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #if defined(USIC0)
 115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI0_CH0 XMC_USIC0_CH0 /**< SPI0 channel 0 base address */
 116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI0_CH1 XMC_USIC0_CH1 /**< SPI0 channel 1 base address */
 117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #if defined(USIC1)
 120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI1_CH0 XMC_USIC1_CH0 /**< SPI1 channel 0 base address */
 121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI1_CH1 XMC_USIC1_CH1 /**< SPI1 channel 1 base address */
 122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #if defined(USIC2)
 125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI2_CH0 XMC_USIC2_CH0 /**< SPI2 channel 0 base address */
 126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #define XMC_SPI2_CH1 XMC_USIC2_CH1 /**< SPI2 channel 1 base address */
 127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * ENUMS
 131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
 132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines return status of SPI driver APIs
 135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS
 137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_OK,    /**< Status of the Module: OK */
 139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_ERROR, /**< Status of the Module: ERROR */
 140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_BUSY   /**< The Module is busy */
 141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_t;
 142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines the SPI bus mode
 144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BUS_MODE
 146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_MASTER, /**< SPI Master */
 148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_SLAVE   /**< SPI Slave */
 149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_BUS_MODE_t;
 150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines the Polarity of the slave select signals SELO[7:0] in relation to the master slave selec
 153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SEL_MSLS_INV
 155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_SAME_AS_MSLS = 0x0UL, /**< The SELO outputs have the same polarity as the MS
 157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                   (active high) */
 158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_INV_TO_MSLS = 0x1UL << USIC_CH_PCR_SSCMode_SELINV_Pos /**< The SELO outputs 
 159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                   polarity to the M
 160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                   (active low)*/
 161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t;
 162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines the Polarity of the data inputs.
 165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_DATA_POLARITY
 167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_DIRECT = 0x0UL, /**< The polarity of the data line is not inverted */
 169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_DATA_POLARITY_INVERT = 0x1UL << USIC_CH_DX2CR_DPOL_Pos /**< The polarity of the data l
 170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_DATA_POLARITY_t;
 171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines Slave Select lines
 174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_SLAVE_SELECT
 176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_0 = 1UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 0 */
 178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_1 = 2UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 1 */
 179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_2 = 4UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 2 */
 180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_3 = 8UL << USIC_CH_PCR_SSCMode_SELO_Pos,  /**< Slave Select line 3 */
 181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_4 = 16UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 4 */
 182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_5 = 32UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 5 */
 183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_6 = 64UL << USIC_CH_PCR_SSCMode_SELO_Pos, /**< Slave Select line 6 */
 184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SELECT_7 = 128UL << USIC_CH_PCR_SSCMode_SELO_Pos /**< Slave Select line 7 */
 185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_SLAVE_SELECT_t;
 186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines SPI specific events
 189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_EVENT
 191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk, /**< Receive start event */
 193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk, /**< Data lost event */
 194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk, /**< Transmit shift event */
 195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk, /**< Transmit buffer event */
 196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,  /**< Receive event */
 197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,  /**< Alternate receive event */
 198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_PARITY_ERROR = USIC_CH_PCR_SSCMode_PARIEN_Msk >> 13U,       /**< Parity error ev
 201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_MSLS_CHANGE =  USIC_CH_PCR_SSCMode_MSLSIEN_Msk >> 13U,      /**< Master slave se
 202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_EVENT_DX2TIEN_ACTIVATED = USIC_CH_PCR_SSCMode_DX2TIEN_Msk >> 13U  /**< Slave select in
 203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_EVENT_t;
 204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines SPI event status
 207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_STATUS_FLAG
 209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS = USIC_CH_PSR_SSCMode_MSLS_Msk,                          /**< Status 
 211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             select(
 212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2S = USIC_CH_PSR_SSCMode_DX2S_Msk,                          /**< Status 
 213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             input(D
 214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_MSLS_EVENT_DETECTED = USIC_CH_PSR_SSCMode_MSLSEV_Msk,         /**< Status 
 215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             output 
 216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DX2T_EVENT_DETECTED = USIC_CH_PSR_SSCMode_DX2TEV_Msk,         /**< Status 
 217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             input s
 218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_PARITY_ERROR_EVENT_DETECTED = USIC_CH_PSR_SSCMode_PARERR_Msk, /**< Indicat
 219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             parity 
 220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_SSCMode_RSIF_Msk,     /**< Status 
 221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             event *
 222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_SSCMode_DLIF_Msk,          /**< Status 
 223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_SSCMode_TSIF_Msk,      /**< Status
 224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             event *
 225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_SSCMode_TBIF_Msk,    /**< Status 
 226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             event *
 227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_RIF_Msk,             /**< Status 
 228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_SSCMode_AIF_Msk, /**< Status 
 229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             receive
 230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_SSCMode_BRGIF_Msk/**< Status 
 231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                                                             generat
 232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_STATUS_FLAG_t;
 233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Defines input frequency sources for slave select signal delay configuration.
 236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY
 238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPDIV = 0x0UL, /**< Output of PDIV divider: FPDIV */
 240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FPPP  = 0x1UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< P
 241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FSCLK = 0x2UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos, /**< S
 242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_FMCLK = 0x3UL << USIC_CH_PCR_SSCMode_CTQSEL1_Pos  /**< M
 243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_FREQ_SLAVE_SELECT_DELAY_t;
 244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Define data and clock input stages
 247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INPUT
 249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN0 = 0UL,         /**< Data input stage 0 */ 
 251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SCLKIN = 1UL, /**< Clock input stage */
 252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_SLAVE_SELIN = 2UL,  /**< Slave select input stage */
 253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN1 = 3UL,         /**< Data input stage 1 */
 254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN2 = 4UL,         /**< Data input stage 2 */
 255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INPUT_DIN3 = 5UL          /**< Data input stage 3 */
 256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_INPUT_t;
 257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Define SPI data transfer mode
 260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_MODE
 262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD = 0UL,            /**< SPI standard full duplex mode */ 
 264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_STANDARD_HALFDUPLEX = 4UL, /**< SPI standard half duplex mode */ 
 265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_DUAL= 6UL,                 /**< SPI half duplex mode with dual data lines */ 
 266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_MODE_QUAD= 7UL                  /**< SPI half duplex mode with quad data lines */
 267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_MODE_t;
 268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock passive level
 272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL
 274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 0, delay disabled */
 276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 1, delay disabled */
 278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 0, delay enabled */
 280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   /**< Passive clock level 1, delay enabled */
 282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_ENABLED  = XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_L
 283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t;
 284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI Baudrate Generator shift clock output
 287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** */
 288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT
 289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK,  /**< Baudrate 
 291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1  = XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_DX1   /**< Clock obta
 292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t;
 293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * SPI channel interrupt node pointers
 296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef enum XMC_SPI_CH_INTERRUPT_NODE_POINTER
 298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSM
 301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIV
 302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERN
 303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOC
 304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_INTERRUPT_NODE_POINTER_t;
 305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * DATA STRUCTURES
 308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** ***************************************************************************************************
 309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Structure for initializing SPI channel.
 312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** typedef struct XMC_SPI_CH_CONFIG
 314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   uint32_t baudrate;							  /**< Module baud rate for communication */
 316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_BUS_MODE_t bus_mode;                 /**< Bus mode: Master/Slave */
 317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_SLAVE_SEL_MSLS_INV_t selo_inversion; /**< Enable inversion of Slave select signal rela
 318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                                                        MSLS signal  */
 319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;          /**< Enable parity check for transmit and receive
 320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** } XMC_SPI_CH_CONFIG_t;
 321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**************************************************************************************************
 323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * API PROTOTYPES
 324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  **************************************************************************************************
 325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #ifdef __cplusplus
 327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** extern "C" {
 328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** #endif
 329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param config pointer to constant SPI channel configuration data structure.\n
 333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *               Refer data structure @ref XMC_SPI_CH_CONFIG_t for detail.
 334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Initializes the selected SPI \a channel with the \a config structure.\n\n
 339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Enable SPI channel by calling XMC_USIC_CH_Enable() and then configures
 340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <ul>
 341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Baudrate,</li>
 342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Passive data level as active high,</li>
 343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Shift control signal as active high,</li>
 344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Frame length as 64U,</li>
 345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Word length as 8U,</li>
 346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable Hardware port control mode,</li>
 347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable transmission of data TDV(Transmit data valid) bit is set to 1,</li>
 348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable invalidation of data in TBUF once loaded into shift register,</li>
 349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Parity mode settings</li>
 350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * </ul>
 351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * And if master mode is selected,
 352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <ul>
 353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enables MSLS signal generation,</li>
 354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>configures slave selection as normal mode,</li>
 355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Set polarity for the Slave signal,</li>
 356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * </ul>
 358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config);
 360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the selected USIC channel to operate in SPI mode, by setting CCR.MODE bits.\n\n
 368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * It should be executed after XMC_SPI_CH_Init() during initialization. By invoking XMC_SPI_CH_Stop
 369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * to IDLE state. Call XMC_SPI_CH_Start() to set the SPI mode again, as needed later in the program
 370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
 375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   /* USIC channel in SPI mode */
 377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** }
 379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for stopping is processed
 384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the USIC channel is successfully put to IDLE mode. \n
 385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_BUSY- If the USIC channel is busy transmitting data.
 386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the selected SPI channel to IDLE mode, by clearing CCR.MODE bits.\n\n
 389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * After calling XMC_SPI_CH_Stop, channel is IDLE mode. So no communication is supported. XMC_SPI_C
 390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * invoked to start the communication again.
 391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Start()
 394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel);
 396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param rate Bus speed in bits per second
 400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return XMC_SPI_CH_STATUS_t Status of the SPI driver after the request for setting baudrate is p
 402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_OK- If the baudrate is successfully changed. \n
 403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *        XMC_SPI_CH_STATUS_ERROR- If the new baudrate value is out of range.
 404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Sets the bus speed in bits per second
 407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate);
 412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param slave Slave select signal.\n
 416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ref XMC_SPI_CH_SLAVE_SELECT_t for valid values.
 417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Enable the selected slave signal by setting PCR.SELO bits.\n\n
 422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Each slave is connected with one slave select signal. This is not configured in XMC_SPI_CH_Init(
 423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() with required \a slave to to start the communication. After finis
 424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * communication XMC_SPI_CH_DisableSlaveSelect() can be invoked to disable the slaves.
 425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableSlaveSelect()
 428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant ponter to XMC_USIC_CH_t, pointing to the USIC channel base address.
 433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Disable all the slave signals by clearing PCR.SELO bits.\n\n
 438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect() has to be invoked to start the communication with the desired sla
 439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableSlaveSelect()
 442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel);
 444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. \n\n
 454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * By enabling this the direction of the data pin is updated by hardware itself. Before transmittin
 455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * mode to ensure the proper communication.
 456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Transmit()
 459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE
 461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****                   (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** }
 465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param data Data to be transmitted
 469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.
 471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Puts the data into FIFO, if FIFO mode is enabled or else into standard buffer, by setting the pr
 476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * In Dual and Quad modes,  hardware port control(CCR.HPCEN) mode is enabled. By enabling this the 
 477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * pin is updated by hardware itself. TCI(Transmit Control Information) allows dynamic control of b
 478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * and pin direction during data transfers by writing to SCTR.DSM and SCTR.HPCDIR bit fields. To su
 479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * update, TCSR.HPCMD(Hardware Port control) will be enabled during the initialization using XMC_SP
 480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 489:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param mode Communication mode of the SPI, based on this mode TCI(Transmit control information)i
 490:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *             Refer @ref XMC_SPI_CH_MODE_t for valid values.      
 491:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 492:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 493:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 494:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 495:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Transmits a dummy data(FFFFH) to provide clock for slave and receives the data from the slave.\n
 496:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Receive() receives the data and places it into buffer based on the FIFO selection. Af
 497:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be invoked to read the data from the buffers.
 498:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 499:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 500:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedDaa()
 501:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 502:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
 503:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 504:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   /* Transmit dummy data */
 505:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 506:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** }
 507:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 508:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 509:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 510:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 511:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return uint16_t Data read from the receive buffer.
 512:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 513:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 514:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Reads data from the receive buffer based on the FIFO selection.\n\n
 515:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Invocation of XMC_SPI_CH_Receive() receives the data and place it into receive buffer. After rec
 516:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetReceivedData() can be used to read the data from the buffer.
 517:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * 
 518:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 519:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_Receive()
 520:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 521:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 522:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 523:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 524:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 525:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 526:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 527:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 528:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 529:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the order of data transfer from LSB to MSB, by clearing SCTR.SDIR bit.\n\n
 530:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * This is typically based on the slave settings. Invoke XMC_SPI_CH_SetBitOrderLsbFirst() to set di
 531:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * the program.
 532:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 533:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 534:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderMsbFirst()
 535:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 536:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderLsbFirst(XMC_USIC_CH_t *const channel)
 537:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 538:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   channel->SCTR &= (uint32_t)~USIC_CH_SCTR_SDIR_Msk;
 539:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** }
 540:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 541:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 542:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 543:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 544:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 545:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 546:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 547:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Set the order of data transfer from MSB to LSB, by setting SCTR.SDIR bit.\n\n
 548:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * This is typically based on the slave settings. This is not set during XMC_SPI_CH_Init(). 
 549:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Invoke XMC_SPI_CH_SetBitOrderMsbFirst() to set direction as needed in the program.
 550:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 551:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 552:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_SetBitOrderLsbFirst()
 553:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 554:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
 555:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 556:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 557:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** }
 558:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 559:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 560:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 561:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param event Protocol events which have to be enabled.
 562:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 563:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *              as input.
 564:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 565:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 566:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 567:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 568:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Enables the SPI protocol specific events, by configuring PCR register.\n\n
 569:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Events can be enabled as needed using XMC_SPI_CH_EnableEvent(). 
 570:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent() can be used to disable the events.
 571:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 572:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 573:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_DisableEvent()
 574:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 575:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 576:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 577:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 578:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 579:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param event Protocol events which have to be disabled.
 580:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_EVENT_t for valid values. <b>OR</b> combinations of these enum i
 581:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *              as input.
 582:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 583:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 584:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 585:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 586:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Disables the SPI protocol specific events, by configuring PCR register.\n\n
 587:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * After disabling the events, XMC_SPI_CH_EnableEvent() has to be invoked to re-enable the events.
 588:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 589:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 590:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_EnableEvent()
 591:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 592:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 593:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 594:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 595:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 596:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 597:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return uint32_t Status of SPI protocol events.
 598:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 599:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 600:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Returns the status of the events, by reading PSR register.\n\n
 601:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * This indicates the status of the all the events, for SPI communication. 
 602:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 603:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 604:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_ClearStatusFlag()
 605:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 606:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE uint32_t XMC_SPI_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 607:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 608:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   return channel->PSR_SSCMode;
 609:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** }
 610:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** 
 611:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** /**
 612:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param channel A constant pointer to XMC_USIC_CH_t, pointing to the USIC channel base address.
 613:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @param flag Protocol event status to be cleared for detection of next occurence.
 614:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *              Refer @ XMC_SPI_CH_STATUS_FLAG_t for valid values. <b>OR</b> combinations of these 
 615:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *              as input.
 616:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * @return None
 617:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 618:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Description:</b><br>
 619:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * Clears the events specified, by setting PSCR register.\n\n
 620:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * During communication the events occurred have to be cleared to detect their next occurence.\n
 621:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * e.g: During transmission Transmit buffer event occurs to indicating data word transfer has start
 622:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *       event has to be cleared after transmission of each data word. Otherwise next event cannot 
 623:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  *
 624:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * \par<b>Related APIs:</b><BR>
 625:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  * XMC_SPI_CH_GetStatusFlag()
 626:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****  */
 627:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** __STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 628:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** {
 123              	 .loc 2 628 0
 124              	 .cfi_startproc
 125              	 
 126              	 
 127              	 
 128 0000 80B4     	 push {r7}
 129              	.LCFI12:
 130              	 .cfi_def_cfa_offset 4
 131              	 .cfi_offset 7,-4
 132 0002 83B0     	 sub sp,sp,#12
 133              	.LCFI13:
 134              	 .cfi_def_cfa_offset 16
 135 0004 00AF     	 add r7,sp,#0
 136              	.LCFI14:
 137              	 .cfi_def_cfa_register 7
 138 0006 7860     	 str r0,[r7,#4]
 139 0008 3960     	 str r1,[r7]
 629:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h ****   channel->PSCR |= flag;
 140              	 .loc 2 629 0
 141 000a 7B68     	 ldr r3,[r7,#4]
 142 000c DA6C     	 ldr r2,[r3,#76]
 143 000e 3B68     	 ldr r3,[r7]
 144 0010 1A43     	 orrs r2,r2,r3
 145 0012 7B68     	 ldr r3,[r7,#4]
 146 0014 DA64     	 str r2,[r3,#76]
 630:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_spi.h **** }
 147              	 .loc 2 630 0
 148 0016 0C37     	 adds r7,r7,#12
 149              	.LCFI15:
 150              	 .cfi_def_cfa_offset 4
 151 0018 BD46     	 mov sp,r7
 152              	.LCFI16:
 153              	 .cfi_def_cfa_register 13
 154              	 
 155 001a 5DF8047B 	 ldr r7,[sp],#4
 156              	.LCFI17:
 157              	 .cfi_restore 7
 158              	 .cfi_def_cfa_offset 0
 159 001e 7047     	 bx lr
 160              	 .cfi_endproc
 161              	.LFE222:
 163              	 .section .text.XMC_SPI_CH_Init,"ax",%progbits
 164              	 .align 2
 165              	 .global XMC_SPI_CH_Init
 166              	 .thumb
 167              	 .thumb_func
 169              	XMC_SPI_CH_Init:
 170              	.LFB250:
 171              	 .file 3 "../Libraries/XMCLib/src/xmc_spi.c"
   1:../Libraries/XMCLib/src/xmc_spi.c **** /**
   2:../Libraries/XMCLib/src/xmc_spi.c ****  * @file xmc_spi.c
   3:../Libraries/XMCLib/src/xmc_spi.c ****  * @date 2015-11-04
   4:../Libraries/XMCLib/src/xmc_spi.c ****  *
   5:../Libraries/XMCLib/src/xmc_spi.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc_spi.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc_spi.c ****  *
   9:../Libraries/XMCLib/src/xmc_spi.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc_spi.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc_spi.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc_spi.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc_spi.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc_spi.c ****  * 
  18:../Libraries/XMCLib/src/xmc_spi.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc_spi.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc_spi.c ****  * 
  21:../Libraries/XMCLib/src/xmc_spi.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc_spi.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc_spi.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc_spi.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc_spi.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc_spi.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc_spi.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc_spi.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc_spi.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc_spi.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc_spi.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc_spi.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc_spi.c ****  *
  36:../Libraries/XMCLib/src/xmc_spi.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc_spi.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc_spi.c ****  *
  39:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc_spi.c ****  *      
  42:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_Stop() API for not setting to IDLE the channel if it is busy
  44:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_SetInterwordDelay() implementation in order to gain accuracy <br>
  45:../Libraries/XMCLib/src/xmc_spi.c ****  *     
  46:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Removed GetDriverVersion API <br>
  48:../Libraries/XMCLib/src/xmc_spi.c ****  *
  49:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-09-01:
  50:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified XMC_SPI_CH_EnableEvent() and XMC_SPI_CH_DisableEvent() for supporting multiple ev
  51:../Libraries/XMCLib/src/xmc_spi.c ****  *
  52:../Libraries/XMCLib/src/xmc_spi.c ****  * 2015-11-04: 
  53:../Libraries/XMCLib/src/xmc_spi.c ****  *     - Modified the check of XMC_USIC_CH_GetTransmitBufferStatus() in the XMC_SPI_CH_Transmit() f
  54:../Libraries/XMCLib/src/xmc_spi.c ****  * @endcond 
  55:../Libraries/XMCLib/src/xmc_spi.c ****  *
  56:../Libraries/XMCLib/src/xmc_spi.c ****  */
  57:../Libraries/XMCLib/src/xmc_spi.c **** /**
  58:../Libraries/XMCLib/src/xmc_spi.c ****  *
  59:../Libraries/XMCLib/src/xmc_spi.c ****  * @brief SPI driver for XMC microcontroller family
  60:../Libraries/XMCLib/src/xmc_spi.c ****  *
  61:../Libraries/XMCLib/src/xmc_spi.c ****  */
  62:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  63:../Libraries/XMCLib/src/xmc_spi.c ****  * HEADER FILES
  64:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  65:../Libraries/XMCLib/src/xmc_spi.c **** 
  66:../Libraries/XMCLib/src/xmc_spi.c **** #include <xmc_scu.h>
  67:../Libraries/XMCLib/src/xmc_spi.c **** #include <xmc_spi.h>
  68:../Libraries/XMCLib/src/xmc_spi.c **** 
  69:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  70:../Libraries/XMCLib/src/xmc_spi.c ****  * MACROS
  71:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  72:../Libraries/XMCLib/src/xmc_spi.c **** #define XMC_SPI_CH_OVERSAMPLING (2UL)
  73:../Libraries/XMCLib/src/xmc_spi.c **** 
  74:../Libraries/XMCLib/src/xmc_spi.c **** /**************************************************************************************************
  75:../Libraries/XMCLib/src/xmc_spi.c ****  * API IMPLEMENTATION
  76:../Libraries/XMCLib/src/xmc_spi.c ****  **************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_spi.c ****  
  78:../Libraries/XMCLib/src/xmc_spi.c **** /* Initializes the selected SPI channel with the config structure. */
  79:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
  80:../Libraries/XMCLib/src/xmc_spi.c **** {
 172              	 .loc 3 80 0
 173              	 .cfi_startproc
 174              	 
 175              	 
 176 0000 80B5     	 push {r7,lr}
 177              	.LCFI18:
 178              	 .cfi_def_cfa_offset 8
 179              	 .cfi_offset 7,-8
 180              	 .cfi_offset 14,-4
 181 0002 82B0     	 sub sp,sp,#8
 182              	.LCFI19:
 183              	 .cfi_def_cfa_offset 16
 184 0004 00AF     	 add r7,sp,#0
 185              	.LCFI20:
 186              	 .cfi_def_cfa_register 7
 187 0006 7860     	 str r0,[r7,#4]
 188 0008 3960     	 str r1,[r7]
  81:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_USIC_CH_Enable(channel);
 189              	 .loc 3 81 0
 190 000a 7868     	 ldr r0,[r7,#4]
 191 000c FFF7FEFF 	 bl XMC_USIC_CH_Enable
  82:../Libraries/XMCLib/src/xmc_spi.c ****   
  83:../Libraries/XMCLib/src/xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 192              	 .loc 3 83 0
 193 0010 3B68     	 ldr r3,[r7]
 194 0012 1B79     	 ldrb r3,[r3,#4]
 195 0014 002B     	 cmp r3,#0
 196 0016 06D1     	 bne .L6
  84:../Libraries/XMCLib/src/xmc_spi.c ****   {
  85:../Libraries/XMCLib/src/xmc_spi.c ****     /* Configure baud rate */
  86:../Libraries/XMCLib/src/xmc_spi.c ****     (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 197              	 .loc 3 86 0
 198 0018 3B68     	 ldr r3,[r7]
 199 001a 1B68     	 ldr r3,[r3]
 200 001c 7868     	 ldr r0,[r7,#4]
 201 001e 1946     	 mov r1,r3
 202 0020 0222     	 movs r2,#2
 203 0022 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 204              	.L6:
  87:../Libraries/XMCLib/src/xmc_spi.c ****   }
  88:../Libraries/XMCLib/src/xmc_spi.c ****   
  89:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of USIC Shift Control */
  90:../Libraries/XMCLib/src/xmc_spi.c ****   /* Transmission Mode (TRM) = 1  */
  91:../Libraries/XMCLib/src/xmc_spi.c ****   /* Passive Data Level (PDL) = 1 */
  92:../Libraries/XMCLib/src/xmc_spi.c ****   channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 205              	 .loc 3 92 0
 206 0026 7B68     	 ldr r3,[r7,#4]
 207 0028 0E4A     	 ldr r2,.L8
 208 002a 5A63     	 str r2,[r3,#52]
  93:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x1UL << USIC_CH_SCTR_TRM_Pos) |
  94:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x3fUL << USIC_CH_SCTR_FLE_Pos)|
  95:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x7UL << USIC_CH_SCTR_WLE_Pos);
  96:../Libraries/XMCLib/src/xmc_spi.c **** 
  97:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of USIC Transmit Control/Status Register */
  98:../Libraries/XMCLib/src/xmc_spi.c ****   /* TBUF Data Enable (TDEN) = 1 */
  99:../Libraries/XMCLib/src/xmc_spi.c ****   /* TBUF Data Single Shot Mode (TDSSM) = 1 */
 100:../Libraries/XMCLib/src/xmc_spi.c ****   channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 209              	 .loc 3 100 0
 210 002c 7B68     	 ldr r3,[r7,#4]
 211 002e 4FF4A262 	 mov r2,#1296
 212 0032 9A63     	 str r2,[r3,#56]
 101:../Libraries/XMCLib/src/xmc_spi.c ****                   (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
 102:../Libraries/XMCLib/src/xmc_spi.c ****                   USIC_CH_TCSR_TDSSM_Msk);
 103:../Libraries/XMCLib/src/xmc_spi.c **** 
 104:../Libraries/XMCLib/src/xmc_spi.c ****   if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 213              	 .loc 3 104 0
 214 0034 3B68     	 ldr r3,[r7]
 215 0036 1B79     	 ldrb r3,[r3,#4]
 216 0038 002B     	 cmp r3,#0
 217 003a 07D1     	 bne .L7
 105:../Libraries/XMCLib/src/xmc_spi.c ****   {
 106:../Libraries/XMCLib/src/xmc_spi.c ****     /* Configuration of Protocol Control Register */
 107:../Libraries/XMCLib/src/xmc_spi.c ****     channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 108:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 109:../Libraries/XMCLib/src/xmc_spi.c ****                            (uint32_t)config->selo_inversion |
 218              	 .loc 3 109 0
 219 003c 3B68     	 ldr r3,[r7]
 220 003e 5B79     	 ldrb r3,[r3,#5]
 107:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_SELCTR_Msk |
 221              	 .loc 3 107 0
 222 0040 43F00B03 	 orr r3,r3,#11
 223 0044 DBB2     	 uxtb r3,r3
 224 0046 1A46     	 mov r2,r3
 225 0048 7B68     	 ldr r3,[r7,#4]
 226 004a DA63     	 str r2,[r3,#60]
 227              	.L7:
 110:../Libraries/XMCLib/src/xmc_spi.c ****                            USIC_CH_PCR_SSCMode_FEM_Msk);
 111:../Libraries/XMCLib/src/xmc_spi.c ****   }
 112:../Libraries/XMCLib/src/xmc_spi.c **** 
 113:../Libraries/XMCLib/src/xmc_spi.c ****   /* Clear protocol status */
 114:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PSCR = 0xFFFFFFFFUL;
 228              	 .loc 3 114 0
 229 004c 7B68     	 ldr r3,[r7,#4]
 230 004e 4FF0FF32 	 mov r2,#-1
 231 0052 DA64     	 str r2,[r3,#76]
 115:../Libraries/XMCLib/src/xmc_spi.c **** 
 116:../Libraries/XMCLib/src/xmc_spi.c ****   /* Set parity settings */
 117:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR = (uint32_t)config->parity_mode;
 232              	 .loc 3 117 0
 233 0054 3B68     	 ldr r3,[r7]
 234 0056 DB88     	 ldrh r3,[r3,#6]
 235 0058 1A46     	 mov r2,r3
 236 005a 7B68     	 ldr r3,[r7,#4]
 237 005c 1A64     	 str r2,[r3,#64]
 118:../Libraries/XMCLib/src/xmc_spi.c **** }
 238              	 .loc 3 118 0
 239 005e 0837     	 adds r7,r7,#8
 240              	.LCFI21:
 241              	 .cfi_def_cfa_offset 8
 242 0060 BD46     	 mov sp,r7
 243              	.LCFI22:
 244              	 .cfi_def_cfa_register 13
 245              	 
 246 0062 80BD     	 pop {r7,pc}
 247              	.L9:
 248              	 .align 2
 249              	.L8:
 250 0064 02013F07 	 .word 121569538
 251              	 .cfi_endproc
 252              	.LFE250:
 254              	 .section .text.XMC_SPI_CH_SetBaudrate,"ax",%progbits
 255              	 .align 2
 256              	 .global XMC_SPI_CH_SetBaudrate
 257              	 .thumb
 258              	 .thumb_func
 260              	XMC_SPI_CH_SetBaudrate:
 261              	.LFB251:
 119:../Libraries/XMCLib/src/xmc_spi.c **** 
 120:../Libraries/XMCLib/src/xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_SetBaudrate(XMC_USIC_CH_t *const channel, const uint32_t rate)
 121:../Libraries/XMCLib/src/xmc_spi.c **** {
 262              	 .loc 3 121 0
 263              	 .cfi_startproc
 264              	 
 265              	 
 266 0000 80B5     	 push {r7,lr}
 267              	.LCFI23:
 268              	 .cfi_def_cfa_offset 8
 269              	 .cfi_offset 7,-8
 270              	 .cfi_offset 14,-4
 271 0002 84B0     	 sub sp,sp,#16
 272              	.LCFI24:
 273              	 .cfi_def_cfa_offset 24
 274 0004 00AF     	 add r7,sp,#0
 275              	.LCFI25:
 276              	 .cfi_def_cfa_register 7
 277 0006 7860     	 str r0,[r7,#4]
 278 0008 3960     	 str r1,[r7]
 122:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_STATUS_t status;
 123:../Libraries/XMCLib/src/xmc_spi.c ****   
 124:../Libraries/XMCLib/src/xmc_spi.c ****   status = XMC_SPI_CH_STATUS_ERROR;
 279              	 .loc 3 124 0
 280 000a 0123     	 movs r3,#1
 281 000c FB73     	 strb r3,[r7,#15]
 125:../Libraries/XMCLib/src/xmc_spi.c ****   
 126:../Libraries/XMCLib/src/xmc_spi.c ****   if (rate <= (XMC_SCU_CLOCK_GetPeripheralClockFrequency() >> 1U))
 282              	 .loc 3 126 0
 283 000e FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 284 0012 0346     	 mov r3,r0
 285 0014 5A08     	 lsrs r2,r3,#1
 286 0016 3B68     	 ldr r3,[r7]
 287 0018 9A42     	 cmp r2,r3
 288 001a 09D3     	 bcc .L11
 127:../Libraries/XMCLib/src/xmc_spi.c ****   {
 128:../Libraries/XMCLib/src/xmc_spi.c ****     if (XMC_USIC_CH_SetBaudrate(channel, rate, XMC_SPI_CH_OVERSAMPLING) == XMC_USIC_CH_STATUS_OK)
 289              	 .loc 3 128 0
 290 001c 7868     	 ldr r0,[r7,#4]
 291 001e 3968     	 ldr r1,[r7]
 292 0020 0222     	 movs r2,#2
 293 0022 FFF7FEFF 	 bl XMC_USIC_CH_SetBaudrate
 294 0026 0346     	 mov r3,r0
 295 0028 002B     	 cmp r3,#0
 296 002a 01D1     	 bne .L11
 129:../Libraries/XMCLib/src/xmc_spi.c ****     {
 130:../Libraries/XMCLib/src/xmc_spi.c ****       status = XMC_SPI_CH_STATUS_OK;
 297              	 .loc 3 130 0
 298 002c 0023     	 movs r3,#0
 299 002e FB73     	 strb r3,[r7,#15]
 300              	.L11:
 131:../Libraries/XMCLib/src/xmc_spi.c ****     }
 132:../Libraries/XMCLib/src/xmc_spi.c ****   } 
 133:../Libraries/XMCLib/src/xmc_spi.c ****   return status;
 301              	 .loc 3 133 0
 302 0030 FB7B     	 ldrb r3,[r7,#15]
 134:../Libraries/XMCLib/src/xmc_spi.c **** }
 303              	 .loc 3 134 0
 304 0032 1846     	 mov r0,r3
 305 0034 1037     	 adds r7,r7,#16
 306              	.LCFI26:
 307              	 .cfi_def_cfa_offset 8
 308 0036 BD46     	 mov sp,r7
 309              	.LCFI27:
 310              	 .cfi_def_cfa_register 13
 311              	 
 312 0038 80BD     	 pop {r7,pc}
 313              	 .cfi_endproc
 314              	.LFE251:
 316 003a 00BF     	 .section .text.XMC_SPI_CH_EnableSlaveSelect,"ax",%progbits
 317              	 .align 2
 318              	 .global XMC_SPI_CH_EnableSlaveSelect
 319              	 .thumb
 320              	 .thumb_func
 322              	XMC_SPI_CH_EnableSlaveSelect:
 323              	.LFB252:
 135:../Libraries/XMCLib/src/xmc_spi.c **** 
 136:../Libraries/XMCLib/src/xmc_spi.c **** /* Enable the selected slave signal by setting (SELO) bits in PCR register. */
 137:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t sla
 138:../Libraries/XMCLib/src/xmc_spi.c **** {
 324              	 .loc 3 138 0
 325              	 .cfi_startproc
 326              	 
 327              	 
 328              	 
 329 0000 80B4     	 push {r7}
 330              	.LCFI28:
 331              	 .cfi_def_cfa_offset 4
 332              	 .cfi_offset 7,-4
 333 0002 83B0     	 sub sp,sp,#12
 334              	.LCFI29:
 335              	 .cfi_def_cfa_offset 16
 336 0004 00AF     	 add r7,sp,#0
 337              	.LCFI30:
 338              	 .cfi_def_cfa_register 7
 339 0006 7860     	 str r0,[r7,#4]
 340 0008 3960     	 str r1,[r7]
 139:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of Protocol Control Register */
 140:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 341              	 .loc 3 140 0
 342 000a 7B68     	 ldr r3,[r7,#4]
 343 000c DB6B     	 ldr r3,[r3,#60]
 344 000e 23F47F02 	 bic r2,r3,#16711680
 345 0012 7B68     	 ldr r3,[r7,#4]
 346 0014 DA63     	 str r2,[r3,#60]
 141:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode |= (uint32_t)slave;
 347              	 .loc 3 141 0
 348 0016 7B68     	 ldr r3,[r7,#4]
 349 0018 DA6B     	 ldr r2,[r3,#60]
 350 001a 3B68     	 ldr r3,[r7]
 351 001c 1A43     	 orrs r2,r2,r3
 352 001e 7B68     	 ldr r3,[r7,#4]
 353 0020 DA63     	 str r2,[r3,#60]
 142:../Libraries/XMCLib/src/xmc_spi.c **** }
 354              	 .loc 3 142 0
 355 0022 0C37     	 adds r7,r7,#12
 356              	.LCFI31:
 357              	 .cfi_def_cfa_offset 4
 358 0024 BD46     	 mov sp,r7
 359              	.LCFI32:
 360              	 .cfi_def_cfa_register 13
 361              	 
 362 0026 5DF8047B 	 ldr r7,[sp],#4
 363              	.LCFI33:
 364              	 .cfi_restore 7
 365              	 .cfi_def_cfa_offset 0
 366 002a 7047     	 bx lr
 367              	 .cfi_endproc
 368              	.LFE252:
 370              	 .section .text.XMC_SPI_CH_DisableSlaveSelect,"ax",%progbits
 371              	 .align 2
 372              	 .global XMC_SPI_CH_DisableSlaveSelect
 373              	 .thumb
 374              	 .thumb_func
 376              	XMC_SPI_CH_DisableSlaveSelect:
 377              	.LFB253:
 143:../Libraries/XMCLib/src/xmc_spi.c **** 
 144:../Libraries/XMCLib/src/xmc_spi.c **** /* Disable the slave signals by clearing (SELO) bits in PCR register. */
 145:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_DisableSlaveSelect(XMC_USIC_CH_t *const channel)
 146:../Libraries/XMCLib/src/xmc_spi.c **** {
 378              	 .loc 3 146 0
 379              	 .cfi_startproc
 380              	 
 381              	 
 382 0000 80B5     	 push {r7,lr}
 383              	.LCFI34:
 384              	 .cfi_def_cfa_offset 8
 385              	 .cfi_offset 7,-8
 386              	 .cfi_offset 14,-4
 387 0002 82B0     	 sub sp,sp,#8
 388              	.LCFI35:
 389              	 .cfi_def_cfa_offset 16
 390 0004 00AF     	 add r7,sp,#0
 391              	.LCFI36:
 392              	 .cfi_def_cfa_register 7
 393 0006 7860     	 str r0,[r7,#4]
 147:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_MSLS);
 394              	 .loc 3 147 0
 395 0008 7868     	 ldr r0,[r7,#4]
 396 000a 0121     	 movs r1,#1
 397 000c FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
 148:../Libraries/XMCLib/src/xmc_spi.c ****   
 149:../Libraries/XMCLib/src/xmc_spi.c ****   /* Configuration of Protocol Control Register */
 150:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 398              	 .loc 3 150 0
 399 0010 7B68     	 ldr r3,[r7,#4]
 400 0012 DB6B     	 ldr r3,[r3,#60]
 401 0014 23F47F02 	 bic r2,r3,#16711680
 402 0018 7B68     	 ldr r3,[r7,#4]
 403 001a DA63     	 str r2,[r3,#60]
 151:../Libraries/XMCLib/src/xmc_spi.c **** }
 404              	 .loc 3 151 0
 405 001c 0837     	 adds r7,r7,#8
 406              	.LCFI37:
 407              	 .cfi_def_cfa_offset 8
 408 001e BD46     	 mov sp,r7
 409              	.LCFI38:
 410              	 .cfi_def_cfa_register 13
 411              	 
 412 0020 80BD     	 pop {r7,pc}
 413              	 .cfi_endproc
 414              	.LFE253:
 416 0022 00BF     	 .section .text.XMC_SPI_CH_Transmit,"ax",%progbits
 417              	 .align 2
 418              	 .global XMC_SPI_CH_Transmit
 419              	 .thumb
 420              	 .thumb_func
 422              	XMC_SPI_CH_Transmit:
 423              	.LFB254:
 152:../Libraries/XMCLib/src/xmc_spi.c **** 
 153:../Libraries/XMCLib/src/xmc_spi.c **** /* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the pr
 154:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t
 155:../Libraries/XMCLib/src/xmc_spi.c **** {
 424              	 .loc 3 155 0
 425              	 .cfi_startproc
 426              	 
 427              	 
 428 0000 80B5     	 push {r7,lr}
 429              	.LCFI39:
 430              	 .cfi_def_cfa_offset 8
 431              	 .cfi_offset 7,-8
 432              	 .cfi_offset 14,-4
 433 0002 82B0     	 sub sp,sp,#8
 434              	.LCFI40:
 435              	 .cfi_def_cfa_offset 16
 436 0004 00AF     	 add r7,sp,#0
 437              	.LCFI41:
 438              	 .cfi_def_cfa_register 7
 439 0006 7860     	 str r0,[r7,#4]
 440 0008 0B46     	 mov r3,r1
 441 000a 7B80     	 strh r3,[r7,#2]
 442 000c 1346     	 mov r3,r2
 443 000e 7B70     	 strb r3,[r7,#1]
 156:../Libraries/XMCLib/src/xmc_spi.c **** 
 157:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 444              	 .loc 3 157 0
 445 0010 7B68     	 ldr r3,[r7,#4]
 446 0012 1B6C     	 ldr r3,[r3,#64]
 447 0014 23F0C002 	 bic r2,r3,#192
 158:../Libraries/XMCLib/src/xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 448              	 .loc 3 158 0
 449 0018 7B78     	 ldrb r3,[r7,#1]
 450 001a 9B01     	 lsls r3,r3,#6
 451 001c DBB2     	 uxtb r3,r3
 157:../Libraries/XMCLib/src/xmc_spi.c ****                  (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 452              	 .loc 3 157 0
 453 001e 1A43     	 orrs r2,r2,r3
 454 0020 7B68     	 ldr r3,[r7,#4]
 455 0022 1A64     	 str r2,[r3,#64]
 159:../Libraries/XMCLib/src/xmc_spi.c **** 
 160:../Libraries/XMCLib/src/xmc_spi.c **** 
 161:../Libraries/XMCLib/src/xmc_spi.c ****   /* Check FIFO size */
 162:../Libraries/XMCLib/src/xmc_spi.c ****   if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 456              	 .loc 3 162 0
 457 0024 7B68     	 ldr r3,[r7,#4]
 458 0026 D3F80831 	 ldr r3,[r3,#264]
 459 002a 03F0E063 	 and r3,r3,#117440512
 460 002e 002B     	 cmp r3,#0
 461 0030 12D1     	 bne .L16
 163:../Libraries/XMCLib/src/xmc_spi.c ****   {
 164:../Libraries/XMCLib/src/xmc_spi.c ****     while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) == (uint32_t)XMC_USIC_CH_TBUF_STAT
 462              	 .loc 3 164 0
 463 0032 00BF     	 nop
 464              	.L17:
 465              	 .loc 3 164 0 is_stmt 0 discriminator 1
 466 0034 7868     	 ldr r0,[r7,#4]
 467 0036 FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 468 003a 0346     	 mov r3,r0
 469 003c 802B     	 cmp r3,#128
 470 003e F9D0     	 beq .L17
 165:../Libraries/XMCLib/src/xmc_spi.c ****     {
 166:../Libraries/XMCLib/src/xmc_spi.c ****     }
 167:../Libraries/XMCLib/src/xmc_spi.c ****   
 168:../Libraries/XMCLib/src/xmc_spi.c ****     XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION
 471              	 .loc 3 168 0 is_stmt 1
 472 0040 7868     	 ldr r0,[r7,#4]
 473 0042 4FF40051 	 mov r1,#8192
 474 0046 FFF7FEFF 	 bl XMC_SPI_CH_ClearStatusFlag
 169:../Libraries/XMCLib/src/xmc_spi.c ****   
 170:../Libraries/XMCLib/src/xmc_spi.c ****     channel->TBUF[mode] = data;
 475              	 .loc 3 170 0
 476 004a 7A78     	 ldrb r2,[r7,#1]
 477 004c 7988     	 ldrh r1,[r7,#2]
 478 004e 7B68     	 ldr r3,[r7,#4]
 479 0050 2032     	 adds r2,r2,#32
 480 0052 43F82210 	 str r1,[r3,r2,lsl#2]
 481 0056 05E0     	 b .L15
 482              	.L16:
 171:../Libraries/XMCLib/src/xmc_spi.c ****   }
 172:../Libraries/XMCLib/src/xmc_spi.c ****   else
 173:../Libraries/XMCLib/src/xmc_spi.c ****   {
 174:../Libraries/XMCLib/src/xmc_spi.c ****     channel->IN[mode] = data;
 483              	 .loc 3 174 0
 484 0058 7A78     	 ldrb r2,[r7,#1]
 485 005a 7988     	 ldrh r1,[r7,#2]
 486 005c 7B68     	 ldr r3,[r7,#4]
 487 005e 6032     	 adds r2,r2,#96
 488 0060 43F82210 	 str r1,[r3,r2,lsl#2]
 489              	.L15:
 175:../Libraries/XMCLib/src/xmc_spi.c ****   }
 176:../Libraries/XMCLib/src/xmc_spi.c **** }
 490              	 .loc 3 176 0
 491 0064 0837     	 adds r7,r7,#8
 492              	.LCFI42:
 493              	 .cfi_def_cfa_offset 8
 494 0066 BD46     	 mov sp,r7
 495              	.LCFI43:
 496              	 .cfi_def_cfa_register 13
 497              	 
 498 0068 80BD     	 pop {r7,pc}
 499              	 .cfi_endproc
 500              	.LFE254:
 502 006a 00BF     	 .section .text.XMC_SPI_CH_GetReceivedData,"ax",%progbits
 503              	 .align 2
 504              	 .global XMC_SPI_CH_GetReceivedData
 505              	 .thumb
 506              	 .thumb_func
 508              	XMC_SPI_CH_GetReceivedData:
 509              	.LFB255:
 177:../Libraries/XMCLib/src/xmc_spi.c **** 
 178:../Libraries/XMCLib/src/xmc_spi.c **** /* Reads the data from the buffers based on the FIFO mode selection. */
 179:../Libraries/XMCLib/src/xmc_spi.c **** uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
 180:../Libraries/XMCLib/src/xmc_spi.c **** {
 510              	 .loc 3 180 0
 511              	 .cfi_startproc
 512              	 
 513              	 
 514              	 
 515 0000 80B4     	 push {r7}
 516              	.LCFI44:
 517              	 .cfi_def_cfa_offset 4
 518              	 .cfi_offset 7,-4
 519 0002 85B0     	 sub sp,sp,#20
 520              	.LCFI45:
 521              	 .cfi_def_cfa_offset 24
 522 0004 00AF     	 add r7,sp,#0
 523              	.LCFI46:
 524              	 .cfi_def_cfa_register 7
 525 0006 7860     	 str r0,[r7,#4]
 181:../Libraries/XMCLib/src/xmc_spi.c ****   uint16_t retval;
 182:../Libraries/XMCLib/src/xmc_spi.c **** 
 183:../Libraries/XMCLib/src/xmc_spi.c ****   /* Check FIFO size */
 184:../Libraries/XMCLib/src/xmc_spi.c ****   if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 526              	 .loc 3 184 0
 527 0008 7B68     	 ldr r3,[r7,#4]
 528 000a D3F80C31 	 ldr r3,[r3,#268]
 529 000e 03F0E063 	 and r3,r3,#117440512
 530 0012 002B     	 cmp r3,#0
 531 0014 03D1     	 bne .L20
 185:../Libraries/XMCLib/src/xmc_spi.c ****   {
 186:../Libraries/XMCLib/src/xmc_spi.c ****     retval = (uint16_t)channel->RBUF;
 532              	 .loc 3 186 0
 533 0016 7B68     	 ldr r3,[r7,#4]
 534 0018 5B6D     	 ldr r3,[r3,#84]
 535 001a FB81     	 strh r3,[r7,#14]
 536 001c 03E0     	 b .L21
 537              	.L20:
 187:../Libraries/XMCLib/src/xmc_spi.c ****   }
 188:../Libraries/XMCLib/src/xmc_spi.c ****   else
 189:../Libraries/XMCLib/src/xmc_spi.c ****   {
 190:../Libraries/XMCLib/src/xmc_spi.c ****     retval = (uint16_t)channel->OUTR;
 538              	 .loc 3 190 0
 539 001e 7B68     	 ldr r3,[r7,#4]
 540 0020 D3F81C31 	 ldr r3,[r3,#284]
 541 0024 FB81     	 strh r3,[r7,#14]
 542              	.L21:
 191:../Libraries/XMCLib/src/xmc_spi.c ****   }
 192:../Libraries/XMCLib/src/xmc_spi.c **** 
 193:../Libraries/XMCLib/src/xmc_spi.c ****   return retval;
 543              	 .loc 3 193 0
 544 0026 FB89     	 ldrh r3,[r7,#14]
 194:../Libraries/XMCLib/src/xmc_spi.c **** }
 545              	 .loc 3 194 0
 546 0028 1846     	 mov r0,r3
 547 002a 1437     	 adds r7,r7,#20
 548              	.LCFI47:
 549              	 .cfi_def_cfa_offset 4
 550 002c BD46     	 mov sp,r7
 551              	.LCFI48:
 552              	 .cfi_def_cfa_register 13
 553              	 
 554 002e 5DF8047B 	 ldr r7,[sp],#4
 555              	.LCFI49:
 556              	 .cfi_restore 7
 557              	 .cfi_def_cfa_offset 0
 558 0032 7047     	 bx lr
 559              	 .cfi_endproc
 560              	.LFE255:
 562              	 .section .text.XMC_SPI_CH_SetInterwordDelay,"ax",%progbits
 563              	 .align 2
 564              	 .global XMC_SPI_CH_SetInterwordDelay
 565              	 .thumb
 566              	 .thumb_func
 568              	XMC_SPI_CH_SetInterwordDelay:
 569              	.LFB256:
 195:../Libraries/XMCLib/src/xmc_spi.c **** 
 196:../Libraries/XMCLib/src/xmc_spi.c **** /* Configures the inter word delay by setting PCR.PCTQ1, PCR.DCTQ1 bit fields. */
 197:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_SetInterwordDelay(XMC_USIC_CH_t *const channel,uint32_t tinterword_delay_us)
 198:../Libraries/XMCLib/src/xmc_spi.c **** {
 570              	 .loc 3 198 0
 571              	 .cfi_startproc
 572              	 
 573              	 
 574 0000 80B5     	 push {r7,lr}
 575              	.LCFI50:
 576              	 .cfi_def_cfa_offset 8
 577              	 .cfi_offset 7,-8
 578              	 .cfi_offset 14,-4
 579 0002 8EB0     	 sub sp,sp,#56
 580              	.LCFI51:
 581              	 .cfi_def_cfa_offset 64
 582 0004 00AF     	 add r7,sp,#0
 583              	.LCFI52:
 584              	 .cfi_def_cfa_register 7
 585 0006 7860     	 str r0,[r7,#4]
 586 0008 3960     	 str r1,[r7]
 199:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t peripheral_clock;
 200:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t pdiv;
 201:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t step;
 202:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t fFD;
 203:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t fpdiv;
 204:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1 = 0U;
 587              	 .loc 3 204 0
 588 000a 0023     	 movs r3,#0
 589 000c FB61     	 str r3,[r7,#28]
 205:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor2 = 32U;
 590              	 .loc 3 205 0
 591 000e 2023     	 movs r3,#32
 592 0010 7B63     	 str r3,[r7,#52]
 206:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_int = 0U;
 593              	 .loc 3 206 0
 594 0012 0023     	 movs r3,#0
 595 0014 3B63     	 str r3,[r7,#48]
 207:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_int_min = 4U;
 596              	 .loc 3 207 0
 597 0016 0423     	 movs r3,#4
 598 0018 FB62     	 str r3,[r7,#44]
 208:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_frac_min =100U;
 599              	 .loc 3 208 0
 600 001a 6423     	 movs r3,#100
 601 001c BB62     	 str r3,[r7,#40]
 209:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor1_frac = 0U;
 602              	 .loc 3 209 0
 603 001e 0023     	 movs r3,#0
 604 0020 7B62     	 str r3,[r7,#36]
 210:../Libraries/XMCLib/src/xmc_spi.c ****   uint32_t divider_factor2_temp = 0U;
 605              	 .loc 3 210 0
 606 0022 0023     	 movs r3,#0
 607 0024 3B62     	 str r3,[r7,#32]
 211:../Libraries/XMCLib/src/xmc_spi.c ****   peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 608              	 .loc 3 211 0
 609 0026 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetPeripheralClockFrequency
 610 002a B861     	 str r0,[r7,#24]
 212:../Libraries/XMCLib/src/xmc_spi.c ****   pdiv = (uint32_t)(channel->BRG & USIC_CH_BRG_PDIV_Msk) >> USIC_CH_BRG_PDIV_Pos;
 611              	 .loc 3 212 0
 612 002c 7B68     	 ldr r3,[r7,#4]
 613 002e 5A69     	 ldr r2,[r3,#20]
 614 0030 3C4B     	 ldr r3,.L30
 615 0032 1340     	 ands r3,r3,r2
 616 0034 1B0C     	 lsrs r3,r3,#16
 617 0036 7B61     	 str r3,[r7,#20]
 213:../Libraries/XMCLib/src/xmc_spi.c ****   step = (uint32_t)(channel->FDR & USIC_CH_FDR_STEP_Msk) >> USIC_CH_FDR_STEP_Pos;
 618              	 .loc 3 213 0
 619 0038 7B68     	 ldr r3,[r7,#4]
 620 003a 1B69     	 ldr r3,[r3,#16]
 621 003c C3F30903 	 ubfx r3,r3,#0,#10
 622 0040 3B61     	 str r3,[r7,#16]
 214:../Libraries/XMCLib/src/xmc_spi.c ****   fFD = (uint32_t)((peripheral_clock >> 10U) * step);
 623              	 .loc 3 214 0
 624 0042 BB69     	 ldr r3,[r7,#24]
 625 0044 9B0A     	 lsrs r3,r3,#10
 626 0046 3A69     	 ldr r2,[r7,#16]
 627 0048 02FB03F3 	 mul r3,r2,r3
 628 004c FB60     	 str r3,[r7,#12]
 215:../Libraries/XMCLib/src/xmc_spi.c ****   fpdiv= fFD/(1U+pdiv);
 629              	 .loc 3 215 0
 630 004e 7B69     	 ldr r3,[r7,#20]
 631 0050 0133     	 adds r3,r3,#1
 632 0052 FA68     	 ldr r2,[r7,#12]
 633 0054 B2FBF3F3 	 udiv r3,r2,r3
 634 0058 BB60     	 str r3,[r7,#8]
 216:../Libraries/XMCLib/src/xmc_spi.c **** 
 217:../Libraries/XMCLib/src/xmc_spi.c ****   if(tinterword_delay_us < (128000000/fpdiv))
 635              	 .loc 3 217 0
 636 005a 334A     	 ldr r2,.L30+4
 637 005c BB68     	 ldr r3,[r7,#8]
 638 005e B2FBF3F2 	 udiv r2,r2,r3
 639 0062 3B68     	 ldr r3,[r7]
 640 0064 9A42     	 cmp r2,r3
 641 0066 46D9     	 bls .L24
 218:../Libraries/XMCLib/src/xmc_spi.c ****   {
 219:../Libraries/XMCLib/src/xmc_spi.c ****     for(divider_factor2_temp = 32U; divider_factor2_temp > 0U; --divider_factor2_temp)
 642              	 .loc 3 219 0
 643 0068 2023     	 movs r3,#32
 644 006a 3B62     	 str r3,[r7,#32]
 645 006c 40E0     	 b .L25
 646              	.L29:
 220:../Libraries/XMCLib/src/xmc_spi.c ****     {
 221:../Libraries/XMCLib/src/xmc_spi.c **** 
 222:../Libraries/XMCLib/src/xmc_spi.c ****       divider_factor1 = (tinterword_delay_us*fpdiv)/(divider_factor2_temp*10000);
 647              	 .loc 3 222 0
 648 006e 3B68     	 ldr r3,[r7]
 649 0070 BA68     	 ldr r2,[r7,#8]
 650 0072 02FB03F2 	 mul r2,r2,r3
 651 0076 3B6A     	 ldr r3,[r7,#32]
 652 0078 42F21071 	 movw r1,#10000
 653 007c 01FB03F3 	 mul r3,r1,r3
 654 0080 B2FBF3F3 	 udiv r3,r2,r3
 655 0084 FB61     	 str r3,[r7,#28]
 223:../Libraries/XMCLib/src/xmc_spi.c ****       divider_factor1_frac = divider_factor1%100U;
 656              	 .loc 3 223 0
 657 0086 FB69     	 ldr r3,[r7,#28]
 658 0088 284A     	 ldr r2,.L30+8
 659 008a A2FB0312 	 umull r1,r2,r2,r3
 660 008e 5209     	 lsrs r2,r2,#5
 661 0090 6421     	 movs r1,#100
 662 0092 01FB02F2 	 mul r2,r1,r2
 663 0096 9B1A     	 subs r3,r3,r2
 664 0098 7B62     	 str r3,[r7,#36]
 224:../Libraries/XMCLib/src/xmc_spi.c **** 
 225:../Libraries/XMCLib/src/xmc_spi.c ****       if(divider_factor1_frac > 50)
 665              	 .loc 3 225 0
 666 009a 7B6A     	 ldr r3,[r7,#36]
 667 009c 322B     	 cmp r3,#50
 668 009e 0ED9     	 bls .L26
 226:../Libraries/XMCLib/src/xmc_spi.c ****       {
 227:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U)+1;
 669              	 .loc 3 227 0
 670 00a0 FB69     	 ldr r3,[r7,#28]
 671 00a2 224A     	 ldr r2,.L30+8
 672 00a4 A2FB0323 	 umull r2,r3,r2,r3
 673 00a8 5B09     	 lsrs r3,r3,#5
 674 00aa 0133     	 adds r3,r3,#1
 675 00ac 3B63     	 str r3,[r7,#48]
 228:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_frac = (divider_factor1_int*100)-divider_factor1;
 676              	 .loc 3 228 0
 677 00ae 3B6B     	 ldr r3,[r7,#48]
 678 00b0 6422     	 movs r2,#100
 679 00b2 02FB03F2 	 mul r2,r2,r3
 680 00b6 FB69     	 ldr r3,[r7,#28]
 681 00b8 D31A     	 subs r3,r2,r3
 682 00ba 7B62     	 str r3,[r7,#36]
 683 00bc 05E0     	 b .L27
 684              	.L26:
 229:../Libraries/XMCLib/src/xmc_spi.c ****       }
 230:../Libraries/XMCLib/src/xmc_spi.c ****       else
 231:../Libraries/XMCLib/src/xmc_spi.c ****       {
 232:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int =  (divider_factor1/100U);
 685              	 .loc 3 232 0
 686 00be FB69     	 ldr r3,[r7,#28]
 687 00c0 1A4A     	 ldr r2,.L30+8
 688 00c2 A2FB0323 	 umull r2,r3,r2,r3
 689 00c6 5B09     	 lsrs r3,r3,#5
 690 00c8 3B63     	 str r3,[r7,#48]
 691              	.L27:
 233:../Libraries/XMCLib/src/xmc_spi.c ****       }
 234:../Libraries/XMCLib/src/xmc_spi.c **** 
 235:../Libraries/XMCLib/src/xmc_spi.c ****       if ((divider_factor1_int < 5U) && (divider_factor1_int > 0) && (divider_factor1_frac < divide
 692              	 .loc 3 235 0
 693 00ca 3B6B     	 ldr r3,[r7,#48]
 694 00cc 042B     	 cmp r3,#4
 695 00ce 0CD8     	 bhi .L28
 696              	 .loc 3 235 0 is_stmt 0 discriminator 1
 697 00d0 3B6B     	 ldr r3,[r7,#48]
 698 00d2 002B     	 cmp r3,#0
 699 00d4 09D0     	 beq .L28
 700              	 .loc 3 235 0 discriminator 2
 701 00d6 7A6A     	 ldr r2,[r7,#36]
 702 00d8 BB6A     	 ldr r3,[r7,#40]
 703 00da 9A42     	 cmp r2,r3
 704 00dc 05D2     	 bcs .L28
 236:../Libraries/XMCLib/src/xmc_spi.c ****       {
 237:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_frac_min = divider_factor1_frac;
 705              	 .loc 3 237 0 is_stmt 1
 706 00de 7B6A     	 ldr r3,[r7,#36]
 707 00e0 BB62     	 str r3,[r7,#40]
 238:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor1_int_min = divider_factor1_int;
 708              	 .loc 3 238 0
 709 00e2 3B6B     	 ldr r3,[r7,#48]
 710 00e4 FB62     	 str r3,[r7,#44]
 239:../Libraries/XMCLib/src/xmc_spi.c ****         divider_factor2= divider_factor2_temp;
 711              	 .loc 3 239 0
 712 00e6 3B6A     	 ldr r3,[r7,#32]
 713 00e8 7B63     	 str r3,[r7,#52]
 714              	.L28:
 219:../Libraries/XMCLib/src/xmc_spi.c ****     {
 715              	 .loc 3 219 0 discriminator 2
 716 00ea 3B6A     	 ldr r3,[r7,#32]
 717 00ec 013B     	 subs r3,r3,#1
 718 00ee 3B62     	 str r3,[r7,#32]
 719              	.L25:
 219:../Libraries/XMCLib/src/xmc_spi.c ****     {
 720              	 .loc 3 219 0 is_stmt 0 discriminator 1
 721 00f0 3B6A     	 ldr r3,[r7,#32]
 722 00f2 002B     	 cmp r3,#0
 723 00f4 BBD1     	 bne .L29
 724              	.L24:
 240:../Libraries/XMCLib/src/xmc_spi.c ****       }
 241:../Libraries/XMCLib/src/xmc_spi.c ****     }
 242:../Libraries/XMCLib/src/xmc_spi.c ****   }
 243:../Libraries/XMCLib/src/xmc_spi.c **** 
 244:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode = (uint32_t)((channel->PCR_SSCMode) & (~(USIC_CH_PCR_SSCMode_DCTQ1_Msk |
 725              	 .loc 3 244 0 is_stmt 1
 726 00f6 7B68     	 ldr r3,[r7,#4]
 727 00f8 DB6B     	 ldr r3,[r3,#60]
 728 00fa 23F4FF53 	 bic r3,r3,#8160
 729 00fe 23F01003 	 bic r3,r3,#16
 245:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 246:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_CTQSEL1_Msk))) 
 247:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint3
 730              	 .loc 3 247 0
 731 0102 FA6A     	 ldr r2,[r7,#44]
 732 0104 013A     	 subs r2,r2,#1
 733 0106 9201     	 lsls r2,r2,#6
 734 0108 D2B2     	 uxtb r2,r2
 246:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor1_int_min - 1) << USIC_CH_PCR_SSCMode_PCTQ1_Pos) & (uint3
 735              	 .loc 3 246 0
 736 010a 1A43     	 orrs r2,r2,r3
 248:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 737              	 .loc 3 248 0
 738 010c 7B6B     	 ldr r3,[r7,#52]
 739 010e 013B     	 subs r3,r3,#1
 740 0110 1B02     	 lsls r3,r3,#8
 741 0112 03F4F853 	 and r3,r3,#7936
 247:../Libraries/XMCLib/src/xmc_spi.c ****                          (((divider_factor2 - 1 ) << USIC_CH_PCR_SSCMode_DCTQ1_Pos) & (uint32_t)USI
 742              	 .loc 3 247 0
 743 0116 1A43     	 orrs r2,r2,r3
 244:../Libraries/XMCLib/src/xmc_spi.c ****                                                                 USIC_CH_PCR_SSCMode_PCTQ1_Msk |
 744              	 .loc 3 244 0
 745 0118 7B68     	 ldr r3,[r7,#4]
 746 011a DA63     	 str r2,[r3,#60]
 249:../Libraries/XMCLib/src/xmc_spi.c **** }
 747              	 .loc 3 249 0
 748 011c 3837     	 adds r7,r7,#56
 749              	.LCFI53:
 750              	 .cfi_def_cfa_offset 8
 751 011e BD46     	 mov sp,r7
 752              	.LCFI54:
 753              	 .cfi_def_cfa_register 13
 754              	 
 755 0120 80BD     	 pop {r7,pc}
 756              	.L31:
 757 0122 00BF     	 .align 2
 758              	.L30:
 759 0124 0000FF03 	 .word 67043328
 760 0128 0020A107 	 .word 128000000
 761 012c 1F85EB51 	 .word 1374389535
 762              	 .cfi_endproc
 763              	.LFE256:
 765              	 .section .text.XMC_SPI_CH_Stop,"ax",%progbits
 766              	 .align 2
 767              	 .global XMC_SPI_CH_Stop
 768              	 .thumb
 769              	 .thumb_func
 771              	XMC_SPI_CH_Stop:
 772              	.LFB257:
 250:../Libraries/XMCLib/src/xmc_spi.c **** 
 251:../Libraries/XMCLib/src/xmc_spi.c **** XMC_SPI_CH_STATUS_t XMC_SPI_CH_Stop(XMC_USIC_CH_t *const channel)
 252:../Libraries/XMCLib/src/xmc_spi.c **** {
 773              	 .loc 3 252 0
 774              	 .cfi_startproc
 775              	 
 776              	 
 777 0000 80B5     	 push {r7,lr}
 778              	.LCFI55:
 779              	 .cfi_def_cfa_offset 8
 780              	 .cfi_offset 7,-8
 781              	 .cfi_offset 14,-4
 782 0002 84B0     	 sub sp,sp,#16
 783              	.LCFI56:
 784              	 .cfi_def_cfa_offset 24
 785 0004 00AF     	 add r7,sp,#0
 786              	.LCFI57:
 787              	 .cfi_def_cfa_register 7
 788 0006 7860     	 str r0,[r7,#4]
 253:../Libraries/XMCLib/src/xmc_spi.c ****   XMC_SPI_CH_STATUS_t status = XMC_SPI_CH_STATUS_OK;
 789              	 .loc 3 253 0
 790 0008 0023     	 movs r3,#0
 791 000a FB73     	 strb r3,[r7,#15]
 254:../Libraries/XMCLib/src/xmc_spi.c **** 
 255:../Libraries/XMCLib/src/xmc_spi.c ****   if (((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_B
 792              	 .loc 3 255 0
 793 000c 7868     	 ldr r0,[r7,#4]
 794 000e FFF7FEFF 	 bl XMC_USIC_CH_GetTransmitBufferStatus
 795 0012 0346     	 mov r3,r0
 796 0014 DBB2     	 uxtb r3,r3
 797 0016 5BB2     	 sxtb r3,r3
 798 0018 002B     	 cmp r3,#0
 799 001a 02DA     	 bge .L33
 256:../Libraries/XMCLib/src/xmc_spi.c ****   {
 257:../Libraries/XMCLib/src/xmc_spi.c ****     status = XMC_SPI_CH_STATUS_BUSY;
 800              	 .loc 3 257 0
 801 001c 0223     	 movs r3,#2
 802 001e FB73     	 strb r3,[r7,#15]
 803 0020 03E0     	 b .L34
 804              	.L33:
 258:../Libraries/XMCLib/src/xmc_spi.c ****   }
 259:../Libraries/XMCLib/src/xmc_spi.c ****   else
 260:../Libraries/XMCLib/src/xmc_spi.c ****   {
 261:../Libraries/XMCLib/src/xmc_spi.c **** 
 262:../Libraries/XMCLib/src/xmc_spi.c ****     /* USIC channel in IDLE mode */
 263:../Libraries/XMCLib/src/xmc_spi.c ****     XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_IDLE);
 805              	 .loc 3 263 0
 806 0022 7868     	 ldr r0,[r7,#4]
 807 0024 0021     	 movs r1,#0
 808 0026 FFF7FEFF 	 bl XMC_USIC_CH_SetMode
 809              	.L34:
 264:../Libraries/XMCLib/src/xmc_spi.c ****   }
 265:../Libraries/XMCLib/src/xmc_spi.c **** 
 266:../Libraries/XMCLib/src/xmc_spi.c ****   return status;
 810              	 .loc 3 266 0
 811 002a FB7B     	 ldrb r3,[r7,#15]
 267:../Libraries/XMCLib/src/xmc_spi.c **** }
 812              	 .loc 3 267 0
 813 002c 1846     	 mov r0,r3
 814 002e 1037     	 adds r7,r7,#16
 815              	.LCFI58:
 816              	 .cfi_def_cfa_offset 8
 817 0030 BD46     	 mov sp,r7
 818              	.LCFI59:
 819              	 .cfi_def_cfa_register 13
 820              	 
 821 0032 80BD     	 pop {r7,pc}
 822              	 .cfi_endproc
 823              	.LFE257:
 825              	 .section .text.XMC_SPI_CH_EnableEvent,"ax",%progbits
 826              	 .align 2
 827              	 .global XMC_SPI_CH_EnableEvent
 828              	 .thumb
 829              	 .thumb_func
 831              	XMC_SPI_CH_EnableEvent:
 832              	.LFB258:
 268:../Libraries/XMCLib/src/xmc_spi.c **** 
 269:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 270:../Libraries/XMCLib/src/xmc_spi.c **** {
 833              	 .loc 3 270 0
 834              	 .cfi_startproc
 835              	 
 836              	 
 837              	 
 838 0000 80B4     	 push {r7}
 839              	.LCFI60:
 840              	 .cfi_def_cfa_offset 4
 841              	 .cfi_offset 7,-4
 842 0002 83B0     	 sub sp,sp,#12
 843              	.LCFI61:
 844              	 .cfi_def_cfa_offset 16
 845 0004 00AF     	 add r7,sp,#0
 846              	.LCFI62:
 847              	 .cfi_def_cfa_register 7
 848 0006 7860     	 str r0,[r7,#4]
 849 0008 3960     	 str r1,[r7]
 271:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR |= (event&0x1fc00U);
 850              	 .loc 3 271 0
 851 000a 7B68     	 ldr r3,[r7,#4]
 852 000c 1A6C     	 ldr r2,[r3,#64]
 853 000e 3B68     	 ldr r3,[r7]
 854 0010 03F4FE33 	 and r3,r3,#130048
 855 0014 1A43     	 orrs r2,r2,r3
 856 0016 7B68     	 ldr r3,[r7,#4]
 857 0018 1A64     	 str r2,[r3,#64]
 272:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 858              	 .loc 3 272 0
 859 001a 7B68     	 ldr r3,[r7,#4]
 860 001c DA6B     	 ldr r2,[r3,#60]
 861 001e 3B68     	 ldr r3,[r7]
 862 0020 5B03     	 lsls r3,r3,#13
 863 0022 9BB2     	 uxth r3,r3
 864 0024 1A43     	 orrs r2,r2,r3
 865 0026 7B68     	 ldr r3,[r7,#4]
 866 0028 DA63     	 str r2,[r3,#60]
 273:../Libraries/XMCLib/src/xmc_spi.c **** }
 867              	 .loc 3 273 0
 868 002a 0C37     	 adds r7,r7,#12
 869              	.LCFI63:
 870              	 .cfi_def_cfa_offset 4
 871 002c BD46     	 mov sp,r7
 872              	.LCFI64:
 873              	 .cfi_def_cfa_register 13
 874              	 
 875 002e 5DF8047B 	 ldr r7,[sp],#4
 876              	.LCFI65:
 877              	 .cfi_restore 7
 878              	 .cfi_def_cfa_offset 0
 879 0032 7047     	 bx lr
 880              	 .cfi_endproc
 881              	.LFE258:
 883              	 .section .text.XMC_SPI_CH_DisableEvent,"ax",%progbits
 884              	 .align 2
 885              	 .global XMC_SPI_CH_DisableEvent
 886              	 .thumb
 887              	 .thumb_func
 889              	XMC_SPI_CH_DisableEvent:
 890              	.LFB259:
 274:../Libraries/XMCLib/src/xmc_spi.c **** 
 275:../Libraries/XMCLib/src/xmc_spi.c **** void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
 276:../Libraries/XMCLib/src/xmc_spi.c **** {
 891              	 .loc 3 276 0
 892              	 .cfi_startproc
 893              	 
 894              	 
 895              	 
 896 0000 80B4     	 push {r7}
 897              	.LCFI66:
 898              	 .cfi_def_cfa_offset 4
 899              	 .cfi_offset 7,-4
 900 0002 83B0     	 sub sp,sp,#12
 901              	.LCFI67:
 902              	 .cfi_def_cfa_offset 16
 903 0004 00AF     	 add r7,sp,#0
 904              	.LCFI68:
 905              	 .cfi_def_cfa_register 7
 906 0006 7860     	 str r0,[r7,#4]
 907 0008 3960     	 str r1,[r7]
 277:../Libraries/XMCLib/src/xmc_spi.c ****   channel->CCR &= (uint32_t)~(event&0x1fc00U);
 908              	 .loc 3 277 0
 909 000a 7B68     	 ldr r3,[r7,#4]
 910 000c 1A6C     	 ldr r2,[r3,#64]
 911 000e 3B68     	 ldr r3,[r7]
 912 0010 03F4FE33 	 and r3,r3,#130048
 913 0014 DB43     	 mvns r3,r3
 914 0016 1A40     	 ands r2,r2,r3
 915 0018 7B68     	 ldr r3,[r7,#4]
 916 001a 1A64     	 str r2,[r3,#64]
 278:../Libraries/XMCLib/src/xmc_spi.c ****   channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 917              	 .loc 3 278 0
 918 001c 7B68     	 ldr r3,[r7,#4]
 919 001e DA6B     	 ldr r2,[r3,#60]
 920 0020 3B68     	 ldr r3,[r7]
 921 0022 5B03     	 lsls r3,r3,#13
 922 0024 9BB2     	 uxth r3,r3
 923 0026 DB43     	 mvns r3,r3
 924 0028 1A40     	 ands r2,r2,r3
 925 002a 7B68     	 ldr r3,[r7,#4]
 926 002c DA63     	 str r2,[r3,#60]
 279:../Libraries/XMCLib/src/xmc_spi.c **** }
 927              	 .loc 3 279 0
 928 002e 0C37     	 adds r7,r7,#12
 929              	.LCFI69:
 930              	 .cfi_def_cfa_offset 4
 931 0030 BD46     	 mov sp,r7
 932              	.LCFI70:
 933              	 .cfi_def_cfa_register 13
 934              	 
 935 0032 5DF8047B 	 ldr r7,[sp],#4
 936              	.LCFI71:
 937              	 .cfi_restore 7
 938              	 .cfi_def_cfa_offset 0
 939 0036 7047     	 bx lr
 940              	 .cfi_endproc
 941              	.LFE259:
 943              	 .text
 944              	.Letext0:
 945              	 .file 4 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 946              	 .file 5 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 947              	 .file 6 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Include/core_cm4.h"
 948              	 .file 7 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_spi.c
    {standard input}:20     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 $t
    {standard input}:24     .text.XMC_USIC_CH_GetTransmitBufferStatus:00000000 XMC_USIC_CH_GetTransmitBufferStatus
    {standard input}:67     .text.XMC_USIC_CH_SetMode:00000000 $t
    {standard input}:71     .text.XMC_USIC_CH_SetMode:00000000 XMC_USIC_CH_SetMode
    {standard input}:116    .text.XMC_SPI_CH_ClearStatusFlag:00000000 $t
    {standard input}:120    .text.XMC_SPI_CH_ClearStatusFlag:00000000 XMC_SPI_CH_ClearStatusFlag
    {standard input}:164    .text.XMC_SPI_CH_Init:00000000 $t
    {standard input}:169    .text.XMC_SPI_CH_Init:00000000 XMC_SPI_CH_Init
    {standard input}:250    .text.XMC_SPI_CH_Init:00000064 $d
    {standard input}:255    .text.XMC_SPI_CH_SetBaudrate:00000000 $t
    {standard input}:260    .text.XMC_SPI_CH_SetBaudrate:00000000 XMC_SPI_CH_SetBaudrate
    {standard input}:317    .text.XMC_SPI_CH_EnableSlaveSelect:00000000 $t
    {standard input}:322    .text.XMC_SPI_CH_EnableSlaveSelect:00000000 XMC_SPI_CH_EnableSlaveSelect
    {standard input}:371    .text.XMC_SPI_CH_DisableSlaveSelect:00000000 $t
    {standard input}:376    .text.XMC_SPI_CH_DisableSlaveSelect:00000000 XMC_SPI_CH_DisableSlaveSelect
    {standard input}:417    .text.XMC_SPI_CH_Transmit:00000000 $t
    {standard input}:422    .text.XMC_SPI_CH_Transmit:00000000 XMC_SPI_CH_Transmit
    {standard input}:503    .text.XMC_SPI_CH_GetReceivedData:00000000 $t
    {standard input}:508    .text.XMC_SPI_CH_GetReceivedData:00000000 XMC_SPI_CH_GetReceivedData
    {standard input}:563    .text.XMC_SPI_CH_SetInterwordDelay:00000000 $t
    {standard input}:568    .text.XMC_SPI_CH_SetInterwordDelay:00000000 XMC_SPI_CH_SetInterwordDelay
    {standard input}:759    .text.XMC_SPI_CH_SetInterwordDelay:00000124 $d
    {standard input}:766    .text.XMC_SPI_CH_Stop:00000000 $t
    {standard input}:771    .text.XMC_SPI_CH_Stop:00000000 XMC_SPI_CH_Stop
    {standard input}:826    .text.XMC_SPI_CH_EnableEvent:00000000 $t
    {standard input}:831    .text.XMC_SPI_CH_EnableEvent:00000000 XMC_SPI_CH_EnableEvent
    {standard input}:884    .text.XMC_SPI_CH_DisableEvent:00000000 $t
    {standard input}:889    .text.XMC_SPI_CH_DisableEvent:00000000 XMC_SPI_CH_DisableEvent
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_USIC_CH_Enable
XMC_USIC_CH_SetBaudrate
XMC_SCU_CLOCK_GetPeripheralClockFrequency

   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc_eth_mac.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_ETH_MAC_Reset,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_ETH_MAC_Reset:
  25              	.LFB128:
  26              	 .file 1 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg\\Libraries\\XMCLib\\inc/xmc_eth_mac.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
   2:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
   3:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @file xmc_eth_mac.h
   4:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @date 2016-04-25
   5:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
   6:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @cond
   7:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  **************************************************************************************************
   8:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   9:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
  10:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * All rights reserved.                        
  12:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *                                             
  13:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * following conditions are met:   
  15:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *                                                                              
  16:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * disclaimer.                        
  18:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * 
  19:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  21:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * 
  22:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * products derived from this software without specific prior written permission.                  
  24:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *                                                                              
  25:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *                                                                              
  33:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  **************************************************************************************************
  36:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
  37:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Change History
  38:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * --------------
  39:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
  40:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * 2015-06-20:
  41:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *     - Initial
  42:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
  43:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * 2016-04-25:
  44:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *     - Change XMC_ETH_MAC_BUF_SIZE to 1524 to allow for Tagged MAC frame format
  45:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
  46:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @endcond
  47:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
  48:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  49:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
  50:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @addtogroup XMClib XMC Peripheral Library
  51:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @{
  52:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
  53:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  54:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
  55:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @addtogroup ETH_MAC
  56:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @brief Ethernet Low level driver for XMC4000 microcontroller family.
  57:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
  58:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The Ethernet MAC (ETH) is a major communication peripheral that supports 10/100
  59:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * MBit/s data transfer rates in compliance with the IEEE 802.3-2002 standard. The ETH
  60:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * may be used to implement internet connected applications using IPv4 and IPv6. The
  61:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH also includes support for IEEE1588 time synchronisation to allow implementation
  62:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * of Real Time Ethernet protocols.
  63:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
  64:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The XMC_ETH_MAC low level driver provides functions to configure and initialize
  65:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * the ETH_MAC hardware peripheral.
  66:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @{
  67:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
  68:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  69:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #ifndef XMC_ETH_MAC_H
  70:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_H
  71:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  72:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**************************************************************************************************
  73:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * HEADER FILES
  74:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  **************************************************************************************************
  75:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  76:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #include "xmc_common.h"
  77:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  78:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #if defined (ETH0)
  79:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  80:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #include "xmc_eth_mac_map.h"
  81:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  82:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**************************************************************************************************
  83:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * MACROS
  84:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  **************************************************************************************************
  85:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  86:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_BUF_SIZE           (1524)     /**< ETH MAC buffer size */
  87:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #define XMC_ETH_MAC_PHY_MAX_RETRIES    (0xffffUL) /**< Maximum retries */
  88:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #define XMC_ETH_WAKEUP_REGISTER_LENGTH (8U)       /**< Remote wakeup frame reg length */
  89:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  90:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**************************************************************************************************
  91:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ENUMS
  92:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  **************************************************************************************************
  93:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
  94:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
  95:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Ethernet MAC status return values
  96:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
  97:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_STATUS
  98:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
  99:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_OK    = 0U, /**< Driver accepted application request */
 100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_BUSY  = 1U, /**< Driver is busy and cannot handle request */
 101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_STATUS_ERROR = 2U  /**< Driver could not fulfil application request */
 102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_STATUS_t;
 103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Transmission frame
 106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TX_FRAME
 108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_FRAGMENT  = 0x1U, /**< Indicate frame fragment */
 110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_EVENT     = 0x2U, /**< Generate event when frame is transmitted */
 111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TX_FRAME_TIMESTAMP = 0x4U  /**< Capture frame time stamp */
 112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TX_FRAME_t;
 113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH MAC event
 116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_EVENT
 118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_PMT = ETH_INTERRUPT_MASK_PMTIM_Msk << 16,        /**< Power management event */
 120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TIMESTAMP = ETH_INTERRUPT_MASK_TSIM_Msk << 16,   /**< Time stamp event */
 121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_RECEIVE = ETH_STATUS_ERI_Msk,              /**< Early receive */
 122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_BUS_ERROR = ETH_STATUS_FBI_Msk,                  /**< Bus error */
 123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_EARLY_TRANSMIT = ETH_STATUS_ETI_Msk,             /**< Early transmit */
 124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT = ETH_STATUS_RWT_Msk,   /**< Receive watchdog time-out
 125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED = ETH_STATUS_RPS_Msk,    /**< Receive process stopped *
 126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE = ETH_STATUS_RU_Msk,  /**< Receive buffer unavailabl
 127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE = ETH_STATUS_RI_Msk,                     /**< Receive event */
 128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW = ETH_STATUS_UNF_Msk,         /**< Transmit underflow */
 129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW = ETH_STATUS_OVF_Msk,           /**< Receive overflow */
 130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT = ETH_STATUS_TJT_Msk,    /**< Transmit jabber time-out 
 131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE = ETH_STATUS_TU_Msk, /**< Transmit buffer unavailab
 132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED = ETH_STATUS_TPS_Msk,   /**< Transmit process stopped 
 133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_EVENT_TRANSMIT = ETH_STATUS_TI_Msk                     /**< Transmit event */
 134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_EVENT_t;
 135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Link interface
 138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_INTERFACE
 140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_MII, /**< Link interface: Media independent interface */
 142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_INTERFACE_RMII /**< Link interface: Reduced media independent interface */
 143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_LINK_INTERFACE_t;
 144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH link status
 147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_STATUS
 149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_DOWN, /**< Link status down */
 151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_STATUS_UP    /**< Link status up */
 152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_LINK_STATUS_t;
 153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH link speed
 156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_SPEED
 158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_10M  = 0UL << ETH_MAC_CONFIGURATION_FES_Pos, /**< Link speed: 10M */
 160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_SPEED_100M = 1UL << ETH_MAC_CONFIGURATION_FES_Pos  /**< Link speed: 100M */
 161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_LINK_SPEED_t;
 162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH duplex settings (full/half?)
 165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_LINK_DUPLEX
 167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_HALF = 0UL << ETH_MAC_CONFIGURATION_DM_Pos, /**< Half duplex */
 169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_LINK_DUPLEX_FULL = 1UL << ETH_MAC_CONFIGURATION_DM_Pos  /**< Full duplex */
 170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_LINK_DUPLEX_t;
 171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * MAC address filter
 174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_ADDR_FILTER
 176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE0 = 0x01000000UL, /**< Address filter mask: byte 0 */
 178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE1 = 0x02000000UL, /**< Address filter mask: byte 1 */
 179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE2 = 0x04000000UL, /**< Address filter mask: byte 2 */
 180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE3 = 0x08000000UL, /**< Address filter mask: byte 3 */
 181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE4 = 0x10000000UL, /**< Address filter mask: byte 4 */
 182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_MASK_BYTE5 = 0x20000000UL, /**< Address filter mask: byte 5 */
 183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_ADDR_FILTER_SA         = 0x40000000UL  /**< Address filter SA */
 184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_ADDR_FILTER_t;
 185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Power management events that triggers a PMT interrupt
 188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_PMT_EVENT
 190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_WAKEUP_FRAME         = ETH_PMT_CONTROL_STATUS_RWKPKTEN_Msk,  /**< Wakeup
 192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_MAGIC_PACKET         = ETH_PMT_CONTROL_STATUS_MGKPKTEN_Msk,  /**< Magic 
 193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_PMT_EVENT_ON_UNICAST_FRAME_FILTER = ETH_PMT_CONTROL_STATUS_GLBLUCAST_Msk  /**< Unicas
 194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PMT_EVENT_t;
 195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH MAC time-stamp configuration enable
 199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef enum XMC_ETH_MAC_TIMESTAMP_CONFIG
 201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE = ETH_TIMESTAMP_CONTROL_TSCFUPDT_Msk,             /**< F
 203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_ALL_FRAMES = ETH_TIMESTAMP_CONTROL_TSENALL_Msk,        /**< E
 204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTPV2 = ETH_TIMESTAMP_CONTROL_TSVER2ENA_Msk,           /**< P
 205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_ETHERNET = ETH_TIMESTAMP_CONTROL_TSIPENA_Msk, /**< P
 206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV6 = ETH_TIMESTAMP_CONTROL_TSIPV6ENA_Msk,   /**< P
 207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_PTP_OVER_IPV4 = ETH_TIMESTAMP_CONTROL_TSIPV4ENA_Msk,   /**< P
 208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_TIMESTAMP_CONFIG_ENABLE_MAC_ADDRESS_FILTER = ETH_TIMESTAMP_CONTROL_TSENMACADDR_Msk /*
 209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIMESTAMP_CONFIG_t;
 210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**************************************************************************************************
 212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * DATA STRUCTURES
 213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  **************************************************************************************************
 214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /* Anonymous structure/union guard start */
 216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #pragma push
 218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #pragma anon_unions
 219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #pragma warning 586
 221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #endif
 222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH MAC port control
 225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef union XMC_ETH_MAC_PORT_CTRL
 227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   struct
 229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   {
 230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t rxd0: 2;     /**< Receive data bit 0 (::XMC_ETH_MAC_PORT_CTRL_RXD0_t) */
 231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t rxd1: 2;     /**< Receive data bit 1 (::XMC_ETH_MAC_PORT_CTRL_RXD1_t) */
 232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t rxd2: 2;     /**< Receive data bit 2 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD2_t) */
 233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t rxd3: 2;     /**< Receive data bit 3 (only MII) (::XMC_ETH_MAC_PORT_CTRL_RXD3_t) */
 234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t clk_rmii: 2; /**< RMII: Continuous 50 MHz reference clock.
 235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****                                MII: Receive clock, 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/s
 236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****                                (::XMC_ETH_MAC_PORT_CTRL_CLK_RMII_t) */
 237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t crs_dv: 2;   /**< RMII: carrier sense/RX_Data valid. MII: RX_Data valid (::XMC_ETH_MAC
 238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t crs: 2;      /**< Carrier sense for only MII (::XMC_ETH_MAC_PORT_CTRL_CRS_t) */
 239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t rxer: 2;     /**< Receive error (::XMC_ETH_MAC_PORT_CTRL_RXER_t) */
 240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t col: 2;      /**< Collision Detect for only MII (::XMC_ETH_MAC_PORT_CTRL_COL_t) */
 241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t clk_tx: 2;   /**< Transmit clock (only MII), 25 MHz for 100Mbit/s, 2.5 MHz for 10Mbit/
 242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t mdio: 2;     /**< Bidirectional, push-pull management data I/O line (::XMC_ETH_MAC_POR
 244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t: 2;          /**< Reserved bits */
 245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****     uint32_t mode: 1;     /**< RMII or MII (::XMC_ETH_MAC_PORT_CTRL_MODE_t) */
 246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   };
 247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t raw;
 249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_PORT_CTRL_t;
 250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH MAC DMA descriptor
 253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_DMA_DESC
 255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t status;                 /**< DMA descriptor status */
 257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t length;                 /**< Descriptor length */
 258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t buffer1;                /**< Buffer 1 */
 259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t buffer2;                /**< Buffer 2 */
 260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t extended_status;        /**< Extended status */
 261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t reserved;               /**< Reserved */
 262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t time_stamp_seconds;     /**< Time stamp low */
 263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t time_stamp_nanoseconds; /**< Time stamp high */
 264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_DMA_DESC_t;
 265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH MAC time
 268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC_TIME
 270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   int32_t nanoseconds;
 272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint32_t seconds;
 273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_TIME_t;
 274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * ETH driver structure
 277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** typedef struct XMC_ETH_MAC
 279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   ETH_GLOBAL_TypeDef *regs;        /**< ETH module 0 (now, we have a single ETH module) */
 281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint64_t address;              /**< MAC address */
 282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc; /**< DMA descriptor: RX */
 283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc; /**< DMA descriptor: TX */
 284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t *rx_buf;                /**< RX buffer */
 285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t *tx_buf;                /**< TX buffer */
 286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t *frame_end;              /**< End of assembled frame fragments */
 287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t num_rx_buf;              /**< How many RX descriptors? */
 288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t num_tx_buf;              /**< How many TX descriptors? */
 289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t tx_index;                /**< Transmit descriptor index */
 290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t rx_index;                /**< Receive descriptor index */
 291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   uint8_t tx_ts_index;             /**< Transmit time-stamp descriptor index */
 292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** } XMC_ETH_MAC_t;
 293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /* Anonymous structure/union guard end */
 295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #if defined (__CC_ARM)
 296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #pragma pop
 297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #elif defined (__TASKING__)
 298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #pragma warning restore
 299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #endif
 300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**************************************************************************************************
 302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * API PROTOTYPES
 303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  **************************************************************************************************
 304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #ifdef __cplusplus
 306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** extern "C" {
 307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** #endif
 308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t Initialization status
 312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Initialize the Ethernet MAC peripheral <br>
 315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function sets the link speed, applies the duplex mode, sets auto-negotiation
 318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * and loop-back settings.
 319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac);
 321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return None
 325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Initialize the RX DMA descriptors <br>
 328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function initializes the RX descriptors in a chained configuration. It sets
 331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return None
 338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Initialize the TX DMA descriptors <br>
 341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function initializes the TX descriptors in a chained configuration. It sets
 344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * up the status bit, control bit, buffer length and the buffer pointer.
 345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac);
 347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  
 348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return None
 351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Enable the Ethernet MAC peripheral <br>
 354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function de-asserts the peripheral reset.
 357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac);
 359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return None
 363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Disable the Ethernet MAC peripheral <br>
 366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function asserts the peripheral reset.
 369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac);
 371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return bool
 375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Check if the ETH MAC is enabled <br>
 378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function checks if the ETH MAC is enabled or not. It returns "true" if the
 381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * peripheral is enabled, "false" otherwise.
 382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** bool XMC_ETH_MAC_IsEnabled(const XMC_ETH_MAC_t *const eth_mac);
 384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return None
 388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Reset the ETH MAC peripheral <br>
 391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function resets the ETH MAC peripheral. It blocks until reset.
 394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_Reset(XMC_ETH_MAC_t *const eth_mac)
 396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
  27              	 .loc 1 396 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_SWR_Msk;
  43              	 .loc 1 397 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 1B68     	 ldr r3,[r3]
  46 000c 7A68     	 ldr r2,[r7,#4]
  47 000e 1268     	 ldr r2,[r2]
  48 0010 02F58052 	 add r2,r2,#4096
  49 0014 1268     	 ldr r2,[r2]
  50 0016 42F00102 	 orr r2,r2,#1
  51 001a 03F58053 	 add r3,r3,#4096
  52 001e 1A60     	 str r2,[r3]
 398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   while ((eth_mac->regs->BUS_MODE & (uint32_t)ETH_BUS_MODE_SWR_Msk) != 0U)
  53              	 .loc 1 398 0
  54 0020 00BF     	 nop
  55              	.L2:
  56              	 .loc 1 398 0 is_stmt 0 discriminator 1
  57 0022 7B68     	 ldr r3,[r7,#4]
  58 0024 1B68     	 ldr r3,[r3]
  59 0026 03F58053 	 add r3,r3,#4096
  60 002a 1B68     	 ldr r3,[r3]
  61 002c 03F00103 	 and r3,r3,#1
  62 0030 002B     	 cmp r3,#0
  63 0032 F6D1     	 bne .L2
 399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   {
 400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   }
 401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** }
  64              	 .loc 1 401 0 is_stmt 1
  65 0034 0C37     	 adds r7,r7,#12
  66              	.LCFI3:
  67              	 .cfi_def_cfa_offset 4
  68 0036 BD46     	 mov sp,r7
  69              	.LCFI4:
  70              	 .cfi_def_cfa_register 13
  71              	 
  72 0038 5DF8047B 	 ldr r7,[sp],#4
  73              	.LCFI5:
  74              	 .cfi_restore 7
  75              	 .cfi_def_cfa_offset 0
  76 003c 7047     	 bx lr
  77              	 .cfi_endproc
  78              	.LFE128:
  80 003e 00BF     	 .section .text.XMC_ETH_MAC_SetAddress,"ax",%progbits
  81              	 .align 2
  82              	 .thumb
  83              	 .thumb_func
  85              	XMC_ETH_MAC_SetAddress:
  86              	.LFB130:
 402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param data The destination to which the read data needs to be copied to
 408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Read a PHY register <br>
 412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially polls busy bit during max
 415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * PHY_TIMEOUT time and reads the information into 'data' when not busy.
 416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t re
 418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param phy_addr PHY address
 422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param reg_addr Register address
 423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param data The data to write
 424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Write a PHY register <br>
 428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function reads a PHY register. It essentially writes the data and polls
 431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * the busy bit until it is no longer busy.
 432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *const eth_mac, uint8_t phy_addr, uint8_t r
 434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param port_ctrl Port control configuration
 438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return None
 439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Set port control configuration <br>
 442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function sets the port control by writing the configuration into the
 445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * CON register.
 446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \note
 448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * MII Mode is only available in:
 449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * - XMC4500 LQFP144 and BGA144 packages
 450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * - XMC4700 LQFP144 and BGA196 packages
 451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * - XMC4800 LQFP144 and BGA196 packages
 452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetPortControl(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_POR
 455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
 456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   ETH0_CON->CON = (uint32_t)port_ctrl.raw;
 457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** }
 458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return XMC_ETH_MAC_STATUS_t ETH MAC status
 462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Set management clock divider <br>
 465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function sets the management clock divider by writing to the GMII_ADDRESS
 468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * register.
 469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac);
 471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** 
 472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** /**
 473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param eth_mac A constant pointer to XMC_ETH_MAC_t, pointing to the ETH MAC base address
 474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @param addr The MAC address to set
 475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * @return None
 476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par<b>Description: </b><br>
 478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * Set MAC address <br>
 479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  *
 480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * \par
 481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * The function sets the MAC address by writing to the MAC_ADDRESS0_HIGH and
 482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  * MAC_ADDRESS0_LOW registers.
 483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****  */
 484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** __STATIC_INLINE void XMC_ETH_MAC_SetAddress(XMC_ETH_MAC_t *const eth_mac, uint64_t addr)
 485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** {
  87              	 .loc 1 485 0
  88              	 .cfi_startproc
  89              	 
  90              	 
  91              	 
  92 0000 B0B4     	 push {r4,r5,r7}
  93              	.LCFI6:
  94              	 .cfi_def_cfa_offset 12
  95              	 .cfi_offset 4,-12
  96              	 .cfi_offset 5,-8
  97              	 .cfi_offset 7,-4
  98 0002 85B0     	 sub sp,sp,#20
  99              	.LCFI7:
 100              	 .cfi_def_cfa_offset 32
 101 0004 00AF     	 add r7,sp,#0
 102              	.LCFI8:
 103              	 .cfi_def_cfa_register 7
 104 0006 F860     	 str r0,[r7,#12]
 105 0008 C7E90023 	 strd r2,[r7]
 486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_HIGH = (uint32_t)(addr >> 32);
 106              	 .loc 1 486 0
 107 000c FB68     	 ldr r3,[r7,#12]
 108 000e 1968     	 ldr r1,[r3]
 109 0010 D7E90023 	 ldrd r2,[r7]
 110 0014 1C00     	 movs r4,r3
 111 0016 0025     	 movs r5,#0
 112 0018 2346     	 mov r3,r4
 113 001a 0B64     	 str r3,[r1,#64]
 487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h ****   eth_mac->regs->MAC_ADDRESS0_LOW = (uint32_t)addr;
 114              	 .loc 1 487 0
 115 001c FB68     	 ldr r3,[r7,#12]
 116 001e 1B68     	 ldr r3,[r3]
 117 0020 3A68     	 ldr r2,[r7]
 118 0022 5A64     	 str r2,[r3,#68]
 488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_eth_mac.h **** }
 119              	 .loc 1 488 0
 120 0024 1437     	 adds r7,r7,#20
 121              	.LCFI9:
 122              	 .cfi_def_cfa_offset 12
 123 0026 BD46     	 mov sp,r7
 124              	.LCFI10:
 125              	 .cfi_def_cfa_register 13
 126              	 
 127 0028 B0BC     	 pop {r4,r5,r7}
 128              	.LCFI11:
 129              	 .cfi_restore 7
 130              	 .cfi_restore 5
 131              	 .cfi_restore 4
 132              	 .cfi_def_cfa_offset 0
 133 002a 7047     	 bx lr
 134              	 .cfi_endproc
 135              	.LFE130:
 137              	 .section .text.XMC_SCU_CLOCK_GetSystemClockFrequency,"ax",%progbits
 138              	 .align 2
 139              	 .thumb
 140              	 .thumb_func
 142              	XMC_SCU_CLOCK_GetSystemClockFrequency:
 143              	.LFB192:
 144              	 .file 2 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg\\Libraries\\XMCLib\\inc/xmc4_scu.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @date 2016-04-15
   4:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   *************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2015-06-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Initial version
  41:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Documentation improved
  42:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  43:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2015-11-30:
  44:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Documentation improved
  45:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *      
  46:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2016-03-09:
  47:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  55:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2016-04-15:
  56:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
  59:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @endcond 
  60:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  61:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
  62:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  63:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  64:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC4_SCU_H
  65:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  66:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
  67:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * HEADER FILES
  68:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
  69:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  70:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #include "xmc_common.h"
  71:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  72:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  73:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  74:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
  75:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  76:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @{
  77:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
  78:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
  79:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
  80:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @addtogroup SCU
  81:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @{
  82:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
  83:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  84:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
  85:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * MACROS
  86:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
  87:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
  88:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
  89:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
  90:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  91:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
  92:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
  93:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
  94:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  95:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
  96:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
  97:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
  98:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  99:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED     SCU_INTERRUPT_SRSTAT_HDSTAT_Msk /**< HIB HDSTAT 
 131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULSTAT_Msk /**< HIB OSCU
 136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
 145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * ENUMS
 146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
 147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU40)
 154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU41)
 158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU42)
 162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU43)
 166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU80)
 170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU81)
 174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  purpose. 
 183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)
 202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_DSRAM2_MEM)
 218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC1_MEM)
 222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC2_MEM)
 225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Ser
 254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
 269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   
 288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DSD)
 300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU41)
 304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU42)
 307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU80)
 310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU81)
 313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF0)
 316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF1)
 319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(HRPWM0)
 324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU43)
 327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(LEDTS0)
 330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CAN)
 333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DAC)  
 336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC1)
 342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC2)
 345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(GPDMA1)
 354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(FCE)
 357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)  
 360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)  
 363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DSD)
 402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU41)
 406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU42)
 409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU80)
 412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU81)
 415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF0)
 418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF1)
 421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(HRPWM0)
 426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU43)
 429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(LEDTS0)
 432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CAN)
 435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DAC)  
 438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC1)
 444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC2)
 447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(GPDMA1)
 456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(FCE)
 459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)
 462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)
 465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Clock Control Register. 
 476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for system clock 
 482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for system clock 
 484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. 
 489:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 490:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 491:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 492:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 493:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 494:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 495:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 496:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                              as the source for P-Di
 497:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 498:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 499:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 500:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 501:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 502:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 503:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 504:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 505:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 506:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 507:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 508:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 509:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 510:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 511:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 512:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 513:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0) 
 514:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 515:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 516:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 517:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 518:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 519:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 520:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 521:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 522:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 523:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 524:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 525:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 526:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 527:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 528:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 529:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 530:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 531:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 532:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 533:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 534:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 535:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 536:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 537:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 538:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 539:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 540:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 541:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 542:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 543:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 544:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 545:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 546:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 547:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                             the source for external
 548:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 549:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for external cloc
 550:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 551:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for external cloc
 552:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 553:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 554:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for external cloc
 555:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 556:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 557:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 558:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 559:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 560:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 561:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 562:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 563:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 564:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 565:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 566:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 567:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 568:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 569:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 570:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 571:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 572:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 573:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 574:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 575:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 576:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 577:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 578:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 579:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 580:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 581:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 582:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 583:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 584:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 585:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 586:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 587:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 588:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 589:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 590:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 591:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 592:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 593:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 594:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 595:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 596:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 597:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 598:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 599:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 600:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 601:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 602:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 603:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 604:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 605:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 606:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 607:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 608:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            sequence. */
 609:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 610:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 611:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 612:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            address 0. */
 613:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 614:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                             address 1. */
 615:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 616:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 617:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 618:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 619:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 620:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 621:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 622:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 623:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 624:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 625:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 626:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 627:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 628:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 629:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 630:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 631:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 632:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 633:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 634:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 635:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 636:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 637:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 638:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 639:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 640:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 641:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 642:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 643:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  state.
 644:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  
 645:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 646:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 647:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 648:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 649:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 650:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)
 651:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 652:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 653:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 654:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 655:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 656:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 657:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 658:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 659:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 660:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 661:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 662:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 663:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 664:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 665:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 666:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 667:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 668:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 669:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 670:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 671:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 672:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 673:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 674:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 675:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 676:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 677:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 678:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 679:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  stopped. 
 680:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 681:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 682:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 683:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 684:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 685:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 686:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 687:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 688:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 689:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 690:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 691:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 692:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 693:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 694:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 695:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 696:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)
 697:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 698:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 699:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 700:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 701:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 702:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 703:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 704:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 705:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 706:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 707:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 708:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 709:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 710:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 711:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 712:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 713:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 714:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 715:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 716:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 717:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 718:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 719:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 720:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 721:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 722:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 723:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 724:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 725:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 726:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 727:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 728:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Define status of external hibernate control  
 729:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 730:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 731:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 732:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 733:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 734:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 735:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 736:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 737:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Hibernate domain event status
 738:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 739:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 740:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 741:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 742:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 743:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 744:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 745:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 746:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 747:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 748:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 749:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   */
 750:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 751:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 752:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 753:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 754:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 755:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 756:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 757:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                             @note : Only available on BGA196, BGA144, LQFP144 and LQFP100 packages*
 758:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 759:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 760:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 761:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 762:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 763:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 764:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 765:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 766:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 767:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 768:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 769:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 770:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 771:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 772:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 773:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 774:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 775:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 776:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 777:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 778:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 779:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 780:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 781:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 782:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 783:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 784:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 785:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 786:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
 787:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * DATA STRUCTURES
 788:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
 789:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 790:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 791:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 792:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 793:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 794:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 795:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 796:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 797:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 798:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 799:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 800:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 801:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 802:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 803:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 804:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 805:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 806:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 807:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 808:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 809:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 810:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 811:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 812:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 813:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 814:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 815:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 816:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 817:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 818:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 819:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 820:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 821:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 822:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 823:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 824:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 825:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 826:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 827:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
 828:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * API PROTOTYPES
 829:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
 830:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 831:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #ifdef __cplusplus
 832:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** extern "C" {
 833:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 834:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 835:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 836:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
 837:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 838:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 839:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 840:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 841:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 842:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 843:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 844:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 845:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 846:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 847:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 848:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 849:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 850:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 851:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 852:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 853:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 854:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 855:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
 856:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 857:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 858:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 859:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 860:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 861:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 862:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 863:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 864:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 865:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 866:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 867:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 868:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 869:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 870:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 871:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 872:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 873:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 874:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 875:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
 876:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
 877:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 878:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
 879:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 880:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 881:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
 882:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 883:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 884:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 885:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 886:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 887:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
 888:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
 889:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 890:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
 891:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 892:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 893:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
 894:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 895:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 896:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
 897:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
 898:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
 899:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 900:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 901:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
 902:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
 903:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 904:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
 905:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 906:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 907:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
 908:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 909:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 910:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 911:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
 912:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
 913:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
 914:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
 915:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 916:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 917:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 918:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 919:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
 920:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
 921:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * in the \a DTSCON register.
 922:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
 923:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
 924:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Offset is considered as a signed value.
 925:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
 926:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
 927:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
 928:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
 929:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
 930:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
 931:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
 932:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
 933:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * conversion complete.\n
 934:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
 935:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 936:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
 937:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 938:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 939:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
 940:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 941:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 942:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
 943:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                           \b Range: \n 
 944:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
 945:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
 946:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
 947:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 948:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 949:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 950:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
 951:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
 952:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
 953:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
 954:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
 955:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
 956:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
 957:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * conversion complete.\n
 958:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
 959:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 960:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
 961:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
 962:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 963:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
 964:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 965:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 966:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 967:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 968:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
 969:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
 970:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
 971:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 972:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 973:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
 974:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
 975:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
 976:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 977:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
 978:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 979:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
 980:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 981:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 982:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
 983:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
 984:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
 985:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 986:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 987:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
 988:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
 989:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 990:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
 991:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 992:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
 993:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 994:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 995:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
 996:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
 997:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
 998:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 999:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1000:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1001:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1002:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1003:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1004:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1005:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1006:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1007:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1008:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1009:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1010:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1011:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1012:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1013:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1014:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1015:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1016:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1017:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1018:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1019:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1020:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1021:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1022:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1023:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1024:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1025:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1026:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1027:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1028:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1029:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1030:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1031:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1032:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1033:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1034:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1035:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1036:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1037:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1038:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1039:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1040:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1041:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1042:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1043:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1044:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1045:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1046:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1047:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1048:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1049:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1050:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1051:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1052:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1053:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1054:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1055:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1056:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1057:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1058:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1059:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1060:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1061:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1062:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
1063:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1064:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1065:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1066:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1067:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1068:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1069:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1070:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1071:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1072:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1073:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1074:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1075:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1076:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1077:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1078:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1079:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1080:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1081:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1082:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1083:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1084:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1085:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1086:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1087:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1088:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1089:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1090:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1091:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1092:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1093:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1094:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1095:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1096:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1097:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1098:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1099:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
1115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  0 to 15.
1138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  0 to 15.
1161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \a NMIREQEN register.
1189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * is in reset state.\n
1313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * has been enabled.\n
1335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
1358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1489:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1490:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1491:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1492:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1493:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1494:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1495:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1496:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1497:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1498:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1499:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1500:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1501:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1502:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1503:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1504:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1505:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1506:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1507:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1508:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1509:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1510:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1511:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1512:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1513:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1514:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1515:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1516:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1517:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1518:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1519:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1520:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1521:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1522:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1523:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1524:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1525:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1526:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1527:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1528:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1529:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1530:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1531:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1532:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1533:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1534:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1535:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1536:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1537:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1538:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1539:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1540:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1541:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1542:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1543:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1544:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1545:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1546:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1547:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1548:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1549:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1550:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1551:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1552:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1553:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1554:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1555:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1556:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1557:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1558:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1559:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1560:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1561:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1562:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1563:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1564:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1565:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1566:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1567:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1568:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1569:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1570:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1571:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1572:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1573:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1574:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1575:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1576:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1577:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1578:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1579:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1580:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1581:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1582:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1583:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1584:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1585:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1586:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1587:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1588:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
1589:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1590:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1591:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1592:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1593:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1594:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1595:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1596:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1597:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1598:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1599:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1600:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1601:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1602:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1603:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1604:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1605:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1606:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1607:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1608:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1609:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1610:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1611:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1612:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1613:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1614:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1615:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1616:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1617:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1618:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1619:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1620:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1621:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1622:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1623:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the clock source selected.
1624:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1625:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1626:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1627:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1628:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1629:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
1630:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1631:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1632:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1633:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1634:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1635:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1636:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1637:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1638:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1639:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1640:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1641:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1642:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1643:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1644:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1645:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1646:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1647:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1648:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1649:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1650:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1651:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1652:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1653:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1654:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1655:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1656:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1657:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1658:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1659:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1660:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1661:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1662:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1663:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1664:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1665:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1666:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1667:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1668:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1669:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1670:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1671:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1672:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1673:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1674:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1675:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1676:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1677:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1678:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1679:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1680:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1681:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1682:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1683:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1684:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1685:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1686:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1687:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1688:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1689:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1690:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1691:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1692:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1693:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1694:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1695:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1696:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1697:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1698:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1699:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1700:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1701:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1702:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1703:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1704:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1705:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1706:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1707:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1708:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1709:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1710:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1711:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC42
1712:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1713:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1714:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1715:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC41
1716:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1717:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1718:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1719:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1720:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1721:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1722:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1723:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1724:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1725:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1726:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1727:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1728:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1729:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1730:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1731:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1732:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1733:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1734:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1735:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC42
1736:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1737:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1738:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC41
1739:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1740:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1741:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1742:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1743:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1744:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1745:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1746:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1747:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1748:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1749:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1750:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
1751:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1752:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1753:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1754:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1755:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1756:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1757:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1758:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1759:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1760:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1761:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1762:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1763:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1764:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1765:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1766:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1767:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1768:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1769:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1770:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1771:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1772:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1773:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1774:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1775:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1776:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1777:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1778:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1779:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1780:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1781:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1782:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1783:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1784:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1785:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1786:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1787:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1788:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1789:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0) 
1790:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1791:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1792:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
1793:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1794:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1795:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1796:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1797:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1798:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1799:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1800:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
1801:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
1802:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1803:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
1804:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1805:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
1806:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1807:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
1808:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                       ((uint32_t)source);
1809:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1810:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1811:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1812:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
1813:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1814:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1815:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1816:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1817:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1818:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
1819:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
1820:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1821:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1822:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1823:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
1824:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1825:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
1826:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1827:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
1828:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1829:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1830:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1831:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
1832:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
1833:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1834:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1835:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1836:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1837:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
1838:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
1839:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * decremented by 1 before configuring.
1840:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1841:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1842:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1843:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
1844:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1845:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1846:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
1847:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
1848:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1849:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1850:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
1851:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
1852:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1853:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1854:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1855:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
1856:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1857:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
1858:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1859:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1860:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1861:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1862:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
1863:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
1864:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
1865:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
1866:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1867:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1868:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1869:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1870:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
1871:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
1872:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
1873:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1874:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1875:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
1876:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1877:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
1878:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1879:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1880:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
1881:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
1882:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
1883:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
1884:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1885:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1886:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
1887:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
1888:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1889:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1890:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
1891:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1892:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
1893:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1894:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
1895:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1896:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1897:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1898:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1899:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
1900:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
1901:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
1902:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
1903:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1904:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1905:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1906:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1907:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
1908:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
1909:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1910:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
1911:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1912:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
1913:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1914:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1915:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
1916:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
1917:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
1918:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
1919:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1920:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1921:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
1922:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
1923:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1924:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
1925:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1926:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
1927:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1928:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
1929:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1930:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1931:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1932:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1933:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
1934:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
1935:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
1936:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
1937:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1938:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1939:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1940:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1941:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
1942:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
1943:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1944:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1945:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
1946:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1947:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
1948:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1949:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1950:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
1951:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
1952:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
1953:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
1954:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1955:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1956:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
1957:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
1958:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1959:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
1960:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1961:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
1962:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1963:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
1964:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1965:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1966:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1967:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1968:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
1969:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
1970:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1971:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1972:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1973:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1974:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
1975:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
1976:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1977:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1978:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
1979:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1980:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
1981:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1982:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1983:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1984:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
1985:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
1986:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1987:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1988:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
1989:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
1990:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1991:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
1992:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1993:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
1994:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1995:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
1996:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1997:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1998:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1999:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2000:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
2001:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2002:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2003:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2004:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2005:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2006:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2007:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2008:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2009:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2010:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2011:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2012:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2013:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2014:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2015:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2016:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2017:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2018:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2019:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2020:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2021:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2022:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2023:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2024:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2025:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2026:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2027:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2028:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2029:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2030:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2031:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
2032:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2033:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2034:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2035:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2036:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2037:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2038:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2039:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2040:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2041:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2042:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2043:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2044:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2045:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2046:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2047:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2048:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2049:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2050:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2051:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2052:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2053:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2054:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2055:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2056:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2057:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2058:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2059:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the divider value.
2060:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2061:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2062:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2063:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2064:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2065:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2066:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2067:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2068:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2069:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2070:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2071:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2072:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2073:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2074:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2075:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2076:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2077:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2078:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2079:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2080:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2081:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2082:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2083:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2084:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2085:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2086:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2087:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2088:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2089:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2090:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2091:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2092:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2093:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2094:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2095:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2096:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2097:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2098:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2099:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)
2103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
2133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
2135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * external clock input. 
2144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * external oscillator. 
2156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * are handled internally.
2171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            and the configured values of dividers.
2194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 145              	 .loc 2 2252 0
 146              	 .cfi_startproc
 147              	 
 148              	 
 149              	 
 150 0000 80B4     	 push {r7}
 151              	.LCFI12:
 152              	 .cfi_def_cfa_offset 4
 153              	 .cfi_offset 7,-4
 154 0002 00AF     	 add r7,sp,#0
 155              	.LCFI13:
 156              	 .cfi_def_cfa_register 7
2253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 157              	 .loc 2 2253 0
 158 0004 064B     	 ldr r3,.L6
 159 0006 1A68     	 ldr r2,[r3]
 160 0008 064B     	 ldr r3,.L6+4
 161 000a 1B69     	 ldr r3,[r3,#16]
 162 000c 03F00103 	 and r3,r3,#1
 163 0010 02FA03F3 	 lsl r3,r2,r3
2254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
 164              	 .loc 2 2254 0
 165 0014 1846     	 mov r0,r3
 166 0016 BD46     	 mov sp,r7
 167              	.LCFI14:
 168              	 .cfi_def_cfa_register 13
 169              	 
 170 0018 5DF8047B 	 ldr r7,[sp],#4
 171              	.LCFI15:
 172              	 .cfi_restore 7
 173              	 .cfi_def_cfa_offset 0
 174 001c 7047     	 bx lr
 175              	.L7:
 176 001e 00BF     	 .align 2
 177              	.L6:
 178 0020 00000000 	 .word SystemCoreClock
 179 0024 00460050 	 .word 1342195200
 180              	 .cfi_endproc
 181              	.LFE192:
 183              	 .section .text.XMC_SCU_CLOCK_GetEthernetClockFrequency,"ax",%progbits
 184              	 .align 2
 185              	 .thumb
 186              	 .thumb_func
 188              	XMC_SCU_CLOCK_GetEthernetClockFrequency:
 189              	.LFB193:
2255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
2256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  CCU clock frequency in Hertz.
2260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the frequency of clock(fCPU) used for CCU4, CCU8, POSIF and HRPWM.\n\n
2263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained from \a CCUDIV bits of \a CCUCLKCR register and system clock (fSYS) freque
2264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Based on these values, fCCU clock frequency is calculated using following formula:\n
2265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * fCCU = fSYS >> CCUDIV.\n
2266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider(), XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void);
2270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   USB clock frequency in Hertz.
2273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the frequency of USB and SDMMC clock(fUSB/fSDMMC).\n\n
2276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained from \a USBDIV bits of \a USBCLKCR register and USB clock source.
2277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Based on these values fUSB/fSDMMC clock frequency is calculated using following formula:\n
2278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * if USB clock source = USBPLL: fUSB/fSDMMC = fUSBPLL/(USBDIV + 1).\n
2279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * if USB clock source = PLL:  fUSB/fSDMMC = fPLL/(USBDIV + 1).\n
2280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockSource(), XMC_SCU_CLOCK_GetUsbClockDivider() \n\n\n
2283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void); 
2285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   Ethernet clock frequency in Hertz.
2288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the frequency of Ethernet clock(fETH).\n\n
2291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is derived from system clock frequency(fSYS). It is calculated using
2292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the following formula:\n
2293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * fETH = fSYS >> 1;
2294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockFrequency() \n\n\n
2296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEthernetClockFrequency(void)
2298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 190              	 .loc 2 2298 0
 191              	 .cfi_startproc
 192              	 
 193              	 
 194 0000 80B5     	 push {r7,lr}
 195              	.LCFI16:
 196              	 .cfi_def_cfa_offset 8
 197              	 .cfi_offset 7,-8
 198              	 .cfi_offset 14,-4
 199 0002 00AF     	 add r7,sp,#0
 200              	.LCFI17:
 201              	 .cfi_def_cfa_register 7
2299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return XMC_SCU_CLOCK_GetSystemClockFrequency() >> 1U;
 202              	 .loc 2 2299 0
 203 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 204 0008 0346     	 mov r3,r0
 205 000a 5B08     	 lsrs r3,r3,#1
2300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
 206              	 .loc 2 2300 0
 207 000c 1846     	 mov r0,r3
 208 000e 80BD     	 pop {r7,pc}
 209              	 .cfi_endproc
 210              	.LFE193:
 212              	 .section .text.XCM_ETH_MAC_IsNormalEvent,"ax",%progbits
 213              	 .align 2
 214              	 .thumb
 215              	 .thumb_func
 217              	XCM_ETH_MAC_IsNormalEvent:
 218              	.LFB207:
 219              	 .file 3 "../Libraries/XMCLib/src/xmc_eth_mac.c"
   1:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
   2:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
   3:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @file xmc_eth_mac.c
   4:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @date 2016-03-16
   5:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
   6:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
   8:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  10:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  14:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  17:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  19:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  20:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  21:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 
  22:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  23:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * products derived from this software without specific prior written permission.                  
  24:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  25:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  26:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  27:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  28:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  29:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  30:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  31:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  32:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *                                                                              
  33:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  34:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  35:../Libraries/XMCLib/src/xmc_eth_mac.c ****  **************************************************************************************************
  36:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  37:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Change History
  38:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * --------------
  39:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  40:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-06-20:
  41:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Initial
  42:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  43:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-09-01:
  44:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add clock gating control in enable/disable APIs
  45:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Add transmit polling if run out of buffers
  46:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  47:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2015-11-30:
  48:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_GetRxFrameSize return value in case of errors
  49:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  50:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * 2016-03-16:
  51:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *     - Fix XMC_ETH_MAC_DisableEvent
  52:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *
  53:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * @endcond
  54:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
  55:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  56:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
  57:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * HEADER FILES
  58:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
  59:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  60:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_eth_mac.h>
  61:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  62:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if defined (ETH0)
  63:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  64:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <stdlib.h>
  65:../Libraries/XMCLib/src/xmc_eth_mac.c **** #include <xmc_scu.h>
  66:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  67:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
  68:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * MACROS
  69:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
  70:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  71:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
  72:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC clock speed
  73:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
  74:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_35MHZ  (35000000U)  /**< ETH MAC clock speed 35 MHZ */
  75:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_60MHZ  (60000000U)  /**< ETH MAC clock speed 60 MHZ */
  76:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_100MHZ (100000000U) /**< ETH MAC clock speed 100 MHZ */
  77:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_150MHZ (150000000U) /**< ETH MAC clock speed 150 MHZ */
  78:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_200MHZ (200000000U) /**< ETH MAC clock speed 200 MHZ */
  79:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_CLK_SPEED_250MHZ (250000000U) /**< ETH MAC clock speed 250 MHZ */
  80:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  81:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
  82:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * ETH MAC MDC divider
  83:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
  84:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_16  (2U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/16 */
  85:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_26  (3U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/26 */
  86:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_42  (0U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/42 */
  87:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_62  (1U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/62 */
  88:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_102 (4U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/102 *
  89:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define XMC_ETH_MAC_MDC_DIVIDER_124 (5U << ETH_GMII_ADDRESS_CR_Pos) /**< MDC clock: ETH clock/124 *
  90:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
  91:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
  92:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * TDES0 Descriptor TX Packet Control/Status
  93:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
  94:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
  95:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_IC   (0x40000000U) /**< Interrupt on competition */
  96:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_LS   (0x20000000U) /**< Last segment */
  97:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_FS   (0x10000000U) /**< First segment */
  98:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_DC   (0x08000000U) /**< Disable CRC */
  99:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_DP   (0x04000000U) /**< Disable pad */
 100:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_TTSE (0x02000000U) /**< Transmit time stamp enable */
 101:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_CIC  (0x00C00000U) /**< Checksum insertion control */
 102:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_TER  (0x00200000U) /**< Transmit end of ring */
 103:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_TCH  (0x00100000U) /**< Second address chained */
 104:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_TTSS (0x00020000U) /**< Transmit time stamp status */
 105:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_IHE  (0x00010000U) /**< IP header error */
 106:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_ES   (0x00008000U) /**< Error summary */
 107:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_JT   (0x00004000U) /**< Jabber timeout */
 108:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_FF   (0x00002000U) /**< Frame flushed */
 109:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_IPE  (0x00001000U) /**< IP payload error */
 110:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_LOC  (0x00000800U) /**< Loss of carrier */
 111:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_NC   (0x00000400U) /**< No carrier */
 112:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_LC   (0x00000200U) /**< Late collision */
 113:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_EC   (0x00000100U) /**< Excessive collision */
 114:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_VF   (0x00000080U) /**< VLAN frame */
 115:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_CC   (0x00000078U) /**< Collision count */
 116:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_ED   (0x00000004U) /**< Excessive deferral */
 117:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_UF   (0x00000002U) /**< Underflow error */
 118:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_TDES0_DB   (0x00000001U) /**< Deferred bit */
 119:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 120:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 121:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * RDES0 Descriptor RX Packet Status
 122:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 123:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_OWN  (0x80000000U) /**< Own bit 1=DMA, 0=CPU */
 124:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_AFM  (0x40000000U) /**< Destination address filter fail */
 125:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_FL   (0x3FFF0000U) /**< Frame length mask */
 126:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_ES   (0x00008000U) /**< Error summary */
 127:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_DE   (0x00004000U) /**< Descriptor error */
 128:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_SAF  (0x00002000U) /**< Source address filter fail */
 129:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_LE   (0x00001000U) /**< Length error */
 130:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_OE   (0x00000800U) /**< Overflow error */
 131:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_VLAN (0x00000400U) /**< VLAN tag */
 132:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_FS   (0x00000200U) /**< First descriptor */
 133:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_LS   (0x00000100U) /**< Last descriptor */
 134:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_TSA  (0x00000080U) /**< Timestamp available */
 135:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_LC   (0x00000040U) /**< Late collision */
 136:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_FT   (0x00000020U) /**< Frame type */
 137:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_RWT  (0x00000010U) /**< Receive watchdog timeout */
 138:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_RE   (0x00000008U) /**< Receive error */
 139:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_DBE  (0x00000004U) /**< Dribble bit error */
 140:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_CE   (0x00000002U) /**< CRC error */
 141:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES0_ESA  (0x00000001U) /**< Extended Status/Rx MAC address */
 142:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 143:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 144:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * RDES1 Descriptor RX Packet Control
 145:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 146:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS2 (0x1FFF0000U) /**< Receive buffer 2 size */
 147:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RER  (0x00008000U) /**< Receive end of ring */
 148:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RCH  (0x00004000U) /**< Second address chained */
 149:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_DMA_RDES1_RBS1 (0x00001FFFU) /**< Receive buffer 1 size */
 150:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 151:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 152:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Normal MAC events
 153:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 154:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_NORMAL (XMC_ETH_MAC_EVENT_TRANSMIT |\
 155:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |\
 156:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_RECEIVE |\
 157:../Libraries/XMCLib/src/xmc_eth_mac.c ****                               XMC_ETH_MAC_EVENT_EARLY_RECEIVE)
 158:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 159:../Libraries/XMCLib/src/xmc_eth_mac.c **** /**
 160:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * Abnormal MAC events
 161:../Libraries/XMCLib/src/xmc_eth_mac.c ****  */
 162:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_MAC_EVENT_ABNORMAL (XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |\
 163:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |\
 164:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |\
 165:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |\
 166:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |\
 167:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |\
 168:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |\
 169:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |\
 170:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                 XMC_ETH_MAC_EVENT_BUS_ERROR)
 171:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 172:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Definition needed in case of device header file previous to v1.5.1*/
 173:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifndef ETH_BUS_MODE_ATDS_Msk
 174:../Libraries/XMCLib/src/xmc_eth_mac.c **** #define ETH_BUS_MODE_ATDS_Msk  (0x00000080UL)
 175:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 176:../Libraries/XMCLib/src/xmc_eth_mac.c **** /*******************************************************************************
 177:../Libraries/XMCLib/src/xmc_eth_mac.c ****  * API IMPLEMENTATION
 178:../Libraries/XMCLib/src/xmc_eth_mac.c ****  *******************************************************************************/
 179:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 180:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is a normal event */
 181:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsNormalEvent(uint32_t event)
 182:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 220              	 .loc 3 182 0
 221              	 .cfi_startproc
 222              	 
 223              	 
 224              	 
 225 0000 80B4     	 push {r7}
 226              	.LCFI18:
 227              	 .cfi_def_cfa_offset 4
 228              	 .cfi_offset 7,-4
 229 0002 83B0     	 sub sp,sp,#12
 230              	.LCFI19:
 231              	 .cfi_def_cfa_offset 16
 232 0004 00AF     	 add r7,sp,#0
 233              	.LCFI20:
 234              	 .cfi_def_cfa_register 7
 235 0006 7860     	 str r0,[r7,#4]
 183:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT |
 236              	 .loc 3 183 0
 237 0008 7A68     	 ldr r2,[r7,#4]
 238 000a 44F24503 	 movw r3,#16453
 239 000e 1340     	 ands r3,r3,r2
 240 0010 002B     	 cmp r3,#0
 241 0012 14BF     	 ite ne
 242 0014 0123     	 movne r3,#1
 243 0016 0023     	 moveq r3,#0
 244 0018 DBB2     	 uxtb r3,r3
 184:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_BUFFER_UNAVAILABLE |
 185:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE |
 186:../Libraries/XMCLib/src/xmc_eth_mac.c ****                           (uint32_t)XMC_ETH_MAC_EVENT_EARLY_RECEIVE)) != (uint32_t)0);
 187:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 245              	 .loc 3 187 0
 246 001a 1846     	 mov r0,r3
 247 001c 0C37     	 adds r7,r7,#12
 248              	.LCFI21:
 249              	 .cfi_def_cfa_offset 4
 250 001e BD46     	 mov sp,r7
 251              	.LCFI22:
 252              	 .cfi_def_cfa_register 13
 253              	 
 254 0020 5DF8047B 	 ldr r7,[sp],#4
 255              	.LCFI23:
 256              	 .cfi_restore 7
 257              	 .cfi_def_cfa_offset 0
 258 0024 7047     	 bx lr
 259              	 .cfi_endproc
 260              	.LFE207:
 262 0026 00BF     	 .section .text.XCM_ETH_MAC_IsAbnormalEvent,"ax",%progbits
 263              	 .align 2
 264              	 .thumb
 265              	 .thumb_func
 267              	XCM_ETH_MAC_IsAbnormalEvent:
 268              	.LFB208:
 188:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 189:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the event passed is an abnormal event */
 190:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XCM_ETH_MAC_IsAbnormalEvent(uint32_t event)
 191:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 269              	 .loc 3 191 0
 270              	 .cfi_startproc
 271              	 
 272              	 
 273              	 
 274 0000 80B4     	 push {r7}
 275              	.LCFI24:
 276              	 .cfi_def_cfa_offset 4
 277              	 .cfi_offset 7,-4
 278 0002 83B0     	 sub sp,sp,#12
 279              	.LCFI25:
 280              	 .cfi_def_cfa_offset 16
 281 0004 00AF     	 add r7,sp,#0
 282              	.LCFI26:
 283              	 .cfi_def_cfa_register 7
 284 0006 7860     	 str r0,[r7,#4]
 192:../Libraries/XMCLib/src/xmc_eth_mac.c ****    return (bool)((event & ((uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_PROCESS_STOPPED |
 285              	 .loc 3 192 0
 286 0008 7A68     	 ldr r2,[r7,#4]
 287 000a 42F2BA73 	 movw r3,#10170
 288 000e 1340     	 ands r3,r3,r2
 289 0010 002B     	 cmp r3,#0
 290 0012 14BF     	 ite ne
 291 0014 0123     	 movne r3,#1
 292 0016 0023     	 moveq r3,#0
 293 0018 DBB2     	 uxtb r3,r3
 193:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_JABBER_TIMEOUT |
 194:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_OVERFLOW |
 195:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_TRANSMIT_UNDERFLOW |
 196:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_BUFFER_UNAVAILABLE |
 197:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_PROCESS_STOPPED |
 198:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_RECEIVE_WATCHDOG_TIMEOUT |
 199:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_EARLY_TRANSMIT |
 200:../Libraries/XMCLib/src/xmc_eth_mac.c ****                            (uint32_t)XMC_ETH_MAC_EVENT_BUS_ERROR)) != (uint32_t)0);
 201:../Libraries/XMCLib/src/xmc_eth_mac.c ****  }
 294              	 .loc 3 201 0
 295 001a 1846     	 mov r0,r3
 296 001c 0C37     	 adds r7,r7,#12
 297              	.LCFI27:
 298              	 .cfi_def_cfa_offset 4
 299 001e BD46     	 mov sp,r7
 300              	.LCFI28:
 301              	 .cfi_def_cfa_register 13
 302              	 
 303 0020 5DF8047B 	 ldr r7,[sp],#4
 304              	.LCFI29:
 305              	 .cfi_restore 7
 306              	 .cfi_def_cfa_offset 0
 307 0024 7047     	 bx lr
 308              	 .cfi_endproc
 309              	.LFE208:
 311 0026 00BF     	 .section .text.XMC_ETH_MAC_Init,"ax",%progbits
 312              	 .align 2
 313              	 .global XMC_ETH_MAC_Init
 314              	 .thumb
 315              	 .thumb_func
 317              	XMC_ETH_MAC_Init:
 318              	.LFB209:
 202:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 203:../Libraries/XMCLib/src/xmc_eth_mac.c **** #ifdef XMC_ASSERT_ENABLE 
 204:../Libraries/XMCLib/src/xmc_eth_mac.c ****  
 205:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Check if the passed argument is a valid ETH module */ 
 206:../Libraries/XMCLib/src/xmc_eth_mac.c **** __STATIC_INLINE bool XMC_ETH_MAC_IsValidModule(ETH_GLOBAL_TypeDef *const eth)
 207:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 208:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth == ETH0);
 209:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 210:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 211:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 212:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 213:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC initialize */
 214:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_Init(XMC_ETH_MAC_t *const eth_mac)
 215:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 319              	 .loc 3 215 0
 320              	 .cfi_startproc
 321              	 
 322              	 
 323 0000 80B5     	 push {r7,lr}
 324              	.LCFI30:
 325              	 .cfi_def_cfa_offset 8
 326              	 .cfi_offset 7,-8
 327              	 .cfi_offset 14,-4
 328 0002 84B0     	 sub sp,sp,#16
 329              	.LCFI31:
 330              	 .cfi_def_cfa_offset 24
 331 0004 00AF     	 add r7,sp,#0
 332              	.LCFI32:
 333              	 .cfi_def_cfa_register 7
 334 0006 7860     	 str r0,[r7,#4]
 216:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 217:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 218:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_Init: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 219:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 220:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Enable(eth_mac);
 335              	 .loc 3 220 0
 336 0008 7868     	 ldr r0,[r7,#4]
 337 000a FFF7FEFF 	 bl XMC_ETH_MAC_Enable
 221:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_Reset(eth_mac);
 338              	 .loc 3 221 0
 339 000e 7868     	 ldr r0,[r7,#4]
 340 0010 FFF7FEFF 	 bl XMC_ETH_MAC_Reset
 222:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 223:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_SetManagmentClockDivider(eth_mac);
 341              	 .loc 3 223 0
 342 0014 7868     	 ldr r0,[r7,#4]
 343 0016 FFF7FEFF 	 bl XMC_ETH_MAC_SetManagmentClockDivider
 344 001a 0346     	 mov r3,r0
 345 001c FB73     	 strb r3,[r7,#15]
 224:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 225:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_SetAddress(eth_mac, eth_mac->address);
 346              	 .loc 3 225 0
 347 001e 7B68     	 ldr r3,[r7,#4]
 348 0020 D3E90223 	 ldrd r2,[r3,#8]
 349 0024 7868     	 ldr r0,[r7,#4]
 350 0026 FFF7FEFF 	 bl XMC_ETH_MAC_SetAddress
 226:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 227:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize MAC configuration */
 228:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->MAC_CONFIGURATION = (uint32_t)ETH_MAC_CONFIGURATION_IPC_Msk;
 351              	 .loc 3 228 0
 352 002a 7B68     	 ldr r3,[r7,#4]
 353 002c 1B68     	 ldr r3,[r3]
 354 002e 4FF48062 	 mov r2,#1024
 355 0032 1A60     	 str r2,[r3]
 229:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 230:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize Filter registers */
 231:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->FLOW_CONTROL = ETH_FLOW_CONTROL_DZPQ_Msk; /* Disable Zero Quanta Pause */
 356              	 .loc 3 231 0
 357 0034 7B68     	 ldr r3,[r7,#4]
 358 0036 1B68     	 ldr r3,[r3]
 359 0038 8022     	 movs r2,#128
 360 003a 9A61     	 str r2,[r3,#24]
 232:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 233:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE = (uint32_t)ETH_OPERATION_MODE_RSF_Msk |
 361              	 .loc 3 233 0
 362 003c 7B68     	 ldr r3,[r7,#4]
 363 003e 1B68     	 ldr r3,[r3]
 364 0040 03F58053 	 add r3,r3,#4096
 365 0044 1833     	 adds r3,r3,#24
 366 0046 4FF00872 	 mov r2,#35651584
 367 004a 1A60     	 str r2,[r3]
 234:../Libraries/XMCLib/src/xmc_eth_mac.c **** 		                          (uint32_t)ETH_OPERATION_MODE_TSF_Msk;
 235:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 236:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Increase enhanced descriptor to 8 WORDS, required when the Advanced Time-Stamp feature or Full
 237:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->BUS_MODE |= (uint32_t)ETH_BUS_MODE_ATDS_Msk;
 368              	 .loc 3 237 0
 369 004c 7B68     	 ldr r3,[r7,#4]
 370 004e 1B68     	 ldr r3,[r3]
 371 0050 7A68     	 ldr r2,[r7,#4]
 372 0052 1268     	 ldr r2,[r2]
 373 0054 02F58052 	 add r2,r2,#4096
 374 0058 1268     	 ldr r2,[r2]
 375 005a 42F08002 	 orr r2,r2,#128
 376 005e 03F58053 	 add r3,r3,#4096
 377 0062 1A60     	 str r2,[r3]
 238:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 239:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Initialize DMA Descriptors */
 240:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 378              	 .loc 3 240 0
 379 0064 7868     	 ldr r0,[r7,#4]
 380 0066 FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 241:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 381              	 .loc 3 241 0
 382 006a 7868     	 ldr r0,[r7,#4]
 383 006c FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 242:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 243:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Clear interrupts */
 244:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = 0xFFFFFFFFUL;
 384              	 .loc 3 244 0
 385 0070 7B68     	 ldr r3,[r7,#4]
 386 0072 1B68     	 ldr r3,[r3]
 387 0074 03F58053 	 add r3,r3,#4096
 388 0078 1433     	 adds r3,r3,#20
 389 007a 4FF0FF32 	 mov r2,#-1
 390 007e 1A60     	 str r2,[r3]
 245:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 246:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->frame_end = NULL;
 391              	 .loc 3 246 0
 392 0080 7B68     	 ldr r3,[r7,#4]
 393 0082 0022     	 movs r2,#0
 394 0084 1A62     	 str r2,[r3,#32]
 247:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 248:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 395              	 .loc 3 248 0
 396 0086 FB7B     	 ldrb r3,[r7,#15]
 249:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 397              	 .loc 3 249 0
 398 0088 1846     	 mov r0,r3
 399 008a 1037     	 adds r7,r7,#16
 400              	.LCFI33:
 401              	 .cfi_def_cfa_offset 8
 402 008c BD46     	 mov sp,r7
 403              	.LCFI34:
 404              	 .cfi_def_cfa_register 13
 405              	 
 406 008e 80BD     	 pop {r7,pc}
 407              	 .cfi_endproc
 408              	.LFE209:
 410              	 .section .text.XMC_ETH_MAC_InitRxDescriptors,"ax",%progbits
 411              	 .align 2
 412              	 .global XMC_ETH_MAC_InitRxDescriptors
 413              	 .thumb
 414              	 .thumb_func
 416              	XMC_ETH_MAC_InitRxDescriptors:
 417              	.LFB210:
 250:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 251:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize RX descriptors */
 252:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitRxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 253:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 418              	 .loc 3 253 0
 419              	 .cfi_startproc
 420              	 
 421              	 
 422              	 
 423 0000 80B4     	 push {r7}
 424              	.LCFI35:
 425              	 .cfi_def_cfa_offset 4
 426              	 .cfi_offset 7,-4
 427 0002 85B0     	 sub sp,sp,#20
 428              	.LCFI36:
 429              	 .cfi_def_cfa_offset 24
 430 0004 00AF     	 add r7,sp,#0
 431              	.LCFI37:
 432              	 .cfi_def_cfa_register 7
 433 0006 7860     	 str r0,[r7,#4]
 254:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 255:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 256:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 257:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitRxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 258:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 259:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /*
 260:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * Chained structure (ETH_MAC_DMA_RDES1_RCH), second address in the descriptor
 261:../Libraries/XMCLib/src/xmc_eth_mac.c ****    * (buffer2) is the next descriptor address
 262:../Libraries/XMCLib/src/xmc_eth_mac.c ****    */
 263:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_rx_buf; ++i)
 434              	 .loc 3 263 0
 435 0008 0023     	 movs r3,#0
 436 000a FB60     	 str r3,[r7,#12]
 437 000c 37E0     	 b .L17
 438              	.L19:
 264:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 265:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->rx_desc[i].status = (uint32_t)ETH_MAC_DMA_RDES0_OWN;
 439              	 .loc 3 265 0
 440 000e 7B68     	 ldr r3,[r7,#4]
 441 0010 1A69     	 ldr r2,[r3,#16]
 442 0012 FB68     	 ldr r3,[r7,#12]
 443 0014 5B01     	 lsls r3,r3,#5
 444 0016 1344     	 add r3,r3,r2
 445 0018 4FF00042 	 mov r2,#-2147483648
 446 001c 1A60     	 str r2,[r3]
 266:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->rx_desc[i].length = (uint32_t)ETH_MAC_DMA_RDES1_RCH | (uint32_t)XMC_ETH_MAC_BUF_SIZE;
 447              	 .loc 3 266 0
 448 001e 7B68     	 ldr r3,[r7,#4]
 449 0020 1A69     	 ldr r2,[r3,#16]
 450 0022 FB68     	 ldr r3,[r7,#12]
 451 0024 5B01     	 lsls r3,r3,#5
 452 0026 1344     	 add r3,r3,r2
 453 0028 44F2F452 	 movw r2,#17908
 454 002c 5A60     	 str r2,[r3,#4]
 267:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->rx_desc[i].buffer1 = (uint32_t)&(eth_mac->rx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 455              	 .loc 3 267 0
 456 002e 7B68     	 ldr r3,[r7,#4]
 457 0030 1A69     	 ldr r2,[r3,#16]
 458 0032 FB68     	 ldr r3,[r7,#12]
 459 0034 5B01     	 lsls r3,r3,#5
 460 0036 1344     	 add r3,r3,r2
 461 0038 7A68     	 ldr r2,[r7,#4]
 462 003a 9169     	 ldr r1,[r2,#24]
 463 003c FA68     	 ldr r2,[r7,#12]
 464 003e 40F2F450 	 movw r0,#1524
 465 0042 00FB02F2 	 mul r2,r0,r2
 466 0046 0A44     	 add r2,r2,r1
 467 0048 9A60     	 str r2,[r3,#8]
 268:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 468              	 .loc 3 268 0
 469 004a FB68     	 ldr r3,[r7,#12]
 470 004c 0133     	 adds r3,r3,#1
 471 004e BB60     	 str r3,[r7,#8]
 269:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_rx_buf)
 472              	 .loc 3 269 0
 473 0050 7B68     	 ldr r3,[r7,#4]
 474 0052 93F82430 	 ldrb r3,[r3,#36]
 475 0056 1A46     	 mov r2,r3
 476 0058 BB68     	 ldr r3,[r7,#8]
 477 005a 9A42     	 cmp r2,r3
 478 005c 01D1     	 bne .L18
 270:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 271:../Libraries/XMCLib/src/xmc_eth_mac.c ****       next = 0U;
 479              	 .loc 3 271 0
 480 005e 0023     	 movs r3,#0
 481 0060 BB60     	 str r3,[r7,#8]
 482              	.L18:
 272:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 273:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_desc[i].buffer2 = (uint32_t)&(eth_mac->rx_desc[next]);
 483              	 .loc 3 273 0 discriminator 2
 484 0062 7B68     	 ldr r3,[r7,#4]
 485 0064 1A69     	 ldr r2,[r3,#16]
 486 0066 FB68     	 ldr r3,[r7,#12]
 487 0068 5B01     	 lsls r3,r3,#5
 488 006a 1344     	 add r3,r3,r2
 489 006c 7A68     	 ldr r2,[r7,#4]
 490 006e 1169     	 ldr r1,[r2,#16]
 491 0070 BA68     	 ldr r2,[r7,#8]
 492 0072 5201     	 lsls r2,r2,#5
 493 0074 0A44     	 add r2,r2,r1
 494 0076 DA60     	 str r2,[r3,#12]
 263:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 495              	 .loc 3 263 0 discriminator 2
 496 0078 FB68     	 ldr r3,[r7,#12]
 497 007a 0133     	 adds r3,r3,#1
 498 007c FB60     	 str r3,[r7,#12]
 499              	.L17:
 263:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 500              	 .loc 3 263 0 is_stmt 0 discriminator 1
 501 007e 7B68     	 ldr r3,[r7,#4]
 502 0080 93F82430 	 ldrb r3,[r3,#36]
 503 0084 1A46     	 mov r2,r3
 504 0086 FB68     	 ldr r3,[r7,#12]
 505 0088 9A42     	 cmp r2,r3
 506 008a C0D8     	 bhi .L19
 274:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 275:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->RECEIVE_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->rx_desc[0]);
 507              	 .loc 3 275 0 is_stmt 1
 508 008c 7B68     	 ldr r3,[r7,#4]
 509 008e 1B68     	 ldr r3,[r3]
 510 0090 7A68     	 ldr r2,[r7,#4]
 511 0092 1269     	 ldr r2,[r2,#16]
 512 0094 03F58053 	 add r3,r3,#4096
 513 0098 0C33     	 adds r3,r3,#12
 514 009a 1A60     	 str r2,[r3]
 276:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index = 0U;
 515              	 .loc 3 276 0
 516 009c 7B68     	 ldr r3,[r7,#4]
 517 009e 0022     	 movs r2,#0
 518 00a0 83F82720 	 strb r2,[r3,#39]
 277:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 519              	 .loc 3 277 0
 520 00a4 1437     	 adds r7,r7,#20
 521              	.LCFI38:
 522              	 .cfi_def_cfa_offset 4
 523 00a6 BD46     	 mov sp,r7
 524              	.LCFI39:
 525              	 .cfi_def_cfa_register 13
 526              	 
 527 00a8 5DF8047B 	 ldr r7,[sp],#4
 528              	.LCFI40:
 529              	 .cfi_restore 7
 530              	 .cfi_def_cfa_offset 0
 531 00ac 7047     	 bx lr
 532              	 .cfi_endproc
 533              	.LFE210:
 535 00ae 00BF     	 .section .text.XMC_ETH_MAC_InitTxDescriptors,"ax",%progbits
 536              	 .align 2
 537              	 .global XMC_ETH_MAC_InitTxDescriptors
 538              	 .thumb
 539              	 .thumb_func
 541              	XMC_ETH_MAC_InitTxDescriptors:
 542              	.LFB211:
 278:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 279:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize TX descriptors */
 280:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitTxDescriptors(XMC_ETH_MAC_t *const eth_mac)
 281:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 543              	 .loc 3 281 0
 544              	 .cfi_startproc
 545              	 
 546              	 
 547              	 
 548 0000 80B4     	 push {r7}
 549              	.LCFI41:
 550              	 .cfi_def_cfa_offset 4
 551              	 .cfi_offset 7,-4
 552 0002 85B0     	 sub sp,sp,#20
 553              	.LCFI42:
 554              	 .cfi_def_cfa_offset 24
 555 0004 00AF     	 add r7,sp,#0
 556              	.LCFI43:
 557              	 .cfi_def_cfa_register 7
 558 0006 7860     	 str r0,[r7,#4]
 282:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i;
 283:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t next;
 284:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 285:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitTxDescriptors: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 286:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 287:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Chained structure (ETH_MAC_DMA_TDES0_TCH), second address in the descriptor (buffer2) is the n
 288:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < eth_mac->num_tx_buf; ++i)
 559              	 .loc 3 288 0
 560 0008 0023     	 movs r3,#0
 561 000a FB60     	 str r3,[r7,#12]
 562 000c 2EE0     	 b .L21
 563              	.L23:
 289:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 290:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->tx_desc[i].status = ETH_MAC_DMA_TDES0_TCH | ETH_MAC_DMA_TDES0_LS | ETH_MAC_DMA_TDES0_FS;
 564              	 .loc 3 290 0
 565 000e 7B68     	 ldr r3,[r7,#4]
 566 0010 5A69     	 ldr r2,[r3,#20]
 567 0012 FB68     	 ldr r3,[r7,#12]
 568 0014 5B01     	 lsls r3,r3,#5
 569 0016 1344     	 add r3,r3,r2
 570 0018 204A     	 ldr r2,.L24
 571 001a 1A60     	 str r2,[r3]
 291:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->tx_desc[i].buffer1 = (uint32_t)&(eth_mac->tx_buf[i * XMC_ETH_MAC_BUF_SIZE]);
 572              	 .loc 3 291 0
 573 001c 7B68     	 ldr r3,[r7,#4]
 574 001e 5A69     	 ldr r2,[r3,#20]
 575 0020 FB68     	 ldr r3,[r7,#12]
 576 0022 5B01     	 lsls r3,r3,#5
 577 0024 1344     	 add r3,r3,r2
 578 0026 7A68     	 ldr r2,[r7,#4]
 579 0028 D169     	 ldr r1,[r2,#28]
 580 002a FA68     	 ldr r2,[r7,#12]
 581 002c 40F2F450 	 movw r0,#1524
 582 0030 00FB02F2 	 mul r2,r0,r2
 583 0034 0A44     	 add r2,r2,r1
 584 0036 9A60     	 str r2,[r3,#8]
 292:../Libraries/XMCLib/src/xmc_eth_mac.c ****     next = i + 1U;
 585              	 .loc 3 292 0
 586 0038 FB68     	 ldr r3,[r7,#12]
 587 003a 0133     	 adds r3,r3,#1
 588 003c BB60     	 str r3,[r7,#8]
 293:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (next == eth_mac->num_tx_buf)
 589              	 .loc 3 293 0
 590 003e 7B68     	 ldr r3,[r7,#4]
 591 0040 93F82530 	 ldrb r3,[r3,#37]
 592 0044 1A46     	 mov r2,r3
 593 0046 BB68     	 ldr r3,[r7,#8]
 594 0048 9A42     	 cmp r2,r3
 595 004a 01D1     	 bne .L22
 294:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 295:../Libraries/XMCLib/src/xmc_eth_mac.c ****         next = 0U;
 596              	 .loc 3 295 0
 597 004c 0023     	 movs r3,#0
 598 004e BB60     	 str r3,[r7,#8]
 599              	.L22:
 296:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 297:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->tx_desc[i].buffer2 = (uint32_t)&(eth_mac->tx_desc[next]);
 600              	 .loc 3 297 0 discriminator 2
 601 0050 7B68     	 ldr r3,[r7,#4]
 602 0052 5A69     	 ldr r2,[r3,#20]
 603 0054 FB68     	 ldr r3,[r7,#12]
 604 0056 5B01     	 lsls r3,r3,#5
 605 0058 1344     	 add r3,r3,r2
 606 005a 7A68     	 ldr r2,[r7,#4]
 607 005c 5169     	 ldr r1,[r2,#20]
 608 005e BA68     	 ldr r2,[r7,#8]
 609 0060 5201     	 lsls r2,r2,#5
 610 0062 0A44     	 add r2,r2,r1
 611 0064 DA60     	 str r2,[r3,#12]
 288:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 612              	 .loc 3 288 0 discriminator 2
 613 0066 FB68     	 ldr r3,[r7,#12]
 614 0068 0133     	 adds r3,r3,#1
 615 006a FB60     	 str r3,[r7,#12]
 616              	.L21:
 288:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 617              	 .loc 3 288 0 is_stmt 0 discriminator 1
 618 006c 7B68     	 ldr r3,[r7,#4]
 619 006e 93F82530 	 ldrb r3,[r3,#37]
 620 0072 1A46     	 mov r2,r3
 621 0074 FB68     	 ldr r3,[r7,#12]
 622 0076 9A42     	 cmp r2,r3
 623 0078 C9D8     	 bhi .L23
 298:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 299:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TRANSMIT_DESCRIPTOR_LIST_ADDRESS = (uint32_t)&(eth_mac->tx_desc[0]);
 624              	 .loc 3 299 0 is_stmt 1
 625 007a 7B68     	 ldr r3,[r7,#4]
 626 007c 1B68     	 ldr r3,[r3]
 627 007e 7A68     	 ldr r2,[r7,#4]
 628 0080 5269     	 ldr r2,[r2,#20]
 629 0082 03F58053 	 add r3,r3,#4096
 630 0086 1033     	 adds r3,r3,#16
 631 0088 1A60     	 str r2,[r3]
 300:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_index = 0U;
 632              	 .loc 3 300 0
 633 008a 7B68     	 ldr r3,[r7,#4]
 634 008c 0022     	 movs r2,#0
 635 008e 83F82620 	 strb r2,[r3,#38]
 301:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 636              	 .loc 3 301 0
 637 0092 1437     	 adds r7,r7,#20
 638              	.LCFI44:
 639              	 .cfi_def_cfa_offset 4
 640 0094 BD46     	 mov sp,r7
 641              	.LCFI45:
 642              	 .cfi_def_cfa_register 13
 643              	 
 644 0096 5DF8047B 	 ldr r7,[sp],#4
 645              	.LCFI46:
 646              	 .cfi_restore 7
 647              	 .cfi_def_cfa_offset 0
 648 009a 7047     	 bx lr
 649              	.L25:
 650              	 .align 2
 651              	.L24:
 652 009c 00001030 	 .word 806354944
 653              	 .cfi_endproc
 654              	.LFE211:
 656              	 .section .text.XMC_ETH_MAC_SetAddressPerfectFilter,"ax",%progbits
 657              	 .align 2
 658              	 .global XMC_ETH_MAC_SetAddressPerfectFilter
 659              	 .thumb
 660              	 .thumb_func
 662              	XMC_ETH_MAC_SetAddressPerfectFilter:
 663              	.LFB212:
 302:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 303:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address perfect filter */
 304:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressPerfectFilter(XMC_ETH_MAC_t *const eth_mac,
 305:../Libraries/XMCLib/src/xmc_eth_mac.c **** 		                                 uint8_t index,
 306:../Libraries/XMCLib/src/xmc_eth_mac.c **** 								         const uint64_t addr,
 307:../Libraries/XMCLib/src/xmc_eth_mac.c **** 								         uint32_t flags)
 308:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 664              	 .loc 3 308 0
 665              	 .cfi_startproc
 666              	 
 667              	 
 668              	 
 669 0000 B0B4     	 push {r4,r5,r7}
 670              	.LCFI47:
 671              	 .cfi_def_cfa_offset 12
 672              	 .cfi_offset 4,-12
 673              	 .cfi_offset 5,-8
 674              	 .cfi_offset 7,-4
 675 0002 87B0     	 sub sp,sp,#28
 676              	.LCFI48:
 677              	 .cfi_def_cfa_offset 40
 678 0004 00AF     	 add r7,sp,#0
 679              	.LCFI49:
 680              	 .cfi_def_cfa_register 7
 681 0006 F860     	 str r0,[r7,#12]
 682 0008 C7E90023 	 strd r2,[r7]
 683 000c 0B46     	 mov r3,r1
 684 000e FB72     	 strb r3,[r7,#11]
 309:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 310:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 311:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressPerfectFilter: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(e
 312:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetAddressFilter: index is out of range", ((index > 0) && (index < 4)));
 313:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 314:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->MAC_ADDRESS0_HIGH);
 685              	 .loc 3 314 0
 686 0010 FB68     	 ldr r3,[r7,#12]
 687 0012 1B68     	 ldr r3,[r3]
 688 0014 4033     	 adds r3,r3,#64
 689 0016 7B61     	 str r3,[r7,#20]
 315:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index] = (uint32_t)(addr >> 32U) | flags;
 690              	 .loc 3 315 0
 691 0018 FB7A     	 ldrb r3,[r7,#11]
 692 001a 9B00     	 lsls r3,r3,#2
 693 001c 7A69     	 ldr r2,[r7,#20]
 694 001e D118     	 adds r1,r2,r3
 695 0020 D7E90023 	 ldrd r2,[r7]
 696 0024 1C00     	 movs r4,r3
 697 0026 0025     	 movs r5,#0
 698 0028 2246     	 mov r2,r4
 699 002a BB6A     	 ldr r3,[r7,#40]
 700 002c 1343     	 orrs r3,r3,r2
 701 002e 0B60     	 str r3,[r1]
 316:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg[index + 1U] = (uint32_t)addr;
 702              	 .loc 3 316 0
 703 0030 FB7A     	 ldrb r3,[r7,#11]
 704 0032 0133     	 adds r3,r3,#1
 705 0034 9B00     	 lsls r3,r3,#2
 706 0036 7A69     	 ldr r2,[r7,#20]
 707 0038 1344     	 add r3,r3,r2
 708 003a 3A68     	 ldr r2,[r7]
 709 003c 1A60     	 str r2,[r3]
 317:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 710              	 .loc 3 317 0
 711 003e 1C37     	 adds r7,r7,#28
 712              	.LCFI50:
 713              	 .cfi_def_cfa_offset 12
 714 0040 BD46     	 mov sp,r7
 715              	.LCFI51:
 716              	 .cfi_def_cfa_register 13
 717              	 
 718 0042 B0BC     	 pop {r4,r5,r7}
 719              	.LCFI52:
 720              	 .cfi_restore 7
 721              	 .cfi_restore 5
 722              	 .cfi_restore 4
 723              	 .cfi_def_cfa_offset 0
 724 0044 7047     	 bx lr
 725              	 .cfi_endproc
 726              	.LFE212:
 728              	 .section .text.XMC_ETH_MAC_SetAddressHashFilter,"ax",%progbits
 729              	 .align 2
 730              	 .global XMC_ETH_MAC_SetAddressHashFilter
 731              	 .thumb
 732              	 .thumb_func
 734              	XMC_ETH_MAC_SetAddressHashFilter:
 735              	.LFB213:
 318:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 319:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set address hash filter */
 320:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetAddressHashFilter(XMC_ETH_MAC_t *const eth_mac, const uint64_t hash)
 321:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 736              	 .loc 3 321 0
 737              	 .cfi_startproc
 738              	 
 739              	 
 740              	 
 741 0000 B0B4     	 push {r4,r5,r7}
 742              	.LCFI53:
 743              	 .cfi_def_cfa_offset 12
 744              	 .cfi_offset 4,-12
 745              	 .cfi_offset 5,-8
 746              	 .cfi_offset 7,-4
 747 0002 85B0     	 sub sp,sp,#20
 748              	.LCFI54:
 749              	 .cfi_def_cfa_offset 32
 750 0004 00AF     	 add r7,sp,#0
 751              	.LCFI55:
 752              	 .cfi_def_cfa_register 7
 753 0006 F860     	 str r0,[r7,#12]
 754 0008 C7E90023 	 strd r2,[r7]
 322:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_HIGH = (uint32_t)(hash >> 32);
 755              	 .loc 3 322 0
 756 000c FB68     	 ldr r3,[r7,#12]
 757 000e 1968     	 ldr r1,[r3]
 758 0010 D7E90023 	 ldrd r2,[r7]
 759 0014 1C00     	 movs r4,r3
 760 0016 0025     	 movs r5,#0
 761 0018 2346     	 mov r3,r4
 762 001a 8B60     	 str r3,[r1,#8]
 323:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->HASH_TABLE_LOW = (uint32_t)hash;
 763              	 .loc 3 323 0
 764 001c FB68     	 ldr r3,[r7,#12]
 765 001e 1B68     	 ldr r3,[r3]
 766 0020 3A68     	 ldr r2,[r7]
 767 0022 DA60     	 str r2,[r3,#12]
 324:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 768              	 .loc 3 324 0
 769 0024 1437     	 adds r7,r7,#20
 770              	.LCFI56:
 771              	 .cfi_def_cfa_offset 12
 772 0026 BD46     	 mov sp,r7
 773              	.LCFI57:
 774              	 .cfi_def_cfa_register 13
 775              	 
 776 0028 B0BC     	 pop {r4,r5,r7}
 777              	.LCFI58:
 778              	 .cfi_restore 7
 779              	 .cfi_restore 5
 780              	 .cfi_restore 4
 781              	 .cfi_def_cfa_offset 0
 782 002a 7047     	 bx lr
 783              	 .cfi_endproc
 784              	.LFE213:
 786              	 .section .text.XMC_ETH_MAC_SendFrame,"ax",%progbits
 787              	 .align 2
 788              	 .global XMC_ETH_MAC_SendFrame
 789              	 .thumb
 790              	 .thumb_func
 792              	XMC_ETH_MAC_SendFrame:
 793              	.LFB214:
 325:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 326:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Send frame */
 327:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SendFrame(XMC_ETH_MAC_t *const eth_mac, const uint8_t *frame, uint
 328:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 794              	 .loc 3 328 0
 795              	 .cfi_startproc
 796              	 
 797              	 
 798 0000 80B5     	 push {r7,lr}
 799              	.LCFI59:
 800              	 .cfi_def_cfa_offset 8
 801              	 .cfi_offset 7,-8
 802              	 .cfi_offset 14,-4
 803 0002 88B0     	 sub sp,sp,#32
 804              	.LCFI60:
 805              	 .cfi_def_cfa_offset 40
 806 0004 00AF     	 add r7,sp,#0
 807              	.LCFI61:
 808              	 .cfi_def_cfa_register 7
 809 0006 F860     	 str r0,[r7,#12]
 810 0008 B960     	 str r1,[r7,#8]
 811 000a 7A60     	 str r2,[r7,#4]
 812 000c 3B60     	 str r3,[r7]
 329:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 330:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t *dst;
 331:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t ctrl;
 332:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 333:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac != NULL);
 334:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", eth_mac->regs == ETH0);
 335:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SendFrame:", (frame != NULL) && (len > 0));
 336:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 337:../Libraries/XMCLib/src/xmc_eth_mac.c ****   dst = eth_mac->frame_end;
 813              	 .loc 3 337 0
 814 000e FB68     	 ldr r3,[r7,#12]
 815 0010 1B6A     	 ldr r3,[r3,#32]
 816 0012 BB61     	 str r3,[r7,#24]
 338:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 339:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN)
 817              	 .loc 3 339 0
 818 0014 FB68     	 ldr r3,[r7,#12]
 819 0016 5A69     	 ldr r2,[r3,#20]
 820 0018 FB68     	 ldr r3,[r7,#12]
 821 001a 93F82630 	 ldrb r3,[r3,#38]
 822 001e 5B01     	 lsls r3,r3,#5
 823 0020 1344     	 add r3,r3,r2
 824 0022 1B68     	 ldr r3,[r3]
 825 0024 002B     	 cmp r3,#0
 826 0026 1BDA     	 bge .L29
 340:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 341:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Transmitter is busy, wait */
 342:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 827              	 .loc 3 342 0
 828 0028 0123     	 movs r3,#1
 829 002a FB77     	 strb r3,[r7,#31]
 343:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (eth_mac->regs->STATUS & ETH_STATUS_TU_Msk)
 830              	 .loc 3 343 0
 831 002c FB68     	 ldr r3,[r7,#12]
 832 002e 1B68     	 ldr r3,[r3]
 833 0030 03F58053 	 add r3,r3,#4096
 834 0034 1433     	 adds r3,r3,#20
 835 0036 1B68     	 ldr r3,[r3]
 836 0038 03F00403 	 and r3,r3,#4
 837 003c 002B     	 cmp r3,#0
 838 003e 00F09E80 	 beq .L31
 344:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 345:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Receive buffer unavailable, resume DMA */
 346:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TU_Msk;
 839              	 .loc 3 346 0
 840 0042 FB68     	 ldr r3,[r7,#12]
 841 0044 1B68     	 ldr r3,[r3]
 842 0046 03F58053 	 add r3,r3,#4096
 843 004a 1433     	 adds r3,r3,#20
 844 004c 0422     	 movs r2,#4
 845 004e 1A60     	 str r2,[r3]
 347:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 846              	 .loc 3 347 0
 847 0050 FB68     	 ldr r3,[r7,#12]
 848 0052 1B68     	 ldr r3,[r3]
 849 0054 03F58053 	 add r3,r3,#4096
 850 0058 0433     	 adds r3,r3,#4
 851 005a 0022     	 movs r2,#0
 852 005c 1A60     	 str r2,[r3]
 853 005e 8EE0     	 b .L31
 854              	.L29:
 348:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 349:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 350:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 351:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 352:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 353:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (dst == NULL)
 855              	 .loc 3 353 0
 856 0060 BB69     	 ldr r3,[r7,#24]
 857 0062 002B     	 cmp r3,#0
 858 0064 12D1     	 bne .L32
 354:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 355:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start of a new transmit frame */
 356:../Libraries/XMCLib/src/xmc_eth_mac.c ****       dst = (uint8_t *)eth_mac->tx_desc[eth_mac->tx_index].buffer1;
 859              	 .loc 3 356 0
 860 0066 FB68     	 ldr r3,[r7,#12]
 861 0068 5A69     	 ldr r2,[r3,#20]
 862 006a FB68     	 ldr r3,[r7,#12]
 863 006c 93F82630 	 ldrb r3,[r3,#38]
 864 0070 5B01     	 lsls r3,r3,#5
 865 0072 1344     	 add r3,r3,r2
 866 0074 9B68     	 ldr r3,[r3,#8]
 867 0076 BB61     	 str r3,[r7,#24]
 357:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length = len;
 868              	 .loc 3 357 0
 869 0078 FB68     	 ldr r3,[r7,#12]
 870 007a 5A69     	 ldr r2,[r3,#20]
 871 007c FB68     	 ldr r3,[r7,#12]
 872 007e 93F82630 	 ldrb r3,[r3,#38]
 873 0082 5B01     	 lsls r3,r3,#5
 874 0084 1344     	 add r3,r3,r2
 875 0086 7A68     	 ldr r2,[r7,#4]
 876 0088 5A60     	 str r2,[r3,#4]
 877 008a 11E0     	 b .L33
 878              	.L32:
 358:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 359:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 360:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 361:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Sending data fragments in progress */
 362:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].length += len;
 879              	 .loc 3 362 0
 880 008c FB68     	 ldr r3,[r7,#12]
 881 008e 5A69     	 ldr r2,[r3,#20]
 882 0090 FB68     	 ldr r3,[r7,#12]
 883 0092 93F82630 	 ldrb r3,[r3,#38]
 884 0096 5B01     	 lsls r3,r3,#5
 885 0098 1344     	 add r3,r3,r2
 886 009a FA68     	 ldr r2,[r7,#12]
 887 009c 5169     	 ldr r1,[r2,#20]
 888 009e FA68     	 ldr r2,[r7,#12]
 889 00a0 92F82620 	 ldrb r2,[r2,#38]
 890 00a4 5201     	 lsls r2,r2,#5
 891 00a6 0A44     	 add r2,r2,r1
 892 00a8 5168     	 ldr r1,[r2,#4]
 893 00aa 7A68     	 ldr r2,[r7,#4]
 894 00ac 0A44     	 add r2,r2,r1
 895 00ae 5A60     	 str r2,[r3,#4]
 896              	.L33:
 363:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 364:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 365:../Libraries/XMCLib/src/xmc_eth_mac.c ****     memcpy(dst, frame, len);
 897              	 .loc 3 365 0
 898 00b0 B869     	 ldr r0,[r7,#24]
 899 00b2 B968     	 ldr r1,[r7,#8]
 900 00b4 7A68     	 ldr r2,[r7,#4]
 901 00b6 FFF7FEFF 	 bl memcpy
 366:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 367:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_FRAGMENT)
 902              	 .loc 3 367 0
 903 00ba 3B68     	 ldr r3,[r7]
 904 00bc 03F00103 	 and r3,r3,#1
 905 00c0 002B     	 cmp r3,#0
 906 00c2 03D0     	 beq .L34
 368:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 369:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* More data to come, remember current write position */
 370:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = dst;
 907              	 .loc 3 370 0
 908 00c4 FB68     	 ldr r3,[r7,#12]
 909 00c6 BA69     	 ldr r2,[r7,#24]
 910 00c8 1A62     	 str r2,[r3,#32]
 911 00ca 56E0     	 b .L35
 912              	.L34:
 371:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 372:../Libraries/XMCLib/src/xmc_eth_mac.c ****     else
 373:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 374:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Frame is now ready, send it to DMA */
 375:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl = eth_mac->tx_desc[eth_mac->tx_index].status | ETH_MAC_DMA_TDES0_CIC;
 913              	 .loc 3 375 0
 914 00cc FB68     	 ldr r3,[r7,#12]
 915 00ce 5A69     	 ldr r2,[r3,#20]
 916 00d0 FB68     	 ldr r3,[r7,#12]
 917 00d2 93F82630 	 ldrb r3,[r3,#38]
 918 00d6 5B01     	 lsls r3,r3,#5
 919 00d8 1344     	 add r3,r3,r2
 920 00da 1B68     	 ldr r3,[r3]
 921 00dc 43F44003 	 orr r3,r3,#12582912
 922 00e0 7B61     	 str r3,[r7,#20]
 376:../Libraries/XMCLib/src/xmc_eth_mac.c ****       ctrl &= ~(ETH_MAC_DMA_TDES0_IC | ETH_MAC_DMA_TDES0_TTSE);
 923              	 .loc 3 376 0
 924 00e2 7B69     	 ldr r3,[r7,#20]
 925 00e4 23F08443 	 bic r3,r3,#1107296256
 926 00e8 7B61     	 str r3,[r7,#20]
 377:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 378:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_EVENT)
 927              	 .loc 3 378 0
 928 00ea 3B68     	 ldr r3,[r7]
 929 00ec 03F00203 	 and r3,r3,#2
 930 00f0 002B     	 cmp r3,#0
 931 00f2 03D0     	 beq .L36
 379:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 380:../Libraries/XMCLib/src/xmc_eth_mac.c ****     	ctrl |= ETH_MAC_DMA_TDES0_IC;
 932              	 .loc 3 380 0
 933 00f4 7B69     	 ldr r3,[r7,#20]
 934 00f6 43F08043 	 orr r3,r3,#1073741824
 935 00fa 7B61     	 str r3,[r7,#20]
 936              	.L36:
 381:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 382:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 383:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (flags & (uint32_t)XMC_ETH_MAC_TX_FRAME_TIMESTAMP)
 937              	 .loc 3 383 0
 938 00fc 3B68     	 ldr r3,[r7]
 939 00fe 03F00403 	 and r3,r3,#4
 940 0102 002B     	 cmp r3,#0
 941 0104 03D0     	 beq .L37
 384:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 385:../Libraries/XMCLib/src/xmc_eth_mac.c ****     	ctrl |= ETH_MAC_DMA_TDES0_TTSE;
 942              	 .loc 3 385 0
 943 0106 7B69     	 ldr r3,[r7,#20]
 944 0108 43F00073 	 orr r3,r3,#33554432
 945 010c 7B61     	 str r3,[r7,#20]
 946              	.L37:
 386:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 387:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_ts_index = eth_mac->tx_index;
 947              	 .loc 3 387 0
 948 010e FB68     	 ldr r3,[r7,#12]
 949 0110 93F82620 	 ldrb r2,[r3,#38]
 950 0114 FB68     	 ldr r3,[r7,#12]
 951 0116 83F82820 	 strb r2,[r3,#40]
 388:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 389:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_desc[eth_mac->tx_index].status = ctrl | ETH_MAC_DMA_TDES0_OWN;
 952              	 .loc 3 389 0
 953 011a FB68     	 ldr r3,[r7,#12]
 954 011c 5A69     	 ldr r2,[r3,#20]
 955 011e FB68     	 ldr r3,[r7,#12]
 956 0120 93F82630 	 ldrb r3,[r3,#38]
 957 0124 5B01     	 lsls r3,r3,#5
 958 0126 1344     	 add r3,r3,r2
 959 0128 7A69     	 ldr r2,[r7,#20]
 960 012a 42F00042 	 orr r2,r2,#-2147483648
 961 012e 1A60     	 str r2,[r3]
 390:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 391:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->tx_index++;
 962              	 .loc 3 391 0
 963 0130 FB68     	 ldr r3,[r7,#12]
 964 0132 93F82630 	 ldrb r3,[r3,#38]
 965 0136 0133     	 adds r3,r3,#1
 966 0138 DAB2     	 uxtb r2,r3
 967 013a FB68     	 ldr r3,[r7,#12]
 968 013c 83F82620 	 strb r2,[r3,#38]
 392:../Libraries/XMCLib/src/xmc_eth_mac.c ****       if (eth_mac->tx_index == eth_mac->num_tx_buf)
 969              	 .loc 3 392 0
 970 0140 FB68     	 ldr r3,[r7,#12]
 971 0142 93F82620 	 ldrb r2,[r3,#38]
 972 0146 FB68     	 ldr r3,[r7,#12]
 973 0148 93F82530 	 ldrb r3,[r3,#37]
 974 014c 9A42     	 cmp r2,r3
 975 014e 03D1     	 bne .L38
 393:../Libraries/XMCLib/src/xmc_eth_mac.c ****       {
 394:../Libraries/XMCLib/src/xmc_eth_mac.c ****     	eth_mac->tx_index = 0U;
 976              	 .loc 3 394 0
 977 0150 FB68     	 ldr r3,[r7,#12]
 978 0152 0022     	 movs r2,#0
 979 0154 83F82620 	 strb r2,[r3,#38]
 980              	.L38:
 395:../Libraries/XMCLib/src/xmc_eth_mac.c ****       }
 396:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->frame_end = NULL;
 981              	 .loc 3 396 0
 982 0158 FB68     	 ldr r3,[r7,#12]
 983 015a 0022     	 movs r2,#0
 984 015c 1A62     	 str r2,[r3,#32]
 397:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 398:../Libraries/XMCLib/src/xmc_eth_mac.c ****       /* Start frame transmission */
 399:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_TPS_Msk;
 985              	 .loc 3 399 0
 986 015e FB68     	 ldr r3,[r7,#12]
 987 0160 1B68     	 ldr r3,[r3]
 988 0162 03F58053 	 add r3,r3,#4096
 989 0166 1433     	 adds r3,r3,#20
 990 0168 0222     	 movs r2,#2
 991 016a 1A60     	 str r2,[r3]
 400:../Libraries/XMCLib/src/xmc_eth_mac.c ****       eth_mac->regs->TRANSMIT_POLL_DEMAND = 0U;
 992              	 .loc 3 400 0
 993 016c FB68     	 ldr r3,[r7,#12]
 994 016e 1B68     	 ldr r3,[r3]
 995 0170 03F58053 	 add r3,r3,#4096
 996 0174 0433     	 adds r3,r3,#4
 997 0176 0022     	 movs r2,#0
 998 0178 1A60     	 str r2,[r3]
 999              	.L35:
 401:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 402:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_OK;
 1000              	 .loc 3 402 0
 1001 017a 0023     	 movs r3,#0
 1002 017c FB77     	 strb r3,[r7,#31]
 1003              	.L31:
 403:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 404:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 405:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 1004              	 .loc 3 405 0
 1005 017e FB7F     	 ldrb r3,[r7,#31]
 406:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1006              	 .loc 3 406 0
 1007 0180 1846     	 mov r0,r3
 1008 0182 2037     	 adds r7,r7,#32
 1009              	.LCFI62:
 1010              	 .cfi_def_cfa_offset 8
 1011 0184 BD46     	 mov sp,r7
 1012              	.LCFI63:
 1013              	 .cfi_def_cfa_register 13
 1014              	 
 1015 0186 80BD     	 pop {r7,pc}
 1016              	 .cfi_endproc
 1017              	.LFE214:
 1019              	 .section .text.XMC_ETH_MAC_ReadFrame,"ax",%progbits
 1020              	 .align 2
 1021              	 .global XMC_ETH_MAC_ReadFrame
 1022              	 .thumb
 1023              	 .thumb_func
 1025              	XMC_ETH_MAC_ReadFrame:
 1026              	.LFB215:
 407:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 408:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read frame */
 409:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_ReadFrame(XMC_ETH_MAC_t *const eth_mac, uint8_t *frame, uint32_t len)
 410:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1027              	 .loc 3 410 0
 1028              	 .cfi_startproc
 1029              	 
 1030              	 
 1031 0000 80B5     	 push {r7,lr}
 1032              	.LCFI64:
 1033              	 .cfi_def_cfa_offset 8
 1034              	 .cfi_offset 7,-8
 1035              	 .cfi_offset 14,-4
 1036 0002 86B0     	 sub sp,sp,#24
 1037              	.LCFI65:
 1038              	 .cfi_def_cfa_offset 32
 1039 0004 00AF     	 add r7,sp,#0
 1040              	.LCFI66:
 1041              	 .cfi_def_cfa_register 7
 1042 0006 F860     	 str r0,[r7,#12]
 1043 0008 B960     	 str r1,[r7,#8]
 1044 000a 7A60     	 str r2,[r7,#4]
 411:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint8_t const *src;
 412:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 413:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac != NULL);
 414:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", eth_mac->regs == ETH0);
 415:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ReadFrame:", (frame != NULL) && (len > 0));
 416:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 417:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fast-copy data to packet buffer */
 418:../Libraries/XMCLib/src/xmc_eth_mac.c ****   src = (uint8_t const *)eth_mac->rx_desc[eth_mac->rx_index].buffer1;
 1045              	 .loc 3 418 0
 1046 000c FB68     	 ldr r3,[r7,#12]
 1047 000e 1A69     	 ldr r2,[r3,#16]
 1048 0010 FB68     	 ldr r3,[r7,#12]
 1049 0012 93F82730 	 ldrb r3,[r3,#39]
 1050 0016 5B01     	 lsls r3,r3,#5
 1051 0018 1344     	 add r3,r3,r2
 1052 001a 9B68     	 ldr r3,[r3,#8]
 1053 001c 7B61     	 str r3,[r7,#20]
 419:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 420:../Libraries/XMCLib/src/xmc_eth_mac.c ****   memcpy(frame, src, len);
 1054              	 .loc 3 420 0
 1055 001e B868     	 ldr r0,[r7,#8]
 1056 0020 7969     	 ldr r1,[r7,#20]
 1057 0022 7A68     	 ldr r2,[r7,#4]
 1058 0024 FFF7FEFF 	 bl memcpy
 421:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 422:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Return this block back to DMA */
 423:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status = ETH_MAC_DMA_RDES0_OWN;
 1059              	 .loc 3 423 0
 1060 0028 FB68     	 ldr r3,[r7,#12]
 1061 002a 1A69     	 ldr r2,[r3,#16]
 1062 002c FB68     	 ldr r3,[r7,#12]
 1063 002e 93F82730 	 ldrb r3,[r3,#39]
 1064 0032 5B01     	 lsls r3,r3,#5
 1065 0034 1344     	 add r3,r3,r2
 1066 0036 4FF00042 	 mov r2,#-2147483648
 1067 003a 1A60     	 str r2,[r3]
 424:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 425:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_index++;
 1068              	 .loc 3 425 0
 1069 003c FB68     	 ldr r3,[r7,#12]
 1070 003e 93F82730 	 ldrb r3,[r3,#39]
 1071 0042 0133     	 adds r3,r3,#1
 1072 0044 DAB2     	 uxtb r2,r3
 1073 0046 FB68     	 ldr r3,[r7,#12]
 1074 0048 83F82720 	 strb r2,[r3,#39]
 426:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->rx_index == eth_mac->num_rx_buf)
 1075              	 .loc 3 426 0
 1076 004c FB68     	 ldr r3,[r7,#12]
 1077 004e 93F82720 	 ldrb r2,[r3,#39]
 1078 0052 FB68     	 ldr r3,[r7,#12]
 1079 0054 93F82430 	 ldrb r3,[r3,#36]
 1080 0058 9A42     	 cmp r2,r3
 1081 005a 03D1     	 bne .L41
 427:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 428:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->rx_index = 0U;
 1082              	 .loc 3 428 0
 1083 005c FB68     	 ldr r3,[r7,#12]
 1084 005e 0022     	 movs r2,#0
 1085 0060 83F82720 	 strb r2,[r3,#39]
 1086              	.L41:
 429:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 430:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 431:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac->regs->STATUS & ETH_STATUS_RU_Msk)
 1087              	 .loc 3 431 0
 1088 0064 FB68     	 ldr r3,[r7,#12]
 1089 0066 1B68     	 ldr r3,[r3]
 1090 0068 03F58053 	 add r3,r3,#4096
 1091 006c 1433     	 adds r3,r3,#20
 1092 006e 1B68     	 ldr r3,[r3]
 1093 0070 03F08003 	 and r3,r3,#128
 1094 0074 002B     	 cmp r3,#0
 1095 0076 0DD0     	 beq .L42
 432:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 433:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Receive buffer unavailable, resume DMA */
 434:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->regs->STATUS = (uint32_t)ETH_STATUS_RU_Msk;
 1096              	 .loc 3 434 0
 1097 0078 FB68     	 ldr r3,[r7,#12]
 1098 007a 1B68     	 ldr r3,[r3]
 1099 007c 03F58053 	 add r3,r3,#4096
 1100 0080 1433     	 adds r3,r3,#20
 1101 0082 8022     	 movs r2,#128
 1102 0084 1A60     	 str r2,[r3]
 435:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->regs->RECEIVE_POLL_DEMAND = 0U;
 1103              	 .loc 3 435 0
 1104 0086 FB68     	 ldr r3,[r7,#12]
 1105 0088 1B68     	 ldr r3,[r3]
 1106 008a 03F58053 	 add r3,r3,#4096
 1107 008e 0833     	 adds r3,r3,#8
 1108 0090 0022     	 movs r2,#0
 1109 0092 1A60     	 str r2,[r3]
 1110              	.L42:
 436:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 437:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 438:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (len);
 1111              	 .loc 3 438 0
 1112 0094 7B68     	 ldr r3,[r7,#4]
 439:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1113              	 .loc 3 439 0
 1114 0096 1846     	 mov r0,r3
 1115 0098 1837     	 adds r7,r7,#24
 1116              	.LCFI67:
 1117              	 .cfi_def_cfa_offset 8
 1118 009a BD46     	 mov sp,r7
 1119              	.LCFI68:
 1120              	 .cfi_def_cfa_register 13
 1121              	 
 1122 009c 80BD     	 pop {r7,pc}
 1123              	 .cfi_endproc
 1124              	.LFE215:
 1126 009e 00BF     	 .section .text.XMC_ETH_MAC_GetRxFrameSize,"ax",%progbits
 1127              	 .align 2
 1128              	 .global XMC_ETH_MAC_GetRxFrameSize
 1129              	 .thumb
 1130              	 .thumb_func
 1132              	XMC_ETH_MAC_GetRxFrameSize:
 1133              	.LFB216:
 440:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 441:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get RX frame size */
 442:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetRxFrameSize(XMC_ETH_MAC_t *const eth_mac)
 443:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1134              	 .loc 3 443 0
 1135              	 .cfi_startproc
 1136              	 
 1137              	 
 1138              	 
 1139 0000 80B4     	 push {r7}
 1140              	.LCFI69:
 1141              	 .cfi_def_cfa_offset 4
 1142              	 .cfi_offset 7,-4
 1143 0002 85B0     	 sub sp,sp,#20
 1144              	.LCFI70:
 1145              	 .cfi_def_cfa_offset 24
 1146 0004 00AF     	 add r7,sp,#0
 1147              	.LCFI71:
 1148              	 .cfi_def_cfa_register 7
 1149 0006 7860     	 str r0,[r7,#4]
 444:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t status;
 445:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t len = 0U;
 1150              	 .loc 3 445 0
 1151 0008 0023     	 movs r3,#0
 1152 000a FB60     	 str r3,[r7,#12]
 446:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 447:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = eth_mac->rx_desc[eth_mac->rx_index].status;
 1153              	 .loc 3 447 0
 1154 000c 7B68     	 ldr r3,[r7,#4]
 1155 000e 1A69     	 ldr r2,[r3,#16]
 1156 0010 7B68     	 ldr r3,[r7,#4]
 1157 0012 93F82730 	 ldrb r3,[r3,#39]
 1158 0016 5B01     	 lsls r3,r3,#5
 1159 0018 1344     	 add r3,r3,r2
 1160 001a 1B68     	 ldr r3,[r3]
 1161 001c BB60     	 str r3,[r7,#8]
 448:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 449:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (status & ETH_MAC_DMA_RDES0_OWN)
 1162              	 .loc 3 449 0
 1163 001e BB68     	 ldr r3,[r7,#8]
 1164 0020 002B     	 cmp r3,#0
 1165 0022 02DA     	 bge .L45
 450:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 451:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Owned by DMA */
 452:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0U;
 1166              	 .loc 3 452 0
 1167 0024 0023     	 movs r3,#0
 1168 0026 FB60     	 str r3,[r7,#12]
 1169 0028 18E0     	 b .L46
 1170              	.L45:
 453:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 454:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (((status & ETH_MAC_DMA_RDES0_ES) != 0U) ||
 1171              	 .loc 3 454 0
 1172 002a BB68     	 ldr r3,[r7,#8]
 1173 002c 03F40043 	 and r3,r3,#32768
 1174 0030 002B     	 cmp r3,#0
 1175 0032 09D1     	 bne .L47
 455:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 1176              	 .loc 3 455 0 discriminator 1
 1177 0034 BB68     	 ldr r3,[r7,#8]
 1178 0036 03F40073 	 and r3,r3,#512
 454:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 1179              	 .loc 3 454 0 discriminator 1
 1180 003a 002B     	 cmp r3,#0
 1181 003c 04D0     	 beq .L47
 456:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_LS) == 0U)) 
 1182              	 .loc 3 456 0
 1183 003e BB68     	 ldr r3,[r7,#8]
 1184 0040 03F48073 	 and r3,r3,#256
 455:../Libraries/XMCLib/src/xmc_eth_mac.c ****            ((status & ETH_MAC_DMA_RDES0_FS) == 0U) ||
 1185              	 .loc 3 455 0
 1186 0044 002B     	 cmp r3,#0
 1187 0046 03D1     	 bne .L48
 1188              	.L47:
 457:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 458:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Error, this block is invalid */
 459:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = 0xFFFFFFFFU;
 1189              	 .loc 3 459 0
 1190 0048 4FF0FF33 	 mov r3,#-1
 1191 004c FB60     	 str r3,[r7,#12]
 1192 004e 05E0     	 b .L46
 1193              	.L48:
 460:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 461:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else 
 462:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 463:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Subtract CRC */
 464:../Libraries/XMCLib/src/xmc_eth_mac.c ****     len = ((status & ETH_MAC_DMA_RDES0_FL) >> 16U) - 4U;
 1194              	 .loc 3 464 0
 1195 0050 BA68     	 ldr r2,[r7,#8]
 1196 0052 064B     	 ldr r3,.L50
 1197 0054 1340     	 ands r3,r3,r2
 1198 0056 1B0C     	 lsrs r3,r3,#16
 1199 0058 043B     	 subs r3,r3,#4
 1200 005a FB60     	 str r3,[r7,#12]
 1201              	.L46:
 465:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 466:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 467:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return len;
 1202              	 .loc 3 467 0
 1203 005c FB68     	 ldr r3,[r7,#12]
 468:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1204              	 .loc 3 468 0
 1205 005e 1846     	 mov r0,r3
 1206 0060 1437     	 adds r7,r7,#20
 1207              	.LCFI72:
 1208              	 .cfi_def_cfa_offset 4
 1209 0062 BD46     	 mov sp,r7
 1210              	.LCFI73:
 1211              	 .cfi_def_cfa_register 13
 1212              	 
 1213 0064 5DF8047B 	 ldr r7,[sp],#4
 1214              	.LCFI74:
 1215              	 .cfi_restore 7
 1216              	 .cfi_def_cfa_offset 0
 1217 0068 7047     	 bx lr
 1218              	.L51:
 1219 006a 00BF     	 .align 2
 1220              	.L50:
 1221 006c 0000FF3F 	 .word 1073676288
 1222              	 .cfi_endproc
 1223              	.LFE216:
 1225              	 .section .text.XMC_ETH_MAC_SetManagmentClockDivider,"ax",%progbits
 1226              	 .align 2
 1227              	 .global XMC_ETH_MAC_SetManagmentClockDivider
 1228              	 .thumb
 1229              	 .thumb_func
 1231              	XMC_ETH_MAC_SetManagmentClockDivider:
 1232              	.LFB217:
 469:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 470:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set management clock divider */
 471:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_SetManagmentClockDivider(XMC_ETH_MAC_t *const eth_mac)
 472:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1233              	 .loc 3 472 0
 1234              	 .cfi_startproc
 1235              	 
 1236              	 
 1237 0000 80B5     	 push {r7,lr}
 1238              	.LCFI75:
 1239              	 .cfi_def_cfa_offset 8
 1240              	 .cfi_offset 7,-8
 1241              	 .cfi_offset 14,-4
 1242 0002 86B0     	 sub sp,sp,#24
 1243              	.LCFI76:
 1244              	 .cfi_def_cfa_offset 32
 1245 0004 00AF     	 add r7,sp,#0
 1246              	.LCFI77:
 1247              	 .cfi_def_cfa_register 7
 1248 0006 7860     	 str r0,[r7,#4]
 473:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t eth_mac_clk;
 474:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 475:../Libraries/XMCLib/src/xmc_eth_mac.c ****   __IO uint32_t *reg;
 476:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 477:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac_clk = XMC_SCU_CLOCK_GetEthernetClockFrequency();
 1249              	 .loc 3 477 0
 1250 0008 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetEthernetClockFrequency
 1251 000c 3861     	 str r0,[r7,#16]
 478:../Libraries/XMCLib/src/xmc_eth_mac.c ****   status = XMC_ETH_MAC_STATUS_OK;
 1252              	 .loc 3 478 0
 1253 000e 0023     	 movs r3,#0
 1254 0010 FB75     	 strb r3,[r7,#23]
 479:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 480:../Libraries/XMCLib/src/xmc_eth_mac.c ****   reg = &(eth_mac->regs->GMII_ADDRESS);
 1255              	 .loc 3 480 0
 1256 0012 7B68     	 ldr r3,[r7,#4]
 1257 0014 1B68     	 ldr r3,[r3]
 1258 0016 1033     	 adds r3,r3,#16
 1259 0018 FB60     	 str r3,[r7,#12]
 481:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_35MHZ)
 1260              	 .loc 3 481 0
 1261 001a 3B69     	 ldr r3,[r7,#16]
 1262 001c 1A4A     	 ldr r2,.L61
 1263 001e 9342     	 cmp r3,r2
 1264 0020 03D8     	 bhi .L53
 482:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 483:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	*reg = XMC_ETH_MAC_MDC_DIVIDER_16;
 1265              	 .loc 3 483 0
 1266 0022 FB68     	 ldr r3,[r7,#12]
 1267 0024 0822     	 movs r2,#8
 1268 0026 1A60     	 str r2,[r3]
 1269 0028 29E0     	 b .L54
 1270              	.L53:
 484:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 485:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_60MHZ)
 1271              	 .loc 3 485 0
 1272 002a 3B69     	 ldr r3,[r7,#16]
 1273 002c 174A     	 ldr r2,.L61+4
 1274 002e 9342     	 cmp r3,r2
 1275 0030 03D8     	 bhi .L55
 486:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 487:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	*reg = XMC_ETH_MAC_MDC_DIVIDER_26;
 1276              	 .loc 3 487 0
 1277 0032 FB68     	 ldr r3,[r7,#12]
 1278 0034 0C22     	 movs r2,#12
 1279 0036 1A60     	 str r2,[r3]
 1280 0038 21E0     	 b .L54
 1281              	.L55:
 488:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 489:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_100MHZ)
 1282              	 .loc 3 489 0
 1283 003a 3B69     	 ldr r3,[r7,#16]
 1284 003c 144A     	 ldr r2,.L61+8
 1285 003e 9342     	 cmp r3,r2
 1286 0040 03D8     	 bhi .L56
 490:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 491:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	*reg = XMC_ETH_MAC_MDC_DIVIDER_42;
 1287              	 .loc 3 491 0
 1288 0042 FB68     	 ldr r3,[r7,#12]
 1289 0044 0022     	 movs r2,#0
 1290 0046 1A60     	 str r2,[r3]
 1291 0048 19E0     	 b .L54
 1292              	.L56:
 492:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 493:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_150MHZ)
 1293              	 .loc 3 493 0
 1294 004a 3B69     	 ldr r3,[r7,#16]
 1295 004c 114A     	 ldr r2,.L61+12
 1296 004e 9342     	 cmp r3,r2
 1297 0050 03D8     	 bhi .L57
 494:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 495:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	*reg = XMC_ETH_MAC_MDC_DIVIDER_62;
 1298              	 .loc 3 495 0
 1299 0052 FB68     	 ldr r3,[r7,#12]
 1300 0054 0422     	 movs r2,#4
 1301 0056 1A60     	 str r2,[r3]
 1302 0058 11E0     	 b .L54
 1303              	.L57:
 496:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 497:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_200MHZ)
 1304              	 .loc 3 497 0
 1305 005a 3B69     	 ldr r3,[r7,#16]
 1306 005c 0E4A     	 ldr r2,.L61+16
 1307 005e 9342     	 cmp r3,r2
 1308 0060 03D8     	 bhi .L58
 498:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 499:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	*reg = XMC_ETH_MAC_MDC_DIVIDER_102;
 1309              	 .loc 3 499 0
 1310 0062 FB68     	 ldr r3,[r7,#12]
 1311 0064 1022     	 movs r2,#16
 1312 0066 1A60     	 str r2,[r3]
 1313 0068 09E0     	 b .L54
 1314              	.L58:
 500:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 501:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else if (eth_mac_clk <= XMC_ETH_MAC_CLK_SPEED_250MHZ)
 1315              	 .loc 3 501 0
 1316 006a 3B69     	 ldr r3,[r7,#16]
 1317 006c 0B4A     	 ldr r2,.L61+20
 1318 006e 9342     	 cmp r3,r2
 1319 0070 03D8     	 bhi .L59
 502:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 503:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	*reg = XMC_ETH_MAC_MDC_DIVIDER_124;
 1320              	 .loc 3 503 0
 1321 0072 FB68     	 ldr r3,[r7,#12]
 1322 0074 1422     	 movs r2,#20
 1323 0076 1A60     	 str r2,[r3]
 1324 0078 01E0     	 b .L54
 1325              	.L59:
 504:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 505:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 506:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 507:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_ERROR;
 1326              	 .loc 3 507 0
 1327 007a 0223     	 movs r3,#2
 1328 007c FB75     	 strb r3,[r7,#23]
 1329              	.L54:
 508:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 509:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 510:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 1330              	 .loc 3 510 0
 1331 007e FB7D     	 ldrb r3,[r7,#23]
 511:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1332              	 .loc 3 511 0
 1333 0080 1846     	 mov r0,r3
 1334 0082 1837     	 adds r7,r7,#24
 1335              	.LCFI78:
 1336              	 .cfi_def_cfa_offset 8
 1337 0084 BD46     	 mov sp,r7
 1338              	.LCFI79:
 1339              	 .cfi_def_cfa_register 13
 1340              	 
 1341 0086 80BD     	 pop {r7,pc}
 1342              	.L62:
 1343              	 .align 2
 1344              	.L61:
 1345 0088 C00E1602 	 .word 35000000
 1346 008c 00879303 	 .word 60000000
 1347 0090 00E1F505 	 .word 100000000
 1348 0094 80D1F008 	 .word 150000000
 1349 0098 00C2EB0B 	 .word 200000000
 1350 009c 80B2E60E 	 .word 250000000
 1351              	 .cfi_endproc
 1352              	.LFE217:
 1354              	 .section .text.XMC_ETH_MAC_Enable,"ax",%progbits
 1355              	 .align 2
 1356              	 .global XMC_ETH_MAC_Enable
 1357              	 .thumb
 1358              	 .thumb_func
 1360              	XMC_ETH_MAC_Enable:
 1361              	.LFB218:
 512:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 513:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC enable */
 514:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Enable(XMC_ETH_MAC_t *const eth_mac)
 515:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1362              	 .loc 3 515 0
 1363              	 .cfi_startproc
 1364              	 
 1365              	 
 1366 0000 80B5     	 push {r7,lr}
 1367              	.LCFI80:
 1368              	 .cfi_def_cfa_offset 8
 1369              	 .cfi_offset 7,-8
 1370              	 .cfi_offset 14,-4
 1371 0002 82B0     	 sub sp,sp,#8
 1372              	.LCFI81:
 1373              	 .cfi_def_cfa_offset 16
 1374 0004 00AF     	 add r7,sp,#0
 1375              	.LCFI82:
 1376              	 .cfi_def_cfa_register 7
 1377 0006 7860     	 str r0,[r7,#4]
 516:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_ETH);
 1378              	 .loc 3 516 0
 1379 0008 0420     	 movs r0,#4
 1380 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableClock
 517:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 518:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 519:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 520:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 1381              	 .loc 3 520 0
 1382 000e 0348     	 ldr r0,.L64
 1383 0010 FFF7FEFF 	 bl XMC_SCU_RESET_DeassertPeripheralReset
 521:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1384              	 .loc 3 521 0
 1385 0014 0837     	 adds r7,r7,#8
 1386              	.LCFI83:
 1387              	 .cfi_def_cfa_offset 8
 1388 0016 BD46     	 mov sp,r7
 1389              	.LCFI84:
 1390              	 .cfi_def_cfa_register 13
 1391              	 
 1392 0018 80BD     	 pop {r7,pc}
 1393              	.L65:
 1394 001a 00BF     	 .align 2
 1395              	.L64:
 1396 001c 04000020 	 .word 536870916
 1397              	 .cfi_endproc
 1398              	.LFE218:
 1400              	 .section .text.XMC_ETH_MAC_Disable,"ax",%progbits
 1401              	 .align 2
 1402              	 .global XMC_ETH_MAC_Disable
 1403              	 .thumb
 1404              	 .thumb_func
 1406              	XMC_ETH_MAC_Disable:
 1407              	.LFB219:
 522:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 523:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* ETH MAC disable */
 524:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_Disable(XMC_ETH_MAC_t *const eth_mac)
 525:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1408              	 .loc 3 525 0
 1409              	 .cfi_startproc
 1410              	 
 1411              	 
 1412 0000 80B5     	 push {r7,lr}
 1413              	.LCFI85:
 1414              	 .cfi_def_cfa_offset 8
 1415              	 .cfi_offset 7,-8
 1416              	 .cfi_offset 14,-4
 1417 0002 82B0     	 sub sp,sp,#8
 1418              	.LCFI86:
 1419              	 .cfi_def_cfa_offset 16
 1420 0004 00AF     	 add r7,sp,#0
 1421              	.LCFI87:
 1422              	 .cfi_def_cfa_register 7
 1423 0006 7860     	 str r0,[r7,#4]
 526:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_RESET_AssertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_ETH0);
 1424              	 .loc 3 526 0
 1425 0008 0448     	 ldr r0,.L67
 1426 000a FFF7FEFF 	 bl XMC_SCU_RESET_AssertPeripheralReset
 527:../Libraries/XMCLib/src/xmc_eth_mac.c **** #if UC_DEVICE != XMC4500
 528:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_GatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_ETH0);
 529:../Libraries/XMCLib/src/xmc_eth_mac.c **** #endif
 530:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_ETH);
 1427              	 .loc 3 530 0
 1428 000e 0420     	 movs r0,#4
 1429 0010 FFF7FEFF 	 bl XMC_SCU_CLOCK_DisableClock
 531:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1430              	 .loc 3 531 0
 1431 0014 0837     	 adds r7,r7,#8
 1432              	.LCFI88:
 1433              	 .cfi_def_cfa_offset 8
 1434 0016 BD46     	 mov sp,r7
 1435              	.LCFI89:
 1436              	 .cfi_def_cfa_register 13
 1437              	 
 1438 0018 80BD     	 pop {r7,pc}
 1439              	.L68:
 1440 001a 00BF     	 .align 2
 1441              	.L67:
 1442 001c 04000020 	 .word 536870916
 1443              	 .cfi_endproc
 1444              	.LFE219:
 1446              	 .section .text.XMC_ETH_MAC_ReadPhy,"ax",%progbits
 1447              	 .align 2
 1448              	 .global XMC_ETH_MAC_ReadPhy
 1449              	 .thumb
 1450              	 .thumb_func
 1452              	XMC_ETH_MAC_ReadPhy:
 1453              	.LFB220:
 532:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 533:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Read physical layer and obtain status */
 534:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_ReadPhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_addr
 535:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1454              	 .loc 3 535 0
 1455              	 .cfi_startproc
 1456              	 
 1457              	 
 1458              	 
 1459 0000 80B4     	 push {r7}
 1460              	.LCFI90:
 1461              	 .cfi_def_cfa_offset 4
 1462              	 .cfi_offset 7,-4
 1463 0002 87B0     	 sub sp,sp,#28
 1464              	.LCFI91:
 1465              	 .cfi_def_cfa_offset 32
 1466 0004 00AF     	 add r7,sp,#0
 1467              	.LCFI92:
 1468              	 .cfi_def_cfa_register 7
 1469 0006 F860     	 str r0,[r7,#12]
 1470 0008 7B60     	 str r3,[r7,#4]
 1471 000a 0B46     	 mov r3,r1
 1472 000c FB72     	 strb r3,[r7,#11]
 1473 000e 1346     	 mov r3,r2
 1474 0010 BB72     	 strb r3,[r7,#10]
 536:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 537:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 538:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_PhyRead: Parameter error", data != NULL);
 539:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 540:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1475              	 .loc 3 540 0
 1476 0012 FB68     	 ldr r3,[r7,#12]
 1477 0014 1B68     	 ldr r3,[r3]
 1478 0016 FA68     	 ldr r2,[r7,#12]
 1479 0018 1268     	 ldr r2,[r2]
 1480 001a 1269     	 ldr r2,[r2,#16]
 1481 001c 02F03C01 	 and r1,r2,#60
 541:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 542:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 1482              	 .loc 3 542 0
 1483 0020 FA7A     	 ldrb r2,[r7,#11]
 1484 0022 D202     	 lsls r2,r2,#11
 541:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 1485              	 .loc 3 541 0
 1486 0024 1143     	 orrs r1,r1,r2
 543:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 1487              	 .loc 3 543 0
 1488 0026 BA7A     	 ldrb r2,[r7,#10]
 1489 0028 9201     	 lsls r2,r2,#6
 540:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 1490              	 .loc 3 540 0
 1491 002a 0A43     	 orrs r2,r2,r1
 1492 002c 42F00102 	 orr r2,r2,#1
 1493 0030 1A61     	 str r2,[r3,#16]
 544:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 545:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Poll busy bit during max PHY_TIMEOUT time */
 546:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 1494              	 .loc 3 546 0
 1495 0032 0023     	 movs r3,#0
 1496 0034 7B61     	 str r3,[r7,#20]
 1497              	.L72:
 547:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 548:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 549:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1498              	 .loc 3 549 0
 1499 0036 FB68     	 ldr r3,[r7,#12]
 1500 0038 1B68     	 ldr r3,[r3]
 1501 003a 1B69     	 ldr r3,[r3,#16]
 1502 003c 03F00103 	 and r3,r3,#1
 1503 0040 002B     	 cmp r3,#0
 1504 0042 07D1     	 bne .L70
 550:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 551:../Libraries/XMCLib/src/xmc_eth_mac.c ****       *data = (uint16_t)(eth_mac->regs->GMII_DATA & ETH_GMII_DATA_MD_Msk);
 1505              	 .loc 3 551 0
 1506 0044 FB68     	 ldr r3,[r7,#12]
 1507 0046 1B68     	 ldr r3,[r3]
 1508 0048 5B69     	 ldr r3,[r3,#20]
 1509 004a 9AB2     	 uxth r2,r3
 1510 004c 7B68     	 ldr r3,[r7,#4]
 1511 004e 1A80     	 strh r2,[r3]
 552:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 1512              	 .loc 3 552 0
 1513 0050 0023     	 movs r3,#0
 1514 0052 08E0     	 b .L71
 1515              	.L70:
 553:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 554:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 1516              	 .loc 3 554 0
 1517 0054 7B69     	 ldr r3,[r7,#20]
 1518 0056 0133     	 adds r3,r3,#1
 1519 0058 7B61     	 str r3,[r7,#20]
 555:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1520              	 .loc 3 555 0
 1521 005a 7B69     	 ldr r3,[r7,#20]
 1522 005c 4FF6FE72 	 movw r2,#65534
 1523 0060 9342     	 cmp r3,r2
 1524 0062 E8D9     	 bls .L72
 556:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 557:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1525              	 .loc 3 557 0
 1526 0064 0223     	 movs r3,#2
 1527              	.L71:
 558:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1528              	 .loc 3 558 0
 1529 0066 1846     	 mov r0,r3
 1530 0068 1C37     	 adds r7,r7,#28
 1531              	.LCFI93:
 1532              	 .cfi_def_cfa_offset 4
 1533 006a BD46     	 mov sp,r7
 1534              	.LCFI94:
 1535              	 .cfi_def_cfa_register 13
 1536              	 
 1537 006c 5DF8047B 	 ldr r7,[sp],#4
 1538              	.LCFI95:
 1539              	 .cfi_restore 7
 1540              	 .cfi_def_cfa_offset 0
 1541 0070 7047     	 bx lr
 1542              	 .cfi_endproc
 1543              	.LFE220:
 1545 0072 00BF     	 .section .text.XMC_ETH_MAC_WritePhy,"ax",%progbits
 1546              	 .align 2
 1547              	 .global XMC_ETH_MAC_WritePhy
 1548              	 .thumb
 1549              	 .thumb_func
 1551              	XMC_ETH_MAC_WritePhy:
 1552              	.LFB221:
 559:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 560:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Write physical layer and return status */
 561:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_WritePhy(XMC_ETH_MAC_t *eth_mac, uint8_t phy_addr, uint8_t reg_add
 562:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1553              	 .loc 3 562 0
 1554              	 .cfi_startproc
 1555              	 
 1556              	 
 1557              	 
 1558 0000 80B4     	 push {r7}
 1559              	.LCFI96:
 1560              	 .cfi_def_cfa_offset 4
 1561              	 .cfi_offset 7,-4
 1562 0002 85B0     	 sub sp,sp,#20
 1563              	.LCFI97:
 1564              	 .cfi_def_cfa_offset 24
 1565 0004 00AF     	 add r7,sp,#0
 1566              	.LCFI98:
 1567              	 .cfi_def_cfa_register 7
 1568 0006 7860     	 str r0,[r7,#4]
 1569 0008 0846     	 mov r0,r1
 1570 000a 1146     	 mov r1,r2
 1571 000c 1A46     	 mov r2,r3
 1572 000e 0346     	 mov r3,r0
 1573 0010 FB70     	 strb r3,[r7,#3]
 1574 0012 0B46     	 mov r3,r1
 1575 0014 BB70     	 strb r3,[r7,#2]
 1576 0016 1346     	 mov r3,r2
 1577 0018 3B80     	 strh r3,[r7]
 563:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t retries;
 564:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 565:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_DATA  = data;
 1578              	 .loc 3 565 0
 1579 001a 7B68     	 ldr r3,[r7,#4]
 1580 001c 1B68     	 ldr r3,[r3]
 1581 001e 3A88     	 ldrh r2,[r7]
 1582 0020 5A61     	 str r2,[r3,#20]
 566:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->GMII_ADDRESS = (uint32_t)((eth_mac->regs->GMII_ADDRESS & (uint32_t)ETH_GMII_ADDRES
 1583              	 .loc 3 566 0
 1584 0022 7B68     	 ldr r3,[r7,#4]
 1585 0024 1B68     	 ldr r3,[r3]
 1586 0026 7A68     	 ldr r2,[r7,#4]
 1587 0028 1268     	 ldr r2,[r2]
 1588 002a 1269     	 ldr r2,[r2,#16]
 1589 002c 02F03C01 	 and r1,r2,#60
 567:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 568:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MW_Msk |
 569:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 1590              	 .loc 3 569 0
 1591 0030 FA78     	 ldrb r2,[r7,#3]
 1592 0032 D202     	 lsls r2,r2,#11
 568:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)phy_addr << ETH_GMII_ADDRESS_PA_Pos
 1593              	 .loc 3 568 0
 1594 0034 1143     	 orrs r1,r1,r2
 570:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)((uint32_t)reg_addr << ETH_GMII_ADDRESS_MR_Pos
 1595              	 .loc 3 570 0
 1596 0036 BA78     	 ldrb r2,[r7,#2]
 1597 0038 9201     	 lsls r2,r2,#6
 566:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                            (uint32_t)ETH_GMII_ADDRESS_MB_Msk |
 1598              	 .loc 3 566 0
 1599 003a 0A43     	 orrs r2,r2,r1
 1600 003c 42F00302 	 orr r2,r2,#3
 1601 0040 1A61     	 str r2,[r3,#16]
 571:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 572:../Libraries/XMCLib/src/xmc_eth_mac.c ****    /* Poll busy bit during max PHY_TIMEOUT time */
 573:../Libraries/XMCLib/src/xmc_eth_mac.c ****   retries = 0U;
 1602              	 .loc 3 573 0
 1603 0042 0023     	 movs r3,#0
 1604 0044 FB60     	 str r3,[r7,#12]
 1605              	.L76:
 574:../Libraries/XMCLib/src/xmc_eth_mac.c ****   do
 575:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 576:../Libraries/XMCLib/src/xmc_eth_mac.c ****     if ((eth_mac->regs->GMII_ADDRESS & ETH_GMII_ADDRESS_MB_Msk) == 0U)
 1606              	 .loc 3 576 0
 1607 0046 7B68     	 ldr r3,[r7,#4]
 1608 0048 1B68     	 ldr r3,[r3]
 1609 004a 1B69     	 ldr r3,[r3,#16]
 1610 004c 03F00103 	 and r3,r3,#1
 1611 0050 002B     	 cmp r3,#0
 1612 0052 01D1     	 bne .L74
 577:../Libraries/XMCLib/src/xmc_eth_mac.c ****     {
 578:../Libraries/XMCLib/src/xmc_eth_mac.c ****       return XMC_ETH_MAC_STATUS_OK;
 1613              	 .loc 3 578 0
 1614 0054 0023     	 movs r3,#0
 1615 0056 08E0     	 b .L75
 1616              	.L74:
 579:../Libraries/XMCLib/src/xmc_eth_mac.c ****     }
 580:../Libraries/XMCLib/src/xmc_eth_mac.c ****     ++retries;
 1617              	 .loc 3 580 0
 1618 0058 FB68     	 ldr r3,[r7,#12]
 1619 005a 0133     	 adds r3,r3,#1
 1620 005c FB60     	 str r3,[r7,#12]
 581:../Libraries/XMCLib/src/xmc_eth_mac.c ****   } while (retries < XMC_ETH_MAC_PHY_MAX_RETRIES);
 1621              	 .loc 3 581 0
 1622 005e FB68     	 ldr r3,[r7,#12]
 1623 0060 4FF6FE72 	 movw r2,#65534
 1624 0064 9342     	 cmp r3,r2
 1625 0066 EED9     	 bls .L76
 582:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 583:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return XMC_ETH_MAC_STATUS_ERROR;
 1626              	 .loc 3 583 0
 1627 0068 0223     	 movs r3,#2
 1628              	.L75:
 584:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1629              	 .loc 3 584 0
 1630 006a 1846     	 mov r0,r3
 1631 006c 1437     	 adds r7,r7,#20
 1632              	.LCFI99:
 1633              	 .cfi_def_cfa_offset 4
 1634 006e BD46     	 mov sp,r7
 1635              	.LCFI100:
 1636              	 .cfi_def_cfa_register 13
 1637              	 
 1638 0070 5DF8047B 	 ldr r7,[sp],#4
 1639              	.LCFI101:
 1640              	 .cfi_restore 7
 1641              	 .cfi_def_cfa_offset 0
 1642 0074 7047     	 bx lr
 1643              	 .cfi_endproc
 1644              	.LFE221:
 1646 0076 00BF     	 .section .text.XMC_ETH_MAC_FlushTx,"ax",%progbits
 1647              	 .align 2
 1648              	 .global XMC_ETH_MAC_FlushTx
 1649              	 .thumb
 1650              	 .thumb_func
 1652              	XMC_ETH_MAC_FlushTx:
 1653              	.LFB222:
 585:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 586:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush TX */
 587:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushTx(XMC_ETH_MAC_t *const eth_mac)
 588:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1654              	 .loc 3 588 0
 1655              	 .cfi_startproc
 1656              	 
 1657              	 
 1658 0000 80B5     	 push {r7,lr}
 1659              	.LCFI102:
 1660              	 .cfi_def_cfa_offset 8
 1661              	 .cfi_offset 7,-8
 1662              	 .cfi_offset 14,-4
 1663 0002 82B0     	 sub sp,sp,#8
 1664              	.LCFI103:
 1665              	 .cfi_def_cfa_offset 16
 1666 0004 00AF     	 add r7,sp,#0
 1667              	.LCFI104:
 1668              	 .cfi_def_cfa_register 7
 1669 0006 7860     	 str r0,[r7,#4]
 589:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_ST_Msk;
 1670              	 .loc 3 589 0
 1671 0008 7B68     	 ldr r3,[r7,#4]
 1672 000a 1968     	 ldr r1,[r3]
 1673 000c 7B68     	 ldr r3,[r7,#4]
 1674 000e 1B68     	 ldr r3,[r3]
 1675 0010 03F58053 	 add r3,r3,#4096
 1676 0014 1833     	 adds r3,r3,#24
 1677 0016 1B68     	 ldr r3,[r3]
 1678 0018 23F40052 	 bic r2,r3,#8192
 1679 001c 01F58053 	 add r3,r1,#4096
 1680 0020 1833     	 adds r3,r3,#24
 1681 0022 1A60     	 str r2,[r3]
 590:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitTxDescriptors(eth_mac);
 1682              	 .loc 3 590 0
 1683 0024 7868     	 ldr r0,[r7,#4]
 1684 0026 FFF7FEFF 	 bl XMC_ETH_MAC_InitTxDescriptors
 591:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_ST_Msk;
 1685              	 .loc 3 591 0
 1686 002a 7B68     	 ldr r3,[r7,#4]
 1687 002c 1968     	 ldr r1,[r3]
 1688 002e 7B68     	 ldr r3,[r7,#4]
 1689 0030 1B68     	 ldr r3,[r3]
 1690 0032 03F58053 	 add r3,r3,#4096
 1691 0036 1833     	 adds r3,r3,#24
 1692 0038 1B68     	 ldr r3,[r3]
 1693 003a 43F40052 	 orr r2,r3,#8192
 1694 003e 01F58053 	 add r3,r1,#4096
 1695 0042 1833     	 adds r3,r3,#24
 1696 0044 1A60     	 str r2,[r3]
 592:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1697              	 .loc 3 592 0
 1698 0046 0837     	 adds r7,r7,#8
 1699              	.LCFI105:
 1700              	 .cfi_def_cfa_offset 8
 1701 0048 BD46     	 mov sp,r7
 1702              	.LCFI106:
 1703              	 .cfi_def_cfa_register 13
 1704              	 
 1705 004a 80BD     	 pop {r7,pc}
 1706              	 .cfi_endproc
 1707              	.LFE222:
 1709              	 .section .text.XMC_ETH_MAC_FlushRx,"ax",%progbits
 1710              	 .align 2
 1711              	 .global XMC_ETH_MAC_FlushRx
 1712              	 .thumb
 1713              	 .thumb_func
 1715              	XMC_ETH_MAC_FlushRx:
 1716              	.LFB223:
 593:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 594:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Flush RX */
 595:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_FlushRx(XMC_ETH_MAC_t *const eth_mac)
 596:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1717              	 .loc 3 596 0
 1718              	 .cfi_startproc
 1719              	 
 1720              	 
 1721 0000 80B5     	 push {r7,lr}
 1722              	.LCFI107:
 1723              	 .cfi_def_cfa_offset 8
 1724              	 .cfi_offset 7,-8
 1725              	 .cfi_offset 14,-4
 1726 0002 82B0     	 sub sp,sp,#8
 1727              	.LCFI108:
 1728              	 .cfi_def_cfa_offset 16
 1729 0004 00AF     	 add r7,sp,#0
 1730              	.LCFI109:
 1731              	 .cfi_def_cfa_register 7
 1732 0006 7860     	 str r0,[r7,#4]
 597:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE &= (uint32_t)~ETH_OPERATION_MODE_SR_Msk;
 1733              	 .loc 3 597 0
 1734 0008 7B68     	 ldr r3,[r7,#4]
 1735 000a 1968     	 ldr r1,[r3]
 1736 000c 7B68     	 ldr r3,[r7,#4]
 1737 000e 1B68     	 ldr r3,[r3]
 1738 0010 03F58053 	 add r3,r3,#4096
 1739 0014 1833     	 adds r3,r3,#24
 1740 0016 1B68     	 ldr r3,[r3]
 1741 0018 23F00202 	 bic r2,r3,#2
 1742 001c 01F58053 	 add r3,r1,#4096
 1743 0020 1833     	 adds r3,r3,#24
 1744 0022 1A60     	 str r2,[r3]
 598:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_InitRxDescriptors(eth_mac);
 1745              	 .loc 3 598 0
 1746 0024 7868     	 ldr r0,[r7,#4]
 1747 0026 FFF7FEFF 	 bl XMC_ETH_MAC_InitRxDescriptors
 599:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->OPERATION_MODE |= (uint32_t)ETH_OPERATION_MODE_SR_Msk;
 1748              	 .loc 3 599 0
 1749 002a 7B68     	 ldr r3,[r7,#4]
 1750 002c 1968     	 ldr r1,[r3]
 1751 002e 7B68     	 ldr r3,[r7,#4]
 1752 0030 1B68     	 ldr r3,[r3]
 1753 0032 03F58053 	 add r3,r3,#4096
 1754 0036 1833     	 adds r3,r3,#24
 1755 0038 1B68     	 ldr r3,[r3]
 1756 003a 43F00202 	 orr r2,r3,#2
 1757 003e 01F58053 	 add r3,r1,#4096
 1758 0042 1833     	 adds r3,r3,#24
 1759 0044 1A60     	 str r2,[r3]
 600:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1760              	 .loc 3 600 0
 1761 0046 0837     	 adds r7,r7,#8
 1762              	.LCFI110:
 1763              	 .cfi_def_cfa_offset 8
 1764 0048 BD46     	 mov sp,r7
 1765              	.LCFI111:
 1766              	 .cfi_def_cfa_register 13
 1767              	 
 1768 004a 80BD     	 pop {r7,pc}
 1769              	 .cfi_endproc
 1770              	.LFE223:
 1772              	 .section .text.XMC_ETH_MAC_SetWakeUpFrameFilter,"ax",%progbits
 1773              	 .align 2
 1774              	 .global XMC_ETH_MAC_SetWakeUpFrameFilter
 1775              	 .thumb
 1776              	 .thumb_func
 1778              	XMC_ETH_MAC_SetWakeUpFrameFilter:
 1779              	.LFB224:
 601:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 602:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set wakeup frame filter */
 603:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetWakeUpFrameFilter(XMC_ETH_MAC_t *const eth_mac,
 604:../Libraries/XMCLib/src/xmc_eth_mac.c ****                                       const uint32_t (*const filter)[XMC_ETH_WAKEUP_REGISTER_LENGTH
 605:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1780              	 .loc 3 605 0
 1781              	 .cfi_startproc
 1782              	 
 1783              	 
 1784              	 
 1785 0000 80B4     	 push {r7}
 1786              	.LCFI112:
 1787              	 .cfi_def_cfa_offset 4
 1788              	 .cfi_offset 7,-4
 1789 0002 85B0     	 sub sp,sp,#20
 1790              	.LCFI113:
 1791              	 .cfi_def_cfa_offset 24
 1792 0004 00AF     	 add r7,sp,#0
 1793              	.LCFI114:
 1794              	 .cfi_def_cfa_register 7
 1795 0006 7860     	 str r0,[r7,#4]
 1796 0008 3960     	 str r1,[r7]
 606:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t i = 0U;
 1797              	 .loc 3 606 0
 1798 000a 0023     	 movs r3,#0
 1799 000c FB60     	 str r3,[r7,#12]
 607:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 608:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Fill Remote Wake-up frame filter register with buffer data */
 609:../Libraries/XMCLib/src/xmc_eth_mac.c ****   for (i = 0U; i < XMC_ETH_WAKEUP_REGISTER_LENGTH; i++)
 1800              	 .loc 3 609 0
 1801 000e 0023     	 movs r3,#0
 1802 0010 FB60     	 str r3,[r7,#12]
 1803 0012 09E0     	 b .L80
 1804              	.L81:
 610:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 611:../Libraries/XMCLib/src/xmc_eth_mac.c ****     /* Write each time to the same register */
 612:../Libraries/XMCLib/src/xmc_eth_mac.c ****     eth_mac->regs->REMOTE_WAKE_UP_FRAME_FILTER = (*filter)[i];
 1805              	 .loc 3 612 0 discriminator 3
 1806 0014 7B68     	 ldr r3,[r7,#4]
 1807 0016 1B68     	 ldr r3,[r3]
 1808 0018 3A68     	 ldr r2,[r7]
 1809 001a F968     	 ldr r1,[r7,#12]
 1810 001c 52F82120 	 ldr r2,[r2,r1,lsl#2]
 1811 0020 9A62     	 str r2,[r3,#40]
 609:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 1812              	 .loc 3 609 0 discriminator 3
 1813 0022 FB68     	 ldr r3,[r7,#12]
 1814 0024 0133     	 adds r3,r3,#1
 1815 0026 FB60     	 str r3,[r7,#12]
 1816              	.L80:
 609:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 1817              	 .loc 3 609 0 is_stmt 0 discriminator 1
 1818 0028 FB68     	 ldr r3,[r7,#12]
 1819 002a 072B     	 cmp r3,#7
 1820 002c F2D9     	 bls .L81
 613:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 614:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1821              	 .loc 3 614 0 is_stmt 1
 1822 002e 1437     	 adds r7,r7,#20
 1823              	.LCFI115:
 1824              	 .cfi_def_cfa_offset 4
 1825 0030 BD46     	 mov sp,r7
 1826              	.LCFI116:
 1827              	 .cfi_def_cfa_register 13
 1828              	 
 1829 0032 5DF8047B 	 ldr r7,[sp],#4
 1830              	.LCFI117:
 1831              	 .cfi_restore 7
 1832              	 .cfi_def_cfa_offset 0
 1833 0036 7047     	 bx lr
 1834              	 .cfi_endproc
 1835              	.LFE224:
 1837              	 .section .text.XMC_ETH_MAC_EnableEvent,"ax",%progbits
 1838              	 .align 2
 1839              	 .global XMC_ETH_MAC_EnableEvent
 1840              	 .thumb
 1841              	 .thumb_func
 1843              	XMC_ETH_MAC_EnableEvent:
 1844              	.LFB225:
 615:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 616:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Enable event */
 617:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_EnableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 618:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1845              	 .loc 3 618 0
 1846              	 .cfi_startproc
 1847              	 
 1848              	 
 1849 0000 80B5     	 push {r7,lr}
 1850              	.LCFI118:
 1851              	 .cfi_def_cfa_offset 8
 1852              	 .cfi_offset 7,-8
 1853              	 .cfi_offset 14,-4
 1854 0002 82B0     	 sub sp,sp,#8
 1855              	.LCFI119:
 1856              	 .cfi_def_cfa_offset 16
 1857 0004 00AF     	 add r7,sp,#0
 1858              	.LCFI120:
 1859              	 .cfi_def_cfa_register 7
 1860 0006 7860     	 str r0,[r7,#4]
 1861 0008 3960     	 str r1,[r7]
 619:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_EnableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 620:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 621:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK &= ~(event >> 16U);
 1862              	 .loc 3 621 0
 1863 000a 7B68     	 ldr r3,[r7,#4]
 1864 000c 1B68     	 ldr r3,[r3]
 1865 000e 7A68     	 ldr r2,[r7,#4]
 1866 0010 1268     	 ldr r2,[r2]
 1867 0012 D16B     	 ldr r1,[r2,#60]
 1868 0014 3A68     	 ldr r2,[r7]
 1869 0016 120C     	 lsrs r2,r2,#16
 1870 0018 D243     	 mvns r2,r2
 1871 001a 0A40     	 ands r2,r2,r1
 1872 001c DA63     	 str r2,[r3,#60]
 622:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 623:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= (uint16_t)0x7fffU;
 1873              	 .loc 3 623 0
 1874 001e 3B68     	 ldr r3,[r7]
 1875 0020 C3F30E03 	 ubfx r3,r3,#0,#15
 1876 0024 3B60     	 str r3,[r7]
 624:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsNormalEvent(event))
 1877              	 .loc 3 624 0
 1878 0026 3868     	 ldr r0,[r7]
 1879 0028 FFF7FEFF 	 bl XCM_ETH_MAC_IsNormalEvent
 1880 002c 0346     	 mov r3,r0
 1881 002e 002B     	 cmp r3,#0
 1882 0030 03D0     	 beq .L83
 625:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 626:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	event |= (uint32_t)ETH_INTERRUPT_ENABLE_NIE_Msk;
 1883              	 .loc 3 626 0
 1884 0032 3B68     	 ldr r3,[r7]
 1885 0034 43F48033 	 orr r3,r3,#65536
 1886 0038 3B60     	 str r3,[r7]
 1887              	.L83:
 627:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 628:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 629:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (XCM_ETH_MAC_IsAbnormalEvent(event))
 1888              	 .loc 3 629 0
 1889 003a 3868     	 ldr r0,[r7]
 1890 003c FFF7FEFF 	 bl XCM_ETH_MAC_IsAbnormalEvent
 1891 0040 0346     	 mov r3,r0
 1892 0042 002B     	 cmp r3,#0
 1893 0044 03D0     	 beq .L84
 630:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 631:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	event |= (uint32_t)ETH_INTERRUPT_ENABLE_AIE_Msk;
 1894              	 .loc 3 631 0
 1895 0046 3B68     	 ldr r3,[r7]
 1896 0048 43F40043 	 orr r3,r3,#32768
 1897 004c 3B60     	 str r3,[r7]
 1898              	.L84:
 632:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 633:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 634:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE |= event;
 1899              	 .loc 3 634 0
 1900 004e 7B68     	 ldr r3,[r7,#4]
 1901 0050 1968     	 ldr r1,[r3]
 1902 0052 7B68     	 ldr r3,[r7,#4]
 1903 0054 1B68     	 ldr r3,[r3]
 1904 0056 03F58053 	 add r3,r3,#4096
 1905 005a 1C33     	 adds r3,r3,#28
 1906 005c 1A68     	 ldr r2,[r3]
 1907 005e 3B68     	 ldr r3,[r7]
 1908 0060 1A43     	 orrs r2,r2,r3
 1909 0062 01F58053 	 add r3,r1,#4096
 1910 0066 1C33     	 adds r3,r3,#28
 1911 0068 1A60     	 str r2,[r3]
 635:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1912              	 .loc 3 635 0
 1913 006a 0837     	 adds r7,r7,#8
 1914              	.LCFI121:
 1915              	 .cfi_def_cfa_offset 8
 1916 006c BD46     	 mov sp,r7
 1917              	.LCFI122:
 1918              	 .cfi_def_cfa_register 13
 1919              	 
 1920 006e 80BD     	 pop {r7,pc}
 1921              	 .cfi_endproc
 1922              	.LFE225:
 1924              	 .section .text.XMC_ETH_MAC_DisableEvent,"ax",%progbits
 1925              	 .align 2
 1926              	 .global XMC_ETH_MAC_DisableEvent
 1927              	 .thumb
 1928              	 .thumb_func
 1930              	XMC_ETH_MAC_DisableEvent:
 1931              	.LFB226:
 636:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 637:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Disable event */
 638:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_DisableEvent(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 639:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 1932              	 .loc 3 639 0
 1933              	 .cfi_startproc
 1934              	 
 1935              	 
 1936              	 
 1937 0000 80B4     	 push {r7}
 1938              	.LCFI123:
 1939              	 .cfi_def_cfa_offset 4
 1940              	 .cfi_offset 7,-4
 1941 0002 83B0     	 sub sp,sp,#12
 1942              	.LCFI124:
 1943              	 .cfi_def_cfa_offset 16
 1944 0004 00AF     	 add r7,sp,#0
 1945              	.LCFI125:
 1946              	 .cfi_def_cfa_register 7
 1947 0006 7860     	 str r0,[r7,#4]
 1948 0008 3960     	 str r1,[r7]
 640:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_DisableDMAEvent: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->
 641:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 642:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= event >> 16U;
 1949              	 .loc 3 642 0
 1950 000a 7B68     	 ldr r3,[r7,#4]
 1951 000c 1B68     	 ldr r3,[r3]
 1952 000e 7A68     	 ldr r2,[r7,#4]
 1953 0010 1268     	 ldr r2,[r2]
 1954 0012 D16B     	 ldr r1,[r2,#60]
 1955 0014 3A68     	 ldr r2,[r7]
 1956 0016 120C     	 lsrs r2,r2,#16
 1957 0018 0A43     	 orrs r2,r2,r1
 1958 001a DA63     	 str r2,[r3,#60]
 643:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 644:../Libraries/XMCLib/src/xmc_eth_mac.c ****   event &= 0x7fffU;
 1959              	 .loc 3 644 0
 1960 001c 3B68     	 ldr r3,[r7]
 1961 001e C3F30E03 	 ubfx r3,r3,#0,#15
 1962 0022 3B60     	 str r3,[r7]
 645:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_ENABLE &= ~event;
 1963              	 .loc 3 645 0
 1964 0024 7B68     	 ldr r3,[r7,#4]
 1965 0026 1968     	 ldr r1,[r3]
 1966 0028 7B68     	 ldr r3,[r7,#4]
 1967 002a 1B68     	 ldr r3,[r3]
 1968 002c 03F58053 	 add r3,r3,#4096
 1969 0030 1C33     	 adds r3,r3,#28
 1970 0032 1A68     	 ldr r2,[r3]
 1971 0034 3B68     	 ldr r3,[r7]
 1972 0036 DB43     	 mvns r3,r3
 1973 0038 1A40     	 ands r2,r2,r3
 1974 003a 01F58053 	 add r3,r1,#4096
 1975 003e 1C33     	 adds r3,r3,#28
 1976 0040 1A60     	 str r2,[r3]
 646:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 1977              	 .loc 3 646 0
 1978 0042 0C37     	 adds r7,r7,#12
 1979              	.LCFI126:
 1980              	 .cfi_def_cfa_offset 4
 1981 0044 BD46     	 mov sp,r7
 1982              	.LCFI127:
 1983              	 .cfi_def_cfa_register 13
 1984              	 
 1985 0046 5DF8047B 	 ldr r7,[sp],#4
 1986              	.LCFI128:
 1987              	 .cfi_restore 7
 1988              	 .cfi_def_cfa_offset 0
 1989 004a 7047     	 bx lr
 1990              	 .cfi_endproc
 1991              	.LFE226:
 1993              	 .section .text.XMC_ETH_MAC_ClearEventStatus,"ax",%progbits
 1994              	 .align 2
 1995              	 .global XMC_ETH_MAC_ClearEventStatus
 1996              	 .thumb
 1997              	 .thumb_func
 1999              	XMC_ETH_MAC_ClearEventStatus:
 2000              	.LFB227:
 647:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 648:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Clear event status */
 649:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ClearEventStatus(XMC_ETH_MAC_t *const eth_mac, uint32_t event)
 650:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2001              	 .loc 3 650 0
 2002              	 .cfi_startproc
 2003              	 
 2004              	 
 2005              	 
 2006 0000 80B4     	 push {r7}
 2007              	.LCFI129:
 2008              	 .cfi_def_cfa_offset 4
 2009              	 .cfi_offset 7,-4
 2010 0002 83B0     	 sub sp,sp,#12
 2011              	.LCFI130:
 2012              	 .cfi_def_cfa_offset 16
 2013 0004 00AF     	 add r7,sp,#0
 2014              	.LCFI131:
 2015              	 .cfi_def_cfa_register 7
 2016 0006 7860     	 str r0,[r7,#4]
 2017 0008 3960     	 str r1,[r7]
 651:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_ClearDMAEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_m
 652:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 653:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_NIS_Msk) != 0U)
 2018              	 .loc 3 653 0
 2019 000a 7B68     	 ldr r3,[r7,#4]
 2020 000c 1B68     	 ldr r3,[r3]
 2021 000e 03F58053 	 add r3,r3,#4096
 2022 0012 1433     	 adds r3,r3,#20
 2023 0014 1B68     	 ldr r3,[r3]
 2024 0016 03F48033 	 and r3,r3,#65536
 2025 001a 002B     	 cmp r3,#0
 2026 001c 03D0     	 beq .L87
 654:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 655:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	event |= (uint32_t)ETH_STATUS_NIS_Msk;
 2027              	 .loc 3 655 0
 2028 001e 3B68     	 ldr r3,[r7]
 2029 0020 43F48033 	 orr r3,r3,#65536
 2030 0024 3B60     	 str r3,[r7]
 2031              	.L87:
 656:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 657:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 658:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((eth_mac->regs->STATUS & ETH_STATUS_AIS_Msk) != 0U)
 2032              	 .loc 3 658 0
 2033 0026 7B68     	 ldr r3,[r7,#4]
 2034 0028 1B68     	 ldr r3,[r3]
 2035 002a 03F58053 	 add r3,r3,#4096
 2036 002e 1433     	 adds r3,r3,#20
 2037 0030 1B68     	 ldr r3,[r3]
 2038 0032 03F40043 	 and r3,r3,#32768
 2039 0036 002B     	 cmp r3,#0
 2040 0038 03D0     	 beq .L88
 659:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 660:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	event |= (uint32_t)ETH_STATUS_AIS_Msk;
 2041              	 .loc 3 660 0
 2042 003a 3B68     	 ldr r3,[r7]
 2043 003c 43F40043 	 orr r3,r3,#32768
 2044 0040 3B60     	 str r3,[r7]
 2045              	.L88:
 661:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 662:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 663:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->STATUS = event;
 2046              	 .loc 3 663 0
 2047 0042 7B68     	 ldr r3,[r7,#4]
 2048 0044 1B68     	 ldr r3,[r3]
 2049 0046 03F58053 	 add r3,r3,#4096
 2050 004a 1433     	 adds r3,r3,#20
 2051 004c 3A68     	 ldr r2,[r7]
 2052 004e 1A60     	 str r2,[r3]
 664:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2053              	 .loc 3 664 0
 2054 0050 0C37     	 adds r7,r7,#12
 2055              	.LCFI132:
 2056              	 .cfi_def_cfa_offset 4
 2057 0052 BD46     	 mov sp,r7
 2058              	.LCFI133:
 2059              	 .cfi_def_cfa_register 13
 2060              	 
 2061 0054 5DF8047B 	 ldr r7,[sp],#4
 2062              	.LCFI134:
 2063              	 .cfi_restore 7
 2064              	 .cfi_def_cfa_offset 0
 2065 0058 7047     	 bx lr
 2066              	 .cfi_endproc
 2067              	.LFE227:
 2069 005a 00BF     	 .section .text.XMC_ETH_MAC_GetEventStatus,"ax",%progbits
 2070              	 .align 2
 2071              	 .global XMC_ETH_MAC_GetEventStatus
 2072              	 .thumb
 2073              	 .thumb_func
 2075              	XMC_ETH_MAC_GetEventStatus:
 2076              	.LFB228:
 665:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 666:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Obtain event status */
 667:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetEventStatus(const XMC_ETH_MAC_t *const eth_mac)
 668:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2077              	 .loc 3 668 0
 2078              	 .cfi_startproc
 2079              	 
 2080              	 
 2081              	 
 2082 0000 80B4     	 push {r7}
 2083              	.LCFI135:
 2084              	 .cfi_def_cfa_offset 4
 2085              	 .cfi_offset 7,-4
 2086 0002 85B0     	 sub sp,sp,#20
 2087              	.LCFI136:
 2088              	 .cfi_def_cfa_offset 24
 2089 0004 00AF     	 add r7,sp,#0
 2090              	.LCFI137:
 2091              	 .cfi_def_cfa_register 7
 2092 0006 7860     	 str r0,[r7,#4]
 669:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp_status = 0;
 2093              	 .loc 3 669 0
 2094 0008 0023     	 movs r3,#0
 2095 000a FB60     	 str r3,[r7,#12]
 670:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetDMAEventStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac
 671:../Libraries/XMCLib/src/xmc_eth_mac.c ****   
 672:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp_status =  (eth_mac->regs->STATUS & (uint32_t)0x7ffUL);
 2096              	 .loc 3 672 0
 2097 000c 7B68     	 ldr r3,[r7,#4]
 2098 000e 1B68     	 ldr r3,[r3]
 2099 0010 03F58053 	 add r3,r3,#4096
 2100 0014 1433     	 adds r3,r3,#20
 2101 0016 1B68     	 ldr r3,[r3]
 2102 0018 C3F30A03 	 ubfx r3,r3,#0,#11
 2103 001c FB60     	 str r3,[r7,#12]
 673:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 674:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return ((uint32_t)((eth_mac->regs->INTERRUPT_STATUS & (ETH_INTERRUPT_MASK_PMTIM_Msk | ETH_INTERRU
 2104              	 .loc 3 674 0
 2105 001e 7B68     	 ldr r3,[r7,#4]
 2106 0020 1B68     	 ldr r3,[r3]
 2107 0022 9B6B     	 ldr r3,[r3,#56]
 2108 0024 03F40273 	 and r3,r3,#520
 2109 0028 1A04     	 lsls r2,r3,#16
 2110 002a FB68     	 ldr r3,[r7,#12]
 2111 002c 1343     	 orrs r3,r3,r2
 675:../Libraries/XMCLib/src/xmc_eth_mac.c **** 		  temp_status);
 676:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2112              	 .loc 3 676 0
 2113 002e 1846     	 mov r0,r3
 2114 0030 1437     	 adds r7,r7,#20
 2115              	.LCFI138:
 2116              	 .cfi_def_cfa_offset 4
 2117 0032 BD46     	 mov sp,r7
 2118              	.LCFI139:
 2119              	 .cfi_def_cfa_register 13
 2120              	 
 2121 0034 5DF8047B 	 ldr r7,[sp],#4
 2122              	.LCFI140:
 2123              	 .cfi_restore 7
 2124              	 .cfi_def_cfa_offset 0
 2125 0038 7047     	 bx lr
 2126              	 .cfi_endproc
 2127              	.LFE228:
 2129 003a 00BF     	 .section .text.XMC_ETH_MAC_ReturnRxDescriptor,"ax",%progbits
 2130              	 .align 2
 2131              	 .global XMC_ETH_MAC_ReturnRxDescriptor
 2132              	 .thumb
 2133              	 .thumb_func
 2135              	XMC_ETH_MAC_ReturnRxDescriptor:
 2136              	.LFB229:
 677:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 678:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return RX descriptor */
 679:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnRxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 680:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2137              	 .loc 3 680 0
 2138              	 .cfi_startproc
 2139              	 
 2140              	 
 2141              	 
 2142 0000 80B4     	 push {r7}
 2143              	.LCFI141:
 2144              	 .cfi_def_cfa_offset 4
 2145              	 .cfi_offset 7,-4
 2146 0002 83B0     	 sub sp,sp,#12
 2147              	.LCFI142:
 2148              	 .cfi_def_cfa_offset 16
 2149 0004 00AF     	 add r7,sp,#0
 2150              	.LCFI143:
 2151              	 .cfi_def_cfa_register 7
 2152 0006 7860     	 str r0,[r7,#4]
 681:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->rx_desc[eth_mac->rx_index].status |= ETH_MAC_DMA_RDES0_OWN;
 2153              	 .loc 3 681 0
 2154 0008 7B68     	 ldr r3,[r7,#4]
 2155 000a 1A69     	 ldr r2,[r3,#16]
 2156 000c 7B68     	 ldr r3,[r7,#4]
 2157 000e 93F82730 	 ldrb r3,[r3,#39]
 2158 0012 5B01     	 lsls r3,r3,#5
 2159 0014 1344     	 add r3,r3,r2
 2160 0016 7A68     	 ldr r2,[r7,#4]
 2161 0018 1169     	 ldr r1,[r2,#16]
 2162 001a 7A68     	 ldr r2,[r7,#4]
 2163 001c 92F82720 	 ldrb r2,[r2,#39]
 2164 0020 5201     	 lsls r2,r2,#5
 2165 0022 0A44     	 add r2,r2,r1
 2166 0024 1268     	 ldr r2,[r2]
 2167 0026 42F00042 	 orr r2,r2,#-2147483648
 2168 002a 1A60     	 str r2,[r3]
 682:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2169              	 .loc 3 682 0
 2170 002c 0C37     	 adds r7,r7,#12
 2171              	.LCFI144:
 2172              	 .cfi_def_cfa_offset 4
 2173 002e BD46     	 mov sp,r7
 2174              	.LCFI145:
 2175              	 .cfi_def_cfa_register 13
 2176              	 
 2177 0030 5DF8047B 	 ldr r7,[sp],#4
 2178              	.LCFI146:
 2179              	 .cfi_restore 7
 2180              	 .cfi_def_cfa_offset 0
 2181 0034 7047     	 bx lr
 2182              	 .cfi_endproc
 2183              	.LFE229:
 2185 0036 00BF     	 .section .text.XMC_ETH_MAC_ReturnTxDescriptor,"ax",%progbits
 2186              	 .align 2
 2187              	 .global XMC_ETH_MAC_ReturnTxDescriptor
 2188              	 .thumb
 2189              	 .thumb_func
 2191              	XMC_ETH_MAC_ReturnTxDescriptor:
 2192              	.LFB230:
 683:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 684:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Return TX descriptor */
 685:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_ReturnTxDescriptor(XMC_ETH_MAC_t *const eth_mac)
 686:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2193              	 .loc 3 686 0
 2194              	 .cfi_startproc
 2195              	 
 2196              	 
 2197              	 
 2198 0000 80B4     	 push {r7}
 2199              	.LCFI147:
 2200              	 .cfi_def_cfa_offset 4
 2201              	 .cfi_offset 7,-4
 2202 0002 83B0     	 sub sp,sp,#12
 2203              	.LCFI148:
 2204              	 .cfi_def_cfa_offset 16
 2205 0004 00AF     	 add r7,sp,#0
 2206              	.LCFI149:
 2207              	 .cfi_def_cfa_register 7
 2208 0006 7860     	 str r0,[r7,#4]
 687:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->tx_desc[eth_mac->tx_index].status |= ETH_MAC_DMA_TDES0_OWN;
 2209              	 .loc 3 687 0
 2210 0008 7B68     	 ldr r3,[r7,#4]
 2211 000a 5A69     	 ldr r2,[r3,#20]
 2212 000c 7B68     	 ldr r3,[r7,#4]
 2213 000e 93F82630 	 ldrb r3,[r3,#38]
 2214 0012 5B01     	 lsls r3,r3,#5
 2215 0014 1344     	 add r3,r3,r2
 2216 0016 7A68     	 ldr r2,[r7,#4]
 2217 0018 5169     	 ldr r1,[r2,#20]
 2218 001a 7A68     	 ldr r2,[r7,#4]
 2219 001c 92F82620 	 ldrb r2,[r2,#38]
 2220 0020 5201     	 lsls r2,r2,#5
 2221 0022 0A44     	 add r2,r2,r1
 2222 0024 1268     	 ldr r2,[r2]
 2223 0026 42F00042 	 orr r2,r2,#-2147483648
 2224 002a 1A60     	 str r2,[r3]
 688:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2225              	 .loc 3 688 0
 2226 002c 0C37     	 adds r7,r7,#12
 2227              	.LCFI150:
 2228              	 .cfi_def_cfa_offset 4
 2229 002e BD46     	 mov sp,r7
 2230              	.LCFI151:
 2231              	 .cfi_def_cfa_register 13
 2232              	 
 2233 0030 5DF8047B 	 ldr r7,[sp],#4
 2234              	.LCFI152:
 2235              	 .cfi_restore 7
 2236              	 .cfi_def_cfa_offset 0
 2237 0034 7047     	 bx lr
 2238              	 .cfi_endproc
 2239              	.LFE230:
 2241 0036 00BF     	 .section .text.XMC_ETH_MAC_IsTxDescriptorOwnedByDma,"ax",%progbits
 2242              	 .align 2
 2243              	 .global XMC_ETH_MAC_IsTxDescriptorOwnedByDma
 2244              	 .thumb
 2245              	 .thumb_func
 2247              	XMC_ETH_MAC_IsTxDescriptorOwnedByDma:
 2248              	.LFB231:
 689:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 690:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Is TX descriptor owned by DMA? */
 691:../Libraries/XMCLib/src/xmc_eth_mac.c **** bool XMC_ETH_MAC_IsTxDescriptorOwnedByDma(XMC_ETH_MAC_t *const eth_mac)
 692:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2249              	 .loc 3 692 0
 2250              	 .cfi_startproc
 2251              	 
 2252              	 
 2253              	 
 2254 0000 80B4     	 push {r7}
 2255              	.LCFI153:
 2256              	 .cfi_def_cfa_offset 4
 2257              	 .cfi_offset 7,-4
 2258 0002 83B0     	 sub sp,sp,#12
 2259              	.LCFI154:
 2260              	 .cfi_def_cfa_offset 16
 2261 0004 00AF     	 add r7,sp,#0
 2262              	.LCFI155:
 2263              	 .cfi_def_cfa_register 7
 2264 0006 7860     	 str r0,[r7,#4]
 693:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return ((eth_mac->tx_desc[eth_mac->tx_index].status & ETH_MAC_DMA_TDES0_OWN) != 0U);
 2265              	 .loc 3 693 0
 2266 0008 7B68     	 ldr r3,[r7,#4]
 2267 000a 5A69     	 ldr r2,[r3,#20]
 2268 000c 7B68     	 ldr r3,[r7,#4]
 2269 000e 93F82630 	 ldrb r3,[r3,#38]
 2270 0012 5B01     	 lsls r3,r3,#5
 2271 0014 1344     	 add r3,r3,r2
 2272 0016 1B68     	 ldr r3,[r3]
 2273 0018 DB0F     	 lsrs r3,r3,#31
 2274 001a DBB2     	 uxtb r3,r3
 694:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2275              	 .loc 3 694 0
 2276 001c 1846     	 mov r0,r3
 2277 001e 0C37     	 adds r7,r7,#12
 2278              	.LCFI156:
 2279              	 .cfi_def_cfa_offset 4
 2280 0020 BD46     	 mov sp,r7
 2281              	.LCFI157:
 2282              	 .cfi_def_cfa_register 13
 2283              	 
 2284 0022 5DF8047B 	 ldr r7,[sp],#4
 2285              	.LCFI158:
 2286              	 .cfi_restore 7
 2287              	 .cfi_def_cfa_offset 0
 2288 0026 7047     	 bx lr
 2289              	 .cfi_endproc
 2290              	.LFE231:
 2292              	 .section .text.XMC_ETH_MAC_SetVLANTag,"ax",%progbits
 2293              	 .align 2
 2294              	 .global XMC_ETH_MAC_SetVLANTag
 2295              	 .thumb
 2296              	 .thumb_func
 2298              	XMC_ETH_MAC_SetVLANTag:
 2299              	.LFB232:
 695:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 696:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set VLAN tag */
 697:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetVLANTag(XMC_ETH_MAC_t *const eth_mac, uint16_t tag)
 698:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2300              	 .loc 3 698 0
 2301              	 .cfi_startproc
 2302              	 
 2303              	 
 2304              	 
 2305 0000 80B4     	 push {r7}
 2306              	.LCFI159:
 2307              	 .cfi_def_cfa_offset 4
 2308              	 .cfi_offset 7,-4
 2309 0002 83B0     	 sub sp,sp,#12
 2310              	.LCFI160:
 2311              	 .cfi_def_cfa_offset 16
 2312 0004 00AF     	 add r7,sp,#0
 2313              	.LCFI161:
 2314              	 .cfi_def_cfa_register 7
 2315 0006 7860     	 str r0,[r7,#4]
 2316 0008 0B46     	 mov r3,r1
 2317 000a 7B80     	 strh r3,[r7,#2]
 699:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetVLANTag: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 700:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 701:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->VLAN_TAG = (uint32_t)tag;
 2318              	 .loc 3 701 0
 2319 000c 7B68     	 ldr r3,[r7,#4]
 2320 000e 1B68     	 ldr r3,[r3]
 2321 0010 7A88     	 ldrh r2,[r7,#2]
 2322 0012 DA61     	 str r2,[r3,#28]
 702:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2323              	 .loc 3 702 0
 2324 0014 0C37     	 adds r7,r7,#12
 2325              	.LCFI162:
 2326              	 .cfi_def_cfa_offset 4
 2327 0016 BD46     	 mov sp,r7
 2328              	.LCFI163:
 2329              	 .cfi_def_cfa_register 13
 2330              	 
 2331 0018 5DF8047B 	 ldr r7,[sp],#4
 2332              	.LCFI164:
 2333              	 .cfi_restore 7
 2334              	 .cfi_def_cfa_offset 0
 2335 001c 7047     	 bx lr
 2336              	 .cfi_endproc
 2337              	.LFE232:
 2339 001e 00BF     	 .section .text.XMC_ETH_MAC_InitPTP,"ax",%progbits
 2340              	 .align 2
 2341              	 .global XMC_ETH_MAC_InitPTP
 2342              	 .thumb
 2343              	 .thumb_func
 2345              	XMC_ETH_MAC_InitPTP:
 2346              	.LFB233:
 703:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 704:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Initialize PTP */
 705:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_InitPTP(XMC_ETH_MAC_t *const eth_mac, uint32_t config)
 706:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2347              	 .loc 3 706 0
 2348              	 .cfi_startproc
 2349              	 
 2350              	 
 2351 0000 90B5     	 push {r4,r7,lr}
 2352              	.LCFI165:
 2353              	 .cfi_def_cfa_offset 12
 2354              	 .cfi_offset 4,-12
 2355              	 .cfi_offset 7,-8
 2356              	 .cfi_offset 14,-4
 2357 0002 83B0     	 sub sp,sp,#12
 2358              	.LCFI166:
 2359              	 .cfi_def_cfa_offset 24
 2360 0004 00AF     	 add r7,sp,#0
 2361              	.LCFI167:
 2362              	 .cfi_def_cfa_register 7
 2363 0006 7860     	 str r0,[r7,#4]
 2364 0008 3960     	 str r1,[r7]
 707:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_InitPTP: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs));
 708:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 709:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Mask the time stamp interrupt */
 710:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->INTERRUPT_MASK |= (uint32_t)ETH_INTERRUPT_MASK_TSIM_Msk;
 2365              	 .loc 3 710 0
 2366 000a 7B68     	 ldr r3,[r7,#4]
 2367 000c 1B68     	 ldr r3,[r3]
 2368 000e 7A68     	 ldr r2,[r7,#4]
 2369 0010 1268     	 ldr r2,[r2]
 2370 0012 D26B     	 ldr r2,[r2,#60]
 2371 0014 42F40072 	 orr r2,r2,#512
 2372 0018 DA63     	 str r2,[r3,#60]
 711:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 712:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Enable time stamp */
 713:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL = config | (uint32_t)ETH_TIMESTAMP_CONTROL_TSENA_Msk;
 2373              	 .loc 3 713 0
 2374 001a 7B68     	 ldr r3,[r7,#4]
 2375 001c 1B68     	 ldr r3,[r3]
 2376 001e 3A68     	 ldr r2,[r7]
 2377 0020 42F00102 	 orr r2,r2,#1
 2378 0024 C3F80027 	 str r2,[r3,#1792]
 714:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 715:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if ((config & (uint32_t)XMC_ETH_MAC_TIMESTAMP_CONFIG_FINE_UPDATE) != 0U)
 2379              	 .loc 3 715 0
 2380 0028 3B68     	 ldr r3,[r7]
 2381 002a 03F00203 	 and r3,r3,#2
 2382 002e 002B     	 cmp r3,#0
 2383 0030 26D0     	 beq .L97
 716:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 717:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	/* Program addend register to obtain fSYS/2 from reference clock (fSYS) */
 718:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)0x80000000U;
 2384              	 .loc 3 718 0
 2385 0032 7B68     	 ldr r3,[r7,#4]
 2386 0034 1B68     	 ldr r3,[r3]
 2387 0036 4FF00042 	 mov r2,#-2147483648
 2388 003a C3F81827 	 str r2,[r3,#1816]
 719:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 2389              	 .loc 3 719 0
 2390 003e 7B68     	 ldr r3,[r7,#4]
 2391 0040 1B68     	 ldr r3,[r3]
 2392 0042 7A68     	 ldr r2,[r7,#4]
 2393 0044 1268     	 ldr r2,[r2]
 2394 0046 D2F80027 	 ldr r2,[r2,#1792]
 2395 004a 42F02002 	 orr r2,r2,#32
 2396 004e C3F80027 	 str r2,[r3,#1792]
 720:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 721:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	/* Program sub-second increment register based on PTP clock frequency = fSYS/2 */
 722:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	/* the nanoseconds register has a resolution of ~0.465ns. */
 723:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)((1.0F / (0x80000000U)) * (2.0F / XMC_SCU_CLOCK_Ge
 2397              	 .loc 3 723 0
 2398 0052 7B68     	 ldr r3,[r7,#4]
 2399 0054 1C68     	 ldr r4,[r3]
 2400 0056 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2401 005a 07EE900A 	 fmsr s15,r0
 2402 005e F8EE677A 	 fuitos s15,s15
 2403 0062 B0EE007A 	 fconsts s14,#0
 2404 0066 C7EE277A 	 fdivs s15,s14,s15
 2405 006a 9FED177A 	 flds s14,.L99
 2406 006e 67EE877A 	 fmuls s15,s15,s14
 2407 0072 FCEEE77A 	 ftouizs s15,s15
 2408 0076 17EE903A 	 fmrs r3,s15
 2409 007a C4F80437 	 str r3,[r4,#1796]
 2410 007e 15E0     	 b .L98
 2411              	.L97:
 724:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 725:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 726:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 727:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	/* Program sub-second increment register based on PTP clock frequency = fSYS */
 728:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	/* the nanoseconds register has a resolution of ~0.465ns. */
 729:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	eth_mac->regs->SUB_SECOND_INCREMENT = (uint32_t)((1.0F / (0x80000000U)) * (1.0F / XMC_SCU_CLOCK_Ge
 2412              	 .loc 3 729 0
 2413 0080 7B68     	 ldr r3,[r7,#4]
 2414 0082 1C68     	 ldr r4,[r3]
 2415 0084 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2416 0088 07EE900A 	 fmsr s15,r0
 2417 008c F8EE677A 	 fuitos s15,s15
 2418 0090 B7EE007A 	 fconsts s14,#112
 2419 0094 C7EE277A 	 fdivs s15,s14,s15
 2420 0098 9FED0B7A 	 flds s14,.L99
 2421 009c 67EE877A 	 fmuls s15,s15,s14
 2422 00a0 FCEEE77A 	 ftouizs s15,s15
 2423 00a4 17EE903A 	 fmrs r3,s15
 2424 00a8 C4F80437 	 str r3,[r4,#1796]
 2425              	.L98:
 730:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 731:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 732:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSINIT_Msk;
 2426              	 .loc 3 732 0
 2427 00ac 7B68     	 ldr r3,[r7,#4]
 2428 00ae 1B68     	 ldr r3,[r3]
 2429 00b0 7A68     	 ldr r2,[r7,#4]
 2430 00b2 1268     	 ldr r2,[r2]
 2431 00b4 D2F80027 	 ldr r2,[r2,#1792]
 2432 00b8 42F00402 	 orr r2,r2,#4
 2433 00bc C3F80027 	 str r2,[r3,#1792]
 733:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2434              	 .loc 3 733 0
 2435 00c0 0C37     	 adds r7,r7,#12
 2436              	.LCFI168:
 2437              	 .cfi_def_cfa_offset 12
 2438 00c2 BD46     	 mov sp,r7
 2439              	.LCFI169:
 2440              	 .cfi_def_cfa_register 13
 2441              	 
 2442 00c4 90BD     	 pop {r4,r7,pc}
 2443              	.L100:
 2444 00c6 00BF     	 .align 2
 2445              	.L99:
 2446 00c8 00000030 	 .word 805306368
 2447              	 .cfi_endproc
 2448              	.LFE233:
 2450              	 .section .text.XMC_ETH_MAC_GetPTPTime,"ax",%progbits
 2451              	 .align 2
 2452              	 .global XMC_ETH_MAC_GetPTPTime
 2453              	 .thumb
 2454              	 .thumb_func
 2456              	XMC_ETH_MAC_GetPTPTime:
 2457              	.LFB234:
 734:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 735:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get PTP time */
 736:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_GetPTPTime(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *const time)
 737:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2458              	 .loc 3 737 0
 2459              	 .cfi_startproc
 2460              	 
 2461              	 
 2462              	 
 2463 0000 80B4     	 push {r7}
 2464              	.LCFI170:
 2465              	 .cfi_def_cfa_offset 4
 2466              	 .cfi_offset 7,-4
 2467 0002 83B0     	 sub sp,sp,#12
 2468              	.LCFI171:
 2469              	 .cfi_def_cfa_offset 16
 2470 0004 00AF     	 add r7,sp,#0
 2471              	.LCFI172:
 2472              	 .cfi_def_cfa_register 7
 2473 0006 7860     	 str r0,[r7,#4]
 2474 0008 3960     	 str r1,[r7]
 738:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs)
 739:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 740:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->nanoseconds = (uint32_t)(eth_mac->regs->SYSTEM_TIME_NANOSECONDS * (0x80000000U / 1000000000
 2475              	 .loc 3 740 0
 2476 000a 7B68     	 ldr r3,[r7,#4]
 2477 000c 1B68     	 ldr r3,[r3]
 2478 000e D3F80C37 	 ldr r3,[r3,#1804]
 2479 0012 07EE903A 	 fmsr s15,r3
 2480 0016 F8EE677A 	 fuitos s15,s15
 2481 001a 9FED0A7A 	 flds s14,.L102
 2482 001e 67EE877A 	 fmuls s15,s15,s14
 2483 0022 FCEEE77A 	 ftouizs s15,s15
 2484 0026 17EE902A 	 fmrs r2,s15
 2485 002a 3B68     	 ldr r3,[r7]
 2486 002c 1A60     	 str r2,[r3]
 741:../Libraries/XMCLib/src/xmc_eth_mac.c ****   time->seconds = eth_mac->regs->SYSTEM_TIME_SECONDS;
 2487              	 .loc 3 741 0
 2488 002e 7B68     	 ldr r3,[r7,#4]
 2489 0030 1B68     	 ldr r3,[r3]
 2490 0032 D3F80827 	 ldr r2,[r3,#1800]
 2491 0036 3B68     	 ldr r3,[r7]
 2492 0038 5A60     	 str r2,[r3,#4]
 742:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2493              	 .loc 3 742 0
 2494 003a 0C37     	 adds r7,r7,#12
 2495              	.LCFI173:
 2496              	 .cfi_def_cfa_offset 4
 2497 003c BD46     	 mov sp,r7
 2498              	.LCFI174:
 2499              	 .cfi_def_cfa_register 13
 2500              	 
 2501 003e 5DF8047B 	 ldr r7,[sp],#4
 2502              	.LCFI175:
 2503              	 .cfi_restore 7
 2504              	 .cfi_def_cfa_offset 0
 2505 0042 7047     	 bx lr
 2506              	.L103:
 2507              	 .align 2
 2508              	.L102:
 2509 0044 5F700940 	 .word 1074360415
 2510              	 .cfi_endproc
 2511              	.LFE234:
 2513              	 .section .text.XMC_ETH_MAC_UpdatePTPTime,"ax",%progbits
 2514              	 .align 2
 2515              	 .global XMC_ETH_MAC_UpdatePTPTime
 2516              	 .thumb
 2517              	 .thumb_func
 2519              	XMC_ETH_MAC_UpdatePTPTime:
 2520              	.LFB235:
 743:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 744:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Update PTP time */
 745:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_UpdatePTPTime(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 746:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2521              	 .loc 3 746 0
 2522              	 .cfi_startproc
 2523              	 
 2524              	 
 2525              	 
 2526 0000 80B4     	 push {r7}
 2527              	.LCFI176:
 2528              	 .cfi_def_cfa_offset 4
 2529              	 .cfi_offset 7,-4
 2530 0002 85B0     	 sub sp,sp,#20
 2531              	.LCFI177:
 2532              	 .cfi_def_cfa_offset 24
 2533 0004 00AF     	 add r7,sp,#0
 2534              	.LCFI178:
 2535              	 .cfi_def_cfa_register 7
 2536 0006 7860     	 str r0,[r7,#4]
 2537 0008 3960     	 str r1,[r7]
 747:../Libraries/XMCLib/src/xmc_eth_mac.c ****   uint32_t temp;
 748:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 749:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_UpdatePTPTime: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->re
 750:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 751:../Libraries/XMCLib/src/xmc_eth_mac.c ****   temp = (uint32_t)(abs(time->nanoseconds) * (100000000.0F / (0x80000000U)));
 2538              	 .loc 3 751 0
 2539 000a 3B68     	 ldr r3,[r7]
 2540 000c 1B68     	 ldr r3,[r3]
 2541 000e 002B     	 cmp r3,#0
 2542 0010 B8BF     	 it lt
 2543 0012 5B42     	 rsblt r3,r3,#0
 2544 0014 07EE903A 	 fmsr s15,r3
 2545 0018 F8EEE77A 	 fsitos s15,s15
 2546 001c 9FED157A 	 flds s14,.L106
 2547 0020 67EE877A 	 fmuls s15,s15,s14
 2548 0024 FCEEE77A 	 ftouizs s15,s15
 2549 0028 17EE903A 	 fmrs r3,s15
 2550 002c FB60     	 str r3,[r7,#12]
 752:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (time->nanoseconds >= 0)
 2551              	 .loc 3 752 0
 2552 002e 3B68     	 ldr r3,[r7]
 2553 0030 1B68     	 ldr r3,[r3]
 2554 0032 002B     	 cmp r3,#0
 2555 0034 03DB     	 blt .L105
 753:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 754:../Libraries/XMCLib/src/xmc_eth_mac.c **** 	temp |= (uint32_t)ETH_SYSTEM_TIME_NANOSECONDS_UPDATE_ADDSUB_Msk;
 2556              	 .loc 3 754 0
 2557 0036 FB68     	 ldr r3,[r7,#12]
 2558 0038 43F00043 	 orr r3,r3,#-2147483648
 2559 003c FB60     	 str r3,[r7,#12]
 2560              	.L105:
 755:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 756:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 757:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_NANOSECONDS_UPDATE = temp;
 2561              	 .loc 3 757 0
 2562 003e 7B68     	 ldr r3,[r7,#4]
 2563 0040 1B68     	 ldr r3,[r3]
 2564 0042 FA68     	 ldr r2,[r7,#12]
 2565 0044 C3F81427 	 str r2,[r3,#1812]
 758:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->SYSTEM_TIME_SECONDS_UPDATE = time->seconds;
 2566              	 .loc 3 758 0
 2567 0048 7B68     	 ldr r3,[r7,#4]
 2568 004a 1B68     	 ldr r3,[r3]
 2569 004c 3A68     	 ldr r2,[r7]
 2570 004e 5268     	 ldr r2,[r2,#4]
 2571 0050 C3F81027 	 str r2,[r3,#1808]
 759:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 760:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSUPDT_Msk;
 2572              	 .loc 3 760 0
 2573 0054 7B68     	 ldr r3,[r7,#4]
 2574 0056 1B68     	 ldr r3,[r3]
 2575 0058 7A68     	 ldr r2,[r7,#4]
 2576 005a 1268     	 ldr r2,[r2]
 2577 005c D2F80027 	 ldr r2,[r2,#1792]
 2578 0060 42F00802 	 orr r2,r2,#8
 2579 0064 C3F80027 	 str r2,[r3,#1792]
 761:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2580              	 .loc 3 761 0
 2581 0068 1437     	 adds r7,r7,#20
 2582              	.LCFI179:
 2583              	 .cfi_def_cfa_offset 4
 2584 006a BD46     	 mov sp,r7
 2585              	.LCFI180:
 2586              	 .cfi_def_cfa_register 13
 2587              	 
 2588 006c 5DF8047B 	 ldr r7,[sp],#4
 2589              	.LCFI181:
 2590              	 .cfi_restore 7
 2591              	 .cfi_def_cfa_offset 0
 2592 0070 7047     	 bx lr
 2593              	.L107:
 2594 0072 00BF     	 .align 2
 2595              	.L106:
 2596 0074 20BC3E3D 	 .word 1027521568
 2597              	 .cfi_endproc
 2598              	.LFE235:
 2600              	 .section .text.XMC_ETH_MAC_SetPTPAlarm,"ax",%progbits
 2601              	 .align 2
 2602              	 .global XMC_ETH_MAC_SetPTPAlarm
 2603              	 .thumb
 2604              	 .thumb_func
 2606              	XMC_ETH_MAC_SetPTPAlarm:
 2607              	.LFB236:
 762:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 763:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP alarm */
 764:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_SetPTPAlarm(XMC_ETH_MAC_t *const eth_mac, const XMC_ETH_MAC_TIME_t *const time)
 765:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2608              	 .loc 3 765 0
 2609              	 .cfi_startproc
 2610              	 
 2611              	 
 2612              	 
 2613 0000 80B4     	 push {r7}
 2614              	.LCFI182:
 2615              	 .cfi_def_cfa_offset 4
 2616              	 .cfi_offset 7,-4
 2617 0002 83B0     	 sub sp,sp,#12
 2618              	.LCFI183:
 2619              	 .cfi_def_cfa_offset 16
 2620 0004 00AF     	 add r7,sp,#0
 2621              	.LCFI184:
 2622              	 .cfi_def_cfa_register 7
 2623 0006 7860     	 str r0,[r7,#4]
 2624 0008 3960     	 str r1,[r7]
 766:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_SetPTPAlarm: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->regs
 767:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 768:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_NANOSECONDS = (uint32_t)(time->nanoseconds * (100000000.0F / (0x800000
 2625              	 .loc 3 768 0
 2626 000a 7B68     	 ldr r3,[r7,#4]
 2627 000c 1B68     	 ldr r3,[r3]
 2628 000e 3A68     	 ldr r2,[r7]
 2629 0010 1268     	 ldr r2,[r2]
 2630 0012 07EE902A 	 fmsr s15,r2
 2631 0016 F8EEE77A 	 fsitos s15,s15
 2632 001a 9FED0A7A 	 flds s14,.L109
 2633 001e 67EE877A 	 fmuls s15,s15,s14
 2634 0022 FCEEE77A 	 ftouizs s15,s15
 2635 0026 17EE902A 	 fmrs r2,s15
 2636 002a C3F82027 	 str r2,[r3,#1824]
 769:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TARGET_TIME_SECONDS = time->seconds;
 2637              	 .loc 3 769 0
 2638 002e 7B68     	 ldr r3,[r7,#4]
 2639 0030 1B68     	 ldr r3,[r3]
 2640 0032 3A68     	 ldr r2,[r7]
 2641 0034 5268     	 ldr r2,[r2,#4]
 2642 0036 C3F81C27 	 str r2,[r3,#1820]
 770:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2643              	 .loc 3 770 0
 2644 003a 0C37     	 adds r7,r7,#12
 2645              	.LCFI185:
 2646              	 .cfi_def_cfa_offset 4
 2647 003c BD46     	 mov sp,r7
 2648              	.LCFI186:
 2649              	 .cfi_def_cfa_register 13
 2650              	 
 2651 003e 5DF8047B 	 ldr r7,[sp],#4
 2652              	.LCFI187:
 2653              	 .cfi_restore 7
 2654              	 .cfi_def_cfa_offset 0
 2655 0042 7047     	 bx lr
 2656              	.L110:
 2657              	 .align 2
 2658              	.L109:
 2659 0044 20BC3E3D 	 .word 1027521568
 2660              	 .cfi_endproc
 2661              	.LFE236:
 2663              	 .section .text.XMC_ETH_MAC_AdjustPTPClock,"ax",%progbits
 2664              	 .align 2
 2665              	 .global XMC_ETH_MAC_AdjustPTPClock
 2666              	 .thumb
 2667              	 .thumb_func
 2669              	XMC_ETH_MAC_AdjustPTPClock:
 2670              	.LFB237:
 771:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 772:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Adjust PTP clock */
 773:../Libraries/XMCLib/src/xmc_eth_mac.c **** void XMC_ETH_MAC_AdjustPTPClock(XMC_ETH_MAC_t *const eth_mac, uint32_t correction)
 774:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2671              	 .loc 3 774 0
 2672              	 .cfi_startproc
 2673              	 
 2674              	 
 2675 0000 F0B5     	 push {r4,r5,r6,r7,lr}
 2676              	.LCFI188:
 2677              	 .cfi_def_cfa_offset 20
 2678              	 .cfi_offset 4,-20
 2679              	 .cfi_offset 5,-16
 2680              	 .cfi_offset 6,-12
 2681              	 .cfi_offset 7,-8
 2682              	 .cfi_offset 14,-4
 2683 0002 83B0     	 sub sp,sp,#12
 2684              	.LCFI189:
 2685              	 .cfi_def_cfa_offset 32
 2686 0004 00AF     	 add r7,sp,#0
 2687              	.LCFI190:
 2688              	 .cfi_def_cfa_register 7
 2689 0006 7860     	 str r0,[r7,#4]
 2690 0008 3960     	 str r1,[r7]
 775:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_AdjustPTPClock: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 776:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 777:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Correction factor is Q31 (0x80000000 = 1.000000000) */
 778:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_ADDEND = (uint32_t)(((uint64_t)correction * eth_mac->regs->TIMESTAMP_ADD
 2691              	 .loc 3 778 0
 2692 000a 7B68     	 ldr r3,[r7,#4]
 2693 000c 1E68     	 ldr r6,[r3]
 2694 000e 3B68     	 ldr r3,[r7]
 2695 0010 1846     	 mov r0,r3
 2696 0012 4FF00001 	 mov r1,#0
 2697 0016 7B68     	 ldr r3,[r7,#4]
 2698 0018 1B68     	 ldr r3,[r3]
 2699 001a D3F81837 	 ldr r3,[r3,#1816]
 2700 001e 1A46     	 mov r2,r3
 2701 0020 4FF00003 	 mov r3,#0
 2702 0024 02FB01FC 	 mul ip,r2,r1
 2703 0028 00FB03FE 	 mul lr,r0,r3
 2704 002c E644     	 add lr,lr,ip
 2705 002e A0FB0223 	 umull r2,r3,r0,r2
 2706 0032 0EEB0301 	 add r1,lr,r3
 2707 0036 0B46     	 mov r3,r1
 2708 0038 D40F     	 lsrs r4,r2,#31
 2709 003a 44EA4304 	 orr r4,r4,r3,lsl#1
 2710 003e DD0F     	 lsrs r5,r3,#31
 2711 0040 2346     	 mov r3,r4
 2712 0042 C6F81837 	 str r3,[r6,#1816]
 779:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 780:../Libraries/XMCLib/src/xmc_eth_mac.c ****   /* Update addend register */
 781:../Libraries/XMCLib/src/xmc_eth_mac.c ****   eth_mac->regs->TIMESTAMP_CONTROL |= (uint32_t)ETH_TIMESTAMP_CONTROL_TSADDREG_Msk;
 2713              	 .loc 3 781 0
 2714 0046 7B68     	 ldr r3,[r7,#4]
 2715 0048 1B68     	 ldr r3,[r3]
 2716 004a 7A68     	 ldr r2,[r7,#4]
 2717 004c 1268     	 ldr r2,[r2]
 2718 004e D2F80027 	 ldr r2,[r2,#1792]
 2719 0052 42F02002 	 orr r2,r2,#32
 2720 0056 C3F80027 	 str r2,[r3,#1792]
 782:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2721              	 .loc 3 782 0
 2722 005a 0C37     	 adds r7,r7,#12
 2723              	.LCFI191:
 2724              	 .cfi_def_cfa_offset 20
 2725 005c BD46     	 mov sp,r7
 2726              	.LCFI192:
 2727              	 .cfi_def_cfa_register 13
 2728              	 
 2729 005e F0BD     	 pop {r4,r5,r6,r7,pc}
 2730              	 .cfi_endproc
 2731              	.LFE237:
 2733              	 .section .text.XMC_ETH_MAC_GetPTPStatus,"ax",%progbits
 2734              	 .align 2
 2735              	 .global XMC_ETH_MAC_GetPTPStatus
 2736              	 .thumb
 2737              	 .thumb_func
 2739              	XMC_ETH_MAC_GetPTPStatus:
 2740              	.LFB238:
 783:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 784:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Set PTP status */
 785:../Libraries/XMCLib/src/xmc_eth_mac.c **** uint32_t XMC_ETH_MAC_GetPTPStatus(const XMC_ETH_MAC_t *const eth_mac)
 786:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2741              	 .loc 3 786 0
 2742              	 .cfi_startproc
 2743              	 
 2744              	 
 2745              	 
 2746 0000 80B4     	 push {r7}
 2747              	.LCFI193:
 2748              	 .cfi_def_cfa_offset 4
 2749              	 .cfi_offset 7,-4
 2750 0002 83B0     	 sub sp,sp,#12
 2751              	.LCFI194:
 2752              	 .cfi_def_cfa_offset 16
 2753 0004 00AF     	 add r7,sp,#0
 2754              	.LCFI195:
 2755              	 .cfi_def_cfa_register 7
 2756 0006 7860     	 str r0,[r7,#4]
 787:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetPTPStatus: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->reg
 788:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 789:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return (eth_mac->regs->TIMESTAMP_STATUS);
 2757              	 .loc 3 789 0
 2758 0008 7B68     	 ldr r3,[r7,#4]
 2759 000a 1B68     	 ldr r3,[r3]
 2760 000c D3F82837 	 ldr r3,[r3,#1832]
 790:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2761              	 .loc 3 790 0
 2762 0010 1846     	 mov r0,r3
 2763 0012 0C37     	 adds r7,r7,#12
 2764              	.LCFI196:
 2765              	 .cfi_def_cfa_offset 4
 2766 0014 BD46     	 mov sp,r7
 2767              	.LCFI197:
 2768              	 .cfi_def_cfa_register 13
 2769              	 
 2770 0016 5DF8047B 	 ldr r7,[sp],#4
 2771              	.LCFI198:
 2772              	 .cfi_restore 7
 2773              	 .cfi_def_cfa_offset 0
 2774 001a 7047     	 bx lr
 2775              	 .cfi_endproc
 2776              	.LFE238:
 2778              	 .section .text.XMC_ETH_MAC_GetRxTimeStamp,"ax",%progbits
 2779              	 .align 2
 2780              	 .global XMC_ETH_MAC_GetRxTimeStamp
 2781              	 .thumb
 2782              	 .thumb_func
 2784              	XMC_ETH_MAC_GetRxTimeStamp:
 2785              	.LFB239:
 791:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 792:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 793:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetRxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 794:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2786              	 .loc 3 794 0
 2787              	 .cfi_startproc
 2788              	 
 2789              	 
 2790              	 
 2791 0000 80B4     	 push {r7}
 2792              	.LCFI199:
 2793              	 .cfi_def_cfa_offset 4
 2794              	 .cfi_offset 7,-4
 2795 0002 85B0     	 sub sp,sp,#20
 2796              	.LCFI200:
 2797              	 .cfi_def_cfa_offset 24
 2798 0004 00AF     	 add r7,sp,#0
 2799              	.LCFI201:
 2800              	 .cfi_def_cfa_register 7
 2801 0006 7860     	 str r0,[r7,#4]
 2802 0008 3960     	 str r1,[r7]
 795:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *rx_desc;
 796:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 797:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 798:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 799:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetRxTimeStamp: time is invalid", time != NULL);
 800:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 801:../Libraries/XMCLib/src/xmc_eth_mac.c ****   rx_desc = &eth_mac->rx_desc[eth_mac->rx_index];
 2803              	 .loc 3 801 0
 2804 000a 7B68     	 ldr r3,[r7,#4]
 2805 000c 1A69     	 ldr r2,[r3,#16]
 2806 000e 7B68     	 ldr r3,[r7,#4]
 2807 0010 93F82730 	 ldrb r3,[r3,#39]
 2808 0014 5B01     	 lsls r3,r3,#5
 2809 0016 1344     	 add r3,r3,r2
 2810 0018 BB60     	 str r3,[r7,#8]
 802:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (rx_desc->status & ETH_MAC_DMA_RDES0_OWN)
 2811              	 .loc 3 802 0
 2812 001a BB68     	 ldr r3,[r7,#8]
 2813 001c 1B68     	 ldr r3,[r3]
 2814 001e 002B     	 cmp r3,#0
 2815 0020 02DA     	 bge .L115
 803:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 804:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 2816              	 .loc 3 804 0
 2817 0022 0123     	 movs r3,#1
 2818 0024 FB73     	 strb r3,[r7,#15]
 2819 0026 0AE0     	 b .L116
 2820              	.L115:
 805:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 806:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 807:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 808:../Libraries/XMCLib/src/xmc_eth_mac.c ****     time->nanoseconds = (int32_t)rx_desc->time_stamp_nanoseconds;
 2821              	 .loc 3 808 0
 2822 0028 BB68     	 ldr r3,[r7,#8]
 2823 002a DB69     	 ldr r3,[r3,#28]
 2824 002c 1A46     	 mov r2,r3
 2825 002e 3B68     	 ldr r3,[r7]
 2826 0030 1A60     	 str r2,[r3]
 809:../Libraries/XMCLib/src/xmc_eth_mac.c ****     time->seconds = rx_desc->time_stamp_seconds;
 2827              	 .loc 3 809 0
 2828 0032 BB68     	 ldr r3,[r7,#8]
 2829 0034 9A69     	 ldr r2,[r3,#24]
 2830 0036 3B68     	 ldr r3,[r7]
 2831 0038 5A60     	 str r2,[r3,#4]
 810:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 811:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_OK;
 2832              	 .loc 3 811 0
 2833 003a 0023     	 movs r3,#0
 2834 003c FB73     	 strb r3,[r7,#15]
 2835              	.L116:
 812:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 813:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 814:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 2836              	 .loc 3 814 0
 2837 003e FB7B     	 ldrb r3,[r7,#15]
 815:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2838              	 .loc 3 815 0
 2839 0040 1846     	 mov r0,r3
 2840 0042 1437     	 adds r7,r7,#20
 2841              	.LCFI202:
 2842              	 .cfi_def_cfa_offset 4
 2843 0044 BD46     	 mov sp,r7
 2844              	.LCFI203:
 2845              	 .cfi_def_cfa_register 13
 2846              	 
 2847 0046 5DF8047B 	 ldr r7,[sp],#4
 2848              	.LCFI204:
 2849              	 .cfi_restore 7
 2850              	 .cfi_def_cfa_offset 0
 2851 004a 7047     	 bx lr
 2852              	 .cfi_endproc
 2853              	.LFE239:
 2855              	 .section .text.XMC_ETH_MAC_GetTxTimeStamp,"ax",%progbits
 2856              	 .align 2
 2857              	 .global XMC_ETH_MAC_GetTxTimeStamp
 2858              	 .thumb
 2859              	 .thumb_func
 2861              	XMC_ETH_MAC_GetTxTimeStamp:
 2862              	.LFB240:
 816:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 817:../Libraries/XMCLib/src/xmc_eth_mac.c **** /* Get TX time-stamp */
 818:../Libraries/XMCLib/src/xmc_eth_mac.c **** XMC_ETH_MAC_STATUS_t XMC_ETH_MAC_GetTxTimeStamp(XMC_ETH_MAC_t *const eth_mac, XMC_ETH_MAC_TIME_t *c
 819:../Libraries/XMCLib/src/xmc_eth_mac.c **** {
 2863              	 .loc 3 819 0
 2864              	 .cfi_startproc
 2865              	 
 2866              	 
 2867              	 
 2868 0000 80B4     	 push {r7}
 2869              	.LCFI205:
 2870              	 .cfi_def_cfa_offset 4
 2871              	 .cfi_offset 7,-4
 2872 0002 85B0     	 sub sp,sp,#20
 2873              	.LCFI206:
 2874              	 .cfi_def_cfa_offset 24
 2875 0004 00AF     	 add r7,sp,#0
 2876              	.LCFI207:
 2877              	 .cfi_def_cfa_register 7
 2878 0006 7860     	 str r0,[r7,#4]
 2879 0008 3960     	 str r1,[r7]
 820:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_DMA_DESC_t *tx_desc;
 821:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ETH_MAC_STATUS_t status;
 822:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 823:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: eth_mac is invalid", XMC_ETH_MAC_IsValidModule(eth_mac->r
 824:../Libraries/XMCLib/src/xmc_eth_mac.c ****   XMC_ASSERT("XMC_ETH_MAC_GetTxTimeStamp: time is invalid", time != NULL);
 825:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 826:../Libraries/XMCLib/src/xmc_eth_mac.c ****   tx_desc = &eth_mac->tx_desc[eth_mac->tx_ts_index];
 2880              	 .loc 3 826 0
 2881 000a 7B68     	 ldr r3,[r7,#4]
 2882 000c 5A69     	 ldr r2,[r3,#20]
 2883 000e 7B68     	 ldr r3,[r7,#4]
 2884 0010 93F82830 	 ldrb r3,[r3,#40]
 2885 0014 5B01     	 lsls r3,r3,#5
 2886 0016 1344     	 add r3,r3,r2
 2887 0018 BB60     	 str r3,[r7,#8]
 827:../Libraries/XMCLib/src/xmc_eth_mac.c ****   if (tx_desc->status & ETH_MAC_DMA_TDES0_OWN)
 2888              	 .loc 3 827 0
 2889 001a BB68     	 ldr r3,[r7,#8]
 2890 001c 1B68     	 ldr r3,[r3]
 2891 001e 002B     	 cmp r3,#0
 2892 0020 02DA     	 bge .L119
 828:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 829:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_BUSY;
 2893              	 .loc 3 829 0
 2894 0022 0123     	 movs r3,#1
 2895 0024 FB73     	 strb r3,[r7,#15]
 2896 0026 0AE0     	 b .L120
 2897              	.L119:
 830:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 831:../Libraries/XMCLib/src/xmc_eth_mac.c ****   else
 832:../Libraries/XMCLib/src/xmc_eth_mac.c ****   {
 833:../Libraries/XMCLib/src/xmc_eth_mac.c ****     time->nanoseconds = (int32_t)tx_desc->time_stamp_nanoseconds;
 2898              	 .loc 3 833 0
 2899 0028 BB68     	 ldr r3,[r7,#8]
 2900 002a DB69     	 ldr r3,[r3,#28]
 2901 002c 1A46     	 mov r2,r3
 2902 002e 3B68     	 ldr r3,[r7]
 2903 0030 1A60     	 str r2,[r3]
 834:../Libraries/XMCLib/src/xmc_eth_mac.c ****     time->seconds = tx_desc->time_stamp_seconds;
 2904              	 .loc 3 834 0
 2905 0032 BB68     	 ldr r3,[r7,#8]
 2906 0034 9A69     	 ldr r2,[r3,#24]
 2907 0036 3B68     	 ldr r3,[r7]
 2908 0038 5A60     	 str r2,[r3,#4]
 835:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 836:../Libraries/XMCLib/src/xmc_eth_mac.c ****     status = XMC_ETH_MAC_STATUS_OK;
 2909              	 .loc 3 836 0
 2910 003a 0023     	 movs r3,#0
 2911 003c FB73     	 strb r3,[r7,#15]
 2912              	.L120:
 837:../Libraries/XMCLib/src/xmc_eth_mac.c ****   }
 838:../Libraries/XMCLib/src/xmc_eth_mac.c **** 
 839:../Libraries/XMCLib/src/xmc_eth_mac.c ****   return status;
 2913              	 .loc 3 839 0
 2914 003e FB7B     	 ldrb r3,[r7,#15]
 840:../Libraries/XMCLib/src/xmc_eth_mac.c **** }
 2915              	 .loc 3 840 0
 2916 0040 1846     	 mov r0,r3
 2917 0042 1437     	 adds r7,r7,#20
 2918              	.LCFI208:
 2919              	 .cfi_def_cfa_offset 4
 2920 0044 BD46     	 mov sp,r7
 2921              	.LCFI209:
 2922              	 .cfi_def_cfa_register 13
 2923              	 
 2924 0046 5DF8047B 	 ldr r7,[sp],#4
 2925              	.LCFI210:
 2926              	 .cfi_restore 7
 2927              	 .cfi_def_cfa_offset 0
 2928 004a 7047     	 bx lr
 2929              	 .cfi_endproc
 2930              	.LFE240:
 2932              	 .text
 2933              	.Letext0:
 2934              	 .file 4 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 2935              	 .file 5 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 2936              	 .file 6 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2937              	 .file 7 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Include/core_cm4.h"
 2938              	 .file 8 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_eth_mac.c
    {standard input}:20     .text.XMC_ETH_MAC_Reset:00000000 $t
    {standard input}:24     .text.XMC_ETH_MAC_Reset:00000000 XMC_ETH_MAC_Reset
    {standard input}:81     .text.XMC_ETH_MAC_SetAddress:00000000 $t
    {standard input}:85     .text.XMC_ETH_MAC_SetAddress:00000000 XMC_ETH_MAC_SetAddress
    {standard input}:138    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 $t
    {standard input}:142    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemClockFrequency
    {standard input}:178    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000020 $d
    {standard input}:184    .text.XMC_SCU_CLOCK_GetEthernetClockFrequency:00000000 $t
    {standard input}:188    .text.XMC_SCU_CLOCK_GetEthernetClockFrequency:00000000 XMC_SCU_CLOCK_GetEthernetClockFrequency
    {standard input}:213    .text.XCM_ETH_MAC_IsNormalEvent:00000000 $t
    {standard input}:217    .text.XCM_ETH_MAC_IsNormalEvent:00000000 XCM_ETH_MAC_IsNormalEvent
    {standard input}:263    .text.XCM_ETH_MAC_IsAbnormalEvent:00000000 $t
    {standard input}:267    .text.XCM_ETH_MAC_IsAbnormalEvent:00000000 XCM_ETH_MAC_IsAbnormalEvent
    {standard input}:312    .text.XMC_ETH_MAC_Init:00000000 $t
    {standard input}:317    .text.XMC_ETH_MAC_Init:00000000 XMC_ETH_MAC_Init
    {standard input}:1360   .text.XMC_ETH_MAC_Enable:00000000 XMC_ETH_MAC_Enable
    {standard input}:1231   .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 XMC_ETH_MAC_SetManagmentClockDivider
    {standard input}:416    .text.XMC_ETH_MAC_InitRxDescriptors:00000000 XMC_ETH_MAC_InitRxDescriptors
    {standard input}:541    .text.XMC_ETH_MAC_InitTxDescriptors:00000000 XMC_ETH_MAC_InitTxDescriptors
    {standard input}:411    .text.XMC_ETH_MAC_InitRxDescriptors:00000000 $t
    {standard input}:536    .text.XMC_ETH_MAC_InitTxDescriptors:00000000 $t
    {standard input}:652    .text.XMC_ETH_MAC_InitTxDescriptors:0000009c $d
    {standard input}:657    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 $t
    {standard input}:662    .text.XMC_ETH_MAC_SetAddressPerfectFilter:00000000 XMC_ETH_MAC_SetAddressPerfectFilter
    {standard input}:729    .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 $t
    {standard input}:734    .text.XMC_ETH_MAC_SetAddressHashFilter:00000000 XMC_ETH_MAC_SetAddressHashFilter
    {standard input}:787    .text.XMC_ETH_MAC_SendFrame:00000000 $t
    {standard input}:792    .text.XMC_ETH_MAC_SendFrame:00000000 XMC_ETH_MAC_SendFrame
    {standard input}:1020   .text.XMC_ETH_MAC_ReadFrame:00000000 $t
    {standard input}:1025   .text.XMC_ETH_MAC_ReadFrame:00000000 XMC_ETH_MAC_ReadFrame
    {standard input}:1127   .text.XMC_ETH_MAC_GetRxFrameSize:00000000 $t
    {standard input}:1132   .text.XMC_ETH_MAC_GetRxFrameSize:00000000 XMC_ETH_MAC_GetRxFrameSize
    {standard input}:1221   .text.XMC_ETH_MAC_GetRxFrameSize:0000006c $d
    {standard input}:1226   .text.XMC_ETH_MAC_SetManagmentClockDivider:00000000 $t
    {standard input}:1345   .text.XMC_ETH_MAC_SetManagmentClockDivider:00000088 $d
    {standard input}:1355   .text.XMC_ETH_MAC_Enable:00000000 $t
    {standard input}:1396   .text.XMC_ETH_MAC_Enable:0000001c $d
    {standard input}:1401   .text.XMC_ETH_MAC_Disable:00000000 $t
    {standard input}:1406   .text.XMC_ETH_MAC_Disable:00000000 XMC_ETH_MAC_Disable
    {standard input}:1442   .text.XMC_ETH_MAC_Disable:0000001c $d
    {standard input}:1447   .text.XMC_ETH_MAC_ReadPhy:00000000 $t
    {standard input}:1452   .text.XMC_ETH_MAC_ReadPhy:00000000 XMC_ETH_MAC_ReadPhy
    {standard input}:1546   .text.XMC_ETH_MAC_WritePhy:00000000 $t
    {standard input}:1551   .text.XMC_ETH_MAC_WritePhy:00000000 XMC_ETH_MAC_WritePhy
    {standard input}:1647   .text.XMC_ETH_MAC_FlushTx:00000000 $t
    {standard input}:1652   .text.XMC_ETH_MAC_FlushTx:00000000 XMC_ETH_MAC_FlushTx
    {standard input}:1710   .text.XMC_ETH_MAC_FlushRx:00000000 $t
    {standard input}:1715   .text.XMC_ETH_MAC_FlushRx:00000000 XMC_ETH_MAC_FlushRx
    {standard input}:1773   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 $t
    {standard input}:1778   .text.XMC_ETH_MAC_SetWakeUpFrameFilter:00000000 XMC_ETH_MAC_SetWakeUpFrameFilter
    {standard input}:1838   .text.XMC_ETH_MAC_EnableEvent:00000000 $t
    {standard input}:1843   .text.XMC_ETH_MAC_EnableEvent:00000000 XMC_ETH_MAC_EnableEvent
    {standard input}:1925   .text.XMC_ETH_MAC_DisableEvent:00000000 $t
    {standard input}:1930   .text.XMC_ETH_MAC_DisableEvent:00000000 XMC_ETH_MAC_DisableEvent
    {standard input}:1994   .text.XMC_ETH_MAC_ClearEventStatus:00000000 $t
    {standard input}:1999   .text.XMC_ETH_MAC_ClearEventStatus:00000000 XMC_ETH_MAC_ClearEventStatus
    {standard input}:2070   .text.XMC_ETH_MAC_GetEventStatus:00000000 $t
    {standard input}:2075   .text.XMC_ETH_MAC_GetEventStatus:00000000 XMC_ETH_MAC_GetEventStatus
    {standard input}:2130   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 $t
    {standard input}:2135   .text.XMC_ETH_MAC_ReturnRxDescriptor:00000000 XMC_ETH_MAC_ReturnRxDescriptor
    {standard input}:2186   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 $t
    {standard input}:2191   .text.XMC_ETH_MAC_ReturnTxDescriptor:00000000 XMC_ETH_MAC_ReturnTxDescriptor
    {standard input}:2242   .text.XMC_ETH_MAC_IsTxDescriptorOwnedByDma:00000000 $t
    {standard input}:2247   .text.XMC_ETH_MAC_IsTxDescriptorOwnedByDma:00000000 XMC_ETH_MAC_IsTxDescriptorOwnedByDma
    {standard input}:2293   .text.XMC_ETH_MAC_SetVLANTag:00000000 $t
    {standard input}:2298   .text.XMC_ETH_MAC_SetVLANTag:00000000 XMC_ETH_MAC_SetVLANTag
    {standard input}:2340   .text.XMC_ETH_MAC_InitPTP:00000000 $t
    {standard input}:2345   .text.XMC_ETH_MAC_InitPTP:00000000 XMC_ETH_MAC_InitPTP
    {standard input}:2446   .text.XMC_ETH_MAC_InitPTP:000000c8 $d
    {standard input}:2451   .text.XMC_ETH_MAC_GetPTPTime:00000000 $t
    {standard input}:2456   .text.XMC_ETH_MAC_GetPTPTime:00000000 XMC_ETH_MAC_GetPTPTime
    {standard input}:2509   .text.XMC_ETH_MAC_GetPTPTime:00000044 $d
    {standard input}:2514   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 $t
    {standard input}:2519   .text.XMC_ETH_MAC_UpdatePTPTime:00000000 XMC_ETH_MAC_UpdatePTPTime
    {standard input}:2596   .text.XMC_ETH_MAC_UpdatePTPTime:00000074 $d
    {standard input}:2601   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 $t
    {standard input}:2606   .text.XMC_ETH_MAC_SetPTPAlarm:00000000 XMC_ETH_MAC_SetPTPAlarm
    {standard input}:2659   .text.XMC_ETH_MAC_SetPTPAlarm:00000044 $d
    {standard input}:2664   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 $t
    {standard input}:2669   .text.XMC_ETH_MAC_AdjustPTPClock:00000000 XMC_ETH_MAC_AdjustPTPClock
    {standard input}:2734   .text.XMC_ETH_MAC_GetPTPStatus:00000000 $t
    {standard input}:2739   .text.XMC_ETH_MAC_GetPTPStatus:00000000 XMC_ETH_MAC_GetPTPStatus
    {standard input}:2779   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 $t
    {standard input}:2784   .text.XMC_ETH_MAC_GetRxTimeStamp:00000000 XMC_ETH_MAC_GetRxTimeStamp
    {standard input}:2856   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 $t
    {standard input}:2861   .text.XMC_ETH_MAC_GetTxTimeStamp:00000000 XMC_ETH_MAC_GetTxTimeStamp
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
memcpy
XMC_SCU_CLOCK_EnableClock
XMC_SCU_RESET_DeassertPeripheralReset
XMC_SCU_RESET_AssertPeripheralReset
XMC_SCU_CLOCK_DisableClock

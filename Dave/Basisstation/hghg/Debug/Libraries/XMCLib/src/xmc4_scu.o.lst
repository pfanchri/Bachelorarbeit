   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "xmc4_scu.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_SCU_CLOCK_GetUsbClockSource,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_SCU_CLOCK_GetUsbClockSource:
  25              	.LFB129:
  26              	 .file 1 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg\\Libraries\\XMCLib\\inc/xmc4_scu.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @file xmc4_scu.h
   3:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @date 2016-04-15
   4:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   *************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2015-06-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Initial version
  41:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Documentation improved
  42:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  43:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2015-11-30:
  44:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Documentation improved
  45:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *      
  46:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2016-03-09:
  47:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Added XMC_SCU_POWER_EnableMonitor/XMC_SCU_POWER_DisableMonitor
  48:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_POWER_GetEVRStatus, XMC_SCU_POWER_GetEVR13Voltage, XMC_SCU_POWER_GetEVR33Vol
  49:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  50:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  51:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  52:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  53:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  54:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  55:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 2016-04-15:
  56:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *     - Fixed naming of XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG peripheral clock.
  57:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *       Added enable and disable for peripheral clocks       
  58:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
  59:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @endcond 
  60:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
  61:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
  62:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  63:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #ifndef XMC4_SCU_H
  64:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC4_SCU_H
  65:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  66:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
  67:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * HEADER FILES
  68:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
  69:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  70:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #include "xmc_common.h"
  71:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  72:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if UC_FAMILY == XMC4
  73:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  74:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
  75:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  76:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @{
  77:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
  78:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
  79:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
  80:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @addtogroup SCU
  81:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @{
  82:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
  83:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  84:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
  85:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * MACROS
  86:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
  87:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_8MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8MH
  88:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_8MHZ (89U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 8M
  89:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_8MHZ (2U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 8
  90:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  91:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_12MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 12
  92:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_12MHZ (79U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
  93:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_12MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
  94:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  95:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_PDIV_XTAL_16MHZ (1U)  /* PDIV value for main PLL settings, fPLL = 120MHz with fOSC = 16
  96:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_NDIV_XTAL_16MHZ (59U)  /* NDIV value for main PLL settings, fPLL = 120MHz with fOSC = 1
  97:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define PLL_K2DIV_XTAL_16MHZ (3U)  /* K2DIV value for main PLL settings, fPLL = 120MHz with fOSC = 
  98:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
  99:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_WDT_WARN           SCU_INTERRUPT_SRSTAT_PRWARN_Msk /**< Watchdog pr
 100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC       SCU_INTERRUPT_SRSTAT_PI_Msk     /**< RTC periodi
 101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTC_ALARM          SCU_INTERRUPT_SRSTAT_AI_Msk     /**< RTC alarm e
 102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_DLR_OVERRUN        SCU_INTERRUPT_SRSTAT_DLROVR_Msk /**< DLR overrun
 103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCR_Msk)
 104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCR_UPDATED     SCU_INTERRUPT_SRSTAT_LPACCR_Msk /**< LPAC Contro
 105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH0_Msk)
 107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH0_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH0_Msk /**< LPAC Thres
 108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACTH1_Msk)
 110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACTH1_UPDATED    SCU_INTERRUPT_SRSTAT_LPACTH1_Msk  /**< LPAC Thre
 111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACST_Msk)
 113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACST_UPDATED     SCU_INTERRUPT_SRSTAT_LPACST_Msk  /**< LPAC Statu
 114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACCLR_Msk)
 116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACCLR_UPDATED    SCU_INTERRUPT_SRSTAT_LPACCLR_Msk /**< LPAC event
 117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_LPACSET_Msk)
 119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_LPACSET_UPDATED    SCU_INTERRUPT_SRSTAT_LPACSET_Msk /**< LPAC event
 120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTST_Msk)
 122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTST_UPDATED     SCU_INTERRUPT_SRSTAT_HINTST_Msk /**< HIB HINTST 
 123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTCLR_Msk)
 125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTCLR_UPDATED    SCU_INTERRUPT_SRSTAT_HINTCLR_Msk /**< HIB HINTCL
 126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_INTERRUPT_SRSTAT_HINTSET_Msk)
 128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HINTSET_UPDATED    SCU_INTERRUPT_SRSTAT_HINTSET_Msk /**< HIB HINTSE
 129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSTAT_UPDATED     SCU_INTERRUPT_SRSTAT_HDSTAT_Msk /**< HIB HDSTAT 
 131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED      SCU_INTERRUPT_SRSTAT_HDCLR_Msk /**< HIB HDCLR re
 132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDSET_UPDATED      SCU_INTERRUPT_SRSTAT_HDSET_Msk /**< HIB HDSET re
 133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED       SCU_INTERRUPT_SRSTAT_HDCR_Msk /**< HIB HDCR regi
 134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCSICTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCSICTRL_Msk /**< HIB OSCS
 135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULSTAT_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULSTAT_Msk /**< HIB OSCU
 136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED  SCU_INTERRUPT_SRSTAT_OSCULCTRL_Msk /**< HIB OSCU
 137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED     SCU_INTERRUPT_SRSTAT_RTC_CTR_Msk /**< HIB RTCCTR
 138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM0_Msk /**< HIB RTCA
 139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED   SCU_INTERRUPT_SRSTAT_RTC_ATIM1_Msk /**< HIB RTCA
 140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM0_Msk /**< HIB TIM0 
 141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED    SCU_INTERRUPT_SRSTAT_RTC_TIM1_Msk /**< HIB TIM1 
 142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #define XMC_SCU_INTERRUPT_EVENT_RMX_UPDATED        SCU_INTERRUPT_SRSTAT_RMX_Msk /**< HIB RMX regist
 143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
 145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * ENUMS
 146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
 147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines Capture/Compare unit timer slice trigger, that enables synchronous start function avail
 149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  CCUCON register. Use type \a XMC_SCU_CCU_TRIGGER_t for accessing these enum parameters.
 150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CCU_TRIGGER
 152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU40)
 154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU40 = SCU_GENERAL_CCUCON_GSC40_Msk, /**< Trigger mask used for Global Start
 155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU40 peripheral. */
 156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU41)
 158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU41 = SCU_GENERAL_CCUCON_GSC41_Msk, /**< Trigger mask used for Global Start
 159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU42)
 162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU42 = SCU_GENERAL_CCUCON_GSC42_Msk, /**< Trigger mask used for Global Start
 163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU42 peripheral. */
 164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU43)
 166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU43 = SCU_GENERAL_CCUCON_GSC43_Msk, /**< Trigger mask used for Global Start
 167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU43 peripheral. */
 168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU80)
 170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU80 = SCU_GENERAL_CCUCON_GSC80_Msk, /**< Trigger mask used for Global Start
 171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU80 peripheral. */
 172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU81)
 174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CCU_TRIGGER_CCU81 = SCU_GENERAL_CCUCON_GSC81_Msk /**< Trigger mask used for Global Start 
 175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  CCU41 peripheral. */
 176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CCU_TRIGGER_t;
 178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations representing the status of trap cause. The cause of the trap gets automati
 181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  the \a TRAPSTAT register and can be checked by user software to determine the state of the syst
 182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  purpose. 
 183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_TRAP_t for accessing these enum parameters.
 184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_TRAP 
 186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_OSC_WDG      = SCU_TRAP_TRAPSTAT_SOSCWDGT_Msk, /**< OSC_HP Oscillator Watchdog trap.
 188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_VCO_LOCK     = SCU_TRAP_TRAPSTAT_SVCOLCKT_Msk, /**< PLL loss of lock trap. */
 189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_USB_VCO_LOCK = SCU_TRAP_TRAPSTAT_UVCOLCKT_Msk, /**< USB PLL loss of lock trap. */ 
 190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_PARITY_ERROR = SCU_TRAP_TRAPSTAT_PET_Msk,      /**< Memory Parity error trap. */  
 191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_BROWNOUT     = SCU_TRAP_TRAPSTAT_BRWNT_Msk,    /**< Brownout trap. */ 
 192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_ULP_WDG      = SCU_TRAP_TRAPSTAT_ULPWDGT_Msk,  /**< Unstable 32KHz clock trap. */ 
 193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE0  = SCU_TRAP_TRAPSTAT_BWERR0T_Msk,  /**< Bad memory access of peripherals
 194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_PER_BRIDGE1  = SCU_TRAP_TRAPSTAT_BWERR1T_Msk,  /**< Bad memory access of peripherals
 195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPHIT_Msk)
 196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_HIGH = SCU_TRAP_TRAPSTAT_TEMPHIT_Msk,  /**< Die temperature higher than expe
 197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_TRAP_TRAPSTAT_TEMPLOT_Msk)
 199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_DIETEMP_LOW  = SCU_TRAP_TRAPSTAT_TEMPLOT_Msk,  /**< Die temperature lower than expec
 200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)
 202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_TRAP_ECAT_RESET = SCU_TRAP_TRAPSTAT_ECAT0RST_Msk, /**< EtherCat Reset */ 
 203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_TRAP_t;
 205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations for different parity event generating modules that in turn generate a trap
 208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Parity can be enabled with \a PETE register in order to get the trap flag reflected in \a TRAPR
 209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  configure parity error trap generation mechanism bits of \a PETE register.
 210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PETE register.
 211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PARITY_t for accessing these enum parameters.
 212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_PARITY
 214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_PSRAM_MEM  = SCU_PARITY_PEEN_PEENPS_Msk,   /**< Program SRAM parity error trap. */
 216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM1_MEM = SCU_PARITY_PEEN_PEENDS1_Msk,  /**< Data SRAM-1 parity error trap. */ 
 217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_DSRAM2_MEM)
 218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_DSRAM2_MEM = SCU_PARITY_PEEN_PEENDS2_Msk,  /**< Data SRAM-2 parity error trap. */ 
 219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC0_MEM  = SCU_PARITY_PEEN_PEENU0_Msk,   /**< USIC0 memory parity error trap. */
 221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC1_MEM)
 222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC1_MEM  = SCU_PARITY_PEEN_PEENU1_Msk,   /**< USIC1 memory parity error trap. */
 223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(XMC_SCU_PARITY_USIC2_MEM)
 225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USIC2_MEM  = SCU_PARITY_PEEN_PEENU2_Msk,   /**< USIC2 memory parity error trap. */
 226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_MCAN_MEM   = SCU_PARITY_PEEN_PEENMC_Msk,   /**< CAN memory parity error trap. */
 228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_PMU_MEM    = SCU_PARITY_PEEN_PEENPPRF_Msk, /**< PMU Prefetch memory parity error t
 229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_USB_MEM    = SCU_PARITY_PEEN_PEENUSB_Msk,  /**< USB memory parity error trap. */ 
 230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0TX_Msk)
 231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_TXMEM  = SCU_PARITY_PEEN_PEENETH0TX_Msk, /**< Ethernet transmit memory parity 
 232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENETH0RX_Msk)
 234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_ETH_RXMEM  = SCU_PARITY_PEEN_PEENETH0RX_Msk, /**< Ethernet receive memory parity e
 235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD0_Msk)
 237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM0 = SCU_PARITY_PEEN_PEENSD0_Msk, /**< SDMMC Memory-0 parity error trap. *
 238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SCU_PARITY_PEEN_PEENSD1_Msk)
 240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PARITY_SDMMC_MEM1 = SCU_PARITY_PEEN_PEENSD1_Msk, /**< SDMMC Memory-1 parity error trap. *
 241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_PARITY_t;
 243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines the different causes for last reset. The cause of the last reset gets automatically sto
 246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  the \a SCU_RSTSTAT register and can be checked by user software to determine the state of the s
 247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  purpose. All the enum items are tabulated as per bits present in \a SCU_RSTSTAT register.
 248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_RESET_REASON_t for accessing these enum parameters.
 249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_RESET_REASON
 251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PORST        = (1UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SWD          = (2UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Ser
 254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PV           = (4UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Pow
 255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_SW           = (8UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Sof
 256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_LOCKUP       = (16UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to re
 257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_WATCHDOG     = (32UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to Wa
 258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_RESET_REASON_PARITY_ERROR = (128UL << SCU_RESET_RSTSTAT_RSTSTAT_Pos), /**< Reset due to r
 259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_RESET_REASON_t;
 260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations for events which can lead to interrupt. These enumeration values represent
 263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * status of one of the bits in \a SRSTAT register. 
 264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_INTERRUPT_EVENT_t for accessing these enum parameters.
 265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef uint32_t XMC_SCU_INTERRUPT_EVENT_t;
 267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
 269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumeration for the events that can generate non maskable interrupt(NMI).
 271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The NMI generation can be enabled with \a NMIREQEN register. The event will be reflected in \a 
 272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  mirrored in the TRAPSTAT register. These enums can be used to configure NMI request generation 
 273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  NMIREQEN register.  Once configured, these events can generate non maskable interrupt.
 274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a NMIREQEN register.
 275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_NMIREQ_t for accessing these enum parameters.
 276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_NMIREQ
 278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_WDT_WARN = SCU_INTERRUPT_NMIREQEN_PRWARN_Msk, /**< Watchdog timer Pre-Warning even
 280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_PI   = SCU_INTERRUPT_NMIREQEN_PI_Msk,     /**< RTC Periodic event */ 
 281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_RTC_AI   = SCU_INTERRUPT_NMIREQEN_AI_Msk,     /**< RTC Alarm event */ 
 282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_0   = SCU_INTERRUPT_NMIREQEN_ERU00_Msk,  /**< Channel 0 event of ERU0 */  
 283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_1   = SCU_INTERRUPT_NMIREQEN_ERU01_Msk,  /**< Channel 1 event of ERU0 */ 
 284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_2   = SCU_INTERRUPT_NMIREQEN_ERU02_Msk,  /**< Channel 2 event of ERU0 */ 
 285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_NMIREQ_ERU0_3   = SCU_INTERRUPT_NMIREQEN_ERU03_Msk   /**< Channel 3 event of ERU0 */ 
 286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_NMIREQ_t;
 287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   
 288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumeration representing different peripheral reset bits in the \a PRSTAT registers.
 291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  All the enum items are tabulated as per bits present in \a PRSTAT0,  \a PRSTAT1,  \a PRSTAT2,
 292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  \a PRSTAT3 registers. Use type \a XMC_SCU_PERIPHERAL_RESET_t for accessing these enum parameter
 293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Note: Release of reset should be prevented when the peripheral clock is gated in cases where ke
 294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  clock and bus interface clocks are shared, in order to avoid system hang-up.
 295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_RESET
 297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_VADC   = SCU_RESET_PRSTAT0_VADCRS_Msk,   /**< VADC reset. */ 
 299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DSD)
 300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DSD    = SCU_RESET_PRSTAT0_DSDRS_Msk,    /**< DSD reset. */
 301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU40  = SCU_RESET_PRSTAT0_CCU40RS_Msk,  /**< CCU40 reset. */
 303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU41)
 304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU41  = SCU_RESET_PRSTAT0_CCU41RS_Msk,  /**< CCU41 reset. */
 305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU42)
 307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU42  = SCU_RESET_PRSTAT0_CCU42RS_Msk,  /**< CCU42 reset. */
 308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU80)
 310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU80  = SCU_RESET_PRSTAT0_CCU80RS_Msk,  /**< CCU80 reset. */
 311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU81)
 313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU81  = SCU_RESET_PRSTAT0_CCU81RS_Msk,  /**< CCU81 reset. */
 314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF0)
 316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF0 = SCU_RESET_PRSTAT0_POSIF0RS_Msk, /**< POSIF0 reset. */
 317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF1)
 319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_POSIF1 = SCU_RESET_PRSTAT0_POSIF1RS_Msk, /**< POSIF1 reset.*/
 320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC0  = SCU_RESET_PRSTAT0_USIC0RS_Msk,  /**< USIC0 reset. */
 322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ERU1   = SCU_RESET_PRSTAT0_ERU1RS_Msk,   /**< ERU1 reset. */
 323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(HRPWM0)
 324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_HRPWM0 = SCU_RESET_PRSTAT0_HRPWM0RS_Msk,  /**< HRPWM0 reset. */
 325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU43)
 327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_CCU43  = (SCU_RESET_PRSTAT1_CCU43RS_Msk | 0x10000000UL),   /**< CCU43 re
 328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(LEDTS0)
 330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_LEDTS0 = (SCU_RESET_PRSTAT1_LEDTSCU0RS_Msk | 0x10000000UL), /**< LEDTS0 
 331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CAN)
 333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_MCAN   = (SCU_RESET_PRSTAT1_MCAN0RS_Msk | 0x10000000UL), /**< MCAN reset
 334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DAC)  
 336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_DAC    = (SCU_RESET_PRSTAT1_DACRS_Msk | 0x10000000UL),    /**< DAC reset
 337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_SDMMC  = (SCU_RESET_PRSTAT1_MMCIRS_Msk | 0x10000000UL),     /**< SDMMC r
 340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC1)
 342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC1  = (SCU_RESET_PRSTAT1_USIC1RS_Msk | 0x10000000UL),    /**< USIC1 r
 343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC2)
 345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USIC2  = (SCU_RESET_PRSTAT1_USIC2RS_Msk | 0x10000000UL),    /**< USIC2 r
 346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_PORTS  = (SCU_RESET_PRSTAT1_PPORTSRS_Msk | 0x10000000UL),   /**< PORTS r
 348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_WDT    = (SCU_RESET_PRSTAT2_WDTRS_Msk | 0x20000000UL),      /**< WDT res
 349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ETH0   = (SCU_RESET_PRSTAT2_ETH0RS_Msk | 0x20000000UL),     /**< ETH0 re
 351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA0 = (SCU_RESET_PRSTAT2_DMA0RS_Msk | 0x20000000UL),     /**< DMA0 re
 353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(GPDMA1)
 354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_GPDMA1 = (SCU_RESET_PRSTAT2_DMA1RS_Msk | 0x20000000UL),     /**< DMA1 re
 355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(FCE)
 357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_FCE    = (SCU_RESET_PRSTAT2_FCERS_Msk | 0x20000000UL),      /**< FCE res
 358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)  
 360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_USB0   = (SCU_RESET_PRSTAT2_USBRS_Msk | 0x20000000UL),      /**< USB0 re
 361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)  
 363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_ECAT0  = (SCU_RESET_PRSTAT2_ECAT0RS_Msk | 0x20000000UL),      /**< ECAT0
 364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_RESET_EBU    = (SCU_RESET_PRSTAT3_EBURS_Msk | 0x30000000UL)       /**< EBU res
 367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_RESET_t;
 369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines enumerations for disabling the clocks sources of peripherals. Disabling of the peripher
 372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  clock is configured via the \a CLKCLR registers.
 373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK
 376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USB = SCU_CLK_CLKCLR_USBCDI_Msk, /**< USB module clock. */
 378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_MMC = SCU_CLK_CLKCLR_MMCCDI_Msk, /**< MMC module clock. */
 380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ETH = SCU_CLK_CLKCLR_ETH0CDI_Msk, /**< Ethernet module clock. */
 383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EBU = SCU_CLK_CLKCLR_EBUCDI_Msk, /**< EBU module clock. */
 386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_CCU = SCU_CLK_CLKCLR_CCUCDI_Msk, /**< CCU module clock. */
 388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDT = SCU_CLK_CLKCLR_WDTCDI_Msk  /**< WDT module clock. */
 389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_t;
 390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if(UC_SERIES != XMC45)
 392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines enumeration for peripherals that support clock gating. 
 394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The enumerations can be used for gating or ungating the peripheral clocks.
 395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * All the enum items are tabulated as per bits present in \a CGATSTAT0 register.
 396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Use type \a XMC_SCU_PERIPHERAL_CLOCK_t for accessing these enum parameters.
 397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_PERIPHERAL_CLOCK
 399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_VADC   = SCU_CLK_CGATSTAT0_VADC_Msk,  /**< VADC peripheral gating. */
 401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DSD)
 402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DSD    = SCU_CLK_CGATSTAT0_DSD_Msk,   /**< DSD peripheral gating. */
 403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU40  = SCU_CLK_CGATSTAT0_CCU40_Msk,  /**< CCU40 peripheral gating. */
 405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU41)
 406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU41  = SCU_CLK_CGATSTAT0_CCU41_Msk,  /**< CCU41 peripheral gating. */
 407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU42)
 409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU42  = SCU_CLK_CGATSTAT0_CCU42_Msk,  /**< CCU42 peripheral gating. */
 410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU80)
 412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU80  = SCU_CLK_CGATSTAT0_CCU80_Msk,  /**< CCU80 peripheral gating. */
 413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU81)
 415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU81  = SCU_CLK_CGATSTAT0_CCU81_Msk,  /**< CCU81 peripheral gating. */
 416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF0)
 418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF0 = SCU_CLK_CGATSTAT0_POSIF0_Msk,  /**< POSIF0 peripheral gating. *
 419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(POSIF1)
 421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_POSIF1 = SCU_CLK_CGATSTAT0_POSIF1_Msk,   /**< POSIF1 peripheral gating. 
 422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC0  = SCU_CLK_CGATSTAT0_USIC0_Msk,   /**< USIC0 peripheral gating. */
 424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ERU1   = SCU_CLK_CGATSTAT0_ERU1_Msk,    /**< ERU1 peripheral gating. */
 425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(HRPWM0)
 426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_HRPWM0 = SCU_CLK_CGATSTAT0_HRPWM0_Msk,  /**< HRPWM0 peripheral gating. *
 427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CCU43)
 429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_CCU43  = (SCU_CLK_CGATSTAT1_CCU43_Msk | 0x10000000UL),   /**< CCU43 peri
 430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(LEDTS0)
 432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_LEDTS0 = (SCU_CLK_CGATSTAT1_LEDTSCU0_Msk | 0x10000000UL), /**< LEDTS0 pe
 433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(CAN)
 435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_MCAN   = (SCU_CLK_CGATSTAT1_MCAN0_Msk | 0x10000000UL),   /**< MCAN perip
 436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(DAC)  
 438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_DAC    = (SCU_CLK_CGATSTAT1_DAC_Msk | 0x10000000UL),     /**< DAC periph
 439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_SDMMC  = (SCU_CLK_CGATSTAT1_MMCI_Msk | 0x10000000UL),    /**< SDMMC peri
 442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC1)
 444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC1  = (SCU_CLK_CGATSTAT1_USIC1_Msk | 0x10000000UL),   /**< USIC1 peri
 445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USIC2)
 447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USIC2  = (SCU_CLK_CGATSTAT1_USIC2_Msk | 0x10000000UL),    /**< USIC2 per
 448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_PORTS  = (SCU_CLK_CGATSTAT1_PPORTS_Msk | 0x10000000UL),   /**< PORTS per
 450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_WDT    = (SCU_CLK_CGATSTAT2_WDT_Msk | 0x20000000UL),      /**< WDT perip
 451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ETH0   = (SCU_CLK_CGATSTAT2_ETH0_Msk | 0x20000000UL),     /**< ETH0 peri
 453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA0 = (SCU_CLK_CGATSTAT2_DMA0_Msk | 0x20000000UL),     /**< DMA0 peri
 455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(GPDMA1)
 456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_GPDMA1 = (SCU_CLK_CGATSTAT2_DMA1_Msk | 0x20000000UL),     /**< DMA1 peri
 457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(FCE)
 459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_FCE    = (SCU_CLK_CGATSTAT2_FCE_Msk | 0x20000000UL),      /**< FCE perip
 460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)
 462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_USB0   = (SCU_CLK_CGATSTAT2_USB_Msk | 0x20000000UL),      /**< USB0 peri
 463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)
 465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_ECAT0   = (SCU_CLK_CGATSTAT2_ECAT0_Msk | 0x20000000UL),      /**< ECAT0 
 466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_PERIPHERAL_CLOCK_EBU    = (SCU_CLK_CGATSTAT3_EBU_Msk | 0x30000000UL)       /**< EBU perip
 469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_PERIPHERAL_CLOCK_t;
 471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for system clock (fSYS) source. These enums are used to configure \a SYSSEL bit
 475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Clock Control Register. 
 476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_SYSCLKSRC_t for accessing these enum parameters.
 477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSCLKSRC
 479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_OFI = (0UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos), /**< Internal Fast Clock (fOF
 481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for system clock 
 482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_PLL = (1UL << SCU_CLK_SYSCLKCR_SYSSEL_Pos)  /**< PLL output (fPLL) as a
 483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for system clock 
 484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSCLKSRC_t;
 485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the P-Divider input frequency. These enums are used to configure 
 488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. 
 489:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_OSCCLKSRC_t for accessing these enum parameters.
 490:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 491:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLLCLKSRC
 492:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 493:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP = 0UL,  /**< External crystal oscillator
 494:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                 (fOHP) as the source for P-Divider. */
 495:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI = SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk /**< Ba
 496:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                              as the source for P-Di
 497:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLLCLKSRC_t;
 498:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 499:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 500:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines options for selecting the USB clock source(fUSB/fSDMMC).
 501:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * These enums are used to configure \a USBSEL bits of \a USBCLKCR
 502:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * register. User can choose either fPLL or fUSBPLL clock as a source for USB clock. 
 503:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 504:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 505:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_USBCLKSRC
 506:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 507:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_USBPLL = (0UL << SCU_CLK_USBCLKCR_USBSEL_Pos), /**< USB PLL(fUSB PLL) as 
 508:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 509:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_USBCLKSRC_SYSPLL = (1UL << SCU_CLK_USBCLKCR_USBSEL_Pos)  /**< Main PLL output (fPLL
 510:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for USB clock (fU
 511:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_USBCLKSRC_t;
 512:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 513:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0) 
 514:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 515:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines options for selecting the ECAT clock source.
 516:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 517:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_ECATCLKSRC
 518:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 519:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_USBPLL = (0UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos), /**< USB PLL (fUSBPLL) 
 520:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL = (1UL << SCU_CLK_ECATCLKCR_ECATSEL_Pos)  /**< Main PLL output (f
 521:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_ECATCLKSRC_t;
 522:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 523:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 524:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 525:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of WDT clock(fWDT). These enums are used to configure 
 526:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. User can choose either fOFI or fPLL or fSTDBY clock as a source for WDT clock. 
 527:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_USBCLKSRC_t for accessing these enum parameters.
 528:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 529:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_WDTCLKSRC
 530:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 531:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_OFI = (0UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos),  /**< Internal Fast Clock 
 532:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            (fOFI) as the source for
 533:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_STDBY = (1UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos), /**< Standby clock 
 534:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            (fSTDBY) as the source f
 535:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_WDTCLKSRC_PLL = (2UL << SCU_CLK_WDTCLKCR_WDTSEL_Pos)   /**< PLL output (fPLL) as th
 536:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for WDT clock (fW
 537:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_WDTCLKSRC_t;
 538:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 539:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 540:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of external clock out (fEXT). These enums are used to 
 541:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. User can choose either fSYS or fPLL or fUSBPLL clock as a source for external clock o
 542:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_EXTOUTCLKSRC_t for accessing these enum parameters.
 543:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */ 
 544:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_EXTOUTCLKSRC
 545:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 546:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS = (0UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos),  /**< System clock (fSYS) 
 547:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                             the source for external
 548:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_USB = (2UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< USB PLL output(fUSB P
 549:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for external cloc
 550:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL = (3UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Main PLL output(fPLL)
 551:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for external cloc
 552:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
 553:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY = (4UL << SCU_CLK_EXTCLKCR_ECKSEL_Pos), /**< Standby clock(fSTDB
 554:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            source for external cloc
 555:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 556:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_EXTOUTCLKSRC_t;
 557:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 558:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 559:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of RTC Clock (fRTC). These enums are used to configure
 560:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  User can choose either fOSI or fULP clock as a source for RTC Clock (fRTC).
 561:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_RTCCLKSRC_t for accessing these enum parameters.
 562:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 563:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_RTCCLKSRC
 564:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 565:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_RCS_Pos), /**< Internal Slow Clock
 566:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                          (fOSI) as the source for R
 567:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_RTCCLKSRC_ULP = (1UL << SCU_HIBERNATE_HDCR_RCS_Pos) /**< Ultra Low Power Clock (fULP)
 568:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                         as the source for RTC Clock
 569:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_RTCCLKSRC_t;
 570:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 571:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 572:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting the source of Standby Clock (fSTDBY). These enums are used to con
 573:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  register. User can choose either fOSI or fULP clock as a source for Standby Clock (fSTDBY).
 574:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_HIB_STDBYCLKSRC_t for accessing these enum parameters.
 575:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 576:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_STDBYCLKSRC
 577:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 578:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSI = (0UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos), /**< Internal Slow Clock 
 579:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fOSI) as the source for 
 580:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 581:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_OSCULP = (1UL << SCU_HIBERNATE_HDCR_STDBYSEL_Pos) /**< Ultra Low Power Cl
 582:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fULP) as the source for 
 583:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                           (fSTDBY). */
 584:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_STDBYCLKSRC_t;
 585:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 586:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 587:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for backup clock trimming. These enums are used to configure \a AOTREN  \a FOTR
 588:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  PLLCON0 register. Use type \a XMC_SCU_CLOCK_BACKUP_TRIM_t for accessing these enum parameters.
 589:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 590:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE
 591:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 592:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_FACTORY   = 0UL,  /**< Factory Oscillator Calibration: 
 593:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                         Force adjustment of the internal oscillator
 594:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC = 1UL   /**<  Automatic Oscillator Calibration adju
 595:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t;
 596:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 597:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 598:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 599:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines options for selecting device boot mode. These enums are used to configure \a SWCON bits
 600:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  User can choose among various boot modes by configuring SWCON bits.
 601:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_BOOTMODE_t for accessing these enum parameters.
 602:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 603:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_BOOTMODE 
 604:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 605:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_NORMAL     = (0UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from start of flash
 606:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ASC_BSL    = (1UL << SCU_GENERAL_STCON_SWCON_Pos), /**< UART bootstrap. */
 607:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_BMI        = (2UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot Mode Index - Custom
 608:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            sequence. */
 609:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_CAN_BSL    = (3UL << SCU_GENERAL_STCON_SWCON_Pos), /**< CAN bootstrap. */
 610:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_PSRAM_BOOT = (4UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from PSRAM. */
 611:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM0       = (8UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed 
 612:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                            address 0. */
 613:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_ABM1       = (12UL << SCU_GENERAL_STCON_SWCON_Pos), /**< Boot from flash - fixed
 614:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                             address 1. */
 615:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_BOOTMODE_FABM       = (14UL << SCU_GENERAL_STCON_SWCON_Pos), /**< fallback Alternate Boot
 616:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                             Try ABM-0 then try ABM-
 617:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_BOOTMODE_t;
 618:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 619:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 620:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 621:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines various PLL modes of operation. These enums are used to configure \a VCOBYP bit of \a P
 622:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  User can choose either normal or prescalar mode by configuring VCOBYP bit.
 623:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_PLL_MODE_t for accessing these enum parameters.
 624:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 625:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SYSPLL_MODE
 626:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 627:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED, /**< fPLL derived from fOSC and PLL operating in prescalar mo
 628:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL,  /**< fPLL derived from fVCO and PLL operating in normal mode. 
 629:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR /**< fPLL derived from fOSC and PLL operating in prescalar mo
 630:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_MODE_t;
 631:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 632:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 633:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in SLEEP state.
 634:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetSleepConfig before going to SLEEP state.
 635:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 636:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The SLEEP state of the system corresponds to the SLEEP state of the CPU. The state is
 637:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 638:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  stopped. Peripherals are only clocked when configured to stay enabled. 
 639:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 640:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Peripherals can continue to operate unaffected and eventually generate an event to
 641:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  wake-up the CPU. Any interrupt to the NVIC will bring the CPU back to operation. The
 642:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  clock tree upon exit from SLEEP state is restored to what it was before entry into SLEEP
 643:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  state.
 644:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  
 645:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 646:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_SLEEP_MODE_CONFIG
 647:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 648:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in SLEEP 
 649:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_SLEEPCR_SYSSEL_Msk,  /**< fPLL used as syst
 650:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)
 651:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in SLEEP state */
 652:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_SLEEPCR_USBCR_Msk,  /**< USB clock enabled i
 653:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 654:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 655:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in SLEEP state */
 656:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_SLEEPCR_MMCCR_Msk,/**< SDMMC clock enabled
 657:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 658:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 659:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in SLEEP state */
 660:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_SLEEPCR_ETH0CR_Msk,  /**< ETH clock enabled 
 661:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 662:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 663:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in SLEEP state */
 664:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_SLEEPCR_EBUCR_Msk,  /**< EBU clock enabled i
 665:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 666:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_CCU = 0,  /**< CCU clock disabled in SLEEP state */
 667:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_SLEEPCR_CCUCR_Msk,  /**< CCU clock enabled i
 668:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_DISABLED_WDT = 0,  /**< WDT clock disabled in SLEEP state */
 669:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_SLEEPCR_WDTCR_Msk,  /**< WDT clock enabled i
 670:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SLEEP_MODE_CONFIG_t;
 671:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 672:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 673:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines the source of the system clock and peripherals clock gating in DEEPSLEEP state.
 674:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  In addition the state of FLASH, PLL and PLLVCO during DEEPSLEEP state.
 675:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use this enum as parameter of XMC_SCU_CLOCK_SetDeepSleepConfig before going to DEEPSLEEP state.
 676:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 677:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The DEEPSLEEP state of the system corresponds to the DEEPSLEEP state of the CPU. The state is
 678:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  entered via WFI or WFE instruction of the CPU. In this state the clock to the CPU is
 679:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  stopped. 
 680:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 681:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  In Deep Sleep state the OSC_HP and the PLL may be switched off. The wake-up logic in the NVIC i
 682:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  by a free-running clock. Peripherals are only clocked when configured to stay enabled. 
 683:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Configuration of peripherals and any SRAM content is preserved.
 684:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  The Flash module can be put into low-power mode to achieve a further power reduction.
 685:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  On wake-up Flash module will be restarted again before instructions or data access is possible.
 686:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Any interrupt will bring the system back to operation via the NVIC.The clock setup before
 687:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  entering Deep Sleep state is restored upon wake-up.
 688:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 689:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG
 690:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 691:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FOFI = 0,  /**< fOFI used as system clock source in DE
 692:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_SYSCLK_FPLL = SCU_CLK_DSLEEPCR_SYSSEL_Msk,  /**< fPLL used as
 693:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_FLASH_POWERDOWN = SCU_CLK_DSLEEPCR_FPDN_Msk,/**< Flash power 
 694:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_PLL_POWERDOWN = SCU_CLK_DSLEEPCR_PLLPDN_Msk,  /**<  Switch of
 695:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_VCO_POWERDOWN = SCU_CLK_DSLEEPCR_VCOPDN_Msk,  /**<  Switch of
 696:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(USB0)
 697:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_USB = 0,  /**< USB clock disabled in DEEPSLEEP state 
 698:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_USB = SCU_CLK_DSLEEPCR_USBCR_Msk,  /**< USB clock enab
 699:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 700:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(SDMMC)
 701:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_SDMMC = 0,/**< SDMMC clock disabled in DEEPSLEEP stat
 702:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_SDMMC = SCU_CLK_DSLEEPCR_MMCCR_Msk,/**< SDMMC clock en
 703:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 704:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ETH0)
 705:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_ETH = 0,  /**< ETH clock disabled in DEEPSLEEP state 
 706:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_ETH = SCU_CLK_DSLEEPCR_ETH0CR_Msk,  /**< ETH clock ena
 707:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 708:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
 709:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_EBU = 0,  /**< EBU clock disabled in DEEPSLEEP state 
 710:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_EBU = SCU_CLK_DSLEEPCR_EBUCR_Msk,  /**< EBU clock enab
 711:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 712:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_CCU = 0,  /**< CCU clock disabled in DEEPSLEEP state 
 713:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_CCU = SCU_CLK_DSLEEPCR_CCUCR_Msk,  /**< CCU clock enab
 714:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_DISABLE_WDT = 0,  /**< WDT clock disabled in DEEPSLEEP state 
 715:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_ENABLE_WDT = SCU_CLK_DSLEEPCR_WDTCR_Msk,  /**< WDT clock enab
 716:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_DEEPSLEEP_MODE_CONFIG_t;
 717:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 718:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 719:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Defines status of EVR13 regulator
 720:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 721:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_POWER_EVR_STATUS
 722:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 723:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_OK = 0, /**< EVR13 regulator No overvoltage condition */
 724:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_POWER_EVR_STATUS_EVR13_OVERVOLTAGE = SCU_POWER_EVRSTAT_OV13_Msk /**< EVR13 regulator is i
 725:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_POWER_EVR_STATUS_t;
 726:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 727:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 728:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Define status of external hibernate control  
 729:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 730:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_CTRL_STATUS
 731:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 732:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_NO_ACTIVE = 0, /**< Hibernate not driven active to pads */
 733:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_CTRL_STATUS_ACTIVE = SCU_HIBERNATE_HDSTAT_HIBNOUT_Msk, /**< Hibernate driven active t
 734:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_CTRL_STATUS_t;
 735:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 736:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 737:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Hibernate domain event status
 738:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 739:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_EVENT
 740:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 741:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_POS_EDGE = SCU_HIBERNATE_HDCR_WKPEP_Msk, /**< Wake-up on positive edg
 742:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_NEG_EDGE = SCU_HIBERNATE_HDCR_WKPEN_Msk, /**< Wake-up on negative edg
 743:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_WAKEUP_ON_RTC = SCU_HIBERNATE_HDCR_RTCE_Msk, /**< Wake-up on RTC event */
 744:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_EVENT_ULPWDG = SCU_HIBERNATE_HDCR_ULPWDGEN_Msk, /**< ULP watchdog alarm status */
 745:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_EVENT_t;
 746:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 747:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /** 
 748:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   * Hibernate domain dedicated pins
 749:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   */
 750:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO
 751:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 752:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_0 = 0, /**< HIB_IO_0 pin. 
 753:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                              At the first power-up and with every reset of the hibernate domain thi
 754:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if (defined(DOXYGEN) || (UC_PACKAGE == BGA196) || (UC_PACKAGE == BGA144) || (UC_PACKAGE == LQFP144
 755:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_1 = 1 /**< HIB_IO_1 pin. 
 756:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                             At the first power-up and with every reset of the hibernate domain this
 757:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                             @note : Only available on BGA196, BGA144, LQFP144 and LQFP100 packages*
 758:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif  
 759:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_t;
 760:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 761:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 762:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * HIB_IOx pin I/O control
 763:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 764:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_PIN_MODE
 765:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 766:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_NONE = 0 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 767:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_DOWN = 1 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, 
 768:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_INPUT_PULL_UP = 2 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Direct input, in
 769:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_HIBCTRL = 8 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-
 770:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_WDTSRV = 9 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-p
 771:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_PUSH_PULL_GPIO = 10 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Push-pu
 772:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_HIBCTRL = 12 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Ope
 773:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_WDTSRV = 13 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open
 774:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_PIN_MODE_OUTPUT_OPEN_DRAIN_GPIO = 14 << SCU_HIBERNATE_HDCR_HIBIO0SEL_Pos, /**< Open d
 775:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_PIN_MODE_t;
 776:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 777:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 778:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the output polarity of the HIB_IOx
 779:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 780:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef enum XMC_SCU_HIB_IO_OUTPUT_LEVEL
 781:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 782:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_LOW = 0 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos, /**< Direct value */
 783:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_IO_OUTPUT_LEVEL_HIGH = 1 << SCU_HIBERNATE_HDCR_HIBIO0POL_Pos /**< Inverted value */
 784:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_HIB_IO_OUTPUT_LEVEL_t;
 785:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 786:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
 787:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * DATA STRUCTURES
 788:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
 789:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 790:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 791:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines a data structure for initializing the PLL functional block.
 792:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Structure holds divider values for N-DIV, P-DIV, K1-DIV, K2-DIV in order to generate desired 
 793:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  frequency using VCO. It holds the PLL mode of operation either normal or prescaler (VCO bypasse
 794:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_PLL_CONFIG_t for accessing these structure parameters.
 795:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 796:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_SYSPLL_CONFIG
 797:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 798:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t n_div;                       /**<  PLL N-Divider value. */
 799:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t p_div;                       /**<  PLL P-Divider value. */
 800:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t k_div;                       /**<  K1-Divider(Prescalar mode) or K2-Divider (Normal mode)
 801:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_MODE_t mode;    /**<  PLL mode of operation. */
 802:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLLCLKSRC_t clksrc; /**<  PLL divider input frequency. */
 803:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } XMC_SCU_CLOCK_SYSPLL_CONFIG_t;
 804:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 805:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 806:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Defines a data structure used for initializing the clock functional block.
 807:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Clock functional block configures clock source needed for various peripheral and its divider va
 808:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *  Use type \a XMC_SCU_CLOCK_CONFIG_t for accessing these structure parameters.
 809:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 810:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** typedef struct XMC_SCU_CLOCK_CONFIG
 811:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 812:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSPLL_CONFIG_t         syspll_config;      /**< PLL configuration */
 813:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   bool                                  enable_oschp;       /**< Enable external high precision osc
 814:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  Should be enabled when fOHP has to
 815:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   bool                                  enable_osculp;      /**< Enable external ultra low power os
 816:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                                                                  Should be enabled when fULP has to
 817:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t calibration_mode;   /**< Backup clock trimming mode. */
 818:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_HIB_STDBYCLKSRC_t             fstdby_clksrc;      /**< Standby clock source. */
 819:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   XMC_SCU_CLOCK_SYSCLKSRC_t             fsys_clksrc;        /**< Choice of system clock. */
 820:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fsys_clkdiv;        /**< Ratio of fPLL to fSYS. */
 821:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fcpu_clkdiv;        /**< Ratio of fSys to fCPU. */
 822:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fccu_clkdiv;        /**< Ratio of fSys to fCCU. */
 823:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   uint8_t                               fperipheral_clkdiv; /**< Ratio of fSYS to fPERI. */
 824:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** } const XMC_SCU_CLOCK_CONFIG_t;
 825:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 826:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 827:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**************************************************************************************************
 828:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * API PROTOTYPES
 829:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  **************************************************************************************************
 830:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 831:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #ifdef __cplusplus
 832:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** extern "C" {
 833:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
 834:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 835:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 836:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
 837:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 838:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 839:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 840:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 841:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 842:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 843:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 844:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 845:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables out of range comparator for the selected ADC group and channel. \n\n
 846:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The ADC channel input is compared by Out of Range Comparator (ORC) for overvoltage monitoring
 847:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * or for detection of out of range analog inputs. ORC must be turned on explicitly
 848:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * to leverage the auditing feature. ORC is enabled by setting the enable bit in the GORCEN registe
 849:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 850:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_DisableOutOfRangeComparator()\n\n\n
 851:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 852:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 853:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 854:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 855:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * 
 856:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param group   ADC Group to which the channel being monitored belongs to.\n
 857:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 0 or 1.
 858:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param channel  The channel whose voltage range has to be monitored.\n
 859:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                 \b Range: 6 or 7. Value identifies the channel in the selected ADC group.
 860:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 861:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 862:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 863:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 864:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables the out of range comparator for the selected ADC group and the channel. \n\n
 865:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Out of range comparator is disabled by clearing the enable bit in the GORCEN register.
 866:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 867:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableOutOfRangeComparator()\n\n\n
 868:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 869:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel);
 870:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 871:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 872:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 873:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 874:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 875:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables die temperature measurement by powering the DTS module.\n\n
 876:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Die temperature sensor is enabled by setting the PWD bit of DTSCON register.
 877:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 878:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_DisableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTempe
 879:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 880:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 881:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_EnableTemperatureSensor(void);
 882:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 883:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 884:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 885:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 886:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 887:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables die temperature measurement by powering the DTS module off.\n\n
 888:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Die temperature sensor is disabled by clearing the PWD bit of DTSCON register.
 889:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 890:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_IsTemperatureSensorEnabled(), XMC_SCU_CalibrateTemper
 891:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 892:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 893:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_DisableTemperatureSensor(void);
 894:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 895:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 896:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return Status of die temperature sensor. \n
 897:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: true - if temperature sensor is enabled.\n
 898:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    false - if temperature sensor is disabled.
 899:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 900:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 901:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the die temperature sensor power status.\n\n
 902:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is obtained by reading the PWD bit of DTSCON register.
 903:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 904:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
 905:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 906:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 907:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorEnabled(void);
 908:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 909:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 910:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 911:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param offset  Offset value for calibrating the DTS result.\n
 912:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 0 to 127.
 913:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param gain    Gain value for calibrating the DTS conversion result.\n
 914:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 0 to 63.
 915:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 916:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
 917:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 918:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 919:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Calibrates the measurement of temperature by configuring the values of offset and gain of \a DTS
 920:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Allows to improve the accuracy of the temperature measurement with the adjustment of \a OFFSET a
 921:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * in the \a DTSCON register.
 922:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Offset adjustment is defined as a shift of the conversion result. The range of the offset adjust
 923:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * resolution that corresponds to +/- 12.5�C. The offset value gets added to the measure result. 
 924:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Offset is considered as a signed value.
 925:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Gain adjustment helps in minimizing gain error. When the \a gain value is 0, result is generated
 926:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * When the \a gain value is 63, result is generated with least gain, i.e, \a RESULT - 63 at the hi
 927:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
 928:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
 929:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CalibrateTempMonitor with desired offset and gain calibration values to the DT
 930:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
 931:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
 932:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
 933:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * conversion complete.\n
 934:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
 935:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 936:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(),
 937:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_GetTemperatureMeasurement() \n\n\n
 938:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 939:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain);
 940:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 941:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 942:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_STATUS_t  Result of starting the temperature measurement.\n
 943:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                           \b Range: \n 
 944:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_OK if the measurement is started successfully.\n
 945:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_ERROR if temperature sensor is not enabled.\n
 946:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                              XMC_SCU_STATUS_BUSY if temperature sensor is busy measuring the tem
 947:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 948:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 949:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 950:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Starts die temperature measurement using internal temperature sensor.\n\n
 951:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API checks if the temperature sensor is enabled and is not busy in measurement.\n
 952:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
 953:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
 954:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
 955:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
 956:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Check whether Die Temperature Sensor (DTS) is busy in conversion by calling \a XMC_SCU_IsTempe
 957:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * conversion complete.\n
 958:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Read the die temperature value using \a XMC_SCU_GetTemperatureMeasurement API.
 959:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 960:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_EnableTemperatureSensor(), XMC_SCU_CalibrateTemperatureSensor(),
 961:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
 962:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 963:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void);
 964:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 965:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 966:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 967:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 968:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Measured temperature value.\n
 969:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: Valid temperature range is 0 to 1023. \n
 970:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              If sensor is not enabled, 0x7FFFFFFFH is returned.
 971:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 972:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 973:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Reads the measured value of die temperature.\n\n
 974:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Temperature measurement result is read from \a RESULT bit field of \a DTSSTAT register.
 975:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The temperature measured in �C is given by (RESULT - 605) / 2.05 [�C]
 976:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 977:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_IsTemperatureSensorBusy() \n\n\n
 978:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 979:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_GetTemperatureMeasurement(void);
 980:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 981:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 982:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Indicates if the die temperature sensor is busy.\n
 983:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    \b Range: \a true if sensor is busy in temperature measurement.
 984:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    \a false if sensor is free and can accept a new request for measurement.
 985:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 986:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
 987:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks whether Die Temperature Sensor (DTS) is busy in temperature measurement.\n\n
 988:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is read from the \a BUSY bit field of the \a DTSSTAT register.
 989:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
 990:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_GetTemperatureMeasurement() \n\n\n
 991:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
 992:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorBusy(void);
 993:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
 994:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
 995:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool Status of die temperature sensor whether it is ready to start measurement. \n
 996:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: \n \a true if temperature sensor is ready to start measurement. \n
 997:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \a false if temperature sensor is not ready to start measurement.
 998:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
 999:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1000:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks if the die temperature sensor is ready to start a measurement\n\n
1001:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is obtained by reading \a RDY bit of \a DTSSTAT register. It is recommended
1002:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * to check the ready status of die temperature sensor before starting it.
1003:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1004:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_StartTemperatureMeasurement(), XMC_SCU_IsTemperatureSensorBusy() \n\n\n
1005:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1006:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_IsTemperatureSensorReady(void);
1007:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1008:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if (UC_SERIES != XMC45)
1009:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1010:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has exceeded the configured upper 
1011:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has exceeded the configured upper limit.
1012:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              if the temperature value is less than the configured upper limit.
1013:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1014:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1015:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks if the measured temperature has exceeded the configured upper limit of temperature.\n\n
1016:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API checks \a OVERFL bit (Upper Limit Overflow Status bit) of \a DTEMPALARM register.
1017:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The \a OVERFL bit will be set if the measured temperature has exceeded the limit configured in 
1018:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the bitfield \a UPPER in the \a DTEMPLIM register.
1019:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1020:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_LowTemperature() \n\n\n
1021:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1022:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_HighTemperature(void);
1023:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1024:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1025:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1026:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param lower_temp  Lower threshold of die temperature. If measured temperature falls below this 
1027:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    alarm bit will be set in \a UNDERFL bit field of \a DTEMPALARM register.
1028:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param upper_temp  Upper threshold of die temperature. If measured temperature exceeds this valu
1029:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    alarm bit will be set in \a OVERFL bit field of \a DTEMPALARM register.
1030:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1031:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1032:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1033:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1034:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the lower and upper threshold of die temperature.\n\n
1035:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * API configures \a DTEMPLIM register for upper and lower die temperature threshold limits.
1036:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * When the measured temperature is outside the range defined by the limits, alarm bits \a UNDERFL 
1037:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * will be set in the register \a DTEMPALARM.\n
1038:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps:\n
1039:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StopTempMeasurement to stop temperature measurement if it was started previous
1040:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetRawTempLimits with desired lower and upper temperature threshold limit valu
1041:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_StartTempMeasurement to start temperature measurement.\n
1042:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Use \a XMC_SCU_HighTemperature() and XMC_SCU_LowTemperature() to monitor the temperature.\n
1043:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1044:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HighTemperature(), XMC_SCU_LowTemperature() \n\n\n
1045:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1046:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp);
1047:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1048:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1049:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Indicates if the measured die temperature value has dropped below the configured l
1050:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: \a true if the temperature value has dropped below the configured lower l
1051:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              if the temperature value is higher than the configured lower limit.
1052:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1053:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1054:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks if the measured temperature has dropped below the configured lower limit of temperature.\
1055:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API checks \a UNDERFL bit (Lower LimitUnderflow Status bit) of \a DTEMPALARM register.
1056:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The \a UNDERFL bit will be set if the measured temperature has dropped below the limit configure
1057:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the bitfield \a LOWER in the \a DTEMPLIM register.
1058:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1059:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_SetRawTempLimits(),XMC_SCU_HighTemperature() \n\n\n
1060:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1061:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_LowTemperature(void);
1062:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
1063:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1064:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1065:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t Configured boot mode for the device.\n
1066:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for enumeration of different boot modes.
1067:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1068:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1069:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the boot mode configured for the device.\n\n
1070:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The boot mode is read from the \a STCON register bit field \a SWCON.
1071:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1072:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1073:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_SetBootMode() \n\n\n
1074:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1075:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_GetBootMode(void);
1076:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1077:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1078:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1079:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param mode Boot mode to be configured for the device.\n
1080:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_BOOTMODE_t for selecting the boot mode.
1081:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1082:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1083:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1084:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1085:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the desired boot mode for the device.\n\n
1086:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The XMC4 series devices support multiple boot modes. A running application can set a desired boo
1087:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * launch it by means of software reset. Switching of boot modes should be handled carefully. User 
1088:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the initial boot sequence is executed. A stable execution environment should be maintained when 
1089:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * eventually handed over to the application program.\n
1090:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to launch requested bootmode:\n
1091:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_SetBootMode() with desired boot mode value.\n
1092:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Trigger a software reset using system reset request by enabling a bit \a SYSRESETREQ of AIRCR 
1093:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *   (PPB->AIRCR |= PPB_AIRCR_SYSRESETREQ_Msk).\n
1094:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1095:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_GetBootMode() \n\n\n
1096:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1097:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t mode);
1098:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1099:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be read.\n
1102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Data read from the selected general purpose register.
1105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides stored data from general purpose SCU register.\n\n
1108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * data. The API reads from either GPR0 or GPR1 based on the \a index value.
1110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_WriteGPR()\n\n\n
1112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadGPR(const uint32_t index);
1114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
1115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param index  The SCU general purpose register to be written.\n
1118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 0 and 1 corresponding to GPR0 and GPR1.
1119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param data  Data to be written to the selected general purpose register.
1120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Stores data in the selected general purpose SCU register.\n\n
1125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * SCU consists of 2 general purpose registers. These registers can be used for storing
1126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * data. The API writes data to either GPR0 or GPR1 based on the \a index value.
1127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_ReadGPR()\n\n\n
1129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data);
1131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be written.\n
1135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  0 to 15.
1138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param data    32 bit data to be written into retention memory. The API writes
1139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                one word(4 bytes) of data to the address specified.\n
1140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Writes input data to the selected address of Retention memory in hibernate domain.\n\n
1146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_ReadFromRetentionMemory() \n\n\n
1152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data);
1154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param address  Location in the retention memory to be read.\n
1158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: 4 bit address space is provided for selecting 16 words of 32 bits.
1159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  equivalent to 64 bytes of data. \a address value should be from
1160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  0 to 15.
1161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  32 bit data read from retention memory. The API reads
1163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                one word(4 bytes) of data from the address specified.\n
1164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                \b Range: 32 bit data.
1165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Reads data from selected address of retention memory in hibernate domain.\n\n
1168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The retention memory is located in hibernate domain. 
1169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is used for the purpose of store/restore of context information.
1170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Access to the retention memory space is served over shared serial interface. 
1171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Retention memory content is retained even in hibernate mode.
1172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_WriteToRetentionMemory() \n\n\n
1174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address);
1176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be enabled.\n
1180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selectively enables interrupt sources to generate non maskable interrupt(NMI).\n\n
1187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * NMI assertion can be individually enabled by setting corresponding bit of an interrupt in the 
1188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \a NMIREQEN register.
1189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_DisableNmiRequest() \n\n\n
1191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request);
1193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param request  Non-maskable interrupt (NMI) request source to be disabled.\n
1197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: Use type @ref XMC_SCU_NMIREQ_t for selecting the source of NMI. Multiple 
1198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              sources can be combined using \a OR operation.
1199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selectively disables interrupt sources from generating non maskable interrupt(NMI).\n\n
1204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * NMI assertion can be individually disabled by clearing corresponding bits in the \a NMIREQEN reg
1205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request);
1209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be enabled.\n
1213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables assertion of trap for the selected trap event.\n\n
1219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion can be individually enabled by clearing respective bit of the 
1220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * event in \a TRAPDIS register in order to get an exception.
1221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Disable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_Enable(const uint32_t trap);
1225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap generation has to be disabled.\n
1229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables assertion of trap for the selected trap event.\n\n
1235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion can be individually disabled by setting the respective event bit 
1236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * in the \a TRAPDIS register in order to suppress trap generation.
1237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_ClearStatus(), XMC_SCU_TRAP_GetStatus() \n\n\n
1239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_Disable(const uint32_t trap);
1241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap status bit has to be cleared.\n
1245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Clears the trap status of input event.\n\n
1251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Once a trap event is detected, it will have to be acknowledged and later serviced. 
1252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The trap status bit should be cleared to detect the occurence of trap next time. 
1253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * This is useful while polling for TRAPSTAT without enabling the NMI for trap.
1254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap status can be cleared by setting the event bit in the \a TRAPCLR register.
1255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap);
1259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Status of trap generating events.\n
1262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event. The returned
1263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * value indicates the status of multiple events at their respective bit positions.
1264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * User should mask the bits of the events of interest using the type specified.
1265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the status of trap generating events. \n\n
1268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status is read from \a TRAPRAW register. Status of the specific events can be checked
1269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * using their respective bits in the \a TRAPRAW register. The bit masks can be obtained from
1270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the enumeration type @ref XMC_SCU_TRAP_t. Multiple events can be combined using \a OR operation.
1271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * A trap event is considered to be asserted if the respective bit of the event is set to 1.
1272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_ClearStatus() \n\n\n
1274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_TRAP_GetStatus(void);  
1276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param trap  The event for which, trap has to be triggered.\n
1280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_TRAP_t to identify the event.
1281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Triggers trap generation for the event specified. \n\n
1286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The trap source has to be enabled before invocation of this API. 
1287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap event can be triggered by setting its respective bit in the \a TRAPSET register.
1288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap event can be configured to generate a non maskable interrupt by using the API XMC_SCU_INTER
1289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to manually assert a trap event:\n
1290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_EnableEvent with desired trap request source ID.\n
1291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_TRAP_SetEvent with same trap request source ID to manually assert a trap event
1292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_TRAP_GetStatus() \n\n\n
1294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_TRAP_Trigger(const uint32_t trap);
1296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be reset.\n
1300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Puts the specified peripheral in to reset state. \n\n
1306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API achieves reset of peripherals by setting the respective bit in the \a PRSET0,  \a PRSET1
1307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * register. Status of reset assertion automatically stored in the \a PRSTATn register and can be c
1308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * user software to determine the state of the system and for debug purpose.\n
1309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to assert a peripheral reset:\n
1310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_AssertPeripheralReset() with desired peripheral identifier.\n
1311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted with same peripheral identifier to verify whet
1312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * is in reset state.\n
1313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_RESET_IsPeripheralResetAsserted() \n\n\n
1315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param peripheral  The peripheral to be moved out of reset state.\n
1321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals that can be
1322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables the specified peripheral by moving it out of reset state.  \n\n
1327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Any peripheral should be moved out of reset state for executing its functionality.
1328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API enables the peripheral by setting its respective bit in the \a PRCLR0,  \a PRCLR1 or  \a
1329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * register. Status of reset deassertion is automatically stored in the \a PRSTATn register and can
1330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the user software to determine the state of the system and for debug purpose.\n
1331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to deassert a peripheral reset:\n
1332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_DeassertPeripheralReset() with desired peripheral identifier.\n
1333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_RESET_IsPeripheralResetAsserted() with desired peripheral identifier to verify
1334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * has been enabled.\n
1335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param peripheral  The peripheral, whose reset status has to be checked.\n
1343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Type @ref XMC_SCU_PERIPHERAL_RESET_t enumerates all the peripherals.
1344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Status of peripheral reset. \n
1346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *               \b Range: \a true if peripheral is in reset state. \a false if peripheral is enabl
1347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks the reset status of the selected peripheral.\n\n
1350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API reads the reset status from \a PRSTATn register. Returns true if the peripheral is in
1351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * reset state. On power up of the device, all the peripherals will be in reset state. 
1352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If the peripheral is enabled, \a false will be returned as the status.
1353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n 
1355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral);
1357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  
1358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error status has to be cleared.\n
1361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory status bits can be cleared by using the \a OR operation.
1363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Clears the parity error status bit. \n\n
1368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * When a memory parity error is detected using the status bits in \a PEFLAG register. It has to 
1369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * be cleared by software to detect the parity error from the same memory next time.
1370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API clears the parity error status bit of the selected peripheral by setting the 
1371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * respective bit in the \a PEFLAG register. Status of multiple memory parity errors 
1372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * can be cleared by combining the enum values using \a OR operation.
1373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_GetStatus(), XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_EnableTrapGeneration() \n\n\
1375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory);
1377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error checking has to be enabled.\n
1381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables parity error checking for the selected on-chip RAM type.\n\n
1388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error checking can be enabled by setting respective bits in the \a PEEN register.
1389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Additionally parity error can be configured to generate trap when the error is detected,
1390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * using the API XMC_SCU_PARITY_EnableTrapGeneration(). Such a trap can be further configured
1391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * to generate non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration(), XMC_SCU_INTERRUPT_EnableNmiRequest() \n\n\n
1394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_Enable(const uint32_t memory);
1396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory   The on-chip RAM type, for which the parity error checking has to be disabled.\n
1400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables parity error checking for the selected on-chip RAM type.\n\n
1407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error detection can be disabled by clearing the respective bit in the \a PEEN register.
1408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_Enable(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_Disable(const uint32_t memory);
1412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be enable
1416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables trap assertion for the parity error source.\n\n
1423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error detection for different types of on-chip RAM can generate trap.
1424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion for parity error can be individually enabled by setting the respective bits
1425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * in the \a PETE register. The generated trap can be additionally configured to generate
1426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * non maskable interrupt(NMI) using the API XMC_SCU_INTERRUPT_EnableNmiRequest().
1427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_INTERRUPT_EnableNmiRequest(), XMC_SCU_PARITY_DisableTrapGeneration() \n\n\n
1429:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1430:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory);
1431:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1432:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1433:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1434:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param memory  The on-chip RAM type, for which the parity error trap generation has to be disabl
1435:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to identify the on-chip RAM type. Multiple 
1436:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          memory types can be combined using the \a OR operation.
1437:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1438:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None  
1439:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1440:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1441:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables the assertion of trap for the parity error source.\n\n
1442:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Trap assertion can be disabled by clearing the respective bit of the RAM type in the \a PETE reg
1443:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1444:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1445:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_EnableTrapGeneration() \n\n\n
1446:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1447:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory);
1448:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1449:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1450:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1451:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Status of parity error detection for the on-chip RAM modules.\n
1452:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_PARITY_t to get the bit mask of each RAM module type.
1453:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1454:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1455:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the status of parity error detection for the on-chip RAM modules.\n\n
1456:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Parity error status information is obtained from the \a PEFLAG register.
1457:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If a particular RAM module has parity error, its respective bit field will be set to 1 in the 
1458:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * returned value. A check for the status of a particular RAM module can be done by
1459:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * masking the returned value with the RAM module identifier from the type @ref XMC_SCU_PARITY_t.
1460:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1461:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_PARITY_ClearStatus() \n\n\n
1462:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1463:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_PARITY_GetStatus(void);  
1464:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1465:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1466:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1467:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be enabled. \n
1468:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1469:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1470:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1471:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1472:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1473:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables the source clock for selected peripheral.\n\n
1474:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually enabled by setting the pe
1475:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * specific bit in the \a CLKSET register.\n
1476:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether a source clock of peripheral is enabl
1477:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_EnableClock() with desired peripheral identifier.\n
1478:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled() with same peripheral identifier to verify whether the c
1479:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1480:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableClock(), XMC_SCU_RESET_DeassertPeripheralReset() \n\n\n
1481:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1482:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock);
1483:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1484:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1485:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1486:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock  Peripheral for which the clock has to be disabled. \n
1487:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1488:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1489:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1490:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1491:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1492:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables source clock for the peripheral selected.\n\n
1493:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The various outputs of Clock Generation Unit (CGU) can be individually disabled  by setting the 
1494:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * specific bits in the \a CLKCLR register.\n
1495:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is recommended to use following steps to verify whether clock source of the peripheral is ena
1496:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_DisableClock with desired peripheral identifier.\n
1497:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * - Call \a XMC_SCU_CLOCK_IsClockEnabled with same peripheral identifier to verify whether periphe
1498:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1499:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_RESET_AssertPeripheralReset() \n\n\n
1500:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1501:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock);
1502:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1503:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1504:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1505:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock   Peripheral for which the clock status has to be checked. \n
1506:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_t to select the peripheral.
1507:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1508:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return bool  Status of peripheral clock.\n
1509:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: \a true if peripheral clock is enabled. \a false if peripheral clock is disable
1510:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1511:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1512:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Checks the status of peripheral source clock.\n\n
1513:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The status of peripheral source clock is read from the \a CLKSTATn register. 
1514:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Returns \a true if clock is enabled and returns \a false otherwise.
1515:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1516:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableClock(), XMC_SCU_CLOCK_DisableClock() \n\n\n
1517:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1518:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock);
1519:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1520:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1521:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1522:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of clock for fSYS.\n
1523:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1524:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI for selecting internal fast clock as fSYS.\n
1525:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL for selecting the output of PLL fPLL as fSYS.
1526:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1527:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1528:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1529:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1530:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source for system clock (fSYS).\n\n
1531:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * System clock is selected by setting \a SYSSEL bits in the \a SYSCLKCR register.
1532:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSCLKSRC_PLL is selected, then the dividers of the PLL have to be
1533:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * additionally configured to achieve the required system clock frequency. 
1534:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   * \par<b>Related APIs:</b><BR>
1535:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_StartSystemPll(), XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
1536:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1537:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source);
1538:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1539:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1540:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_SYSCLKSRC_t   Source of clock for fSYS.\n
1541:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSCLKSRC_t to select the source of clock.\n
1542:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_OFI - internal fast clock selected as fSYS.\n
1543:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_SYSCLKSRC_PLL - output of PLL fPLL selected as fSYS.
1544:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1545:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1546:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the selected source of system clock (fSYS). \n\n
1547:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selected source of fSYS is obtained by reading \a SYSSEL bits of \a SYSCLKCR register.
1548:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1549:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource(), XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
1550:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1551:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSCLKSRC_t XMC_SCU_CLOCK_GetSystemClockSource(void)
1552:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1553:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSCLKSRC_t)(SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk);
1554:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1555:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1556:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1557:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1558:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1559:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to select the source of clock.\n
1560:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL as source of USB clock(fUSB/
1561:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL as source of USB clock(fUSB
1562:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1563:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1564:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1565:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1566:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of USB/SDMMC clock (fUSB/SDMMC).\n\n
1567:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * USB and SDMMC use a common clock source. They can either use fUSB PLL or fPLL as the source of c
1568:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The selection is done by configuring the \a USBSEL bits of \a USBCLKCR register.
1569:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1570:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1571:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1572:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source);
1573:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1574:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1575:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_USBCLKSRC_t   Source of clock for USB and SDMMC(fUSB/SDMMC).\n
1576:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_USBCLKSRC_t to identify the source of clock.\n
1577:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_USBPLL - output of USB PLL is selected as source of USB
1578:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_USBCLKSRC_SYSPLL - output of PLL fPLL is selected as source of US
1579:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1580:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1581:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the selected source of USB and SDMMC clock frequency.\n\n
1582:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The clock source is read from from the \a USBSEL bits of \a USBCLKCR register.
1583:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1584:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
1585:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1586:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_USBCLKSRC_t XMC_SCU_CLOCK_GetUsbClockSource(void)
1587:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
  27              	 .loc 1 1587 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 00AF     	 add r7,sp,#0
  37              	.LCFI1:
  38              	 .cfi_def_cfa_register 7
1588:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_USBCLKSRC_t)(SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBSEL_Msk);
  39              	 .loc 1 1588 0
  40 0004 044B     	 ldr r3,.L3
  41 0006 9B69     	 ldr r3,[r3,#24]
  42 0008 03F48033 	 and r3,r3,#65536
1589:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
  43              	 .loc 1 1589 0
  44 000c 1846     	 mov r0,r3
  45 000e BD46     	 mov sp,r7
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 13
  48              	 
  49 0010 5DF8047B 	 ldr r7,[sp],#4
  50              	.LCFI3:
  51              	 .cfi_restore 7
  52              	 .cfi_def_cfa_offset 0
  53 0014 7047     	 bx lr
  54              	.L4:
  55 0016 00BF     	 .align 2
  56              	.L3:
  57 0018 00460050 	 .word 1342195200
  58              	 .cfi_endproc
  59              	.LFE129:
  61              	 .section .text.XMC_SCU_CLOCK_GetWdtClockSource,"ax",%progbits
  62              	 .align 2
  63              	 .thumb
  64              	 .thumb_func
  66              	XMC_SCU_CLOCK_GetWdtClockSource:
  67              	.LFB130:
1590:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1591:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1592:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1593:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Clock source for watchdog timer.\n
1594:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1595:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1596:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1597:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1598:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1599:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1600:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1601:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1602:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of WDT clock (fWDT).\n\n
1603:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The selected value is configured to the \a WDTSEL bits of \a WDTCLKCR register.
1604:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The watchdog timer counts at the frequency selected using this API. So the time for
1605:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * timeout or pre-warning of watchdog has to be calculated based on this selection.
1606:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1607:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1608:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_GetWdtClockFrequency() \n\n\n
1609:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1610:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source);
1611:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1612:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1613:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_WDTCLKSRC_t   Clock source configured for watchdog timer.\n
1614:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type XMC_SCU_CLOCK_WDTCLKSRC_t to identify the clock source.\n
1615:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_OFI - internal fast oscillator (fOFI)\n
1616:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_STDBY - backup standby clock (fSTDBY)\n
1617:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  XMC_SCU_CLOCK_WDTCLKSRC_PLL - PLL output clock (fPLL)
1618:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1619:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1620:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of clock used for watchdog timer.\n\n
1621:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTSEL bits of \a WDTCLKCR register.
1622:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The time for timeout or pre-warning of watchdog has to be calculated based on 
1623:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the clock source selected.
1624:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1625:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockDivider(), XMC_SCU_CLOCK_SetWdtClockSource() \n\n\n
1626:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1627:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_WDTCLKSRC_t XMC_SCU_CLOCK_GetWdtClockSource(void)
1628:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
  68              	 .loc 1 1628 0
  69              	 .cfi_startproc
  70              	 
  71              	 
  72              	 
  73 0000 80B4     	 push {r7}
  74              	.LCFI4:
  75              	 .cfi_def_cfa_offset 4
  76              	 .cfi_offset 7,-4
  77 0002 00AF     	 add r7,sp,#0
  78              	.LCFI5:
  79              	 .cfi_def_cfa_register 7
1629:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_WDTCLKSRC_t)(SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTSEL_Msk);
  80              	 .loc 1 1629 0
  81 0004 044B     	 ldr r3,.L7
  82 0006 5B6A     	 ldr r3,[r3,#36]
  83 0008 03F44033 	 and r3,r3,#196608
1630:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
  84              	 .loc 1 1630 0
  85 000c 1846     	 mov r0,r3
  86 000e BD46     	 mov sp,r7
  87              	.LCFI6:
  88              	 .cfi_def_cfa_register 13
  89              	 
  90 0010 5DF8047B 	 ldr r7,[sp],#4
  91              	.LCFI7:
  92              	 .cfi_restore 7
  93              	 .cfi_def_cfa_offset 0
  94 0014 7047     	 bx lr
  95              	.L8:
  96 0016 00BF     	 .align 2
  97              	.L7:
  98 0018 00460050 	 .word 1342195200
  99              	 .cfi_endproc
 100              	.LFE130:
 102              	 .section .text.XMC_SCU_CLOCK_GetExternalOutputClockSource,"ax",%progbits
 103              	 .align 2
 104              	 .thumb
 105              	 .thumb_func
 107              	XMC_SCU_CLOCK_GetExternalOutputClockSource:
 108              	.LFB133:
1631:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1632:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1633:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1634:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source   Source for standby clock.\n
1635:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1636:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1637:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1638:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1639:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1640:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1641:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1642:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of Standby clock (fSTDBY).\n\n
1643:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Clock source is configured by setting the \a STDBYSEL bits of \a HDCR register.
1644:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Hibernate domain should be enabled explicitly before using the API.
1645:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1646:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetStdbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1647:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1648:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source);
1649:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1650:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1651:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source clock of standby clock(fSTDBY).\n
1652:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: Use type @ref XMC_SCU_HIB_STDBYCLKSRC_t to identify the clock source.\n
1653:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSI - internal slow oscillator (fOSI) \n
1654:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    XMC_SCU_HIB_STDBYCLKSRC_OSCULP - ultra low power osciallator (fULP) \n
1655:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1656:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1657:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of standby clock (fSTDBY).\n\n
1658:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a STDBYSEL bits of \a HDCR register.\n
1659:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1660:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetStandbyClockSource(), XMC_SCU_HIB_EnableHibernateDomain() \n\n\n
1661:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1662:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetStdbyClockSource(void)
1663:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1664:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_STDBYSEL_Msk);
1665:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1666:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1667:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1668:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1669:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of RTC clock.\n
1670:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1671:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1672:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1673:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1674:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1675:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1676:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1677:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of RTC clock (fRTC).\n\n
1678:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a RCS bit of \a HDCR register.
1679:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * fULP needs external input powered by VBAT or VDDP. fOSI is internal clock.
1680:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1681:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1682:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_GetRtcClockSource() \n\n\n
1683:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1684:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source);
1685:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1686:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1687:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_HIB_RTCCLKSRC_t   Source of RTC clock.\n
1688:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_HIB_RTCCLKSRC_t to identify the clock source.\n
1689:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_OSI - internal slow oscillator(fOSI). \n
1690:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_HIB_RTCCLKSRC_ULP - ultra low power oscillator(fULP). \n
1691:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1692:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1693:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of RTC clock (fRTC).
1694:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a RCS bit of \a HDCR register.
1695:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The frequency of the clock will be 32.768 kHz.
1696:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1697:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1698:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1699:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_HIB_RTCCLKSRC_t XMC_SCU_HIB_GetRtcClockSource(void)
1700:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1701:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_HIB_RTCCLKSRC_t)(SCU_HIBERNATE->HDCR & SCU_HIBERNATE_HDCR_RCS_Msk);
1702:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1703:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1704:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1705:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1706:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param clock  Source of external clock output(fEXT).\n
1707:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1708:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1709:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1710:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1711:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC42
1712:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1713:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1714:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1715:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC41
1716:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1717:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1718:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1719:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1720:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1721:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1722:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of external clock out (fEXT).\n\n
1723:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value will be configured to \a ECKSEL bits of \a EXTCLKCR register.
1724:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1725:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1726:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1727:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t clock);
1728:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1729:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1730:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_EXTOUTCLKSRC_t   Source of external clock output(fEXT).\n
1731:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *           \b Range: Use type @ref XMC_SCU_CLOCK_EXTOUTCLKSRC_t to identify the clock.\n
1732:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS - system clock fSYS. \n
1733:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_USB - USB clock fUSB. \n
1734:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL - PLL output fPLL. \n
1735:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC42
1736:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1737:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1738:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \if XMC41
1739:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                      XMC_SCU_CLOCK_EXTOUTCLKSRC_STDBY - Standby clock fSTDBY. \n
1740:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \endif
1741:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1742:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1743:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of external clock output(fEXT).\n\n
1744:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a ECKSEL bits of \a EXTCLKCR register.
1745:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1746:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
1747:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1748:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_EXTOUTCLKSRC_t XMC_SCU_CLOCK_GetExternalOutputClockSource(void)
1749:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 109              	 .loc 1 1749 0
 110              	 .cfi_startproc
 111              	 
 112              	 
 113              	 
 114 0000 80B4     	 push {r7}
 115              	.LCFI8:
 116              	 .cfi_def_cfa_offset 4
 117              	 .cfi_offset 7,-4
 118 0002 00AF     	 add r7,sp,#0
 119              	.LCFI9:
 120              	 .cfi_def_cfa_register 7
1750:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_EXTOUTCLKSRC_t)(SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKSEL_Msk);
 121              	 .loc 1 1750 0
 122 0004 054B     	 ldr r3,.L11
 123 0006 9B6A     	 ldr r3,[r3,#40]
 124 0008 DBB2     	 uxtb r3,r3
 125 000a 03F00303 	 and r3,r3,#3
 126 000e DBB2     	 uxtb r3,r3
1751:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
 127              	 .loc 1 1751 0
 128 0010 1846     	 mov r0,r3
 129 0012 BD46     	 mov sp,r7
 130              	.LCFI10:
 131              	 .cfi_def_cfa_register 13
 132              	 
 133 0014 5DF8047B 	 ldr r7,[sp],#4
 134              	.LCFI11:
 135              	 .cfi_restore 7
 136              	 .cfi_def_cfa_offset 0
 137 0018 7047     	 bx lr
 138              	.L12:
 139 001a 00BF     	 .align 2
 140              	.L11:
 141 001c 00460050 	 .word 1342195200
 142              	 .cfi_endproc
 143              	.LFE133:
 145              	 .section .text.XMC_SCU_CLOCK_GetSystemClockFrequency,"ax",%progbits
 146              	 .align 2
 147              	 .thumb
 148              	 .thumb_func
 150              	XMC_SCU_CLOCK_GetSystemClockFrequency:
 151              	.LFB143:
1752:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1753:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1754:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1755:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of clock for system PLL.\n
1756:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1757:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1758:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1759:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1760:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1761:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1762:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1763:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of system PLL.\n\n
1764:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a VCOBYP bit of \a PLLCON0 register.
1765:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If \a XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP is selected, ensure that the high performance oscillator 
1766:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * enabled by using the API XMC_SCU_CLOCK_EnableHighPerformanceOscillator().
1767:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1768:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator()\n\n\n
1769:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1770:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source);
1771:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1772:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1773:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_OSCCLKSRC_t   Source of clock for system PLL.\n
1774:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *        \b Range: Use type @ref XMC_SCU_CLOCK_SYSPLLCLKSRC_t for identifying the clock source.\n
1775:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP - External High performance oscillat
1776:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                            XMC_SCU_CLOCK_SYSPLLCLKSRC_OFI - Internal fast clock (fOFI).
1777:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1778:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1779:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of system PLL clock (fPLL). \n\n
1780:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a VCOBYP bit of \a PLLCON0 register.
1781:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1782:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator(), XMC_SCU_CLOCK_SetSystemPllClockSource()\n\n\n
1783:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1784:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_SYSPLLCLKSRC_t XMC_SCU_CLOCK_GetSystemPllClockSource(void)
1785:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1786:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_SYSPLLCLKSRC_t)(SCU_PLL->PLLCON0 & SCU_PLL_PLLCON0_VCOBYP_Msk);
1787:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1788:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1789:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0) 
1790:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1791:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1792:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param source  Source of ECAT clock.\n
1793:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1794:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1795:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1796:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1797:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1798:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1799:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1800:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Selects the source of ECAT clock (fECAT).\n\n
1801:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a ECATSEL bit of \a ECATCLKCR register.
1802:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1803:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetECATClockSource() \n\n\n
1804:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1805:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE void XMC_SCU_CLOCK_SetECATClockSource(const XMC_SCU_CLOCK_ECATCLKSRC_t source)
1806:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1807:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ((uint32_t)~SCU_CLK_ECATCLKCR_ECATSEL_Msk)) |
1808:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****                       ((uint32_t)source);
1809:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1810:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1811:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1812:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return XMC_SCU_CLOCK_ECATCLKSRC_t   Source of ECAT clock.\n
1813:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: Use type @ref XMC_SCU_CLOCK_ECATCLKSRC_t to identify the clock source.\n
1814:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_USBPLL - USB PLL (fUSBPLL) as a source for ECAT c
1815:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                       XMC_SCU_CLOCK_ECATCLKSRC_SYSPLL - Main PLL output (fPLL) as a source for E
1816:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1817:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1818:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the source of ECAT clock (fECAT).
1819:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a ECATSEL bit of \a ECATCLKCR register.
1820:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1821:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_HIB_SetRtcClockSource() \n\n\n
1822:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1823:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE XMC_SCU_CLOCK_ECATCLKSRC_t XMC_SCU_CLOCK_GetECATClockSource(void)
1824:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1825:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (XMC_SCU_CLOCK_ECATCLKSRC_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) >> SCU_C
1826:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1827:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
1828:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1829:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1830:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1831:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param divider   Ratio of fSYS clock source to the value of fSYS.
1832:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 1 to 256.
1833:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1834:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1835:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1836:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1837:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the ratio of system clock source to the value of system clock frequency.\n\n
1838:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured as \a SYSDIV bits of \a SYSCLKCR register. The divider value is 
1839:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * decremented by 1 before configuring.
1840:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1841:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1842:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1843:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider);
1844:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1845:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1846:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   Ratio of fSYS clock source to the value of fSYS.
1847:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 0 to 255.
1848:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1849:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1850:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the value of ratio between the source of system clock to the the value of system clock 
1851:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a SYSDIV bits of \a SYSCLKCR register.
1852:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1853:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockDivider(),  XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
1854:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1855:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockDivider(void)
1856:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1857:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) >> SCU_CLK_SYSCLKCR_SYSDIV_Po
1858:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1859:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1860:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1861:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1862:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio of fCCU clock source to the value of fCCU.
1863:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 1 or 2.\n
1864:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS \n
1865:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  2-> fCCU= fSYS/2.
1866:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1867:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1868:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1869:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1870:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the divider for CCU clock source. \n\n
1871:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Capture compare unit(CCU) can take either fSYS or fSYS/2 as the source of clock.
1872:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The configuration is set to \a CCUDIV bit of \a CCUCLKCR register. The CCUDIV bit is 1 bit wide.
1873:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1874:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1875:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCcuClockDivider() \n\n\n
1876:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1877:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t ratio);
1878:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1879:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1880:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of fCCU clock source to the value of fCCU.
1881:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *              \b Range: 0 or 1.\n
1882:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  0-> fCCU= fSYS \n
1883:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                  1-> fCCU= fSYS/2.
1884:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1885:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1886:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio of CCU clock(fCCU) to system clock(fSYS).\n\n
1887:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a CCUDIV bit of \a CCUCLKCR register.
1888:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1889:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1890:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCcuClockDivider() \n\n\n
1891:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1892:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCcuClockDivider(void)
1893:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1894:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >> SCU_CLK_CCUCLKCR_CCUDIV_Po
1895:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1896:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1897:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1898:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1899:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio between system clock(fSYS) and CPU clock(fCPU).
1900:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
1901:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            1-> fCPU= fSYS. \n
1902:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            2-> fCPU= fSYS/2.
1903:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1904:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1905:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1906:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1907:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the CPU clock by setting the divider value for the system clock. \n\n
1908:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is set to the \a CPUDIV bit of \a CPUCLKCR register.
1909:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1910:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetCpuClockDivider() \n\n\n
1911:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1912:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t ratio);
1913:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1914:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1915:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   Ratio between system clock(fSYS) and CPU clock(fCPU).
1916:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
1917:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            0-> fCPU= fSYS. \n
1918:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            1-> fCPU= fSYS/2.
1919:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1920:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1921:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between system clock(fSYS) and CPU clock(fCPU). \n\n
1922:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a CPUDIV bit of \a CPUCLKCR register.
1923:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1924:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetCpuClockDivider() \n\n\n
1925:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1926:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockDivider(void)
1927:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1928:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_CPUDIV_Po
1929:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1930:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1931:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1932:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1933:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio of peripheral clock source to the value of peripheral clock.\n
1934:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 or 2.\n
1935:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU.\n
1936:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                2-> fPERIPH= fCPU/2.
1937:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1938:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1939:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1940:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1941:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the peripheral clock by setting the divider for CPU clock(fCPU).\n\n
1942:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The peripheral clock can be equal to either fCPU or fCPU/2. The value is configured to \a PBDIV 
1943:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1944:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1945:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockDivider() \n\n\n
1946:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1947:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t ratio);
1948:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1949:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1950:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of peripheral clock source to the value of peripheral clock.\n
1951:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 or 1.\n
1952:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                0-> fPERIPH= fCPU.\n
1953:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                1-> fPERIPH= fCPU/2.
1954:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1955:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1956:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio of CPU clock(fCPU) to peripheral clock(fPERIPH).\n\n
1957:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a PBDIV bit of \a PBCLKCR register.
1958:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1959:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetPeripheralClockDivider() \n\n\n
1960:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1961:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetPeripheralClockDivider(void)
1962:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1963:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos);
1964:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1965:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1966:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1967:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1968:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio   Ratio of PLL output clock(fPLL) to USB clock(fUSB).
1969:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 8.
1970:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1971:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
1972:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1973:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1974:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the USB clock(fUSB) by setting the USB clock divider. \n\n
1975:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is decremented by 1 before setting it to \a USBDIV bits of \a USBCLKCR register.
1976:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1977:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1978:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbClockDivider(), XMC_SCU_CLOCK_SetUsbClockSource() \n\n\n
1979:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1980:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t ratio);
1981:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1982:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
1983:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1984:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL output clock(fPLL) to USB clock(fUSB).
1985:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 7.
1986:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
1987:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
1988:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between PLL output frequency(fPLL) and USB clock(fUSB).\n\n
1989:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a USBDIV bit of \a USBCLKCR register.
1990:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
1991:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetUsbClockDivider(), XMC_SCU_CLOCK_GetUsbClockSource() \n\n\n
1992:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
1993:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetUsbClockDivider(void)
1994:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
1995:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >> SCU_CLK_USBCLKCR_USBDIV_Po
1996:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
1997:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1998:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
1999:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2000:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(EBU)
2001:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2002:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2003:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2004:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 64.
2005:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2006:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2007:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2008:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2009:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the EBU clock(fEBU) by setting the divider value.\n\n
2010:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The clock divider is configured to the \a EBUDIV bits of \a EBUCLKCR register.
2011:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2012:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetEbuClockDivider() \n\n\n
2013:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2014:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t ratio);
2015:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2016:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2017:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2018:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio of PLL clock(fPLL) to EBU clock(fEBU).\n
2019:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 63.
2020:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2021:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2022:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between PLL clock(fPLL) and EBU clock(fEBU).\n\n
2023:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a EBUDIV bits of \a EBUCLKCR register.
2024:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2025:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetEbuClockDivider() \n\n\n
2026:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2027:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetEbuClockDivider(void)
2028:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2029:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >> SCU_CLK_EBUCLKCR_EBUDIV_Po
2030:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2031:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
2032:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2033:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2034:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2035:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio  Ratio between the source of WDT clock and the WDT clock.\n
2036:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 256.
2037:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2038:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2039:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2040:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2041:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the WDT clock by setting the clock divider for the WDT clock source.\n\n
2042:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a WDTDIV bits of \a WDTCLKCR register. The value of divider
2043:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * is decremented by 1 before configuring. Check the selected clock source for the WDT clock
2044:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * before configuring the divider using the API XMC_SCU_CLOCK_SetWdtClockSource().
2045:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2046:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_GetWdtClockDivider() \n\n\n
2047:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2048:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t ratio);
2049:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2050:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2051:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2052:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of WDT clock and the WDT clock.\n
2053:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 255.
2054:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2055:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2056:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between the WDT parent clock and the WDT clock. \n\n
2057:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a WDTDIV bits of \a WDTCLKCR register.
2058:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Ensure that the WDT parent clock is considered before using the value of
2059:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * the divider value.
2060:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2061:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetWdtClockSource(), XMC_SCU_CLOCK_SetWdtClockDivider() \n\n\n
2062:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2063:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetWdtClockDivider(void)
2064:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2065:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >> SCU_CLK_WDTCLKCR_WDTDIV_Po
2066:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2067:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2068:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2069:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2070:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio   Ratio between the external output parent clock selected and the output clock.\n
2071:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 512.
2072:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2073:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2074:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2075:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2076:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the external output clock by setting the divider value for the parent clock. \n\n
2077:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value will be configured to \a ECKDIV bits of \a EXTCLKCR register.
2078:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The divider value is decremented by 1 before storing it to the bit fields.
2079:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Ensure that the source of external output clock is configured appropriately using the API
2080:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource().
2081:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2082:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetExternalOutputClockSource(), XMC_SCU_CLOCK_GetExternalOutputClockDivider() \n\n
2083:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2084:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t ratio);
2085:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2086:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2087:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2088:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the external output parent clock selected and the output clock.\
2089:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 511.
2090:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2091:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2092:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the divider value applied on parent clock before the generation of external output cloc
2093:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a EXTDIV bit of \a EXTCLKCR register.
2094:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2095:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetExternalOutputClockSource(), XMC_SCU_CLOCK_SetExternalOutputClockDivider() \n\n
2096:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2097:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetExternalOutputClockDivider(void)
2098:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2099:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->EXTCLKCR & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >> SCU_CLK_EXTCLKCR_ECKDIV_Po
2100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #if defined(ECAT0)
2103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @param ratio   Ratio between the source of ECAT clock and the ECAT clock.\n
2106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 1 to 4.
2107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Configures the ECAT clock by setting the clock divider for the ECAT clock source.\n\n
2112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is configured to \a ECADIV bits of \a ECATCLKCR register. The value of divider
2113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * is decremented by 1 before configuring.
2114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_GetECATClockDivider() \n\n\n
2116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider);
2118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Ratio between the source of ECAT clock and the ECAT clock.\n
2122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: 0 to 3.
2123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the ratio between the ECAT parent clock and the ECAT clock. \n\n
2126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value is obtained by reading \a ECADIV bits of \a ECATCLKCR register.
2127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetECATClockSource(), XMC_SCU_CLOCK_SetECATClockDivider() \n\n\n
2129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetECATClockDivider(void)
2131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
2132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return (uint32_t)((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECADIV_Msk) >> SCU_CLK_ECATCLKCR_ECADIV
2133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
2134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** #endif
2135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables the high precision oscillator by configuring external crystal mode.\n\n
2142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 0, there by configuring the 
2143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * external clock input. 
2144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableHighPerformanceOscillator() \n\n\n
2146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void);
2148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables the high precision oscillator by disabling the external oscillator.\n\n
2154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API configures \a MODE bits of \a OSCHPCTRL register to 1, there by disabling the 
2155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * external oscillator. 
2156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableHighPerformanceOscillator() \n\n\n
2158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void);
2160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Enables ultra low power oscillator(ULP). \n\n
2167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It enables the hibernate domain, configures the ultra low power oscillator
2168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * uisng the \a MODE bits of the \a OSCULCTRL register. The \a Mode bits will be
2169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * reset to 0 to enable the low power oscillator. Mirror register update delays 
2170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * are handled internally.
2171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_DisableLowPowerOscillator() \n\n\n
2173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void);
2175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return None
2179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Disables ultra low power oscillator.\n\n
2182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It is disabled by setting the \a MODE bits of \a OSCULCTRL register to value 2.
2183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * By default on power up, the ultra low power osciallator is disabled.
2184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_EnableLowPowerOscillator() \n\n\n
2186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void);
2188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   System frequency in Hertz.\n
2192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            \b Range: clock frequency in Hertz. Range of the value depends on the source clock fr
2193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *            and the configured values of dividers.
2194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the value of system PLL output clock frequency(fPLL).\n\n
2197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API uses \a N-DIV,  \a P-DIV,  \a K1-DIV,  \a K2-DIV bits information from \a PLLCON1 regist
2198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * VCOBYP bit information from \a PLLCON0 register. It calculates frequency of system pll clock usi
2199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If normal Mode : fPLL = (fOSC * N)/(P * K2).
2200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If prescaler mode: fPLL = fOSC/ K1.
2201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_SetSystemClockSource() \n\n\n
2203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void);
2205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t  Source clock used for deriving system clock.\n
2209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *          \b Range: fOHP frequency if external high precision frequency is used. \n
2210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *                    fOFI fast internal clock frequency.
2211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the value of the input clock frequency for deriving the system clock.
2214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The API retrieves frequency of system PLL input clock (fPLLin).
2215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Based on \a PINSEL bits information from \a PLLCON2 register, the parent clock source is obtaine
2216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * This bit field specifies if fOHP or fOFI is used for deriving system clock.
2217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * System clock frequency is obtained by dividing the source clock frequency with different divider
2218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockFrequency() \n\n\n
2220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void);
2222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   USB PLL output clock frequency.
2226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the frequency of USB PLL output clock (fUSBPLL).\n\n
2229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * It obtains the \a VCOBYP bits information from \a USBPLLCON register and decides if USB PLL mode
2230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If USB PLL mode is used, the USB clock frequency is obtained by dividing the source clock by USB
2231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The frequency is obtained using following formula:\n
2232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If Normal Mode : fUSBPLL = (fOSC * N)/(P * 2).\n
2233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * If Prescaler mode: fPLL = fOSC.
2234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency() \n\n\n
2236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void);
2238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** 
2239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** /**
2240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * @return uint32_t   System clock frequency in Hertz.
2242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  *
2243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Description</b><br>
2244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Provides the frequency of system clock (fSYS).\n\n
2245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * The value obtained by dividing \a CPUDIV bits information of \a CPUCLKCR register with SystemCor
2246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * Based on these values, fSYS clock frequency is derived using the following formula:\n
2247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * fSYS = fCPU << CPUDIV.
2248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * \par<b>Related APIs:</b><BR>
2249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  * XMC_SCU_CLOCK_GetUsbPllClockFrequency() \n\n\n
2250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****  */
2251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetSystemClockFrequency(void)
2252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** {
 152              	 .loc 1 2252 0
 153              	 .cfi_startproc
 154              	 
 155              	 
 156              	 
 157 0000 80B4     	 push {r7}
 158              	.LCFI12:
 159              	 .cfi_def_cfa_offset 4
 160              	 .cfi_offset 7,-4
 161 0002 00AF     	 add r7,sp,#0
 162              	.LCFI13:
 163              	 .cfi_def_cfa_register 7
2253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h ****   return SystemCoreClock << ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) >> SCU_CLK_CPUCLKCR_
 164              	 .loc 1 2253 0
 165 0004 064B     	 ldr r3,.L15
 166 0006 1A68     	 ldr r2,[r3]
 167 0008 064B     	 ldr r3,.L15+4
 168 000a 1B69     	 ldr r3,[r3,#16]
 169 000c 03F00103 	 and r3,r3,#1
 170 0010 02FA03F3 	 lsl r3,r2,r3
2254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc4_scu.h **** }
 171              	 .loc 1 2254 0
 172 0014 1846     	 mov r0,r3
 173 0016 BD46     	 mov sp,r7
 174              	.LCFI14:
 175              	 .cfi_def_cfa_register 13
 176              	 
 177 0018 5DF8047B 	 ldr r7,[sp],#4
 178              	.LCFI15:
 179              	 .cfi_restore 7
 180              	 .cfi_def_cfa_offset 0
 181 001c 7047     	 bx lr
 182              	.L16:
 183 001e 00BF     	 .align 2
 184              	.L15:
 185 0020 00000000 	 .word SystemCoreClock
 186 0024 00460050 	 .word 1342195200
 187              	 .cfi_endproc
 188              	.LFE143:
 190              	 .section .text.XMC_SCU_CLOCK_GetCpuClockFrequency,"ax",%progbits
 191              	 .align 2
 192              	 .thumb
 193              	 .thumb_func
 195              	XMC_SCU_CLOCK_GetCpuClockFrequency:
 196              	.LFB156:
 197              	 .file 2 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg\\Libraries\\XMCLib\\inc/xmc_scu.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
   2:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @file xmc_scu.h
   3:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @date 2016-03-09
   4:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
   5:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @cond
   6:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
   7:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
   9:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * All rights reserved.                        
  11:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                                             
  12:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * following conditions are met:   
  14:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                                                                              
  15:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * disclaimer.                        
  17:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * 
  18:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * 
  21:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * products derived from this software without specific prior written permission.                  
  23:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                                                                              
  24:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                                                                              
  32:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
  35:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  36:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Change History
  37:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * --------------
  38:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  39:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-02-20:
  40:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Initial <br>
  41:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  42:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-05-20:
  43:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Documentation improved <br>
  44:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *     - XMC_ASSERT() hanging issues have fixed for XMC4 devices. <br>
  45:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  46:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-06-20:
  47:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  48:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Removed STATIC_INLINE property for the below APIs and declared as void
  49:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_EnableEvent, XMC_SCU_INTERRUPT_DisableEvent,
  50:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *       XMC_SCU_INTERRUPT_TriggerEvent, XMC_SCU_INTERUPT_GetEventStatus,
  51:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *       XMC_SCU_INTERUPT_ClearEventStatus
  52:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  53:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * 2015-11-30:
  54:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Documentation improved <br>
  55:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *      
  56:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * 2016-03-09:
  57:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *     - Optimization of write only registers
  58:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *      
  59:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @endcond 
  60:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  61:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
  62:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #ifndef XMC_SCU_H
  63:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #define XMC_SCU_H
  64:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  
  65:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
  66:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * HEADER FILES
  67:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
  68:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #include <xmc_common.h>
  69:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
  70:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
  71:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @addtogroup XMClib XMC Peripheral Library
  72:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @{
  73:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
  74:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  
  75:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
  76:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @addtogroup SCU
  77:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @brief System Control Unit(SCU) driver for XMC microcontroller family.
  78:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  79:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * System control unit is the SoC power, reset and a clock manager with additional responsibility o
  80:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * providing system stability protection and other auxiliary functions.<br>
  81:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * SCU provides the following features,
  82:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Power control
  83:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4 
  84:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Hibernate control 
  85:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
  86:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Reset control
  87:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Clock control
  88:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Miscellaneous control(boot mode, system interrupts etc.)<br><br>
  89:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  90:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The SCU driver is divided in to clock control logic, reset control logic, system interrupt contr
  91:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
  92:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * , hibernate control logic, trap control logic, parity control logic 
  93:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
  94:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * and miscellaneous control logic.<br>
  95:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
  96:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Clock driver features:
  97:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows clock configuration using the structure XMC_SCU_CLOCK_CONFIG_t and API XMC_SCU_CLOCK_I
  98:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
  99:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides structure XMC_SCU_CLOCK_SYSPLL_CONFIG_t for configuring the system PLL
 100:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of clock source for system PLL, XMC_SCU_CLOCK_GetSystemPllClockSource()
 101:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for configuring different module clock frequencies XMC_SCU_CLOCK_SetWdtClockDiv
 102:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of clock source for external output, XMC_SCU_CLOCK_SetExternalOutputClockSou
 103:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for enabling external high power oscillator and ultra low power oscillator, XMC
 104:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for getting various clock frequencies XMC_SCU_CLOCK_GetPeripheralClockFrequency
 105:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  XMC_SCU_CLOCK_GetCpuClockFrequency(), XMC_SCU_CLOCK_GetSystemClockFrequency()<br>
 106:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 107:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC1
 108:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of peripheral clock frequency, XMC_SCU_CLOCK_SetFastPeripheralClockSource()
 109:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides API to get the peripheral clock frequency, XMC_SCU_CLOCK_GetFastPeripheralClockFrequ
 110:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 111:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 112:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Reset driver features:
 113:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
 114:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to handle peripheral reset XMC_SCU_RESET_AssertPeripheralReset(), XMC_SCU_RESET_Deasse
 115:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuration of NMI generation for selected events, XMC_SCU_INTERRUPT_EnableNmiReques
 116:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 117:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC1
 118:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to trigger device reset XMC_SCU_RESET_AssertMasterReset()
 119:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to configure multiple sources for reset, XMC_SCU_RESET_EnableResetRequest()
 120:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif <br>
 121:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 122:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Interrupt driver features:
 123:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides APIs for enabling/ disabling interrupt event generation XMC_SCU_INTERRUPT_EnableEven
 124:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  XMC_SCU_INTERRUPT_DisableEvent()
 125:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides API for registering callback function for events XMC_SCU_INTERRUPT_SetEventHandler()
 126:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 127:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
 128:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Hibernate driver features:
 129:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuration of hibernate domain XMC_SCU_HIB_EnableHibernateDomain(), XMC_SCU_HIB_Dis
 130:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of standby clock source, XMC_SCU_HIB_SetStandbyClockSource()
 131:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows selection of RTC clock source, XMC_SCU_HIB_SetRtcClockSource()
 132:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Provides API for enabling slow internal clock used for backup clock, XMC_SCU_HIB_EnableIntern
 133:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 134:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Trap driver features:
 135:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows handling of trap XMC_SCU_TRAP_Enable(), XMC_SCU_TRAP_GetStatus(), XMC_SCU_TRAP_Trigger
 136:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 137:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Parity driver features:
 138:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Parity error generated by on-chip RAM can be monitored, XMC_SCU_PARITY_Enable(), XMC_SCU_PARI
 139:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuration of trap generation on detection of parity error, XMC_SCU_PARITY_EnableTr
 140:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 141:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Power driver features:
 142:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to power the USB module XMC_SCU_POWER_EnableUsb(), XMC_SCU_POWER_DisableUsb()
 143:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 144:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 145:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Miscellaneous features:
 146:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows to trigger multiple capture compare unit(CCU) channels to be started together XMC_SCU_
 147:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC4
 148:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of out of range comparator (ORC) XMC_SCU_EnableOutOfRangeComparator()
 149:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_EnableTemperatureSensor(), XMC_SCU_Ca
 150:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of device boot mode XMC_SCU_SetBootMode()<br>
 151:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 152:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \if XMC1
 153:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Enables configuration of die temperature sensor XMC_SCU_StartTempMeasurement(), XMC_SCU_SetRa
 154:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows configuring supply monitor unit using the structure XMC_SCU_SUPPLYMONITOR_t and API XM
 155:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * -# Allows handling of protected bits XMC_SCU_LockProtectedBits(), XMC_SCU_UnlockProtectedBits()<
 156:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  \endif
 157:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @{
 158:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 159:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  
 160:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 161:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * MACROS
 162:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 163:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 164:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 165:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * ENUMS
 166:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 167:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 168:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *  Defines the status of SCU API execution, used to verify the SCU related API calls.
 169:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 170:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** typedef enum XMC_SCU_STATUS 
 171:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** {
 172:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   XMC_SCU_STATUS_OK   = 0UL, /**< SCU related operation successfully completed.*/
 173:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   XMC_SCU_STATUS_ERROR,      /**< SCU related operation failed. When API cannot fulfill request, th
 174:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   XMC_SCU_STATUS_BUSY,       /**< Cannot execute the SCU related operation request because
 175:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****                                   another operation is in progress. \a XMC_SCU_STATUS_BUSY is retur
 176:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****                                   processing another request. */
 177:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** } XMC_SCU_STATUS_t;
 178:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 179:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 180:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 181:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * DATA TYPES
 182:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 183:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 184:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 185:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Function pointer type used for registering callback functions on SCU event occurrence.
 186:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 187:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** typedef void (*XMC_SCU_INTERRUPT_EVENT_HANDLER_t)(void);
 188:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 189:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 190:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * DEVICE EXTENSIONS
 191:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 192:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 193:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #if (UC_FAMILY == XMC1)
 194:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #include <xmc1_scu.h>
 195:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #elif (UC_FAMILY == XMC4)
 196:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #include <xmc4_scu.h>
 197:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #else
 198:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #error "Unspecified chipset"
 199:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #endif
 200:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 201:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**************************************************************************************************
 202:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * API Prototypes
 203:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  **************************************************************************************************
 204:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 205:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #ifdef __cplusplus
 206:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** extern "C" {
 207:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** #endif
 208:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 209:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 210:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 211:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 212:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @param trigger    CCU slices to be triggered synchronously via software. The value is a bitmask 
 213:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 214:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 215:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                    combined using \a OR operation.
 216:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 217:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 218:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 219:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 220:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Generates active edge(low to high) trigger for multiple CCU units at the same time.\n\n
 221:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 222:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The edge of the start signal should be selected as active edge.
 223:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 224:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 225:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 226:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * the timer using this API.<BR>
 227:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 228:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerLow()\n\n\n
 229:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 230:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerHigh(const uint32_t trigger)
 231:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** {
 232:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   SCU_GENERAL->CCUCON |= (uint32_t)trigger;
 233:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** }
 234:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 235:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 236:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 237:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @param trigger  CCU slices to be triggered synchronously via software. The value is a bitmask of
 238:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                    in the register CCUCON. <br>
 239:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                    \b Range: Use type @ref XMC_SCU_CCU_TRIGGER_t for bitmask of individual CCU s
 240:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                    combined using \a OR operation.
 241:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 242:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 243:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 244:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 245:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Generates passive edge(high to low) trigger for multiple CCU units at the same time.\n\n
 246:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Before executing this API, all the required CCU timers should configure external start.
 247:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The edge of the start signal should be selected as passive edge.
 248:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The input signal for the CCU slice should be selected as SCU input.
 249:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The above mentioned configurations can be made using the CCU LLD API XMC_CCU4_SLICE_StartConfig(
 250:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * CCU timer slice should be started using XMC_CCU4_SLICE_StartTimer() before triggering 
 251:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * the timer using this API.<BR>
 252:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 253:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_CCU4_SLICE_StartConfig(), XMC_CCU4_SLICE_SetInput(), XMC_SCU_SetCcuTriggerHigh()\n\n\n
 254:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 255:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_SetCcuTriggerLow(const uint32_t trigger)
 256:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** {
 257:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   SCU_GENERAL->CCUCON &= (uint32_t)~trigger;
 258:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** }
 259:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 260:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 261:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 262:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @param config Pointer to structure holding the clock prescaler values and divider values for 
 263:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                configuring clock generators and clock tree.\n
 264:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                \b Range: Configure the members of structure @ref XMC_SCU_CLOCK_CONFIG_t for vari
 265:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                parameters of clock setup.
 266:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 267:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 268:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 269:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 270:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Initializes clock generators and clock tree.\n\n
 271:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC1
 272:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Peripheral clock and system clock are configured based on the input configuration \a config.
 273:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The system clock frequency is tuned by configuring the FDIV and IDIV values of CLKCR register.
 274:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The values of FDIV and IDIV can be provided as part of input configuration.
 275:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The PCLK divider determines the ratio of peripheral clock to the system clock. 
 276:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The source of RTC clock is set based on the input configuration. 
 277:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \a SystemCoreClock variable will be updated with the value of
 278:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * system clock frequency. Access to protected bit fields are handled internally.
 279:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 280:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \if XMC4
 281:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Enables the high precision oscillator(fOHP) input and configures the system and peripheral clock
 282:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Based on the system clock source selected in \a config, either fPLL or fOFI will be chosen as sy
 283:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Based on PLL mode(normal or prescaler mode) used, PLL ramps up in steps to achieve target freque
 284:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The clock dividers for CPU, CCU and peripheral clocks will be set based on the input configurati
 285:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The \a SystemCoreClock variable is set with the value of system clock frequency.
 286:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \endif
 287:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 288:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GetCpuClockFrequency() \n\n\n
 289:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 290:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config);
 291:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 292:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 293:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 294:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event  Bit mask of the event to enable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 295:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 296:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 297:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 298:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 299:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 300:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Enables the generation of interrupt for the input events.\n\n
 301:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The events are enabled by setting the respective bit fields in the SRMSK register. \n
 302:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Note: User should separately enable the NVIC node responsible for handling the SCU interrupt.
 303:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The interrupt will be generated when the respective event occurs.
 304:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 305:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERRUPT_DisableEvent()\n\n\n
 306:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 307:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 308:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 309:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 310:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 311:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 312:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event  Bit mask of the event to disable. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_
 313:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 314:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 315:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 316:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 317:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 318:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Disables generation of interrupt on occurrence of the input event.\n\n
 319:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The events are disabled by resetting the respective bit fields in the SRMSK register. \n
 320:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 321:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * NVIC_DisableIRQ(), XMC_SCU_INTERRUPT_EnableEvent()\n\n\n
 322:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 323:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event);
 324:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 325:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 326:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 327:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event Bit mask of the event to be triggered. \b Range: Use type @ref XMC_SCU_INTERRUPT_EV
 328:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 329:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 330:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 331:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 332:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 333:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Triggers the event as if the hardware raised it.\n\n
 334:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Event will be triggered by setting the respective bitfield in the SRSET register.\n
 335:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Note: User should enable the NVIC node that handles the respective event for interrupt generatio
 336:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 337:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * NVIC_EnableIRQ(), XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_ClearEventStatus() \n\n\n
 338:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 339:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t  event);
 340:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 341:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 342:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return uint32_t  Status of the SCU events.
 343:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 344:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 345:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the status of all SCU events.\n\n
 346:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The status is read from the SRRAW register. To check the status of a particular 
 347:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * event, the returned value should be masked with the bit mask of the event. The bitmask
 348:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * of events can be obtained using the type @ref XMC_SCU_INTERRUPT_EVENT_t. Multiple events'
 349:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * status can be checked by combining the bit masks using \a OR operation. 
 350:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * After detecting the event, the event status should be cleared using software to detect the event
 351:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 352:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_INTERRUPT_ClearEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent(), XMC_SCU_INTERRUPT_SetEve
 353:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 354:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void);
 355:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 356:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 357:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 358:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @param event  Bit mask of the events to clear. \b Range: Use type @ref XMC_SCU_INTERRUPT_EVENT_t
 359:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *                for providing the input value. Multiple events can be combined using the \a OR op
 360:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 361:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None
 362:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 363:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 364:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Clears the event status bit in SRRAW register.\n\n
 365:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The events are cleared by writing value 1 to their bit positions in the SRCLR register.
 366:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The API can be used when polling method is used. After detecting the event, the event status
 367:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * should be cleared using software to detect the event again.
 368:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 369:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 370:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_INTERUPT_GetEventStatus(), XMC_SCU_INTERRUPT_TriggerEvent() \n\n\n
 371:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 372:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event);
 373:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** 
 374:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 375:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 376:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return uint32_t  Status representing the reason for device reset.
 377:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 378:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 379:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the value representing the reason for device reset.\n\n
 380:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The return value is an encoded word, which can indicate multiple reasons for the last reset. Eac
 381:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * returned word is representative of a last reset cause. The returned value should be appropriatel
 382:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * the cause of reset. 
 383:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The cause of the last reset gets automatically stored in 
 384:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * the \a SCU_RSTSTAT register. The reset status shall be reset after each
 385:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * startup in order to ensure consistent source indication after the next reset.
 386:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \b Range: The type @ref XMC_SCU_RESET_REASON_t can be used to get the bit masks of the reset cau
 387:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 388:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 389:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_RESET_ClearDeviceResetReason() \n\n\n
 390:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 391:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_RESET_GetDeviceResetReason(void)
 392:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** {
 393:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   return ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_RSTSTAT_Msk);
 394:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** }
 395:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 396:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return None 
 397:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 398:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 399:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Clears the reset reason bits in the reset status register. \n\n
 400:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Clearing of the reset status information in the \a SCU_RSTSTAT register via register bit \a RSTC
 401:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * recommended to ensure a clear indication of the cause of next reset.
 402:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 403:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 404:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_RESET_GetDeviceResetReason() \n\n\n
 405:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 406:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE void XMC_SCU_RESET_ClearDeviceResetReason(void)
 407:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** {
 408:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   /* Clear RSTSTAT.RSTSTAT bitfield */
 409:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_RSCLR_Msk;
 410:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** }
 411:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  
 412:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** /**
 413:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * @return uint32_t  Value of CPU clock frequency.
 414:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 415:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Description</b><br>
 416:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * Provides the vlaue of CPU clock frequency.\n\n
 417:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The value is stored in a global variable \a \b SystemCoreClock.
 418:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * It is updated when the clock configuration is done using the SCU LLD APIs.
 419:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * The value represents the frequency of clock used for CPU operation.
 420:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \b Range: Value is of type uint32_t, and gives the value of frequency in Hertz.
 421:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  *
 422:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * \par<b>Related APIs:</b><BR>
 423:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 424:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****  */
 425:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** __STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
 426:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** {
 198              	 .loc 2 426 0
 199              	 .cfi_startproc
 200              	 
 201              	 
 202              	 
 203 0000 80B4     	 push {r7}
 204              	.LCFI16:
 205              	 .cfi_def_cfa_offset 4
 206              	 .cfi_offset 7,-4
 207 0002 00AF     	 add r7,sp,#0
 208              	.LCFI17:
 209              	 .cfi_def_cfa_register 7
 427:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h ****   return SystemCoreClock;
 210              	 .loc 2 427 0
 211 0004 034B     	 ldr r3,.L19
 212 0006 1B68     	 ldr r3,[r3]
 428:D:\Bachelorarbeit\Dave\Basisstation\hghg\Libraries\XMCLib\inc\xmc_scu.h **** }
 213              	 .loc 2 428 0
 214 0008 1846     	 mov r0,r3
 215 000a BD46     	 mov sp,r7
 216              	.LCFI18:
 217              	 .cfi_def_cfa_register 13
 218              	 
 219 000c 5DF8047B 	 ldr r7,[sp],#4
 220              	.LCFI19:
 221              	 .cfi_restore 7
 222              	 .cfi_def_cfa_offset 0
 223 0010 7047     	 bx lr
 224              	.L20:
 225 0012 00BF     	 .align 2
 226              	.L19:
 227 0014 00000000 	 .word SystemCoreClock
 228              	 .cfi_endproc
 229              	.LFE156:
 231              	 .comm event_handler_list,128,4
 232              	 .section .text.XMC_SCU_lDelay,"ax",%progbits
 233              	 .align 2
 234              	 .thumb
 235              	 .thumb_func
 237              	XMC_SCU_lDelay:
 238              	.LFB158:
 239              	 .file 3 "../Libraries/XMCLib/src/xmc4_scu.c"
   1:../Libraries/XMCLib/src/xmc4_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc4_scu.c ****  * @file xmc4_scu.c
   3:../Libraries/XMCLib/src/xmc4_scu.c ****  * @date 2016-04-06
   4:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc4_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc4_scu.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc4_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc4_scu.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc4_scu.c ****  * All rights reserved.                        
  11:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                             
  12:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc4_scu.c ****  * following conditions are met:   
  14:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  15:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer.                        
  17:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  18:../Libraries/XMCLib/src/xmc4_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc4_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Libraries/XMCLib/src/xmc4_scu.c ****  * 
  21:../Libraries/XMCLib/src/xmc4_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc4_scu.c ****  * products derived from this software without specific prior written permission.                  
  23:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  24:../Libraries/XMCLib/src/xmc4_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc4_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc4_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc4_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc4_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc4_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc4_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Libraries/XMCLib/src/xmc4_scu.c ****  *                                                                              
  32:../Libraries/XMCLib/src/xmc4_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc4_scu.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc4_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc4_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc4_scu.c ****  *      
  42:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_ASSERT() hanging issues have fixed.  <br>
  44:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Line indentation aligned with 120 characters. <br>
  45:../Libraries/XMCLib/src/xmc4_scu.c ****  *     
  46:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus are added
  50:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added Weak implementation for OSCHP_GetFrequency()
  51:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  52:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-11-30:
  53:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Documentation improved <br>
  54:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Following API functionalities are improved
  55:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_CLOCK_GatePeripheralClock, XMC_SCU_CLOCK_UngatePeripheralClock, XMC_SCU_CLOCK_IsPe
  56:../Libraries/XMCLib/src/xmc4_scu.c ****  *       XMC_SCU_RESET_AssertPeripheralReset, XMC_SCU_RESET_DeassertPeripheralReset, XMC_SCU_RESET_
  57:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  58:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2015-12-08:
  59:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - XMC_SCU_GetTemperature renamed to XMC_SCU_GetTemperatureMeasurement
  60:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-03-09:
  62:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Optimize write only registers
  63:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetPinMode
  64:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_GetHibernateControlStatus,
  65:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_GetEventStatus, XMC_SCU_HIB_ClearEventStatus, XMC_SCU_HIB_TriggerEvent, 
  66:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_EnableEvent, XMC_SCU_HIB_DisableEvent
  67:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Added XMC_SCU_HIB_SetWakeupTriggerInput, XMC_SCU_HIB_SetPinMode, XMC_SCU_HIB_SetOutputPinL
  68:../Libraries/XMCLib/src/xmc4_scu.c ****  *             XMC_SCU_HIB_SetInput0, XMC_SCU_HIB_EnterHibernateState
  69:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  70:../Libraries/XMCLib/src/xmc4_scu.c ****  * 2016-04-06:
  71:../Libraries/XMCLib/src/xmc4_scu.c ****  *     - Fixed XMC_SCU_ReadFromRetentionMemory functionality
  72:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  73:../Libraries/XMCLib/src/xmc4_scu.c ****  * @endcond 
  74:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  75:../Libraries/XMCLib/src/xmc4_scu.c ****  */
  76:../Libraries/XMCLib/src/xmc4_scu.c **** 
  77:../Libraries/XMCLib/src/xmc4_scu.c **** /**
  78:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  79:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief SCU low level driver API prototype definition for XMC4 family of microcontrollers. 
  80:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  81:../Libraries/XMCLib/src/xmc4_scu.c ****  * <b>Detailed description of file:</b> <br>
  82:../Libraries/XMCLib/src/xmc4_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  83:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  84:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Temperature Monitoring, Bootmode selection, CCU Start, Comparator configuration etc  <br>
  85:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_) <br>
  86:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Clock sources init, Clock tree init, Clock gating, Sleep Management etc <br>
  87:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
  88:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Reset Init, Cause, Manual Reset Assert/Deassert <br>
  89:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_) <br>
  90:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Manual Assert/Deassert, Acknowledge etc <br>
  91:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- PARITY (APIs prefixed with XMC_SCU_PARITY_) <br>
  92:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Acknowledge etc <br>
  93:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- HIBERNATION (APIs prefixed with XMC_SCU_HIB_) <br>
  94:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Hibernation entry/exit config, entry/wakeup sequences, LPAC configuration etc <br>
  95:../Libraries/XMCLib/src/xmc4_scu.c ****  * -- TRAP (APIs prefixed with XMC_SCU_TRAP_) <br>
  96:../Libraries/XMCLib/src/xmc4_scu.c ****  * ------ Init, Enable/Disable, Acknowledge etc <br>
  97:../Libraries/XMCLib/src/xmc4_scu.c ****  *
  98:../Libraries/XMCLib/src/xmc4_scu.c ****  */
  99:../Libraries/XMCLib/src/xmc4_scu.c **** 
 100:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 101:../Libraries/XMCLib/src/xmc4_scu.c ****  * HEADER FILES
 102:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 103:../Libraries/XMCLib/src/xmc4_scu.c **** #include <xmc_scu.h>
 104:../Libraries/XMCLib/src/xmc4_scu.c **** 
 105:../Libraries/XMCLib/src/xmc4_scu.c **** #if UC_FAMILY == XMC4
 106:../Libraries/XMCLib/src/xmc4_scu.c **** 
 107:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 108:../Libraries/XMCLib/src/xmc4_scu.c ****  * MACROS
 109:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 110:../Libraries/XMCLib/src/xmc4_scu.c **** #define FOSCREF   (2500000UL)    /**< Oscillator reference frequency (fOSCREF) monitored by Oscilla
 111:../Libraries/XMCLib/src/xmc4_scu.c **** #define FREQ_1MHZ (1000000UL)    /**< Used during calculation. */
 112:../Libraries/XMCLib/src/xmc4_scu.c **** 
 113:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OFI_FREQUENCY
 114:../Libraries/XMCLib/src/xmc4_scu.c **** #define OFI_FREQUENCY (24000000UL)    /**< Fast internal backup clock source. */
 115:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 116:../Libraries/XMCLib/src/xmc4_scu.c **** 
 117:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSI_FREQUENCY
 118:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSI_FREQUENCY (32768UL)    /**< Internal slow clock source. */
 119:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 120:../Libraries/XMCLib/src/xmc4_scu.c **** 
 121:../Libraries/XMCLib/src/xmc4_scu.c **** #ifndef OSCHP_FREQUENCY
 122:../Libraries/XMCLib/src/xmc4_scu.c **** #define OSCHP_FREQUENCY (12000000U)    /**< External crystal High Precision Oscillator. */
 123:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 124:../Libraries/XMCLib/src/xmc4_scu.c **** 
 125:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_PLL_PLLSTAT_OSC_USABLE  (SCU_PLL_PLLSTAT_PLLHV_Msk | \
 126:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLLV_Msk | \
 127:../Libraries/XMCLib/src/xmc4_scu.c ****                                          SCU_PLL_PLLSTAT_PLLSP_Msk)  /**< Used to verify the OSC fr
 128:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                           usable or not.*/
 129:../Libraries/XMCLib/src/xmc4_scu.c **** 
 130:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_START_GROUP    (0UL)    /**< The ADC group whose channel input is compared 
 131:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 132:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 133:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 134:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_ADC_END_GROUP      (1UL)    /**< The ADC group whose channel input is compared 
 135:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 136:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC end 
 137:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this group number. */
 138:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_START_ADC_CHANNEL  (6UL)    /**< The ADC channel whose channel input is compare
 139:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 140:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC star
 141:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 142:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_ORC_END_ADC_CHANNEL    (7UL)    /**< The ADC channel whose channel input is compare
 143:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      Comparator (ORC) to serves the purpose of over
 144:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      for analog input pins of the chip and ORC ends
 145:../Libraries/XMCLib/src/xmc4_scu.c ****                                                      this channel number. */
 146:../Libraries/XMCLib/src/xmc4_scu.c **** 
 147:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_GRPNUM(GROUP_NUM)   (((GROUP_NUM) == XMC_SCU_ORC_ADC_START_GROUP) || \
 148:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((GROUP_NUM) == XMC_SCU_ORC_ADC_END_GROUP) ) /**< Used to v
 149:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 150:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 151:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end group num
 152:../Libraries/XMCLib/src/xmc4_scu.c ****                                         
 153:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_CHECK_CHNUM(CH_NUM)       (((CH_NUM) == XMC_SCU_ORC_START_ADC_CHANNEL) || \
 154:../Libraries/XMCLib/src/xmc4_scu.c ****                                         ((CH_NUM) == XMC_SCU_ORC_END_ADC_CHANNEL) )  /**< Used to v
 155:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       provided ADC 
 156:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       within specif
 157:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                       end channel n
 158:../Libraries/XMCLib/src/xmc4_scu.c **** 
 159:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX            (32U)      /**< Maximum supported SCU events. */
 160:../Libraries/XMCLib/src/xmc4_scu.c **** 
 161:../Libraries/XMCLib/src/xmc4_scu.c **** #define SCU_HIBERNATE_HDCR_HIBIOSEL_Size (4U)
 162:../Libraries/XMCLib/src/xmc4_scu.c **** 
 163:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB13V (0.0058F)
 164:../Libraries/XMCLib/src/xmc4_scu.c **** #define XMC_SCU_POWER_LSB33V (0.0225F)
 165:../Libraries/XMCLib/src/xmc4_scu.c **** 
 166:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 167:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL DATA
 168:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 169:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For registe
 170:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         functions o
 171:../Libraries/XMCLib/src/xmc4_scu.c ****                                                                                         occurrence.
 172:../Libraries/XMCLib/src/xmc4_scu.c **** 
 173:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 174:../Libraries/XMCLib/src/xmc4_scu.c ****  * LOCAL ROUTINES
 175:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 176:../Libraries/XMCLib/src/xmc4_scu.c ****  #if defined(UC_ID)
 177:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a non-weak function, which retrieves high precision external oscillator frequency. */
 178:../Libraries/XMCLib/src/xmc4_scu.c **** __WEAK uint32_t OSCHP_GetFrequency(void)
 179:../Libraries/XMCLib/src/xmc4_scu.c **** {
 180:../Libraries/XMCLib/src/xmc4_scu.c ****   return (OSCHP_FREQUENCY);
 181:../Libraries/XMCLib/src/xmc4_scu.c **** }
 182:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 183:../Libraries/XMCLib/src/xmc4_scu.c **** 
 184:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 185:../Libraries/XMCLib/src/xmc4_scu.c **** static void XMC_SCU_lDelay(uint32_t cycles);
 186:../Libraries/XMCLib/src/xmc4_scu.c **** 
 187:../Libraries/XMCLib/src/xmc4_scu.c **** /**************************************************************************************************
 188:../Libraries/XMCLib/src/xmc4_scu.c ****  * API IMPLEMENTATION
 189:../Libraries/XMCLib/src/xmc4_scu.c ****  **************************************************************************************************
 190:../Libraries/XMCLib/src/xmc4_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 191:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_lDelay(uint32_t delay)
 192:../Libraries/XMCLib/src/xmc4_scu.c **** {
 240              	 .loc 3 192 0
 241              	 .cfi_startproc
 242              	 
 243              	 
 244 0000 80B5     	 push {r7,lr}
 245              	.LCFI20:
 246              	 .cfi_def_cfa_offset 8
 247              	 .cfi_offset 7,-8
 248              	 .cfi_offset 14,-4
 249 0002 84B0     	 sub sp,sp,#16
 250              	.LCFI21:
 251              	 .cfi_def_cfa_offset 24
 252 0004 00AF     	 add r7,sp,#0
 253              	.LCFI22:
 254              	 .cfi_def_cfa_register 7
 255 0006 7860     	 str r0,[r7,#4]
 193:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t i;
 194:../Libraries/XMCLib/src/xmc4_scu.c **** 
 195:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
 256              	 .loc 3 195 0
 257 0008 FFF7FEFF 	 bl SystemCoreClockUpdate
 196:../Libraries/XMCLib/src/xmc4_scu.c ****   delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 258              	 .loc 3 196 0
 259 000c 0B4B     	 ldr r3,.L24
 260 000e 1B68     	 ldr r3,[r3]
 261 0010 0B4A     	 ldr r2,.L24+4
 262 0012 A2FB0323 	 umull r2,r3,r2,r3
 263 0016 9A0C     	 lsrs r2,r3,#18
 264 0018 7B68     	 ldr r3,[r7,#4]
 265 001a 02FB03F3 	 mul r3,r2,r3
 266 001e 7B60     	 str r3,[r7,#4]
 197:../Libraries/XMCLib/src/xmc4_scu.c **** 
 198:../Libraries/XMCLib/src/xmc4_scu.c ****   for (i = 0U; i < delay; ++i)
 267              	 .loc 3 198 0
 268 0020 0023     	 movs r3,#0
 269 0022 FB60     	 str r3,[r7,#12]
 270 0024 03E0     	 b .L22
 271              	.L23:
 272              	.LBB4:
 273              	.LBB5:
 274              	 .file 4 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Include/cmsis_gcc.h"
   1:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**************************************************************************//**
   2:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @version  V4.30
   5:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  * @date     20. October 2015
   6:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  ******************************************************************************/
   7:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
   9:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    All rights reserved.
  10:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****      specific prior written permission.
  20:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    *
  21:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  34:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  35:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  38:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ignore some GCC warnings */
  39:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic push
  41:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
  45:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  46:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  47:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
  51:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  52:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  53:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  54:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  58:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  60:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  62:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  63:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  64:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  65:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  69:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  71:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  73:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  74:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  75:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  76:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Control Register
  77:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Control Register value
  79:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  80:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  82:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
  83:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  84:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
  86:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  87:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  88:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  89:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
  90:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Control Register
  91:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
  94:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
  96:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
  98:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
  99:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 100:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 101:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get IPSR Register
 102:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               IPSR Register value
 104:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 105:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 107:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 108:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 109:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 111:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 112:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 113:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 114:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 115:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get APSR Register
 116:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               APSR Register value
 118:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 119:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 121:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 122:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 123:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 125:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 126:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 127:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 128:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 129:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get xPSR Register
 130:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 132:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****     \return               xPSR Register value
 133:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 134:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 136:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 137:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 138:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 140:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 141:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 142:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 143:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 144:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               PSP Register value
 147:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 148:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 150:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 151:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 152:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 154:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 155:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 156:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 157:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 158:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 162:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 164:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 166:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 167:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 168:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 169:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               MSP Register value
 172:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 173:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 175:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   register uint32_t result;
 176:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 177:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 179:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 180:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 181:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 182:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 183:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 186:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 188:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 190:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 192:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 193:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 194:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 195:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Priority Mask
 196:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Priority Mask value
 198:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 199:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 201:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 202:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 203:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 205:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 206:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 207:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 208:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 209:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Priority Mask
 210:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 213:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 215:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 217:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 218:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 219:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 221:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 222:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Enable FIQ
 223:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 226:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 228:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 230:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 231:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 232:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 233:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Disable FIQ
 234:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 237:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 239:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 241:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 242:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 243:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 244:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Base Priority
 245:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Base Priority register value
 247:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 248:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 250:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 251:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 252:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 254:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 255:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 256:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 257:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 258:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority
 259:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 262:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 264:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 266:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 267:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 268:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 269:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 274:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 276:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 278:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 279:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 280:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 281:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get Fault Mask
 282:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Fault Mask register value
 284:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 285:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 287:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 288:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 289:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 291:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 292:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 293:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 294:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 295:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set Fault Mask
 296:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 299:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 301:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 303:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 304:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 306:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 307:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 309:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 310:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Get FPSCR
 311:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 314:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 316:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   uint32_t result;
 318:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 319:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 321:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 323:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   return(result);
 324:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 325:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****    return(0);
 326:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 327:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 328:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 329:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 330:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 331:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   Set FPSCR
 332:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 335:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 337:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 340:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("");
 342:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 343:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** }
 344:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 345:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 347:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 348:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 349:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 351:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 352:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   Access to dedicated instructions
 355:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   @{
 356:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** */
 357:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 358:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #else
 365:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** #endif
 368:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** 
 369:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** /**
 370:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \brief   No Operation
 371:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****  */
 373:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h **** {
 375:D:\Bachelorarbeit\Dave\Basisstation\hghg/Libraries/CMSIS/Include\cmsis_gcc.h ****   __ASM volatile ("nop");
 275              	 .loc 4 375 0 discriminator 3
 276              	
 277 0026 00BF     	 nop
 278              	
 279              	 .thumb
 280              	.LBE5:
 281              	.LBE4:
 282              	 .loc 3 198 0 discriminator 3
 283 0028 FB68     	 ldr r3,[r7,#12]
 284 002a 0133     	 adds r3,r3,#1
 285 002c FB60     	 str r3,[r7,#12]
 286              	.L22:
 287              	 .loc 3 198 0 is_stmt 0 discriminator 1
 288 002e FA68     	 ldr r2,[r7,#12]
 289 0030 7B68     	 ldr r3,[r7,#4]
 290 0032 9A42     	 cmp r2,r3
 291 0034 F7D3     	 bcc .L23
 199:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 200:../Libraries/XMCLib/src/xmc4_scu.c ****     __NOP();
 201:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 202:../Libraries/XMCLib/src/xmc4_scu.c **** }
 292              	 .loc 3 202 0 is_stmt 1
 293 0036 1037     	 adds r7,r7,#16
 294              	.LCFI23:
 295              	 .cfi_def_cfa_offset 8
 296 0038 BD46     	 mov sp,r7
 297              	.LCFI24:
 298              	 .cfi_def_cfa_register 13
 299              	 
 300 003a 80BD     	 pop {r7,pc}
 301              	.L25:
 302              	 .align 2
 303              	.L24:
 304 003c 00000000 	 .word SystemCoreClock
 305 0040 83DE1B43 	 .word 1125899907
 306              	 .cfi_endproc
 307              	.LFE158:
 309              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
 310              	 .align 2
 311              	 .global XMC_SCU_INTERRUPT_EnableEvent
 312              	 .thumb
 313              	 .thumb_func
 315              	XMC_SCU_INTERRUPT_EnableEvent:
 316              	.LFB159:
 203:../Libraries/XMCLib/src/xmc4_scu.c **** 
 204:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable the SCU event */
 205:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 206:../Libraries/XMCLib/src/xmc4_scu.c **** {
 317              	 .loc 3 206 0
 318              	 .cfi_startproc
 319              	 
 320              	 
 321              	 
 322 0000 80B4     	 push {r7}
 323              	.LCFI25:
 324              	 .cfi_def_cfa_offset 4
 325              	 .cfi_offset 7,-4
 326 0002 83B0     	 sub sp,sp,#12
 327              	.LCFI26:
 328              	 .cfi_def_cfa_offset 16
 329 0004 00AF     	 add r7,sp,#0
 330              	.LCFI27:
 331              	 .cfi_def_cfa_register 7
 332 0006 7860     	 str r0,[r7,#4]
 207:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 333              	 .loc 3 207 0
 334 0008 0549     	 ldr r1,.L27
 335 000a 054B     	 ldr r3,.L27
 336 000c 9A68     	 ldr r2,[r3,#8]
 337 000e 7B68     	 ldr r3,[r7,#4]
 338 0010 1343     	 orrs r3,r3,r2
 339 0012 8B60     	 str r3,[r1,#8]
 208:../Libraries/XMCLib/src/xmc4_scu.c **** }
 340              	 .loc 3 208 0
 341 0014 0C37     	 adds r7,r7,#12
 342              	.LCFI28:
 343              	 .cfi_def_cfa_offset 4
 344 0016 BD46     	 mov sp,r7
 345              	.LCFI29:
 346              	 .cfi_def_cfa_register 13
 347              	 
 348 0018 5DF8047B 	 ldr r7,[sp],#4
 349              	.LCFI30:
 350              	 .cfi_restore 7
 351              	 .cfi_def_cfa_offset 0
 352 001c 7047     	 bx lr
 353              	.L28:
 354 001e 00BF     	 .align 2
 355              	.L27:
 356 0020 74400050 	 .word 1342193780
 357              	 .cfi_endproc
 358              	.LFE159:
 360              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 361              	 .align 2
 362              	 .global XMC_SCU_INTERRUPT_DisableEvent
 363              	 .thumb
 364              	 .thumb_func
 366              	XMC_SCU_INTERRUPT_DisableEvent:
 367              	.LFB160:
 209:../Libraries/XMCLib/src/xmc4_scu.c **** 
 210:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the SCU event */
 211:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 212:../Libraries/XMCLib/src/xmc4_scu.c **** {
 368              	 .loc 3 212 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	 
 373 0000 80B4     	 push {r7}
 374              	.LCFI31:
 375              	 .cfi_def_cfa_offset 4
 376              	 .cfi_offset 7,-4
 377 0002 83B0     	 sub sp,sp,#12
 378              	.LCFI32:
 379              	 .cfi_def_cfa_offset 16
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI33:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
 213:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRMSK &= (uint32_t)~event;
 384              	 .loc 3 213 0
 385 0008 0549     	 ldr r1,.L30
 386 000a 054B     	 ldr r3,.L30
 387 000c 9A68     	 ldr r2,[r3,#8]
 388 000e 7B68     	 ldr r3,[r7,#4]
 389 0010 DB43     	 mvns r3,r3
 390 0012 1340     	 ands r3,r3,r2
 391 0014 8B60     	 str r3,[r1,#8]
 214:../Libraries/XMCLib/src/xmc4_scu.c **** }
 392              	 .loc 3 214 0
 393 0016 0C37     	 adds r7,r7,#12
 394              	.LCFI34:
 395              	 .cfi_def_cfa_offset 4
 396 0018 BD46     	 mov sp,r7
 397              	.LCFI35:
 398              	 .cfi_def_cfa_register 13
 399              	 
 400 001a 5DF8047B 	 ldr r7,[sp],#4
 401              	.LCFI36:
 402              	 .cfi_restore 7
 403              	 .cfi_def_cfa_offset 0
 404 001e 7047     	 bx lr
 405              	.L31:
 406              	 .align 2
 407              	.L30:
 408 0020 74400050 	 .word 1342193780
 409              	 .cfi_endproc
 410              	.LFE160:
 412              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 413              	 .align 2
 414              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 415              	 .thumb
 416              	 .thumb_func
 418              	XMC_SCU_INTERRUPT_TriggerEvent:
 419              	.LFB161:
 215:../Libraries/XMCLib/src/xmc4_scu.c **** 
 216:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to trigger the SCU event */
 217:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 218:../Libraries/XMCLib/src/xmc4_scu.c **** {
 420              	 .loc 3 218 0
 421              	 .cfi_startproc
 422              	 
 423              	 
 424              	 
 425 0000 80B4     	 push {r7}
 426              	.LCFI37:
 427              	 .cfi_def_cfa_offset 4
 428              	 .cfi_offset 7,-4
 429 0002 83B0     	 sub sp,sp,#12
 430              	.LCFI38:
 431              	 .cfi_def_cfa_offset 16
 432 0004 00AF     	 add r7,sp,#0
 433              	.LCFI39:
 434              	 .cfi_def_cfa_register 7
 435 0006 7860     	 str r0,[r7,#4]
 219:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 436              	 .loc 3 219 0
 437 0008 0549     	 ldr r1,.L33
 438 000a 054B     	 ldr r3,.L33
 439 000c 1A69     	 ldr r2,[r3,#16]
 440 000e 7B68     	 ldr r3,[r7,#4]
 441 0010 1343     	 orrs r3,r3,r2
 442 0012 0B61     	 str r3,[r1,#16]
 220:../Libraries/XMCLib/src/xmc4_scu.c **** }
 443              	 .loc 3 220 0
 444 0014 0C37     	 adds r7,r7,#12
 445              	.LCFI40:
 446              	 .cfi_def_cfa_offset 4
 447 0016 BD46     	 mov sp,r7
 448              	.LCFI41:
 449              	 .cfi_def_cfa_register 13
 450              	 
 451 0018 5DF8047B 	 ldr r7,[sp],#4
 452              	.LCFI42:
 453              	 .cfi_restore 7
 454              	 .cfi_def_cfa_offset 0
 455 001c 7047     	 bx lr
 456              	.L34:
 457 001e 00BF     	 .align 2
 458              	.L33:
 459 0020 74400050 	 .word 1342193780
 460              	 .cfi_endproc
 461              	.LFE161:
 463              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 464              	 .align 2
 465              	 .global XMC_SCU_INTERUPT_GetEventStatus
 466              	 .thumb
 467              	 .thumb_func
 469              	XMC_SCU_INTERUPT_GetEventStatus:
 470              	.LFB162:
 221:../Libraries/XMCLib/src/xmc4_scu.c **** 
 222:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the SCU event status */
 223:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 224:../Libraries/XMCLib/src/xmc4_scu.c **** {
 471              	 .loc 3 224 0
 472              	 .cfi_startproc
 473              	 
 474              	 
 475              	 
 476 0000 80B4     	 push {r7}
 477              	.LCFI43:
 478              	 .cfi_def_cfa_offset 4
 479              	 .cfi_offset 7,-4
 480 0002 00AF     	 add r7,sp,#0
 481              	.LCFI44:
 482              	 .cfi_def_cfa_register 7
 225:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_INTERRUPT->SRRAW);
 483              	 .loc 3 225 0
 484 0004 034B     	 ldr r3,.L37
 485 0006 5B68     	 ldr r3,[r3,#4]
 226:../Libraries/XMCLib/src/xmc4_scu.c **** }
 486              	 .loc 3 226 0
 487 0008 1846     	 mov r0,r3
 488 000a BD46     	 mov sp,r7
 489              	.LCFI45:
 490              	 .cfi_def_cfa_register 13
 491              	 
 492 000c 5DF8047B 	 ldr r7,[sp],#4
 493              	.LCFI46:
 494              	 .cfi_restore 7
 495              	 .cfi_def_cfa_offset 0
 496 0010 7047     	 bx lr
 497              	.L38:
 498 0012 00BF     	 .align 2
 499              	.L37:
 500 0014 74400050 	 .word 1342193780
 501              	 .cfi_endproc
 502              	.LFE162:
 504              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 505              	 .align 2
 506              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 507              	 .thumb
 508              	 .thumb_func
 510              	XMC_SCU_INTERRUPT_ClearEventStatus:
 511              	.LFB163:
 227:../Libraries/XMCLib/src/xmc4_scu.c **** 
 228:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear the SCU event status */
 229:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 230:../Libraries/XMCLib/src/xmc4_scu.c **** {
 512              	 .loc 3 230 0
 513              	 .cfi_startproc
 514              	 
 515              	 
 516              	 
 517 0000 80B4     	 push {r7}
 518              	.LCFI47:
 519              	 .cfi_def_cfa_offset 4
 520              	 .cfi_offset 7,-4
 521 0002 83B0     	 sub sp,sp,#12
 522              	.LCFI48:
 523              	 .cfi_def_cfa_offset 16
 524 0004 00AF     	 add r7,sp,#0
 525              	.LCFI49:
 526              	 .cfi_def_cfa_register 7
 527 0006 7860     	 str r0,[r7,#4]
 231:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->SRCLR = (uint32_t)event;
 528              	 .loc 3 231 0
 529 0008 034A     	 ldr r2,.L40
 530 000a 7B68     	 ldr r3,[r7,#4]
 531 000c D360     	 str r3,[r2,#12]
 232:../Libraries/XMCLib/src/xmc4_scu.c **** }
 532              	 .loc 3 232 0
 533 000e 0C37     	 adds r7,r7,#12
 534              	.LCFI50:
 535              	 .cfi_def_cfa_offset 4
 536 0010 BD46     	 mov sp,r7
 537              	.LCFI51:
 538              	 .cfi_def_cfa_register 13
 539              	 
 540 0012 5DF8047B 	 ldr r7,[sp],#4
 541              	.LCFI52:
 542              	 .cfi_restore 7
 543              	 .cfi_def_cfa_offset 0
 544 0016 7047     	 bx lr
 545              	.L41:
 546              	 .align 2
 547              	.L40:
 548 0018 74400050 	 .word 1342193780
 549              	 .cfi_endproc
 550              	.LFE163:
 552              	 .section .text.XMC_SCU_GetBootMode,"ax",%progbits
 553              	 .align 2
 554              	 .global XMC_SCU_GetBootMode
 555              	 .thumb
 556              	 .thumb_func
 558              	XMC_SCU_GetBootMode:
 559              	.LFB164:
 233:../Libraries/XMCLib/src/xmc4_scu.c **** 
 234:../Libraries/XMCLib/src/xmc4_scu.c **** 
 235:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the currently deployed device bootmode */
 236:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetBootMode(void)
 237:../Libraries/XMCLib/src/xmc4_scu.c **** {
 560              	 .loc 3 237 0
 561              	 .cfi_startproc
 562              	 
 563              	 
 564              	 
 565 0000 80B4     	 push {r7}
 566              	.LCFI53:
 567              	 .cfi_def_cfa_offset 4
 568              	 .cfi_offset 7,-4
 569 0002 00AF     	 add r7,sp,#0
 570              	.LCFI54:
 571              	 .cfi_def_cfa_register 7
 238:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(SCU_GENERAL->STCON & SCU_GENERAL_STCON_SWCON_Msk);
 572              	 .loc 3 238 0
 573 0004 044B     	 ldr r3,.L44
 574 0006 1B69     	 ldr r3,[r3,#16]
 575 0008 03F47063 	 and r3,r3,#3840
 239:../Libraries/XMCLib/src/xmc4_scu.c **** }
 576              	 .loc 3 239 0
 577 000c 1846     	 mov r0,r3
 578 000e BD46     	 mov sp,r7
 579              	.LCFI55:
 580              	 .cfi_def_cfa_register 13
 581              	 
 582 0010 5DF8047B 	 ldr r7,[sp],#4
 583              	.LCFI56:
 584              	 .cfi_restore 7
 585              	 .cfi_def_cfa_offset 0
 586 0014 7047     	 bx lr
 587              	.L45:
 588 0016 00BF     	 .align 2
 589              	.L44:
 590 0018 00400050 	 .word 1342193664
 591              	 .cfi_endproc
 592              	.LFE164:
 594              	 .section .text.XMC_SCU_SetBootMode,"ax",%progbits
 595              	 .align 2
 596              	 .global XMC_SCU_SetBootMode
 597              	 .thumb
 598              	 .thumb_func
 600              	XMC_SCU_SetBootMode:
 601              	.LFB165:
 240:../Libraries/XMCLib/src/xmc4_scu.c **** 
 241:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program a new device bootmode */
 242:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetBootMode(const XMC_SCU_BOOTMODE_t bootmode)
 243:../Libraries/XMCLib/src/xmc4_scu.c **** {
 602              	 .loc 3 243 0
 603              	 .cfi_startproc
 604              	 
 605              	 
 606              	 
 607 0000 80B4     	 push {r7}
 608              	.LCFI57:
 609              	 .cfi_def_cfa_offset 4
 610              	 .cfi_offset 7,-4
 611 0002 83B0     	 sub sp,sp,#12
 612              	.LCFI58:
 613              	 .cfi_def_cfa_offset 16
 614 0004 00AF     	 add r7,sp,#0
 615              	.LCFI59:
 616              	 .cfi_def_cfa_register 7
 617 0006 0346     	 mov r3,r0
 618 0008 FB80     	 strh r3,[r7,#6]
 244:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->STCON = (uint32_t)bootmode;
 619              	 .loc 3 244 0
 620 000a 044A     	 ldr r2,.L47
 621 000c FB88     	 ldrh r3,[r7,#6]
 622 000e 1361     	 str r3,[r2,#16]
 245:../Libraries/XMCLib/src/xmc4_scu.c **** }
 623              	 .loc 3 245 0
 624 0010 0C37     	 adds r7,r7,#12
 625              	.LCFI60:
 626              	 .cfi_def_cfa_offset 4
 627 0012 BD46     	 mov sp,r7
 628              	.LCFI61:
 629              	 .cfi_def_cfa_register 13
 630              	 
 631 0014 5DF8047B 	 ldr r7,[sp],#4
 632              	.LCFI62:
 633              	 .cfi_restore 7
 634              	 .cfi_def_cfa_offset 0
 635 0018 7047     	 bx lr
 636              	.L48:
 637 001a 00BF     	 .align 2
 638              	.L47:
 639 001c 00400050 	 .word 1342193664
 640              	 .cfi_endproc
 641              	.LFE165:
 643              	 .section .text.XMC_SCU_ReadGPR,"ax",%progbits
 644              	 .align 2
 645              	 .global XMC_SCU_ReadGPR
 646              	 .thumb
 647              	 .thumb_func
 649              	XMC_SCU_ReadGPR:
 650              	.LFB166:
 246:../Libraries/XMCLib/src/xmc4_scu.c **** 
 247:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from General purpose register */
 248:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadGPR(const uint32_t index)
 249:../Libraries/XMCLib/src/xmc4_scu.c **** {
 651              	 .loc 3 249 0
 652              	 .cfi_startproc
 653              	 
 654              	 
 655              	 
 656 0000 80B4     	 push {r7}
 657              	.LCFI63:
 658              	 .cfi_def_cfa_offset 4
 659              	 .cfi_offset 7,-4
 660 0002 83B0     	 sub sp,sp,#12
 661              	.LCFI64:
 662              	 .cfi_def_cfa_offset 16
 663 0004 00AF     	 add r7,sp,#0
 664              	.LCFI65:
 665              	 .cfi_def_cfa_register 7
 666 0006 7860     	 str r0,[r7,#4]
 250:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->GPR[index]);
 667              	 .loc 3 250 0
 668 0008 054A     	 ldr r2,.L51
 669 000a 7B68     	 ldr r3,[r7,#4]
 670 000c 0A33     	 adds r3,r3,#10
 671 000e 9B00     	 lsls r3,r3,#2
 672 0010 1344     	 add r3,r3,r2
 673 0012 5B68     	 ldr r3,[r3,#4]
 251:../Libraries/XMCLib/src/xmc4_scu.c **** }
 674              	 .loc 3 251 0
 675 0014 1846     	 mov r0,r3
 676 0016 0C37     	 adds r7,r7,#12
 677              	.LCFI66:
 678              	 .cfi_def_cfa_offset 4
 679 0018 BD46     	 mov sp,r7
 680              	.LCFI67:
 681              	 .cfi_def_cfa_register 13
 682              	 
 683 001a 5DF8047B 	 ldr r7,[sp],#4
 684              	.LCFI68:
 685              	 .cfi_restore 7
 686              	 .cfi_def_cfa_offset 0
 687 001e 7047     	 bx lr
 688              	.L52:
 689              	 .align 2
 690              	.L51:
 691 0020 00400050 	 .word 1342193664
 692              	 .cfi_endproc
 693              	.LFE166:
 695              	 .section .text.XMC_SCU_WriteGPR,"ax",%progbits
 696              	 .align 2
 697              	 .global XMC_SCU_WriteGPR
 698              	 .thumb
 699              	 .thumb_func
 701              	XMC_SCU_WriteGPR:
 702              	.LFB167:
 252:../Libraries/XMCLib/src/xmc4_scu.c **** 
 253:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write to GPR */
 254:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteGPR(const uint32_t index, const uint32_t data)
 255:../Libraries/XMCLib/src/xmc4_scu.c **** {
 703              	 .loc 3 255 0
 704              	 .cfi_startproc
 705              	 
 706              	 
 707              	 
 708 0000 80B4     	 push {r7}
 709              	.LCFI69:
 710              	 .cfi_def_cfa_offset 4
 711              	 .cfi_offset 7,-4
 712 0002 83B0     	 sub sp,sp,#12
 713              	.LCFI70:
 714              	 .cfi_def_cfa_offset 16
 715 0004 00AF     	 add r7,sp,#0
 716              	.LCFI71:
 717              	 .cfi_def_cfa_register 7
 718 0006 7860     	 str r0,[r7,#4]
 719 0008 3960     	 str r1,[r7]
 256:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GPR[index] = data;
 720              	 .loc 3 256 0
 721 000a 064A     	 ldr r2,.L54
 722 000c 7B68     	 ldr r3,[r7,#4]
 723 000e 0A33     	 adds r3,r3,#10
 724 0010 9B00     	 lsls r3,r3,#2
 725 0012 1344     	 add r3,r3,r2
 726 0014 3A68     	 ldr r2,[r7]
 727 0016 5A60     	 str r2,[r3,#4]
 257:../Libraries/XMCLib/src/xmc4_scu.c **** }
 728              	 .loc 3 257 0
 729 0018 0C37     	 adds r7,r7,#12
 730              	.LCFI72:
 731              	 .cfi_def_cfa_offset 4
 732 001a BD46     	 mov sp,r7
 733              	.LCFI73:
 734              	 .cfi_def_cfa_register 13
 735              	 
 736 001c 5DF8047B 	 ldr r7,[sp],#4
 737              	.LCFI74:
 738              	 .cfi_restore 7
 739              	 .cfi_def_cfa_offset 0
 740 0020 7047     	 bx lr
 741              	.L55:
 742 0022 00BF     	 .align 2
 743              	.L54:
 744 0024 00400050 	 .word 1342193664
 745              	 .cfi_endproc
 746              	.LFE167:
 748              	 .section .text.XMC_SCU_EnableOutOfRangeComparator,"ax",%progbits
 749              	 .align 2
 750              	 .global XMC_SCU_EnableOutOfRangeComparator
 751              	 .thumb
 752              	 .thumb_func
 754              	XMC_SCU_EnableOutOfRangeComparator:
 755              	.LFB168:
 258:../Libraries/XMCLib/src/xmc4_scu.c **** 
 259:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 260:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 261:../Libraries/XMCLib/src/xmc4_scu.c **** {
 756              	 .loc 3 261 0
 757              	 .cfi_startproc
 758              	 
 759              	 
 760              	 
 761 0000 80B4     	 push {r7}
 762              	.LCFI75:
 763              	 .cfi_def_cfa_offset 4
 764              	 .cfi_offset 7,-4
 765 0002 83B0     	 sub sp,sp,#12
 766              	.LCFI76:
 767              	 .cfi_def_cfa_offset 16
 768 0004 00AF     	 add r7,sp,#0
 769              	.LCFI77:
 770              	 .cfi_def_cfa_register 7
 771 0006 7860     	 str r0,[r7,#4]
 772 0008 3960     	 str r1,[r7]
 262:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 263:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_EnableOutOfangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel))
 264:../Libraries/XMCLib/src/xmc4_scu.c ****    
 265:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] |= (uint32_t)(1UL << channel);
 773              	 .loc 3 265 0
 774 000a 0A49     	 ldr r1,.L57
 775 000c 094A     	 ldr r2,.L57
 776 000e 7B68     	 ldr r3,[r7,#4]
 777 0010 2833     	 adds r3,r3,#40
 778 0012 52F82320 	 ldr r2,[r2,r3,lsl#2]
 779 0016 3B68     	 ldr r3,[r7]
 780 0018 0120     	 movs r0,#1
 781 001a 00FA03F3 	 lsl r3,r0,r3
 782 001e 1A43     	 orrs r2,r2,r3
 783 0020 7B68     	 ldr r3,[r7,#4]
 784 0022 2833     	 adds r3,r3,#40
 785 0024 41F82320 	 str r2,[r1,r3,lsl#2]
 266:../Libraries/XMCLib/src/xmc4_scu.c **** }
 786              	 .loc 3 266 0
 787 0028 0C37     	 adds r7,r7,#12
 788              	.LCFI78:
 789              	 .cfi_def_cfa_offset 4
 790 002a BD46     	 mov sp,r7
 791              	.LCFI79:
 792              	 .cfi_def_cfa_register 13
 793              	 
 794 002c 5DF8047B 	 ldr r7,[sp],#4
 795              	.LCFI80:
 796              	 .cfi_restore 7
 797              	 .cfi_def_cfa_offset 0
 798 0030 7047     	 bx lr
 799              	.L58:
 800 0032 00BF     	 .align 2
 801              	.L57:
 802 0034 00400050 	 .word 1342193664
 803              	 .cfi_endproc
 804              	.LFE168:
 806              	 .section .text.XMC_SCU_DisableOutOfRangeComparator,"ax",%progbits
 807              	 .align 2
 808              	 .global XMC_SCU_DisableOutOfRangeComparator
 809              	 .thumb
 810              	 .thumb_func
 812              	XMC_SCU_DisableOutOfRangeComparator:
 813              	.LFB169:
 267:../Libraries/XMCLib/src/xmc4_scu.c **** 
 268:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable Out of Range Comparator(ORC) for a desired group and a desired channel input */
 269:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableOutOfRangeComparator(const uint32_t group, const uint32_t channel)
 270:../Libraries/XMCLib/src/xmc4_scu.c **** {
 814              	 .loc 3 270 0
 815              	 .cfi_startproc
 816              	 
 817              	 
 818              	 
 819 0000 80B4     	 push {r7}
 820              	.LCFI81:
 821              	 .cfi_def_cfa_offset 4
 822              	 .cfi_offset 7,-4
 823 0002 83B0     	 sub sp,sp,#12
 824              	.LCFI82:
 825              	 .cfi_def_cfa_offset 16
 826 0004 00AF     	 add r7,sp,#0
 827              	.LCFI83:
 828              	 .cfi_def_cfa_register 7
 829 0006 7860     	 str r0,[r7,#4]
 830 0008 3960     	 str r1,[r7]
 271:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Group Number",XMC_SCU_CHECK_GRPNUM(group));
 272:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_DisableOutOfRangeComparator:Wrong Channel Number",XMC_SCU_CHECK_CHNUM(channel
 273:../Libraries/XMCLib/src/xmc4_scu.c ****    
 274:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->GORCEN[group] &= (uint32_t)~(1UL << channel);
 831              	 .loc 3 274 0
 832 000a 0A49     	 ldr r1,.L60
 833 000c 094A     	 ldr r2,.L60
 834 000e 7B68     	 ldr r3,[r7,#4]
 835 0010 2833     	 adds r3,r3,#40
 836 0012 52F82320 	 ldr r2,[r2,r3,lsl#2]
 837 0016 3B68     	 ldr r3,[r7]
 838 0018 0120     	 movs r0,#1
 839 001a 00FA03F3 	 lsl r3,r0,r3
 840 001e DB43     	 mvns r3,r3
 841 0020 1A40     	 ands r2,r2,r3
 842 0022 7B68     	 ldr r3,[r7,#4]
 843 0024 2833     	 adds r3,r3,#40
 844 0026 41F82320 	 str r2,[r1,r3,lsl#2]
 275:../Libraries/XMCLib/src/xmc4_scu.c **** }
 845              	 .loc 3 275 0
 846 002a 0C37     	 adds r7,r7,#12
 847              	.LCFI84:
 848              	 .cfi_def_cfa_offset 4
 849 002c BD46     	 mov sp,r7
 850              	.LCFI85:
 851              	 .cfi_def_cfa_register 13
 852              	 
 853 002e 5DF8047B 	 ldr r7,[sp],#4
 854              	.LCFI86:
 855              	 .cfi_restore 7
 856              	 .cfi_def_cfa_offset 0
 857 0032 7047     	 bx lr
 858              	.L61:
 859              	 .align 2
 860              	.L60:
 861 0034 00400050 	 .word 1342193664
 862              	 .cfi_endproc
 863              	.LFE169:
 865              	 .section .text.XMC_SCU_CalibrateTemperatureSensor,"ax",%progbits
 866              	 .align 2
 867              	 .global XMC_SCU_CalibrateTemperatureSensor
 868              	 .thumb
 869              	 .thumb_func
 871              	XMC_SCU_CalibrateTemperatureSensor:
 872              	.LFB170:
 276:../Libraries/XMCLib/src/xmc4_scu.c **** 
 277:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to calibrate temperature sensor */
 278:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CalibrateTemperatureSensor(uint32_t offset, uint32_t gain)
 279:../Libraries/XMCLib/src/xmc4_scu.c **** {
 873              	 .loc 3 279 0
 874              	 .cfi_startproc
 875              	 
 876              	 
 877              	 
 878 0000 80B4     	 push {r7}
 879              	.LCFI87:
 880              	 .cfi_def_cfa_offset 4
 881              	 .cfi_offset 7,-4
 882 0002 83B0     	 sub sp,sp,#12
 883              	.LCFI88:
 884              	 .cfi_def_cfa_offset 16
 885 0004 00AF     	 add r7,sp,#0
 886              	.LCFI89:
 887              	 .cfi_def_cfa_register 7
 888 0006 7860     	 str r0,[r7,#4]
 889 0008 3960     	 str r1,[r7]
 280:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 890              	 .loc 3 280 0
 891 000a 0749     	 ldr r1,.L63
 892 000c 7B68     	 ldr r3,[r7,#4]
 893 000e 1A01     	 lsls r2,r3,#4
 281:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(gain << SCU_GENERAL_DTSCON_GAIN_Pos) |
 894              	 .loc 3 281 0
 895 0010 3B68     	 ldr r3,[r7]
 896 0012 DB02     	 lsls r3,r3,#11
 280:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 897              	 .loc 3 280 0
 898 0014 1343     	 orrs r3,r3,r2
 282:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x4UL << SCU_GENERAL_DTSCON_REFTRIM_Pos) |
 899              	 .loc 3 282 0
 900 0016 43F40803 	 orr r3,r3,#8912896
 280:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON = ((uint32_t)(offset << SCU_GENERAL_DTSCON_OFFSET_Pos) |
 901              	 .loc 3 280 0
 902 001a C1F88C30 	 str r3,[r1,#140]
 283:../Libraries/XMCLib/src/xmc4_scu.c ****                         (uint32_t)(0x8UL << SCU_GENERAL_DTSCON_BGTRIM_Pos));
 284:../Libraries/XMCLib/src/xmc4_scu.c **** }
 903              	 .loc 3 284 0
 904 001e 0C37     	 adds r7,r7,#12
 905              	.LCFI90:
 906              	 .cfi_def_cfa_offset 4
 907 0020 BD46     	 mov sp,r7
 908              	.LCFI91:
 909              	 .cfi_def_cfa_register 13
 910              	 
 911 0022 5DF8047B 	 ldr r7,[sp],#4
 912              	.LCFI92:
 913              	 .cfi_restore 7
 914              	 .cfi_def_cfa_offset 0
 915 0026 7047     	 bx lr
 916              	.L64:
 917              	 .align 2
 918              	.L63:
 919 0028 00400050 	 .word 1342193664
 920              	 .cfi_endproc
 921              	.LFE170:
 923              	 .section .text.XMC_SCU_EnableTemperatureSensor,"ax",%progbits
 924              	 .align 2
 925              	 .global XMC_SCU_EnableTemperatureSensor
 926              	 .thumb
 927              	 .thumb_func
 929              	XMC_SCU_EnableTemperatureSensor:
 930              	.LFB171:
 285:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable die temperature measurement by powering the DTS module. */
 286:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_EnableTemperatureSensor(void)
 287:../Libraries/XMCLib/src/xmc4_scu.c **** {
 931              	 .loc 3 287 0
 932              	 .cfi_startproc
 933              	 
 934              	 
 935              	 
 936 0000 80B4     	 push {r7}
 937              	.LCFI93:
 938              	 .cfi_def_cfa_offset 4
 939              	 .cfi_offset 7,-4
 940 0002 00AF     	 add r7,sp,#0
 941              	.LCFI94:
 942              	 .cfi_def_cfa_register 7
 288:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~(SCU_GENERAL_DTSCON_PWD_Msk);
 943              	 .loc 3 288 0
 944 0004 054A     	 ldr r2,.L66
 945 0006 054B     	 ldr r3,.L66
 946 0008 D3F88C30 	 ldr r3,[r3,#140]
 947 000c 23F00103 	 bic r3,r3,#1
 948 0010 C2F88C30 	 str r3,[r2,#140]
 289:../Libraries/XMCLib/src/xmc4_scu.c **** }
 949              	 .loc 3 289 0
 950 0014 BD46     	 mov sp,r7
 951              	.LCFI95:
 952              	 .cfi_def_cfa_register 13
 953              	 
 954 0016 5DF8047B 	 ldr r7,[sp],#4
 955              	.LCFI96:
 956              	 .cfi_restore 7
 957              	 .cfi_def_cfa_offset 0
 958 001a 7047     	 bx lr
 959              	.L67:
 960              	 .align 2
 961              	.L66:
 962 001c 00400050 	 .word 1342193664
 963              	 .cfi_endproc
 964              	.LFE171:
 966              	 .section .text.XMC_SCU_DisableTemperatureSensor,"ax",%progbits
 967              	 .align 2
 968              	 .global XMC_SCU_DisableTemperatureSensor
 969              	 .thumb
 970              	 .thumb_func
 972              	XMC_SCU_DisableTemperatureSensor:
 973              	.LFB172:
 290:../Libraries/XMCLib/src/xmc4_scu.c **** 
 291:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable die temperature measurement by powering the DTS module off. */
 292:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_DisableTemperatureSensor(void)
 293:../Libraries/XMCLib/src/xmc4_scu.c **** {
 974              	 .loc 3 293 0
 975              	 .cfi_startproc
 976              	 
 977              	 
 978              	 
 979 0000 80B4     	 push {r7}
 980              	.LCFI97:
 981              	 .cfi_def_cfa_offset 4
 982              	 .cfi_offset 7,-4
 983 0002 00AF     	 add r7,sp,#0
 984              	.LCFI98:
 985              	 .cfi_def_cfa_register 7
 294:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_PWD_Msk;
 986              	 .loc 3 294 0
 987 0004 054A     	 ldr r2,.L69
 988 0006 054B     	 ldr r3,.L69
 989 0008 D3F88C30 	 ldr r3,[r3,#140]
 990 000c 43F00103 	 orr r3,r3,#1
 991 0010 C2F88C30 	 str r3,[r2,#140]
 295:../Libraries/XMCLib/src/xmc4_scu.c **** }
 992              	 .loc 3 295 0
 993 0014 BD46     	 mov sp,r7
 994              	.LCFI99:
 995              	 .cfi_def_cfa_register 13
 996              	 
 997 0016 5DF8047B 	 ldr r7,[sp],#4
 998              	.LCFI100:
 999              	 .cfi_restore 7
 1000              	 .cfi_def_cfa_offset 0
 1001 001a 7047     	 bx lr
 1002              	.L70:
 1003              	 .align 2
 1004              	.L69:
 1005 001c 00400050 	 .word 1342193664
 1006              	 .cfi_endproc
 1007              	.LFE172:
 1009              	 .section .text.XMC_SCU_IsTemperatureSensorEnabled,"ax",%progbits
 1010              	 .align 2
 1011              	 .global XMC_SCU_IsTemperatureSensorEnabled
 1012              	 .thumb
 1013              	 .thumb_func
 1015              	XMC_SCU_IsTemperatureSensorEnabled:
 1016              	.LFB173:
 296:../Libraries/XMCLib/src/xmc4_scu.c **** 
 297:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to provide the die temperature sensor power status. */
 298:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorEnabled(void)
 299:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1017              	 .loc 3 299 0
 1018              	 .cfi_startproc
 1019              	 
 1020              	 
 1021              	 
 1022 0000 80B4     	 push {r7}
 1023              	.LCFI101:
 1024              	 .cfi_def_cfa_offset 4
 1025              	 .cfi_offset 7,-4
 1026 0002 00AF     	 add r7,sp,#0
 1027              	.LCFI102:
 1028              	 .cfi_def_cfa_register 7
 300:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSCON & SCU_GENERAL_DTSCON_PWD_Msk) == 0U);
 1029              	 .loc 3 300 0
 1030 0004 074B     	 ldr r3,.L73
 1031 0006 D3F88C30 	 ldr r3,[r3,#140]
 1032 000a 03F00103 	 and r3,r3,#1
 1033 000e 002B     	 cmp r3,#0
 1034 0010 0CBF     	 ite eq
 1035 0012 0123     	 moveq r3,#1
 1036 0014 0023     	 movne r3,#0
 1037 0016 DBB2     	 uxtb r3,r3
 301:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1038              	 .loc 3 301 0
 1039 0018 1846     	 mov r0,r3
 1040 001a BD46     	 mov sp,r7
 1041              	.LCFI103:
 1042              	 .cfi_def_cfa_register 13
 1043              	 
 1044 001c 5DF8047B 	 ldr r7,[sp],#4
 1045              	.LCFI104:
 1046              	 .cfi_restore 7
 1047              	 .cfi_def_cfa_offset 0
 1048 0020 7047     	 bx lr
 1049              	.L74:
 1050 0022 00BF     	 .align 2
 1051              	.L73:
 1052 0024 00400050 	 .word 1342193664
 1053              	 .cfi_endproc
 1054              	.LFE173:
 1056              	 .section .text.XMC_SCU_IsTemperatureSensorReady,"ax",%progbits
 1057              	 .align 2
 1058              	 .global XMC_SCU_IsTemperatureSensorReady
 1059              	 .thumb
 1060              	 .thumb_func
 1062              	XMC_SCU_IsTemperatureSensorReady:
 1063              	.LFB174:
 302:../Libraries/XMCLib/src/xmc4_scu.c **** 
 303:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check if the die temperature sensor is ready to start a measurement. */
 304:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorReady(void)
 305:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1064              	 .loc 3 305 0
 1065              	 .cfi_startproc
 1066              	 
 1067              	 
 1068              	 
 1069 0000 80B4     	 push {r7}
 1070              	.LCFI105:
 1071              	 .cfi_def_cfa_offset 4
 1072              	 .cfi_offset 7,-4
 1073 0002 00AF     	 add r7,sp,#0
 1074              	.LCFI106:
 1075              	 .cfi_def_cfa_register 7
 306:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RDY_Msk) != 0U);
 1076              	 .loc 3 306 0
 1077 0004 074B     	 ldr r3,.L77
 1078 0006 D3F89030 	 ldr r3,[r3,#144]
 1079 000a 03F48043 	 and r3,r3,#16384
 1080 000e 002B     	 cmp r3,#0
 1081 0010 14BF     	 ite ne
 1082 0012 0123     	 movne r3,#1
 1083 0014 0023     	 moveq r3,#0
 1084 0016 DBB2     	 uxtb r3,r3
 307:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1085              	 .loc 3 307 0
 1086 0018 1846     	 mov r0,r3
 1087 001a BD46     	 mov sp,r7
 1088              	.LCFI107:
 1089              	 .cfi_def_cfa_register 13
 1090              	 
 1091 001c 5DF8047B 	 ldr r7,[sp],#4
 1092              	.LCFI108:
 1093              	 .cfi_restore 7
 1094              	 .cfi_def_cfa_offset 0
 1095 0020 7047     	 bx lr
 1096              	.L78:
 1097 0022 00BF     	 .align 2
 1098              	.L77:
 1099 0024 00400050 	 .word 1342193664
 1100              	 .cfi_endproc
 1101              	.LFE174:
 1103              	 .section .text.XMC_SCU_StartTemperatureMeasurement,"ax",%progbits
 1104              	 .align 2
 1105              	 .global XMC_SCU_StartTemperatureMeasurement
 1106              	 .thumb
 1107              	 .thumb_func
 1109              	XMC_SCU_StartTemperatureMeasurement:
 1110              	.LFB175:
 308:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to start device temperature measurements */
 309:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_StartTemperatureMeasurement(void)
 310:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1111              	 .loc 3 310 0
 1112              	 .cfi_startproc
 1113              	 
 1114              	 
 1115 0000 80B5     	 push {r7,lr}
 1116              	.LCFI109:
 1117              	 .cfi_def_cfa_offset 8
 1118              	 .cfi_offset 7,-8
 1119              	 .cfi_offset 14,-4
 1120 0002 82B0     	 sub sp,sp,#8
 1121              	.LCFI110:
 1122              	 .cfi_def_cfa_offset 16
 1123 0004 00AF     	 add r7,sp,#0
 1124              	.LCFI111:
 1125              	 .cfi_def_cfa_register 7
 311:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 1126              	 .loc 3 311 0
 1127 0006 0023     	 movs r3,#0
 1128 0008 FB71     	 strb r3,[r7,#7]
 312:../Libraries/XMCLib/src/xmc4_scu.c **** 
 313:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 1129              	 .loc 3 313 0
 1130 000a FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 1131 000e 0346     	 mov r3,r0
 1132 0010 83F00103 	 eor r3,r3,#1
 1133 0014 DBB2     	 uxtb r3,r3
 1134 0016 002B     	 cmp r3,#0
 1135 0018 01D0     	 beq .L80
 314:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 315:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 1136              	 .loc 3 315 0
 1137 001a 0123     	 movs r3,#1
 1138 001c FB71     	 strb r3,[r7,#7]
 1139              	.L80:
 316:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 317:../Libraries/XMCLib/src/xmc4_scu.c ****    
 318:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorBusy() == true)
 1140              	 .loc 3 318 0
 1141 001e FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorBusy
 1142 0022 0346     	 mov r3,r0
 1143 0024 002B     	 cmp r3,#0
 1144 0026 01D0     	 beq .L81
 319:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 320:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_BUSY;
 1145              	 .loc 3 320 0
 1146 0028 0223     	 movs r3,#2
 1147 002a FB71     	 strb r3,[r7,#7]
 1148              	.L81:
 321:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 322:../Libraries/XMCLib/src/xmc4_scu.c **** 
 323:../Libraries/XMCLib/src/xmc4_scu.c ****   /* And start the measurement */
 324:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON |= (uint32_t)SCU_GENERAL_DTSCON_START_Msk;
 1149              	 .loc 3 324 0
 1150 002c 064A     	 ldr r2,.L83
 1151 002e 064B     	 ldr r3,.L83
 1152 0030 D3F88C30 	 ldr r3,[r3,#140]
 1153 0034 43F00203 	 orr r3,r3,#2
 1154 0038 C2F88C30 	 str r3,[r2,#140]
 325:../Libraries/XMCLib/src/xmc4_scu.c ****   
 326:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
 1155              	 .loc 3 326 0
 1156 003c FB79     	 ldrb r3,[r7,#7]
 327:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1157              	 .loc 3 327 0
 1158 003e 1846     	 mov r0,r3
 1159 0040 0837     	 adds r7,r7,#8
 1160              	.LCFI112:
 1161              	 .cfi_def_cfa_offset 8
 1162 0042 BD46     	 mov sp,r7
 1163              	.LCFI113:
 1164              	 .cfi_def_cfa_register 13
 1165              	 
 1166 0044 80BD     	 pop {r7,pc}
 1167              	.L84:
 1168 0046 00BF     	 .align 2
 1169              	.L83:
 1170 0048 00400050 	 .word 1342193664
 1171              	 .cfi_endproc
 1172              	.LFE175:
 1174              	 .section .text.XMC_SCU_GetTemperatureMeasurement,"ax",%progbits
 1175              	 .align 2
 1176              	 .global XMC_SCU_GetTemperatureMeasurement
 1177              	 .thumb
 1178              	 .thumb_func
 1180              	XMC_SCU_GetTemperatureMeasurement:
 1181              	.LFB176:
 328:../Libraries/XMCLib/src/xmc4_scu.c **** 
 329:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to retrieve the temperature measured */
 330:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_GetTemperatureMeasurement(void)
 331:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1182              	 .loc 3 331 0
 1183              	 .cfi_startproc
 1184              	 
 1185              	 
 1186 0000 80B5     	 push {r7,lr}
 1187              	.LCFI114:
 1188              	 .cfi_def_cfa_offset 8
 1189              	 .cfi_offset 7,-8
 1190              	 .cfi_offset 14,-4
 1191 0002 82B0     	 sub sp,sp,#8
 1192              	.LCFI115:
 1193              	 .cfi_def_cfa_offset 16
 1194 0004 00AF     	 add r7,sp,#0
 1195              	.LCFI116:
 1196              	 .cfi_def_cfa_register 7
 332:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t temperature;
 333:../Libraries/XMCLib/src/xmc4_scu.c **** 
 334:../Libraries/XMCLib/src/xmc4_scu.c ****   if (XMC_SCU_IsTemperatureSensorEnabled() == false)
 1197              	 .loc 3 334 0
 1198 0006 FFF7FEFF 	 bl XMC_SCU_IsTemperatureSensorEnabled
 1199 000a 0346     	 mov r3,r0
 1200 000c 83F00103 	 eor r3,r3,#1
 1201 0010 DBB2     	 uxtb r3,r3
 1202 0012 002B     	 cmp r3,#0
 1203 0014 03D0     	 beq .L86
 335:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 336:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = 0x7FFFFFFFUL;
 1204              	 .loc 3 336 0
 1205 0016 6FF00043 	 mvn r3,#-2147483648
 1206 001a 7B60     	 str r3,[r7,#4]
 1207 001c 05E0     	 b .L87
 1208              	.L86:
 337:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 338:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 339:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 340:../Libraries/XMCLib/src/xmc4_scu.c ****     temperature = (uint32_t)((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_RESULT_Msk) >> SCU_GENERAL
 1209              	 .loc 3 340 0
 1210 001e 054B     	 ldr r3,.L89
 1211 0020 D3F89030 	 ldr r3,[r3,#144]
 1212 0024 C3F30903 	 ubfx r3,r3,#0,#10
 1213 0028 7B60     	 str r3,[r7,#4]
 1214              	.L87:
 341:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 342:../Libraries/XMCLib/src/xmc4_scu.c ****   
 343:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((uint32_t)temperature);
 1215              	 .loc 3 343 0
 1216 002a 7B68     	 ldr r3,[r7,#4]
 344:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1217              	 .loc 3 344 0
 1218 002c 1846     	 mov r0,r3
 1219 002e 0837     	 adds r7,r7,#8
 1220              	.LCFI117:
 1221              	 .cfi_def_cfa_offset 8
 1222 0030 BD46     	 mov sp,r7
 1223              	.LCFI118:
 1224              	 .cfi_def_cfa_register 13
 1225              	 
 1226 0032 80BD     	 pop {r7,pc}
 1227              	.L90:
 1228              	 .align 2
 1229              	.L89:
 1230 0034 00400050 	 .word 1342193664
 1231              	 .cfi_endproc
 1232              	.LFE176:
 1234              	 .section .text.XMC_SCU_IsTemperatureSensorBusy,"ax",%progbits
 1235              	 .align 2
 1236              	 .global XMC_SCU_IsTemperatureSensorBusy
 1237              	 .thumb
 1238              	 .thumb_func
 1240              	XMC_SCU_IsTemperatureSensorBusy:
 1241              	.LFB177:
 345:../Libraries/XMCLib/src/xmc4_scu.c **** 
 346:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to know whether Die temperature sensor is busy */
 347:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_IsTemperatureSensorBusy(void)
 348:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1242              	 .loc 3 348 0
 1243              	 .cfi_startproc
 1244              	 
 1245              	 
 1246              	 
 1247 0000 80B4     	 push {r7}
 1248              	.LCFI119:
 1249              	 .cfi_def_cfa_offset 4
 1250              	 .cfi_offset 7,-4
 1251 0002 00AF     	 add r7,sp,#0
 1252              	.LCFI120:
 1253              	 .cfi_def_cfa_register 7
 349:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_GENERAL->DTSSTAT & SCU_GENERAL_DTSSTAT_BUSY_Msk) != 0U);
 1254              	 .loc 3 349 0
 1255 0004 074B     	 ldr r3,.L93
 1256 0006 D3F89030 	 ldr r3,[r3,#144]
 1257 000a 03F40043 	 and r3,r3,#32768
 1258 000e 002B     	 cmp r3,#0
 1259 0010 14BF     	 ite ne
 1260 0012 0123     	 movne r3,#1
 1261 0014 0023     	 moveq r3,#0
 1262 0016 DBB2     	 uxtb r3,r3
 350:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1263              	 .loc 3 350 0
 1264 0018 1846     	 mov r0,r3
 1265 001a BD46     	 mov sp,r7
 1266              	.LCFI121:
 1267              	 .cfi_def_cfa_register 13
 1268              	 
 1269 001c 5DF8047B 	 ldr r7,[sp],#4
 1270              	.LCFI122:
 1271              	 .cfi_restore 7
 1272              	 .cfi_def_cfa_offset 0
 1273 0020 7047     	 bx lr
 1274              	.L94:
 1275 0022 00BF     	 .align 2
 1276              	.L93:
 1277 0024 00400050 	 .word 1342193664
 1278              	 .cfi_endproc
 1279              	.LFE177:
 1281              	 .section .text.XMC_SCU_WriteToRetentionMemory,"ax",%progbits
 1282              	 .align 2
 1283              	 .global XMC_SCU_WriteToRetentionMemory
 1284              	 .thumb
 1285              	 .thumb_func
 1287              	XMC_SCU_WriteToRetentionMemory:
 1288              	.LFB178:
 351:../Libraries/XMCLib/src/xmc4_scu.c **** 
 352:../Libraries/XMCLib/src/xmc4_scu.c **** 
 353:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(SCU_GENERAL_DTEMPLIM_LOWER_Msk) && defined(SCU_GENERAL_DTEMPLIM_UPPER_Msk)
 354:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone past the ceiling */
 355:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HighTemperature(void)
 356:../Libraries/XMCLib/src/xmc4_scu.c **** {
 357:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 358:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 359:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 360:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 361:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 362:../Libraries/XMCLib/src/xmc4_scu.c **** 
 363:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 364:../Libraries/XMCLib/src/xmc4_scu.c **** 
 365:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 366:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 367:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 368:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 369:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 370:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 371:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 372:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 373:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 374:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 375:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_OVERFL_Msk;
 376:../Libraries/XMCLib/src/xmc4_scu.c ****     
 377:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 378:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 379:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 380:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 381:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 382:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 383:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 384:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 385:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 386:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 387:../Libraries/XMCLib/src/xmc4_scu.c **** }
 388:../Libraries/XMCLib/src/xmc4_scu.c **** 
 389:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program raw values of temperature limits into the DTS */
 390:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 391:../Libraries/XMCLib/src/xmc4_scu.c **** {
 392:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up the DTS module */
 393:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTSCON &= (uint32_t)~SCU_GENERAL_DTSCON_PWD_Msk;
 394:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = 0;
 395:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM = (lower_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk);
 396:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->DTEMPLIM |= (uint32_t)((upper_temp & SCU_GENERAL_DTEMPLIM_LOWER_Msk) << SCU_GENERAL_
 397:../Libraries/XMCLib/src/xmc4_scu.c **** }
 398:../Libraries/XMCLib/src/xmc4_scu.c **** 
 399:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if device temperature has gone below the stipulated limit */
 400:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_LowTemperature(void)
 401:../Libraries/XMCLib/src/xmc4_scu.c **** {
 402:../Libraries/XMCLib/src/xmc4_scu.c ****   bool ret_val;
 403:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtscon;
 404:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t   dtempalarm;
 405:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = SCU_GENERAL->DTSCON;
 406:../Libraries/XMCLib/src/xmc4_scu.c ****   dtscon = dtscon & SCU_GENERAL_DTSCON_PWD_Msk;
 407:../Libraries/XMCLib/src/xmc4_scu.c **** 
 408:../Libraries/XMCLib/src/xmc4_scu.c ****   ret_val = false;
 409:../Libraries/XMCLib/src/xmc4_scu.c **** 
 410:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Any audit makes sense only if the DTS were powered up */  
 411:../Libraries/XMCLib/src/xmc4_scu.c ****   if(dtscon)
 412:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 413:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered down - return false */
 414:../Libraries/XMCLib/src/xmc4_scu.c ****     ret_val = false;
 415:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 416:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 417:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 418:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Powered up - Read the overflow bit and decide accordingly*/
 419:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = SCU_GENERAL->DTEMPALARM;
 420:../Libraries/XMCLib/src/xmc4_scu.c ****     dtempalarm = dtempalarm & SCU_GENERAL_DTEMPALARM_UNDERFL_Msk;
 421:../Libraries/XMCLib/src/xmc4_scu.c ****     
 422:../Libraries/XMCLib/src/xmc4_scu.c ****     if(dtempalarm)
 423:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 424:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = true;
 425:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 426:../Libraries/XMCLib/src/xmc4_scu.c ****     else
 427:../Libraries/XMCLib/src/xmc4_scu.c ****     {
 428:../Libraries/XMCLib/src/xmc4_scu.c ****       ret_val = false;
 429:../Libraries/XMCLib/src/xmc4_scu.c ****     }
 430:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 431:../Libraries/XMCLib/src/xmc4_scu.c ****   
 432:../Libraries/XMCLib/src/xmc4_scu.c ****   return (ret_val);
 433:../Libraries/XMCLib/src/xmc4_scu.c **** }
 434:../Libraries/XMCLib/src/xmc4_scu.c **** #endif  
 435:../Libraries/XMCLib/src/xmc4_scu.c **** 
 436:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to write into Retention memory in hibernate domain */
 437:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_WriteToRetentionMemory(uint32_t address, uint32_t data)
 438:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1289              	 .loc 3 438 0
 1290              	 .cfi_startproc
 1291              	 
 1292              	 
 1293              	 
 1294 0000 80B4     	 push {r7}
 1295              	.LCFI123:
 1296              	 .cfi_def_cfa_offset 4
 1297              	 .cfi_offset 7,-4
 1298 0002 85B0     	 sub sp,sp,#20
 1299              	.LCFI124:
 1300              	 .cfi_def_cfa_offset 24
 1301 0004 00AF     	 add r7,sp,#0
 1302              	.LCFI125:
 1303              	 .cfi_def_cfa_register 7
 1304 0006 7860     	 str r0,[r7,#4]
 1305 0008 3960     	 str r1,[r7]
 439:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 440:../Libraries/XMCLib/src/xmc4_scu.c ****   
 441:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 442:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = (uint32_t)((address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 1306              	 .loc 3 442 0
 1307 000a 7B68     	 ldr r3,[r7,#4]
 1308 000c 1B04     	 lsls r3,r3,#16
 1309 000e 03F47023 	 and r3,r3,#983040
 1310 0012 FB60     	 str r3,[r7,#12]
 443:../Libraries/XMCLib/src/xmc4_scu.c ****   
 444:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 445:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr |= (uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk);
 1311              	 .loc 3 445 0
 1312 0014 FB68     	 ldr r3,[r7,#12]
 1313 0016 43F00103 	 orr r3,r3,#1
 1314 001a FB60     	 str r3,[r7,#12]
 446:../Libraries/XMCLib/src/xmc4_scu.c ****   
 447:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write desired data into RMDATA register */  
 448:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMDATA = data;
 1315              	 .loc 3 448 0
 1316 001c 0A4A     	 ldr r2,.L97
 1317 001e 3B68     	 ldr r3,[r7]
 1318 0020 C2F8CC30 	 str r3,[r2,#204]
 449:../Libraries/XMCLib/src/xmc4_scu.c ****   
 450:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Write address & direction of transfer into RMACR register */  
 451:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 1319              	 .loc 3 451 0
 1320 0024 084A     	 ldr r2,.L97
 1321 0026 FB68     	 ldr r3,[r7,#12]
 1322 0028 C2F8C830 	 str r3,[r2,#200]
 452:../Libraries/XMCLib/src/xmc4_scu.c ****   
 453:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 454:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 1323              	 .loc 3 454 0
 1324 002c 00BF     	 nop
 1325              	.L96:
 1326              	 .loc 3 454 0 is_stmt 0 discriminator 1
 1327 002e 064B     	 ldr r3,.L97
 1328 0030 D3F8C430 	 ldr r3,[r3,#196]
 1329 0034 03F40053 	 and r3,r3,#8192
 1330 0038 002B     	 cmp r3,#0
 1331 003a F8D1     	 bne .L96
 455:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 456:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 457:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1332              	 .loc 3 457 0 is_stmt 1
 1333 003c 1437     	 adds r7,r7,#20
 1334              	.LCFI126:
 1335              	 .cfi_def_cfa_offset 4
 1336 003e BD46     	 mov sp,r7
 1337              	.LCFI127:
 1338              	 .cfi_def_cfa_register 13
 1339              	 
 1340 0040 5DF8047B 	 ldr r7,[sp],#4
 1341              	.LCFI128:
 1342              	 .cfi_restore 7
 1343              	 .cfi_def_cfa_offset 0
 1344 0044 7047     	 bx lr
 1345              	.L98:
 1346 0046 00BF     	 .align 2
 1347              	.L97:
 1348 0048 00400050 	 .word 1342193664
 1349              	 .cfi_endproc
 1350              	.LFE178:
 1352              	 .section .text.XMC_SCU_ReadFromRetentionMemory,"ax",%progbits
 1353              	 .align 2
 1354              	 .global XMC_SCU_ReadFromRetentionMemory
 1355              	 .thumb
 1356              	 .thumb_func
 1358              	XMC_SCU_ReadFromRetentionMemory:
 1359              	.LFB179:
 458:../Libraries/XMCLib/src/xmc4_scu.c **** 
 459:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to read from Retention memory in hibernate domain */
 460:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_ReadFromRetentionMemory(uint32_t address)
 461:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1360              	 .loc 3 461 0
 1361              	 .cfi_startproc
 1362              	 
 1363              	 
 1364              	 
 1365 0000 80B4     	 push {r7}
 1366              	.LCFI129:
 1367              	 .cfi_def_cfa_offset 4
 1368              	 .cfi_offset 7,-4
 1369 0002 85B0     	 sub sp,sp,#20
 1370              	.LCFI130:
 1371              	 .cfi_def_cfa_offset 24
 1372 0004 00AF     	 add r7,sp,#0
 1373              	.LCFI131:
 1374              	 .cfi_def_cfa_register 7
 1375 0006 7860     	 str r0,[r7,#4]
 462:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t rmacr;
 463:../Libraries/XMCLib/src/xmc4_scu.c **** 
 464:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Get the address right */  
 465:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr = ((uint32_t)(address << SCU_GENERAL_RMACR_ADDR_Pos) & (uint32_t)SCU_GENERAL_RMACR_ADDR_Msk
 1376              	 .loc 3 465 0
 1377 0008 7B68     	 ldr r3,[r7,#4]
 1378 000a 1B04     	 lsls r3,r3,#16
 1379 000c 03F47023 	 and r3,r3,#983040
 1380 0010 FB60     	 str r3,[r7,#12]
 466:../Libraries/XMCLib/src/xmc4_scu.c ****   
 467:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Transfer from RMDATA to Retention memory */
 468:../Libraries/XMCLib/src/xmc4_scu.c ****   rmacr &= ~((uint32_t)(SCU_GENERAL_RMACR_RDWR_Msk));
 1381              	 .loc 3 468 0
 1382 0012 FB68     	 ldr r3,[r7,#12]
 1383 0014 23F00103 	 bic r3,r3,#1
 1384 0018 FB60     	 str r3,[r7,#12]
 469:../Libraries/XMCLib/src/xmc4_scu.c ****   
 470:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Writing an adress & direction of transfer into RMACR register */  
 471:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_GENERAL->RMACR = rmacr;
 1385              	 .loc 3 471 0
 1386 001a 0A4A     	 ldr r2,.L102
 1387 001c FB68     	 ldr r3,[r7,#12]
 1388 001e C2F8C830 	 str r3,[r2,#200]
 472:../Libraries/XMCLib/src/xmc4_scu.c ****   
 473:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of RMX register in hibernate domain is completed */
 474:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_RMX_Msk)
 1389              	 .loc 3 474 0
 1390 0022 00BF     	 nop
 1391              	.L100:
 1392              	 .loc 3 474 0 is_stmt 0 discriminator 1
 1393 0024 074B     	 ldr r3,.L102
 1394 0026 D3F8C430 	 ldr r3,[r3,#196]
 1395 002a 03F40053 	 and r3,r3,#8192
 1396 002e 002B     	 cmp r3,#0
 1397 0030 F8D1     	 bne .L100
 475:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 476:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 477:../Libraries/XMCLib/src/xmc4_scu.c **** 
 478:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_GENERAL->RMDATA);
 1398              	 .loc 3 478 0 is_stmt 1
 1399 0032 044B     	 ldr r3,.L102
 1400 0034 D3F8CC30 	 ldr r3,[r3,#204]
 479:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1401              	 .loc 3 479 0
 1402 0038 1846     	 mov r0,r3
 1403 003a 1437     	 adds r7,r7,#20
 1404              	.LCFI132:
 1405              	 .cfi_def_cfa_offset 4
 1406 003c BD46     	 mov sp,r7
 1407              	.LCFI133:
 1408              	 .cfi_def_cfa_register 13
 1409              	 
 1410 003e 5DF8047B 	 ldr r7,[sp],#4
 1411              	.LCFI134:
 1412              	 .cfi_restore 7
 1413              	 .cfi_def_cfa_offset 0
 1414 0042 7047     	 bx lr
 1415              	.L103:
 1416              	 .align 2
 1417              	.L102:
 1418 0044 00400050 	 .word 1342193664
 1419              	 .cfi_endproc
 1420              	.LFE179:
 1422              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 1423              	 .align 2
 1424              	 .global XMC_SCU_CLOCK_Init
 1425              	 .thumb
 1426              	 .thumb_func
 1428              	XMC_SCU_CLOCK_Init:
 1429              	.LFB180:
 480:../Libraries/XMCLib/src/xmc4_scu.c **** 
 481:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to initialize the clock tree */
 482:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 483:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1430              	 .loc 3 483 0
 1431              	 .cfi_startproc
 1432              	 
 1433              	 
 1434 0000 B0B5     	 push {r4,r5,r7,lr}
 1435              	.LCFI135:
 1436              	 .cfi_def_cfa_offset 16
 1437              	 .cfi_offset 4,-16
 1438              	 .cfi_offset 5,-12
 1439              	 .cfi_offset 7,-8
 1440              	 .cfi_offset 14,-4
 1441 0002 84B0     	 sub sp,sp,#16
 1442              	.LCFI136:
 1443              	 .cfi_def_cfa_offset 32
 1444 0004 02AF     	 add r7,sp,#8
 1445              	.LCFI137:
 1446              	 .cfi_def_cfa 7,24
 1447 0006 7860     	 str r0,[r7,#4]
 484:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fsys_clkdiv != 0);
 485:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fcpu_clkdiv != 0);
 486:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fccu_clkdiv != 0);
 487:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", config->fperipheral_clkdiv != 0);
 488:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.p_div != 0) &&
 489:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 490:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 491:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.n_div != 0) &&
 492:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)) ||
 493:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR));
 494:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", (config->syspll_config.k_div != 0) &&
 495:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 496:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 497:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL) ||
 498:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_OFI)) &&
 499:../Libraries/XMCLib/src/xmc4_scu.c ****                  ((config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL) ||
 500:../Libraries/XMCLib/src/xmc4_scu.c ****                   (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_PRESCALAR)));
 501:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_oscu
 502:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
 503:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
 504:../Libraries/XMCLib/src/xmc4_scu.c ****                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_
 505:../Libraries/XMCLib/src/xmc4_scu.c **** 
 506:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 1448              	 .loc 3 506 0
 1449 0008 0020     	 movs r0,#0
 1450 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 507:../Libraries/XMCLib/src/xmc4_scu.c **** 
 508:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_EnableHibernateDomain();
 1451              	 .loc 3 508 0
 1452 000e FFF7FEFF 	 bl XMC_SCU_HIB_EnableHibernateDomain
 509:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_osculp == true)
 1453              	 .loc 3 509 0
 1454 0012 7B68     	 ldr r3,[r7,#4]
 1455 0014 DB79     	 ldrb r3,[r3,#7]
 1456 0016 002B     	 cmp r3,#0
 1457 0018 01D0     	 beq .L105
 510:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 511:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableLowPowerOscillator();
 1458              	 .loc 3 511 0
 1459 001a FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableLowPowerOscillator
 1460              	.L105:
 512:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 513:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 1461              	 .loc 3 513 0
 1462 001e 7B68     	 ldr r3,[r7,#4]
 1463 0020 5B7A     	 ldrb r3,[r3,#9]
 1464 0022 1846     	 mov r0,r3
 1465 0024 FFF7FEFF 	 bl XMC_SCU_HIB_SetStandbyClockSource
 514:../Libraries/XMCLib/src/xmc4_scu.c **** 
 515:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 1466              	 .loc 3 515 0
 1467 0028 7B68     	 ldr r3,[r7,#4]
 1468 002a 1B7A     	 ldrb r3,[r3,#8]
 1469 002c 1846     	 mov r0,r3
 1470 002e FFF7FEFF 	 bl XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 516:../Libraries/XMCLib/src/xmc4_scu.c **** 
 517:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 1471              	 .loc 3 517 0
 1472 0032 7B68     	 ldr r3,[r7,#4]
 1473 0034 1B7C     	 ldrb r3,[r3,#16]
 1474 0036 1846     	 mov r0,r3
 1475 0038 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockDivider
 518:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 1476              	 .loc 3 518 0
 1477 003c 7B68     	 ldr r3,[r7,#4]
 1478 003e 5B7C     	 ldrb r3,[r3,#17]
 1479 0040 1846     	 mov r0,r3
 1480 0042 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCpuClockDivider
 519:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 1481              	 .loc 3 519 0
 1482 0046 7B68     	 ldr r3,[r7,#4]
 1483 0048 9B7C     	 ldrb r3,[r3,#18]
 1484 004a 1846     	 mov r0,r3
 1485 004c FFF7FEFF 	 bl XMC_SCU_CLOCK_SetCcuClockDivider
 520:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 1486              	 .loc 3 520 0
 1487 0050 7B68     	 ldr r3,[r7,#4]
 1488 0052 DB7C     	 ldrb r3,[r3,#19]
 1489 0054 1846     	 mov r0,r3
 1490 0056 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetPeripheralClockDivider
 521:../Libraries/XMCLib/src/xmc4_scu.c **** 
 522:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->enable_oschp == true)
 1491              	 .loc 3 522 0
 1492 005a 7B68     	 ldr r3,[r7,#4]
 1493 005c 9B79     	 ldrb r3,[r3,#6]
 1494 005e 002B     	 cmp r3,#0
 1495 0060 01D0     	 beq .L106
 523:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 524:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 1496              	 .loc 3 524 0
 1497 0062 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 1498              	.L106:
 525:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 526:../Libraries/XMCLib/src/xmc4_scu.c **** 
 527:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 1499              	 .loc 3 527 0
 1500 0066 7B68     	 ldr r3,[r7,#4]
 1501 0068 DB78     	 ldrb r3,[r3,#3]
 1502 006a 002B     	 cmp r3,#0
 1503 006c 02D1     	 bne .L107
 528:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 529:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_DisableSystemPll();
 1504              	 .loc 3 529 0
 1505 006e FFF7FEFF 	 bl XMC_SCU_CLOCK_DisableSystemPll
 1506 0072 14E0     	 b .L108
 1507              	.L107:
 530:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 531:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 532:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 533:../Libraries/XMCLib/src/xmc4_scu.c **** 
 534:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_EnableSystemPll();
 1508              	 .loc 3 534 0
 1509 0074 FFF7FEFF 	 bl XMC_SCU_CLOCK_EnableSystemPll
 535:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 1510              	 .loc 3 535 0
 1511 0078 7B68     	 ldr r3,[r7,#4]
 1512 007a 9988     	 ldrh r1,[r3,#4]
 1513 007c 7B68     	 ldr r3,[r7,#4]
 1514 007e DA78     	 ldrb r2,[r3,#3]
 536:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 537:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.p_div,
 1515              	 .loc 3 537 0
 1516 0080 7B68     	 ldr r3,[r7,#4]
 1517 0082 5B78     	 ldrb r3,[r3,#1]
 535:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 1518              	 .loc 3 535 0
 1519 0084 1D46     	 mov r5,r3
 538:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.n_div,
 1520              	 .loc 3 538 0
 1521 0086 7B68     	 ldr r3,[r7,#4]
 1522 0088 1B78     	 ldrb r3,[r3]
 535:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 1523              	 .loc 3 535 0
 1524 008a 1C46     	 mov r4,r3
 539:../Libraries/XMCLib/src/xmc4_scu.c ****                                  (uint32_t)config->syspll_config.k_div);
 1525              	 .loc 3 539 0
 1526 008c 7B68     	 ldr r3,[r7,#4]
 1527 008e 9B78     	 ldrb r3,[r3,#2]
 535:../Libraries/XMCLib/src/xmc4_scu.c ****                                  config->syspll_config.mode,
 1528              	 .loc 3 535 0
 1529 0090 0093     	 str r3,[sp]
 1530 0092 0846     	 mov r0,r1
 1531 0094 1146     	 mov r1,r2
 1532 0096 2A46     	 mov r2,r5
 1533 0098 2346     	 mov r3,r4
 1534 009a FFF7FEFF 	 bl XMC_SCU_CLOCK_StartSystemPll
 1535              	.L108:
 540:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 541:../Libraries/XMCLib/src/xmc4_scu.c **** 
 542:../Libraries/XMCLib/src/xmc4_scu.c ****   /* use SYSPLL? */
 543:../Libraries/XMCLib/src/xmc4_scu.c ****   if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 1536              	 .loc 3 543 0
 1537 009e 7B68     	 ldr r3,[r7,#4]
 1538 00a0 DB68     	 ldr r3,[r3,#12]
 1539 00a2 B3F5803F 	 cmp r3,#65536
 1540 00a6 03D1     	 bne .L109
 544:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 545:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 1541              	 .loc 3 545 0
 1542 00a8 4FF48030 	 mov r0,#65536
 1543 00ac FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemClockSource
 1544              	.L109:
 546:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 547:../Libraries/XMCLib/src/xmc4_scu.c ****   SystemCoreClockUpdate();
 1545              	 .loc 3 547 0
 1546 00b0 FFF7FEFF 	 bl SystemCoreClockUpdate
 548:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1547              	 .loc 3 548 0
 1548 00b4 0837     	 adds r7,r7,#8
 1549              	.LCFI138:
 1550              	 .cfi_def_cfa_offset 16
 1551 00b6 BD46     	 mov sp,r7
 1552              	.LCFI139:
 1553              	 .cfi_def_cfa_register 13
 1554              	 
 1555 00b8 B0BD     	 pop {r4,r5,r7,pc}
 1556              	 .cfi_endproc
 1557              	.LFE180:
 1559 00ba 00BF     	 .section .text.XMC_SCU_TRAP_Enable,"ax",%progbits
 1560              	 .align 2
 1561              	 .global XMC_SCU_TRAP_Enable
 1562              	 .thumb
 1563              	 .thumb_func
 1565              	XMC_SCU_TRAP_Enable:
 1566              	.LFB181:
 549:../Libraries/XMCLib/src/xmc4_scu.c **** 
 550:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a trap source */
 551:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Enable(const uint32_t trap)
 552:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1567              	 .loc 3 552 0
 1568              	 .cfi_startproc
 1569              	 
 1570              	 
 1571              	 
 1572 0000 80B4     	 push {r7}
 1573              	.LCFI140:
 1574              	 .cfi_def_cfa_offset 4
 1575              	 .cfi_offset 7,-4
 1576 0002 83B0     	 sub sp,sp,#12
 1577              	.LCFI141:
 1578              	 .cfi_def_cfa_offset 16
 1579 0004 00AF     	 add r7,sp,#0
 1580              	.LCFI142:
 1581              	 .cfi_def_cfa_register 7
 1582 0006 7860     	 str r0,[r7,#4]
 553:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS &= (uint32_t)~trap;
 1583              	 .loc 3 553 0
 1584 0008 0549     	 ldr r1,.L111
 1585 000a 054B     	 ldr r3,.L111
 1586 000c 9A68     	 ldr r2,[r3,#8]
 1587 000e 7B68     	 ldr r3,[r7,#4]
 1588 0010 DB43     	 mvns r3,r3
 1589 0012 1340     	 ands r3,r3,r2
 1590 0014 8B60     	 str r3,[r1,#8]
 554:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1591              	 .loc 3 554 0
 1592 0016 0C37     	 adds r7,r7,#12
 1593              	.LCFI143:
 1594              	 .cfi_def_cfa_offset 4
 1595 0018 BD46     	 mov sp,r7
 1596              	.LCFI144:
 1597              	 .cfi_def_cfa_register 13
 1598              	 
 1599 001a 5DF8047B 	 ldr r7,[sp],#4
 1600              	.LCFI145:
 1601              	 .cfi_restore 7
 1602              	 .cfi_def_cfa_offset 0
 1603 001e 7047     	 bx lr
 1604              	.L112:
 1605              	 .align 2
 1606              	.L111:
 1607 0020 60410050 	 .word 1342194016
 1608              	 .cfi_endproc
 1609              	.LFE181:
 1611              	 .section .text.XMC_SCU_TRAP_Disable,"ax",%progbits
 1612              	 .align 2
 1613              	 .global XMC_SCU_TRAP_Disable
 1614              	 .thumb
 1615              	 .thumb_func
 1617              	XMC_SCU_TRAP_Disable:
 1618              	.LFB182:
 555:../Libraries/XMCLib/src/xmc4_scu.c **** 
 556:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a trap source */
 557:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Disable(const uint32_t trap)
 558:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1619              	 .loc 3 558 0
 1620              	 .cfi_startproc
 1621              	 
 1622              	 
 1623              	 
 1624 0000 80B4     	 push {r7}
 1625              	.LCFI146:
 1626              	 .cfi_def_cfa_offset 4
 1627              	 .cfi_offset 7,-4
 1628 0002 83B0     	 sub sp,sp,#12
 1629              	.LCFI147:
 1630              	 .cfi_def_cfa_offset 16
 1631 0004 00AF     	 add r7,sp,#0
 1632              	.LCFI148:
 1633              	 .cfi_def_cfa_register 7
 1634 0006 7860     	 str r0,[r7,#4]
 559:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPDIS |= (uint32_t)trap;
 1635              	 .loc 3 559 0
 1636 0008 0549     	 ldr r1,.L114
 1637 000a 054B     	 ldr r3,.L114
 1638 000c 9A68     	 ldr r2,[r3,#8]
 1639 000e 7B68     	 ldr r3,[r7,#4]
 1640 0010 1343     	 orrs r3,r3,r2
 1641 0012 8B60     	 str r3,[r1,#8]
 560:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1642              	 .loc 3 560 0
 1643 0014 0C37     	 adds r7,r7,#12
 1644              	.LCFI149:
 1645              	 .cfi_def_cfa_offset 4
 1646 0016 BD46     	 mov sp,r7
 1647              	.LCFI150:
 1648              	 .cfi_def_cfa_register 13
 1649              	 
 1650 0018 5DF8047B 	 ldr r7,[sp],#4
 1651              	.LCFI151:
 1652              	 .cfi_restore 7
 1653              	 .cfi_def_cfa_offset 0
 1654 001c 7047     	 bx lr
 1655              	.L115:
 1656 001e 00BF     	 .align 2
 1657              	.L114:
 1658 0020 60410050 	 .word 1342194016
 1659              	 .cfi_endproc
 1660              	.LFE182:
 1662              	 .section .text.XMC_SCU_TRAP_GetStatus,"ax",%progbits
 1663              	 .align 2
 1664              	 .global XMC_SCU_TRAP_GetStatus
 1665              	 .thumb
 1666              	 .thumb_func
 1668              	XMC_SCU_TRAP_GetStatus:
 1669              	.LFB183:
 561:../Libraries/XMCLib/src/xmc4_scu.c **** 
 562:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if a trap source has generated event */
 563:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_TRAP_GetStatus(void)
 564:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1670              	 .loc 3 564 0
 1671              	 .cfi_startproc
 1672              	 
 1673              	 
 1674              	 
 1675 0000 80B4     	 push {r7}
 1676              	.LCFI152:
 1677              	 .cfi_def_cfa_offset 4
 1678              	 .cfi_offset 7,-4
 1679 0002 00AF     	 add r7,sp,#0
 1680              	.LCFI153:
 1681              	 .cfi_def_cfa_register 7
 565:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_TRAP->TRAPRAW);
 1682              	 .loc 3 565 0
 1683 0004 034B     	 ldr r3,.L118
 1684 0006 5B68     	 ldr r3,[r3,#4]
 566:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1685              	 .loc 3 566 0
 1686 0008 1846     	 mov r0,r3
 1687 000a BD46     	 mov sp,r7
 1688              	.LCFI154:
 1689              	 .cfi_def_cfa_register 13
 1690              	 
 1691 000c 5DF8047B 	 ldr r7,[sp],#4
 1692              	.LCFI155:
 1693              	 .cfi_restore 7
 1694              	 .cfi_def_cfa_offset 0
 1695 0010 7047     	 bx lr
 1696              	.L119:
 1697 0012 00BF     	 .align 2
 1698              	.L118:
 1699 0014 60410050 	 .word 1342194016
 1700              	 .cfi_endproc
 1701              	.LFE183:
 1703              	 .section .text.XMC_SCU_TRAP_Trigger,"ax",%progbits
 1704              	 .align 2
 1705              	 .global XMC_SCU_TRAP_Trigger
 1706              	 .thumb
 1707              	 .thumb_func
 1709              	XMC_SCU_TRAP_Trigger:
 1710              	.LFB184:
 567:../Libraries/XMCLib/src/xmc4_scu.c **** 
 568:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually trigger a trap event */
 569:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_Trigger(const uint32_t trap)
 570:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1711              	 .loc 3 570 0
 1712              	 .cfi_startproc
 1713              	 
 1714              	 
 1715              	 
 1716 0000 80B4     	 push {r7}
 1717              	.LCFI156:
 1718              	 .cfi_def_cfa_offset 4
 1719              	 .cfi_offset 7,-4
 1720 0002 83B0     	 sub sp,sp,#12
 1721              	.LCFI157:
 1722              	 .cfi_def_cfa_offset 16
 1723 0004 00AF     	 add r7,sp,#0
 1724              	.LCFI158:
 1725              	 .cfi_def_cfa_register 7
 1726 0006 7860     	 str r0,[r7,#4]
 571:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPSET = (uint32_t)trap;
 1727              	 .loc 3 571 0
 1728 0008 034A     	 ldr r2,.L121
 1729 000a 7B68     	 ldr r3,[r7,#4]
 1730 000c 1361     	 str r3,[r2,#16]
 572:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1731              	 .loc 3 572 0
 1732 000e 0C37     	 adds r7,r7,#12
 1733              	.LCFI159:
 1734              	 .cfi_def_cfa_offset 4
 1735 0010 BD46     	 mov sp,r7
 1736              	.LCFI160:
 1737              	 .cfi_def_cfa_register 13
 1738              	 
 1739 0012 5DF8047B 	 ldr r7,[sp],#4
 1740              	.LCFI161:
 1741              	 .cfi_restore 7
 1742              	 .cfi_def_cfa_offset 0
 1743 0016 7047     	 bx lr
 1744              	.L122:
 1745              	 .align 2
 1746              	.L121:
 1747 0018 60410050 	 .word 1342194016
 1748              	 .cfi_endproc
 1749              	.LFE184:
 1751              	 .section .text.XMC_SCU_TRAP_ClearStatus,"ax",%progbits
 1752              	 .align 2
 1753              	 .global XMC_SCU_TRAP_ClearStatus
 1754              	 .thumb
 1755              	 .thumb_func
 1757              	XMC_SCU_TRAP_ClearStatus:
 1758              	.LFB185:
 573:../Libraries/XMCLib/src/xmc4_scu.c **** 
 574:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear a trap event */
 575:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_TRAP_ClearStatus(const uint32_t trap)
 576:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1759              	 .loc 3 576 0
 1760              	 .cfi_startproc
 1761              	 
 1762              	 
 1763              	 
 1764 0000 80B4     	 push {r7}
 1765              	.LCFI162:
 1766              	 .cfi_def_cfa_offset 4
 1767              	 .cfi_offset 7,-4
 1768 0002 83B0     	 sub sp,sp,#12
 1769              	.LCFI163:
 1770              	 .cfi_def_cfa_offset 16
 1771 0004 00AF     	 add r7,sp,#0
 1772              	.LCFI164:
 1773              	 .cfi_def_cfa_register 7
 1774 0006 7860     	 str r0,[r7,#4]
 577:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_TRAP->TRAPCLR = (uint32_t)trap;
 1775              	 .loc 3 577 0
 1776 0008 034A     	 ldr r2,.L124
 1777 000a 7B68     	 ldr r3,[r7,#4]
 1778 000c D360     	 str r3,[r2,#12]
 578:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1779              	 .loc 3 578 0
 1780 000e 0C37     	 adds r7,r7,#12
 1781              	.LCFI165:
 1782              	 .cfi_def_cfa_offset 4
 1783 0010 BD46     	 mov sp,r7
 1784              	.LCFI166:
 1785              	 .cfi_def_cfa_register 13
 1786              	 
 1787 0012 5DF8047B 	 ldr r7,[sp],#4
 1788              	.LCFI167:
 1789              	 .cfi_restore 7
 1790              	 .cfi_def_cfa_offset 0
 1791 0016 7047     	 bx lr
 1792              	.L125:
 1793              	 .align 2
 1794              	.L124:
 1795 0018 60410050 	 .word 1342194016
 1796              	 .cfi_endproc
 1797              	.LFE185:
 1799              	 .section .text.XMC_SCU_PARITY_ClearStatus,"ax",%progbits
 1800              	 .align 2
 1801              	 .global XMC_SCU_PARITY_ClearStatus
 1802              	 .thumb
 1803              	 .thumb_func
 1805              	XMC_SCU_PARITY_ClearStatus:
 1806              	.LFB186:
 579:../Libraries/XMCLib/src/xmc4_scu.c **** 
 580:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to clear parity error event */
 581:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_ClearStatus(const uint32_t memory)
 582:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1807              	 .loc 3 582 0
 1808              	 .cfi_startproc
 1809              	 
 1810              	 
 1811              	 
 1812 0000 80B4     	 push {r7}
 1813              	.LCFI168:
 1814              	 .cfi_def_cfa_offset 4
 1815              	 .cfi_offset 7,-4
 1816 0002 83B0     	 sub sp,sp,#12
 1817              	.LCFI169:
 1818              	 .cfi_def_cfa_offset 16
 1819 0004 00AF     	 add r7,sp,#0
 1820              	.LCFI170:
 1821              	 .cfi_def_cfa_register 7
 1822 0006 7860     	 str r0,[r7,#4]
 583:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEFLAG |= (uint32_t)memory; 
 1823              	 .loc 3 583 0
 1824 0008 0549     	 ldr r1,.L127
 1825 000a 054B     	 ldr r3,.L127
 1826 000c 5A69     	 ldr r2,[r3,#20]
 1827 000e 7B68     	 ldr r3,[r7,#4]
 1828 0010 1343     	 orrs r3,r3,r2
 1829 0012 4B61     	 str r3,[r1,#20]
 584:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1830              	 .loc 3 584 0
 1831 0014 0C37     	 adds r7,r7,#12
 1832              	.LCFI171:
 1833              	 .cfi_def_cfa_offset 4
 1834 0016 BD46     	 mov sp,r7
 1835              	.LCFI172:
 1836              	 .cfi_def_cfa_register 13
 1837              	 
 1838 0018 5DF8047B 	 ldr r7,[sp],#4
 1839              	.LCFI173:
 1840              	 .cfi_restore 7
 1841              	 .cfi_def_cfa_offset 0
 1842 001c 7047     	 bx lr
 1843              	.L128:
 1844 001e 00BF     	 .align 2
 1845              	.L127:
 1846 0020 3C410050 	 .word 1342193980
 1847              	 .cfi_endproc
 1848              	.LFE186:
 1850              	 .section .text.XMC_SCU_PARITY_GetStatus,"ax",%progbits
 1851              	 .align 2
 1852              	 .global XMC_SCU_PARITY_GetStatus
 1853              	 .thumb
 1854              	 .thumb_func
 1856              	XMC_SCU_PARITY_GetStatus:
 1857              	.LFB187:
 585:../Libraries/XMCLib/src/xmc4_scu.c **** 
 586:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if the specified parity error has occured or not */
 587:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_PARITY_GetStatus(void)
 588:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1858              	 .loc 3 588 0
 1859              	 .cfi_startproc
 1860              	 
 1861              	 
 1862              	 
 1863 0000 80B4     	 push {r7}
 1864              	.LCFI174:
 1865              	 .cfi_def_cfa_offset 4
 1866              	 .cfi_offset 7,-4
 1867 0002 00AF     	 add r7,sp,#0
 1868              	.LCFI175:
 1869              	 .cfi_def_cfa_register 7
 589:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_PARITY->PEFLAG);
 1870              	 .loc 3 589 0
 1871 0004 034B     	 ldr r3,.L131
 1872 0006 5B69     	 ldr r3,[r3,#20]
 590:../Libraries/XMCLib/src/xmc4_scu.c **** } 
 1873              	 .loc 3 590 0
 1874 0008 1846     	 mov r0,r3
 1875 000a BD46     	 mov sp,r7
 1876              	.LCFI176:
 1877              	 .cfi_def_cfa_register 13
 1878              	 
 1879 000c 5DF8047B 	 ldr r7,[sp],#4
 1880              	.LCFI177:
 1881              	 .cfi_restore 7
 1882              	 .cfi_def_cfa_offset 0
 1883 0010 7047     	 bx lr
 1884              	.L132:
 1885 0012 00BF     	 .align 2
 1886              	.L131:
 1887 0014 3C410050 	 .word 1342193980
 1888              	 .cfi_endproc
 1889              	.LFE187:
 1891              	 .section .text.XMC_SCU_PARITY_Enable,"ax",%progbits
 1892              	 .align 2
 1893              	 .global XMC_SCU_PARITY_Enable
 1894              	 .thumb
 1895              	 .thumb_func
 1897              	XMC_SCU_PARITY_Enable:
 1898              	.LFB188:
 591:../Libraries/XMCLib/src/xmc4_scu.c **** 
 592:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable parity error checking for the selected on-chip RAM type */
 593:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Enable(const uint32_t memory)
 594:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1899              	 .loc 3 594 0
 1900              	 .cfi_startproc
 1901              	 
 1902              	 
 1903              	 
 1904 0000 80B4     	 push {r7}
 1905              	.LCFI178:
 1906              	 .cfi_def_cfa_offset 4
 1907              	 .cfi_offset 7,-4
 1908 0002 83B0     	 sub sp,sp,#12
 1909              	.LCFI179:
 1910              	 .cfi_def_cfa_offset 16
 1911 0004 00AF     	 add r7,sp,#0
 1912              	.LCFI180:
 1913              	 .cfi_def_cfa_register 7
 1914 0006 7860     	 str r0,[r7,#4]
 595:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN |= (uint32_t)memory; 
 1915              	 .loc 3 595 0
 1916 0008 0549     	 ldr r1,.L134
 1917 000a 054B     	 ldr r3,.L134
 1918 000c 1A68     	 ldr r2,[r3]
 1919 000e 7B68     	 ldr r3,[r7,#4]
 1920 0010 1343     	 orrs r3,r3,r2
 1921 0012 0B60     	 str r3,[r1]
 596:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1922              	 .loc 3 596 0
 1923 0014 0C37     	 adds r7,r7,#12
 1924              	.LCFI181:
 1925              	 .cfi_def_cfa_offset 4
 1926 0016 BD46     	 mov sp,r7
 1927              	.LCFI182:
 1928              	 .cfi_def_cfa_register 13
 1929              	 
 1930 0018 5DF8047B 	 ldr r7,[sp],#4
 1931              	.LCFI183:
 1932              	 .cfi_restore 7
 1933              	 .cfi_def_cfa_offset 0
 1934 001c 7047     	 bx lr
 1935              	.L135:
 1936 001e 00BF     	 .align 2
 1937              	.L134:
 1938 0020 3C410050 	 .word 1342193980
 1939              	 .cfi_endproc
 1940              	.LFE188:
 1942              	 .section .text.XMC_SCU_PARITY_Disable,"ax",%progbits
 1943              	 .align 2
 1944              	 .global XMC_SCU_PARITY_Disable
 1945              	 .thumb
 1946              	 .thumb_func
 1948              	XMC_SCU_PARITY_Disable:
 1949              	.LFB189:
 597:../Libraries/XMCLib/src/xmc4_scu.c **** 
 598:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable parity error checking for the selected on-chip RAM type */
 599:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_Disable(const uint32_t memory)
 600:../Libraries/XMCLib/src/xmc4_scu.c **** {
 1950              	 .loc 3 600 0
 1951              	 .cfi_startproc
 1952              	 
 1953              	 
 1954              	 
 1955 0000 80B4     	 push {r7}
 1956              	.LCFI184:
 1957              	 .cfi_def_cfa_offset 4
 1958              	 .cfi_offset 7,-4
 1959 0002 83B0     	 sub sp,sp,#12
 1960              	.LCFI185:
 1961              	 .cfi_def_cfa_offset 16
 1962 0004 00AF     	 add r7,sp,#0
 1963              	.LCFI186:
 1964              	 .cfi_def_cfa_register 7
 1965 0006 7860     	 str r0,[r7,#4]
 601:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PEEN &= (uint32_t)~memory; 
 1966              	 .loc 3 601 0
 1967 0008 0549     	 ldr r1,.L137
 1968 000a 054B     	 ldr r3,.L137
 1969 000c 1A68     	 ldr r2,[r3]
 1970 000e 7B68     	 ldr r3,[r7,#4]
 1971 0010 DB43     	 mvns r3,r3
 1972 0012 1340     	 ands r3,r3,r2
 1973 0014 0B60     	 str r3,[r1]
 602:../Libraries/XMCLib/src/xmc4_scu.c **** }
 1974              	 .loc 3 602 0
 1975 0016 0C37     	 adds r7,r7,#12
 1976              	.LCFI187:
 1977              	 .cfi_def_cfa_offset 4
 1978 0018 BD46     	 mov sp,r7
 1979              	.LCFI188:
 1980              	 .cfi_def_cfa_register 13
 1981              	 
 1982 001a 5DF8047B 	 ldr r7,[sp],#4
 1983              	.LCFI189:
 1984              	 .cfi_restore 7
 1985              	 .cfi_def_cfa_offset 0
 1986 001e 7047     	 bx lr
 1987              	.L138:
 1988              	 .align 2
 1989              	.L137:
 1990 0020 3C410050 	 .word 1342193980
 1991              	 .cfi_endproc
 1992              	.LFE189:
 1994              	 .section .text.XMC_SCU_PARITY_EnableTrapGeneration,"ax",%progbits
 1995              	 .align 2
 1996              	 .global XMC_SCU_PARITY_EnableTrapGeneration
 1997              	 .thumb
 1998              	 .thumb_func
 2000              	XMC_SCU_PARITY_EnableTrapGeneration:
 2001              	.LFB190:
 603:../Libraries/XMCLib/src/xmc4_scu.c **** 
 604:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable trap assertion for the parity error source */
 605:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_EnableTrapGeneration(const uint32_t memory)
 606:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2002              	 .loc 3 606 0
 2003              	 .cfi_startproc
 2004              	 
 2005              	 
 2006              	 
 2007 0000 80B4     	 push {r7}
 2008              	.LCFI190:
 2009              	 .cfi_def_cfa_offset 4
 2010              	 .cfi_offset 7,-4
 2011 0002 83B0     	 sub sp,sp,#12
 2012              	.LCFI191:
 2013              	 .cfi_def_cfa_offset 16
 2014 0004 00AF     	 add r7,sp,#0
 2015              	.LCFI192:
 2016              	 .cfi_def_cfa_register 7
 2017 0006 7860     	 str r0,[r7,#4]
 607:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE |= (uint32_t)memory; 
 2018              	 .loc 3 607 0
 2019 0008 0549     	 ldr r1,.L140
 2020 000a 054B     	 ldr r3,.L140
 2021 000c 9A68     	 ldr r2,[r3,#8]
 2022 000e 7B68     	 ldr r3,[r7,#4]
 2023 0010 1343     	 orrs r3,r3,r2
 2024 0012 8B60     	 str r3,[r1,#8]
 608:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2025              	 .loc 3 608 0
 2026 0014 0C37     	 adds r7,r7,#12
 2027              	.LCFI193:
 2028              	 .cfi_def_cfa_offset 4
 2029 0016 BD46     	 mov sp,r7
 2030              	.LCFI194:
 2031              	 .cfi_def_cfa_register 13
 2032              	 
 2033 0018 5DF8047B 	 ldr r7,[sp],#4
 2034              	.LCFI195:
 2035              	 .cfi_restore 7
 2036              	 .cfi_def_cfa_offset 0
 2037 001c 7047     	 bx lr
 2038              	.L141:
 2039 001e 00BF     	 .align 2
 2040              	.L140:
 2041 0020 3C410050 	 .word 1342193980
 2042              	 .cfi_endproc
 2043              	.LFE190:
 2045              	 .section .text.XMC_SCU_PARITY_DisableTrapGeneration,"ax",%progbits
 2046              	 .align 2
 2047              	 .global XMC_SCU_PARITY_DisableTrapGeneration
 2048              	 .thumb
 2049              	 .thumb_func
 2051              	XMC_SCU_PARITY_DisableTrapGeneration:
 2052              	.LFB191:
 609:../Libraries/XMCLib/src/xmc4_scu.c **** 
 610:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable the assertion of trap for the parity error source */
 611:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_PARITY_DisableTrapGeneration(const uint32_t memory)
 612:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2053              	 .loc 3 612 0
 2054              	 .cfi_startproc
 2055              	 
 2056              	 
 2057              	 
 2058 0000 80B4     	 push {r7}
 2059              	.LCFI196:
 2060              	 .cfi_def_cfa_offset 4
 2061              	 .cfi_offset 7,-4
 2062 0002 83B0     	 sub sp,sp,#12
 2063              	.LCFI197:
 2064              	 .cfi_def_cfa_offset 16
 2065 0004 00AF     	 add r7,sp,#0
 2066              	.LCFI198:
 2067              	 .cfi_def_cfa_register 7
 2068 0006 7860     	 str r0,[r7,#4]
 613:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PARITY->PETE &= (uint32_t)~memory; 
 2069              	 .loc 3 613 0
 2070 0008 0549     	 ldr r1,.L143
 2071 000a 054B     	 ldr r3,.L143
 2072 000c 9A68     	 ldr r2,[r3,#8]
 2073 000e 7B68     	 ldr r3,[r7,#4]
 2074 0010 DB43     	 mvns r3,r3
 2075 0012 1340     	 ands r3,r3,r2
 2076 0014 8B60     	 str r3,[r1,#8]
 614:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2077              	 .loc 3 614 0
 2078 0016 0C37     	 adds r7,r7,#12
 2079              	.LCFI199:
 2080              	 .cfi_def_cfa_offset 4
 2081 0018 BD46     	 mov sp,r7
 2082              	.LCFI200:
 2083              	 .cfi_def_cfa_register 13
 2084              	 
 2085 001a 5DF8047B 	 ldr r7,[sp],#4
 2086              	.LCFI201:
 2087              	 .cfi_restore 7
 2088              	 .cfi_def_cfa_offset 0
 2089 001e 7047     	 bx lr
 2090              	.L144:
 2091              	 .align 2
 2092              	.L143:
 2093 0020 3C410050 	 .word 1342193980
 2094              	 .cfi_endproc
 2095              	.LFE191:
 2097              	 .section .text.XMC_SCU_INTERRUPT_EnableNmiRequest,"ax",%progbits
 2098              	 .align 2
 2099              	 .global XMC_SCU_INTERRUPT_EnableNmiRequest
 2100              	 .thumb
 2101              	 .thumb_func
 2103              	XMC_SCU_INTERRUPT_EnableNmiRequest:
 2104              	.LFB192:
 615:../Libraries/XMCLib/src/xmc4_scu.c **** 
 616:../Libraries/XMCLib/src/xmc4_scu.c **** /* Enables a NMI source */
 617:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
 618:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2105              	 .loc 3 618 0
 2106              	 .cfi_startproc
 2107              	 
 2108              	 
 2109              	 
 2110 0000 80B4     	 push {r7}
 2111              	.LCFI202:
 2112              	 .cfi_def_cfa_offset 4
 2113              	 .cfi_offset 7,-4
 2114 0002 83B0     	 sub sp,sp,#12
 2115              	.LCFI203:
 2116              	 .cfi_def_cfa_offset 16
 2117 0004 00AF     	 add r7,sp,#0
 2118              	.LCFI204:
 2119              	 .cfi_def_cfa_register 7
 2120 0006 7860     	 str r0,[r7,#4]
 619:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 2121              	 .loc 3 619 0
 2122 0008 0549     	 ldr r1,.L146
 2123 000a 054B     	 ldr r3,.L146
 2124 000c 5A69     	 ldr r2,[r3,#20]
 2125 000e 7B68     	 ldr r3,[r7,#4]
 2126 0010 1343     	 orrs r3,r3,r2
 2127 0012 4B61     	 str r3,[r1,#20]
 620:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2128              	 .loc 3 620 0
 2129 0014 0C37     	 adds r7,r7,#12
 2130              	.LCFI205:
 2131              	 .cfi_def_cfa_offset 4
 2132 0016 BD46     	 mov sp,r7
 2133              	.LCFI206:
 2134              	 .cfi_def_cfa_register 13
 2135              	 
 2136 0018 5DF8047B 	 ldr r7,[sp],#4
 2137              	.LCFI207:
 2138              	 .cfi_restore 7
 2139              	 .cfi_def_cfa_offset 0
 2140 001c 7047     	 bx lr
 2141              	.L147:
 2142 001e 00BF     	 .align 2
 2143              	.L146:
 2144 0020 74400050 	 .word 1342193780
 2145              	 .cfi_endproc
 2146              	.LFE192:
 2148              	 .section .text.XMC_SCU_INTERRUPT_DisableNmiRequest,"ax",%progbits
 2149              	 .align 2
 2150              	 .global XMC_SCU_INTERRUPT_DisableNmiRequest
 2151              	 .thumb
 2152              	 .thumb_func
 2154              	XMC_SCU_INTERRUPT_DisableNmiRequest:
 2155              	.LFB193:
 621:../Libraries/XMCLib/src/xmc4_scu.c **** 
 622:../Libraries/XMCLib/src/xmc4_scu.c **** /* Disables a NMI source */
 623:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_INTERRUPT_DisableNmiRequest(const uint32_t request)
 624:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2156              	 .loc 3 624 0
 2157              	 .cfi_startproc
 2158              	 
 2159              	 
 2160              	 
 2161 0000 80B4     	 push {r7}
 2162              	.LCFI208:
 2163              	 .cfi_def_cfa_offset 4
 2164              	 .cfi_offset 7,-4
 2165 0002 83B0     	 sub sp,sp,#12
 2166              	.LCFI209:
 2167              	 .cfi_def_cfa_offset 16
 2168 0004 00AF     	 add r7,sp,#0
 2169              	.LCFI210:
 2170              	 .cfi_def_cfa_register 7
 2171 0006 7860     	 str r0,[r7,#4]
 625:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_INTERRUPT->NMIREQEN &= (uint32_t)~request;
 2172              	 .loc 3 625 0
 2173 0008 0549     	 ldr r1,.L149
 2174 000a 054B     	 ldr r3,.L149
 2175 000c 5A69     	 ldr r2,[r3,#20]
 2176 000e 7B68     	 ldr r3,[r7,#4]
 2177 0010 DB43     	 mvns r3,r3
 2178 0012 1340     	 ands r3,r3,r2
 2179 0014 4B61     	 str r3,[r1,#20]
 626:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2180              	 .loc 3 626 0
 2181 0016 0C37     	 adds r7,r7,#12
 2182              	.LCFI211:
 2183              	 .cfi_def_cfa_offset 4
 2184 0018 BD46     	 mov sp,r7
 2185              	.LCFI212:
 2186              	 .cfi_def_cfa_register 13
 2187              	 
 2188 001a 5DF8047B 	 ldr r7,[sp],#4
 2189              	.LCFI213:
 2190              	 .cfi_restore 7
 2191              	 .cfi_def_cfa_offset 0
 2192 001e 7047     	 bx lr
 2193              	.L150:
 2194              	 .align 2
 2195              	.L149:
 2196 0020 74400050 	 .word 1342193780
 2197              	 .cfi_endproc
 2198              	.LFE193:
 2200              	 .section .text.XMC_SCU_RESET_AssertPeripheralReset,"ax",%progbits
 2201              	 .align 2
 2202              	 .global XMC_SCU_RESET_AssertPeripheralReset
 2203              	 .thumb
 2204              	 .thumb_func
 2206              	XMC_SCU_RESET_AssertPeripheralReset:
 2207              	.LFB194:
 627:../Libraries/XMCLib/src/xmc4_scu.c **** 
 628:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually assert a reset request */
 629:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_AssertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 630:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2208              	 .loc 3 630 0
 2209              	 .cfi_startproc
 2210              	 
 2211              	 
 2212              	 
 2213 0000 80B4     	 push {r7}
 2214              	.LCFI214:
 2215              	 .cfi_def_cfa_offset 4
 2216              	 .cfi_offset 7,-4
 2217 0002 85B0     	 sub sp,sp,#20
 2218              	.LCFI215:
 2219              	 .cfi_def_cfa_offset 24
 2220 0004 00AF     	 add r7,sp,#0
 2221              	.LCFI216:
 2222              	 .cfi_def_cfa_register 7
 2223 0006 7860     	 str r0,[r7,#4]
 631:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 2224              	 .loc 3 631 0
 2225 0008 7B68     	 ldr r3,[r7,#4]
 2226 000a 1B0F     	 lsrs r3,r3,#28
 2227 000c FB60     	 str r3,[r7,#12]
 632:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 2228              	 .loc 3 632 0
 2229 000e 7B68     	 ldr r3,[r7,#4]
 2230 0010 23F07043 	 bic r3,r3,#-268435456
 2231 0014 BB60     	 str r3,[r7,#8]
 633:../Libraries/XMCLib/src/xmc4_scu.c **** 
 634:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
 2232              	 .loc 3 634 0
 2233 0016 FA68     	 ldr r2,[r7,#12]
 2234 0018 1346     	 mov r3,r2
 2235 001a 5B00     	 lsls r3,r3,#1
 2236 001c 1344     	 add r3,r3,r2
 2237 001e 9B00     	 lsls r3,r3,#2
 2238 0020 1A46     	 mov r2,r3
 2239 0022 044B     	 ldr r3,.L152
 2240 0024 1344     	 add r3,r3,r2
 2241 0026 BA68     	 ldr r2,[r7,#8]
 2242 0028 1A60     	 str r2,[r3]
 635:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2243              	 .loc 3 635 0
 2244 002a 1437     	 adds r7,r7,#20
 2245              	.LCFI217:
 2246              	 .cfi_def_cfa_offset 4
 2247 002c BD46     	 mov sp,r7
 2248              	.LCFI218:
 2249              	 .cfi_def_cfa_register 13
 2250              	 
 2251 002e 5DF8047B 	 ldr r7,[sp],#4
 2252              	.LCFI219:
 2253              	 .cfi_restore 7
 2254              	 .cfi_def_cfa_offset 0
 2255 0032 7047     	 bx lr
 2256              	.L153:
 2257              	 .align 2
 2258              	.L152:
 2259 0034 10440050 	 .word 1342194704
 2260              	 .cfi_endproc
 2261              	.LFE194:
 2263              	 .section .text.XMC_SCU_RESET_DeassertPeripheralReset,"ax",%progbits
 2264              	 .align 2
 2265              	 .global XMC_SCU_RESET_DeassertPeripheralReset
 2266              	 .thumb
 2267              	 .thumb_func
 2269              	XMC_SCU_RESET_DeassertPeripheralReset:
 2270              	.LFB195:
 636:../Libraries/XMCLib/src/xmc4_scu.c **** 
 637:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to manually de-assert a reset request */
 638:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 639:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2271              	 .loc 3 639 0
 2272              	 .cfi_startproc
 2273              	 
 2274              	 
 2275              	 
 2276 0000 80B4     	 push {r7}
 2277              	.LCFI220:
 2278              	 .cfi_def_cfa_offset 4
 2279              	 .cfi_offset 7,-4
 2280 0002 85B0     	 sub sp,sp,#20
 2281              	.LCFI221:
 2282              	 .cfi_def_cfa_offset 24
 2283 0004 00AF     	 add r7,sp,#0
 2284              	.LCFI222:
 2285              	 .cfi_def_cfa_register 7
 2286 0006 7860     	 str r0,[r7,#4]
 640:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 2287              	 .loc 3 640 0
 2288 0008 7B68     	 ldr r3,[r7,#4]
 2289 000a 1B0F     	 lsrs r3,r3,#28
 2290 000c FB60     	 str r3,[r7,#12]
 641:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 2291              	 .loc 3 641 0
 2292 000e 7B68     	 ldr r3,[r7,#4]
 2293 0010 23F07043 	 bic r3,r3,#-268435456
 2294 0014 BB60     	 str r3,[r7,#8]
 642:../Libraries/XMCLib/src/xmc4_scu.c **** 
 643:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 2295              	 .loc 3 643 0
 2296 0016 FA68     	 ldr r2,[r7,#12]
 2297 0018 1346     	 mov r3,r2
 2298 001a 5B00     	 lsls r3,r3,#1
 2299 001c 1344     	 add r3,r3,r2
 2300 001e 9B00     	 lsls r3,r3,#2
 2301 0020 1A46     	 mov r2,r3
 2302 0022 044B     	 ldr r3,.L155
 2303 0024 1344     	 add r3,r3,r2
 2304 0026 BA68     	 ldr r2,[r7,#8]
 2305 0028 1A60     	 str r2,[r3]
 644:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2306              	 .loc 3 644 0
 2307 002a 1437     	 adds r7,r7,#20
 2308              	.LCFI223:
 2309              	 .cfi_def_cfa_offset 4
 2310 002c BD46     	 mov sp,r7
 2311              	.LCFI224:
 2312              	 .cfi_def_cfa_register 13
 2313              	 
 2314 002e 5DF8047B 	 ldr r7,[sp],#4
 2315              	.LCFI225:
 2316              	 .cfi_restore 7
 2317              	 .cfi_def_cfa_offset 0
 2318 0032 7047     	 bx lr
 2319              	.L156:
 2320              	 .align 2
 2321              	.L155:
 2322 0034 14440050 	 .word 1342194708
 2323              	 .cfi_endproc
 2324              	.LFE195:
 2326              	 .section .text.XMC_SCU_RESET_IsPeripheralResetAsserted,"ax",%progbits
 2327              	 .align 2
 2328              	 .global XMC_SCU_RESET_IsPeripheralResetAsserted
 2329              	 .thumb
 2330              	 .thumb_func
 2332              	XMC_SCU_RESET_IsPeripheralResetAsserted:
 2333              	.LFB196:
 645:../Libraries/XMCLib/src/xmc4_scu.c **** 
 646:../Libraries/XMCLib/src/xmc4_scu.c **** /* Find out if the peripheral reset is asserted */
 647:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
 648:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2334              	 .loc 3 648 0
 2335              	 .cfi_startproc
 2336              	 
 2337              	 
 2338              	 
 2339 0000 80B4     	 push {r7}
 2340              	.LCFI226:
 2341              	 .cfi_def_cfa_offset 4
 2342              	 .cfi_offset 7,-4
 2343 0002 85B0     	 sub sp,sp,#20
 2344              	.LCFI227:
 2345              	 .cfi_def_cfa_offset 24
 2346 0004 00AF     	 add r7,sp,#0
 2347              	.LCFI228:
 2348              	 .cfi_def_cfa_register 7
 2349 0006 7860     	 str r0,[r7,#4]
 649:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 2350              	 .loc 3 649 0
 2351 0008 7B68     	 ldr r3,[r7,#4]
 2352 000a 1B0F     	 lsrs r3,r3,#28
 2353 000c FB60     	 str r3,[r7,#12]
 650:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 2354              	 .loc 3 650 0
 2355 000e 7B68     	 ldr r3,[r7,#4]
 2356 0010 23F07043 	 bic r3,r3,#-268435456
 2357 0014 BB60     	 str r3,[r7,#8]
 651:../Libraries/XMCLib/src/xmc4_scu.c **** 
 652:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 2358              	 .loc 3 652 0
 2359 0016 FA68     	 ldr r2,[r7,#12]
 2360 0018 1346     	 mov r3,r2
 2361 001a 5B00     	 lsls r3,r3,#1
 2362 001c 1344     	 add r3,r3,r2
 2363 001e 9B00     	 lsls r3,r3,#2
 2364 0020 1A46     	 mov r2,r3
 2365 0022 084B     	 ldr r3,.L159
 2366 0024 1344     	 add r3,r3,r2
 2367 0026 1A68     	 ldr r2,[r3]
 2368 0028 BB68     	 ldr r3,[r7,#8]
 2369 002a 1340     	 ands r3,r3,r2
 2370 002c 002B     	 cmp r3,#0
 2371 002e 14BF     	 ite ne
 2372 0030 0123     	 movne r3,#1
 2373 0032 0023     	 moveq r3,#0
 2374 0034 DBB2     	 uxtb r3,r3
 653:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2375              	 .loc 3 653 0
 2376 0036 1846     	 mov r0,r3
 2377 0038 1437     	 adds r7,r7,#20
 2378              	.LCFI229:
 2379              	 .cfi_def_cfa_offset 4
 2380 003a BD46     	 mov sp,r7
 2381              	.LCFI230:
 2382              	 .cfi_def_cfa_register 13
 2383              	 
 2384 003c 5DF8047B 	 ldr r7,[sp],#4
 2385              	.LCFI231:
 2386              	 .cfi_restore 7
 2387              	 .cfi_def_cfa_offset 0
 2388 0040 7047     	 bx lr
 2389              	.L160:
 2390 0042 00BF     	 .align 2
 2391              	.L159:
 2392 0044 0C440050 	 .word 1342194700
 2393              	 .cfi_endproc
 2394              	.LFE196:
 2396              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency,"ax",%progbits
 2397              	 .align 2
 2398              	 .global XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2399              	 .thumb
 2400              	 .thumb_func
 2402              	XMC_SCU_CLOCK_GetSystemPllClockFrequency:
 2403              	.LFB197:
 654:../Libraries/XMCLib/src/xmc4_scu.c **** 
 655:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 656:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL output clock
 657:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 658:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockFrequency(void)
 659:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2404              	 .loc 3 659 0
 2405              	 .cfi_startproc
 2406              	 
 2407              	 
 2408 0000 80B5     	 push {r7,lr}
 2409              	.LCFI232:
 2410              	 .cfi_def_cfa_offset 8
 2411              	 .cfi_offset 7,-8
 2412              	 .cfi_offset 14,-4
 2413 0002 84B0     	 sub sp,sp,#16
 2414              	.LCFI233:
 2415              	 .cfi_def_cfa_offset 24
 2416 0004 00AF     	 add r7,sp,#0
 2417              	.LCFI234:
 2418              	 .cfi_def_cfa_register 7
 660:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 661:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 662:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 663:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t k2_div;
 664:../Libraries/XMCLib/src/xmc4_scu.c **** 
 665:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency();
 2419              	 .loc 3 665 0
 2420 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 2421 000a F860     	 str r0,[r7,#12]
 666:../Libraries/XMCLib/src/xmc4_scu.c ****   if(SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)
 2422              	 .loc 3 666 0
 2423 000c 1A4B     	 ldr r3,.L165
 2424 000e 1B68     	 ldr r3,[r3]
 2425 0010 03F00103 	 and r3,r3,#1
 2426 0014 002B     	 cmp r3,#0
 2427 0016 09D0     	 beq .L162
 667:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 668:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Prescalar mode - fOSC is the parent*/
 669:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)(clock_frequency / 
 670:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_P
 2428              	 .loc 3 670 0
 2429 0018 174B     	 ldr r3,.L165
 2430 001a 9B68     	 ldr r3,[r3,#8]
 2431 001c 03F07F03 	 and r3,r3,#127
 2432 0020 0133     	 adds r3,r3,#1
 669:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_P
 2433              	 .loc 3 669 0
 2434 0022 FA68     	 ldr r2,[r7,#12]
 2435 0024 B2FBF3F3 	 udiv r3,r2,r3
 2436 0028 FB60     	 str r3,[r7,#12]
 2437 002a 1FE0     	 b .L163
 2438              	.L162:
 671:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 672:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 673:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 674:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Po
 2439              	 .loc 3 674 0
 2440 002c 124B     	 ldr r3,.L165
 2441 002e 9B68     	 ldr r3,[r3,#8]
 2442 0030 03F07063 	 and r3,r3,#251658240
 2443 0034 1B0E     	 lsrs r3,r3,#24
 2444 0036 0133     	 adds r3,r3,#1
 2445 0038 BB60     	 str r3,[r7,#8]
 675:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div  = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Po
 2446              	 .loc 3 675 0
 2447 003a 0F4B     	 ldr r3,.L165
 2448 003c 9B68     	 ldr r3,[r3,#8]
 2449 003e 03F4FE43 	 and r3,r3,#32512
 2450 0042 1B0A     	 lsrs r3,r3,#8
 2451 0044 0133     	 adds r3,r3,#1
 2452 0046 7B60     	 str r3,[r7,#4]
 676:../Libraries/XMCLib/src/xmc4_scu.c ****     k2_div = (uint32_t)((((SCU_PLL->PLLCON1) & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_
 2453              	 .loc 3 676 0
 2454 0048 0B4B     	 ldr r3,.L165
 2455 004a 9B68     	 ldr r3,[r3,#8]
 2456 004c 03F4FE03 	 and r3,r3,#8323072
 2457 0050 1B0C     	 lsrs r3,r3,#16
 2458 0052 0133     	 adds r3,r3,#1
 2459 0054 3B60     	 str r3,[r7]
 677:../Libraries/XMCLib/src/xmc4_scu.c ****        
 678:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (clock_frequency * n_div) / (p_div * k2_div);
 2460              	 .loc 3 678 0
 2461 0056 FB68     	 ldr r3,[r7,#12]
 2462 0058 7A68     	 ldr r2,[r7,#4]
 2463 005a 02FB03F2 	 mul r2,r2,r3
 2464 005e BB68     	 ldr r3,[r7,#8]
 2465 0060 3968     	 ldr r1,[r7]
 2466 0062 01FB03F3 	 mul r3,r1,r3
 2467 0066 B2FBF3F3 	 udiv r3,r2,r3
 2468 006a FB60     	 str r3,[r7,#12]
 2469              	.L163:
 679:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 680:../Libraries/XMCLib/src/xmc4_scu.c **** 
 681:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 2470              	 .loc 3 681 0
 2471 006c FB68     	 ldr r3,[r7,#12]
 682:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2472              	 .loc 3 682 0
 2473 006e 1846     	 mov r0,r3
 2474 0070 1037     	 adds r7,r7,#16
 2475              	.LCFI235:
 2476              	 .cfi_def_cfa_offset 8
 2477 0072 BD46     	 mov sp,r7
 2478              	.LCFI236:
 2479              	 .cfi_def_cfa_register 13
 2480              	 
 2481 0074 80BD     	 pop {r7,pc}
 2482              	.L166:
 2483 0076 00BF     	 .align 2
 2484              	.L165:
 2485 0078 10470050 	 .word 1342195472
 2486              	 .cfi_endproc
 2487              	.LFE197:
 2489              	 .section .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency,"ax",%progbits
 2490              	 .align 2
 2491              	 .global XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
 2492              	 .thumb
 2493              	 .thumb_func
 2495              	XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:
 2496              	.LFB198:
 683:../Libraries/XMCLib/src/xmc4_scu.c **** 
 684:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 685:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of System PLL VCO input clock
 686:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 687:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency(void)
 688:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2497              	 .loc 3 688 0
 2498              	 .cfi_startproc
 2499              	 
 2500              	 
 2501 0000 80B5     	 push {r7,lr}
 2502              	.LCFI237:
 2503              	 .cfi_def_cfa_offset 8
 2504              	 .cfi_offset 7,-8
 2505              	 .cfi_offset 14,-4
 2506 0002 82B0     	 sub sp,sp,#8
 2507              	.LCFI238:
 2508              	 .cfi_def_cfa_offset 16
 2509 0004 00AF     	 add r7,sp,#0
 2510              	.LCFI239:
 2511              	 .cfi_def_cfa_register 7
 689:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 690:../Libraries/XMCLib/src/xmc4_scu.c **** 
 691:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Prescalar mode - fOSC is the parent*/
 692:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk) == (uint32_t)XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 2512              	 .loc 3 692 0
 2513 0006 084B     	 ldr r3,.L171
 2514 0008 DB68     	 ldr r3,[r3,#12]
 2515 000a 03F00103 	 and r3,r3,#1
 2516 000e 002B     	 cmp r3,#0
 2517 0010 03D1     	 bne .L168
 693:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 694:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OSCHP_GetFrequency();
 2518              	 .loc 3 694 0
 2519 0012 FFF7FEFF 	 bl OSCHP_GetFrequency
 2520 0016 7860     	 str r0,[r7,#4]
 2521 0018 01E0     	 b .L169
 2522              	.L168:
 695:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 696:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 697:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 698:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = OFI_FREQUENCY;
 2523              	 .loc 3 698 0
 2524 001a 044B     	 ldr r3,.L171+4
 2525 001c 7B60     	 str r3,[r7,#4]
 2526              	.L169:
 699:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 700:../Libraries/XMCLib/src/xmc4_scu.c ****   
 701:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 2527              	 .loc 3 701 0
 2528 001e 7B68     	 ldr r3,[r7,#4]
 702:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2529              	 .loc 3 702 0
 2530 0020 1846     	 mov r0,r3
 2531 0022 0837     	 adds r7,r7,#8
 2532              	.LCFI240:
 2533              	 .cfi_def_cfa_offset 8
 2534 0024 BD46     	 mov sp,r7
 2535              	.LCFI241:
 2536              	 .cfi_def_cfa_register 13
 2537              	 
 2538 0026 80BD     	 pop {r7,pc}
 2539              	.L172:
 2540              	 .align 2
 2541              	.L171:
 2542 0028 10470050 	 .word 1342195472
 2543 002c 00366E01 	 .word 24000000
 2544              	 .cfi_endproc
 2545              	.LFE198:
 2547              	 .section .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency,"ax",%progbits
 2548              	 .align 2
 2549              	 .global XMC_SCU_CLOCK_GetUsbPllClockFrequency
 2550              	 .thumb
 2551              	 .thumb_func
 2553              	XMC_SCU_CLOCK_GetUsbPllClockFrequency:
 2554              	.LFB199:
 703:../Libraries/XMCLib/src/xmc4_scu.c **** 
 704:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 705:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of USB PLL output clock
 706:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 707:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbPllClockFrequency(void)
 708:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2555              	 .loc 3 708 0
 2556              	 .cfi_startproc
 2557              	 
 2558              	 
 2559 0000 80B5     	 push {r7,lr}
 2560              	.LCFI242:
 2561              	 .cfi_def_cfa_offset 8
 2562              	 .cfi_offset 7,-8
 2563              	 .cfi_offset 14,-4
 2564 0002 84B0     	 sub sp,sp,#16
 2565              	.LCFI243:
 2566              	 .cfi_def_cfa_offset 24
 2567 0004 00AF     	 add r7,sp,#0
 2568              	.LCFI244:
 2569              	 .cfi_def_cfa_register 7
 709:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t clock_frequency;
 710:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t n_div;
 711:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t p_div;
 712:../Libraries/XMCLib/src/xmc4_scu.c ****   
 713:../Libraries/XMCLib/src/xmc4_scu.c ****   clock_frequency = OSCHP_GetFrequency();
 2570              	 .loc 3 713 0
 2571 0006 FFF7FEFF 	 bl OSCHP_GetFrequency
 2572 000a F860     	 str r0,[r7,#12]
 714:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 2573              	 .loc 3 714 0
 2574 000c 104B     	 ldr r3,.L176
 2575 000e 1B69     	 ldr r3,[r3,#16]
 2576 0010 03F00103 	 and r3,r3,#1
 2577 0014 002B     	 cmp r3,#0
 2578 0016 16D1     	 bne .L174
 715:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 716:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Normal mode - fVCO is the parent*/
 717:../Libraries/XMCLib/src/xmc4_scu.c ****     n_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_NDIV_Msk) >> SCU_PLL_USBPLLCON_ND
 2579              	 .loc 3 717 0
 2580 0018 0D4B     	 ldr r3,.L176
 2581 001a 5B69     	 ldr r3,[r3,#20]
 2582 001c 03F4FE43 	 and r3,r3,#32512
 2583 0020 1B0A     	 lsrs r3,r3,#8
 2584 0022 0133     	 adds r3,r3,#1
 2585 0024 BB60     	 str r3,[r7,#8]
 718:../Libraries/XMCLib/src/xmc4_scu.c ****     p_div = (uint32_t)((((SCU_PLL->USBPLLCON) & SCU_PLL_USBPLLCON_PDIV_Msk) >> SCU_PLL_USBPLLCON_PD
 2586              	 .loc 3 718 0
 2587 0026 0A4B     	 ldr r3,.L176
 2588 0028 5B69     	 ldr r3,[r3,#20]
 2589 002a 03F07063 	 and r3,r3,#251658240
 2590 002e 1B0E     	 lsrs r3,r3,#24
 2591 0030 0133     	 adds r3,r3,#1
 2592 0032 7B60     	 str r3,[r7,#4]
 719:../Libraries/XMCLib/src/xmc4_scu.c ****     clock_frequency = (uint32_t)((clock_frequency * n_div)/ (uint32_t)(p_div * 2UL));
 2593              	 .loc 3 719 0
 2594 0034 FB68     	 ldr r3,[r7,#12]
 2595 0036 BA68     	 ldr r2,[r7,#8]
 2596 0038 02FB03F2 	 mul r2,r2,r3
 2597 003c 7B68     	 ldr r3,[r7,#4]
 2598 003e 5B00     	 lsls r3,r3,#1
 2599 0040 B2FBF3F3 	 udiv r3,r2,r3
 2600 0044 FB60     	 str r3,[r7,#12]
 2601              	.L174:
 720:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 721:../Libraries/XMCLib/src/xmc4_scu.c ****   return (clock_frequency);
 2602              	 .loc 3 721 0
 2603 0046 FB68     	 ldr r3,[r7,#12]
 722:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2604              	 .loc 3 722 0
 2605 0048 1846     	 mov r0,r3
 2606 004a 1037     	 adds r7,r7,#16
 2607              	.LCFI245:
 2608              	 .cfi_def_cfa_offset 8
 2609 004c BD46     	 mov sp,r7
 2610              	.LCFI246:
 2611              	 .cfi_def_cfa_register 13
 2612              	 
 2613 004e 80BD     	 pop {r7,pc}
 2614              	.L177:
 2615              	 .align 2
 2616              	.L176:
 2617 0050 10470050 	 .word 1342195472
 2618              	 .cfi_endproc
 2619              	.LFE199:
 2621              	 .section .text.XMC_SCU_CLOCK_GetCcuClockFrequency,"ax",%progbits
 2622              	 .align 2
 2623              	 .global XMC_SCU_CLOCK_GetCcuClockFrequency
 2624              	 .thumb
 2625              	 .thumb_func
 2627              	XMC_SCU_CLOCK_GetCcuClockFrequency:
 2628              	.LFB200:
 723:../Libraries/XMCLib/src/xmc4_scu.c **** 
 724:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 725:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve frequency of CCU clock frequency
 726:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 727:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetCcuClockFrequency(void)
 728:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2629              	 .loc 3 728 0
 2630              	 .cfi_startproc
 2631              	 
 2632              	 
 2633 0000 80B5     	 push {r7,lr}
 2634              	.LCFI247:
 2635              	 .cfi_def_cfa_offset 8
 2636              	 .cfi_offset 7,-8
 2637              	 .cfi_offset 14,-4
 2638 0002 82B0     	 sub sp,sp,#8
 2639              	.LCFI248:
 2640              	 .cfi_def_cfa_offset 16
 2641 0004 00AF     	 add r7,sp,#0
 2642              	.LCFI249:
 2643              	 .cfi_def_cfa_register 7
 729:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2644              	 .loc 3 729 0
 2645 0006 0023     	 movs r3,#0
 2646 0008 7B60     	 str r3,[r7,#4]
 730:../Libraries/XMCLib/src/xmc4_scu.c ****   frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 2647              	 .loc 3 730 0
 2648 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2649 000e 7860     	 str r0,[r7,#4]
 731:../Libraries/XMCLib/src/xmc4_scu.c ****   
 732:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency >> ((uint32_t)((SCU_CLK->CCUCLKCR & SCU_CLK_CCUCLKCR_CCUDIV_Msk) >>
 2650              	 .loc 3 732 0
 2651 0010 054B     	 ldr r3,.L180
 2652 0012 1B6A     	 ldr r3,[r3,#32]
 2653 0014 03F00103 	 and r3,r3,#1
 2654 0018 7A68     	 ldr r2,[r7,#4]
 2655 001a 22FA03F3 	 lsr r3,r2,r3
 733:../Libraries/XMCLib/src/xmc4_scu.c ****                                               SCU_CLK_CCUCLKCR_CCUDIV_Pos)));
 734:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2656              	 .loc 3 734 0
 2657 001e 1846     	 mov r0,r3
 2658 0020 0837     	 adds r7,r7,#8
 2659              	.LCFI250:
 2660              	 .cfi_def_cfa_offset 8
 2661 0022 BD46     	 mov sp,r7
 2662              	.LCFI251:
 2663              	 .cfi_def_cfa_register 13
 2664              	 
 2665 0024 80BD     	 pop {r7,pc}
 2666              	.L181:
 2667 0026 00BF     	 .align 2
 2668              	.L180:
 2669 0028 00460050 	 .word 1342195200
 2670              	 .cfi_endproc
 2671              	.LFE200:
 2673              	 .section .text.XMC_SCU_CLOCK_GetUsbClockFrequency,"ax",%progbits
 2674              	 .align 2
 2675              	 .global XMC_SCU_CLOCK_GetUsbClockFrequency
 2676              	 .thumb
 2677              	 .thumb_func
 2679              	XMC_SCU_CLOCK_GetUsbClockFrequency:
 2680              	.LFB201:
 735:../Libraries/XMCLib/src/xmc4_scu.c **** 
 736:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 737:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve USB and SDMMC clock frequency
 738:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 739:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetUsbClockFrequency(void)
 740:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2681              	 .loc 3 740 0
 2682              	 .cfi_startproc
 2683              	 
 2684              	 
 2685 0000 80B5     	 push {r7,lr}
 2686              	.LCFI252:
 2687              	 .cfi_def_cfa_offset 8
 2688              	 .cfi_offset 7,-8
 2689              	 .cfi_offset 14,-4
 2690 0002 82B0     	 sub sp,sp,#8
 2691              	.LCFI253:
 2692              	 .cfi_def_cfa_offset 16
 2693 0004 00AF     	 add r7,sp,#0
 2694              	.LCFI254:
 2695              	 .cfi_def_cfa_register 7
 741:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2696              	 .loc 3 741 0
 2697 0006 0023     	 movs r3,#0
 2698 0008 7B60     	 str r3,[r7,#4]
 742:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_USBCLKSRC_t clksrc;
 743:../Libraries/XMCLib/src/xmc4_scu.c **** 
 744:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetUsbClockSource();
 2699              	 .loc 3 744 0
 2700 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbClockSource
 2701 000e 3860     	 str r0,[r7]
 745:../Libraries/XMCLib/src/xmc4_scu.c **** 
 746:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_SYSPLL)
 2702              	 .loc 3 746 0
 2703 0010 3B68     	 ldr r3,[r7]
 2704 0012 B3F5803F 	 cmp r3,#65536
 2705 0016 03D1     	 bne .L183
 747:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 748:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2706              	 .loc 3 748 0
 2707 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2708 001c 7860     	 str r0,[r7,#4]
 2709 001e 05E0     	 b .L184
 2710              	.L183:
 749:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 750:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_USBCLKSRC_USBPLL)
 2711              	 .loc 3 750 0
 2712 0020 3B68     	 ldr r3,[r7]
 2713 0022 002B     	 cmp r3,#0
 2714 0024 02D1     	 bne .L184
 751:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 752:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 2715              	 .loc 3 752 0
 2716 0026 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 2717 002a 7860     	 str r0,[r7,#4]
 2718              	.L184:
 753:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 754:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 755:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 756:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 757:../Libraries/XMCLib/src/xmc4_scu.c **** 
 758:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(frequency / (((SCU_CLK->USBCLKCR & SCU_CLK_USBCLKCR_USBDIV_Msk) >>
 2719              	 .loc 3 758 0
 2720 002c 054B     	 ldr r3,.L186
 2721 002e 9B69     	 ldr r3,[r3,#24]
 2722 0030 03F00703 	 and r3,r3,#7
 759:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 2723              	 .loc 3 759 0
 2724 0034 0133     	 adds r3,r3,#1
 758:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_USBCLKCR_USBDIV_Pos) + 1UL));
 2725              	 .loc 3 758 0
 2726 0036 7A68     	 ldr r2,[r7,#4]
 2727 0038 B2FBF3F3 	 udiv r3,r2,r3
 760:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2728              	 .loc 3 760 0
 2729 003c 1846     	 mov r0,r3
 2730 003e 0837     	 adds r7,r7,#8
 2731              	.LCFI255:
 2732              	 .cfi_def_cfa_offset 8
 2733 0040 BD46     	 mov sp,r7
 2734              	.LCFI256:
 2735              	 .cfi_def_cfa_register 13
 2736              	 
 2737 0042 80BD     	 pop {r7,pc}
 2738              	.L187:
 2739              	 .align 2
 2740              	.L186:
 2741 0044 00460050 	 .word 1342195200
 2742              	 .cfi_endproc
 2743              	.LFE201:
 2745              	 .section .text.XMC_SCU_CLOCK_GetEbuClockFrequency,"ax",%progbits
 2746              	 .align 2
 2747              	 .global XMC_SCU_CLOCK_GetEbuClockFrequency
 2748              	 .thumb
 2749              	 .thumb_func
 2751              	XMC_SCU_CLOCK_GetEbuClockFrequency:
 2752              	.LFB202:
 761:../Libraries/XMCLib/src/xmc4_scu.c **** 
 762:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
 763:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 764:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve EBU clock frequency
 765:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 766:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetEbuClockFrequency(void)
 767:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2753              	 .loc 3 767 0
 2754              	 .cfi_startproc
 2755              	 
 2756              	 
 2757 0000 80B5     	 push {r7,lr}
 2758              	.LCFI257:
 2759              	 .cfi_def_cfa_offset 8
 2760              	 .cfi_offset 7,-8
 2761              	 .cfi_offset 14,-4
 2762 0002 82B0     	 sub sp,sp,#8
 2763              	.LCFI258:
 2764              	 .cfi_def_cfa_offset 16
 2765 0004 00AF     	 add r7,sp,#0
 2766              	.LCFI259:
 2767              	 .cfi_def_cfa_register 7
 768:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2768              	 .loc 3 768 0
 2769 0006 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2770 000a 7860     	 str r0,[r7,#4]
 769:../Libraries/XMCLib/src/xmc4_scu.c ****   
 770:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency /(((SCU_CLK->EBUCLKCR & SCU_CLK_EBUCLKCR_EBUDIV_Msk) >>
 2771              	 .loc 3 770 0
 2772 000c 054B     	 ldr r3,.L190
 2773 000e DB69     	 ldr r3,[r3,#28]
 2774 0010 03F03F03 	 and r3,r3,#63
 771:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 2775              	 .loc 3 771 0
 2776 0014 0133     	 adds r3,r3,#1
 770:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_CLK_EBUCLKCR_EBUDIV_Pos) + 1UL)));
 2777              	 .loc 3 770 0
 2778 0016 7A68     	 ldr r2,[r7,#4]
 2779 0018 B2FBF3F3 	 udiv r3,r2,r3
 772:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2780              	 .loc 3 772 0
 2781 001c 1846     	 mov r0,r3
 2782 001e 0837     	 adds r7,r7,#8
 2783              	.LCFI260:
 2784              	 .cfi_def_cfa_offset 8
 2785 0020 BD46     	 mov sp,r7
 2786              	.LCFI261:
 2787              	 .cfi_def_cfa_register 13
 2788              	 
 2789 0022 80BD     	 pop {r7,pc}
 2790              	.L191:
 2791              	 .align 2
 2792              	.L190:
 2793 0024 00460050 	 .word 1342195200
 2794              	 .cfi_endproc
 2795              	.LFE202:
 2797              	 .section .text.XMC_SCU_CLOCK_GetWdtClockFrequency,"ax",%progbits
 2798              	 .align 2
 2799              	 .global XMC_SCU_CLOCK_GetWdtClockFrequency
 2800              	 .thumb
 2801              	 .thumb_func
 2803              	XMC_SCU_CLOCK_GetWdtClockFrequency:
 2804              	.LFB203:
 773:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 774:../Libraries/XMCLib/src/xmc4_scu.c **** 
 775:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
 776:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 777:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve ECAT clock frequency
 778:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 779:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetECATClockFrequency(void)
 780:../Libraries/XMCLib/src/xmc4_scu.c **** {
 781:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency;
 782:../Libraries/XMCLib/src/xmc4_scu.c **** 
 783:../Libraries/XMCLib/src/xmc4_scu.c ****   if ((SCU_CLK->ECATCLKCR & SCU_CLK_ECATCLKCR_ECATSEL_Msk) != 0U)
 784:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 785:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 786:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 787:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 788:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 789:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency =  XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 790:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 791:../Libraries/XMCLib/src/xmc4_scu.c **** 
 792:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (XMC_SCU_CLOCK_GetECATClockDivider() + 1UL)));
 793:../Libraries/XMCLib/src/xmc4_scu.c **** }
 794:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 795:../Libraries/XMCLib/src/xmc4_scu.c **** 
 796:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 797:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve WDT clock frequency
 798:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 799:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetWdtClockFrequency(void)
 800:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2805              	 .loc 3 800 0
 2806              	 .cfi_startproc
 2807              	 
 2808              	 
 2809 0000 80B5     	 push {r7,lr}
 2810              	.LCFI262:
 2811              	 .cfi_def_cfa_offset 8
 2812              	 .cfi_offset 7,-8
 2813              	 .cfi_offset 14,-4
 2814 0002 82B0     	 sub sp,sp,#8
 2815              	.LCFI263:
 2816              	 .cfi_def_cfa_offset 16
 2817 0004 00AF     	 add r7,sp,#0
 2818              	.LCFI264:
 2819              	 .cfi_def_cfa_register 7
 801:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2820              	 .loc 3 801 0
 2821 0006 0023     	 movs r3,#0
 2822 0008 7B60     	 str r3,[r7,#4]
 802:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_WDTCLKSRC_t clksrc;
 803:../Libraries/XMCLib/src/xmc4_scu.c **** 
 804:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetWdtClockSource();
 2823              	 .loc 3 804 0
 2824 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetWdtClockSource
 2825 000e 3860     	 str r0,[r7]
 805:../Libraries/XMCLib/src/xmc4_scu.c **** 
 806:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_PLL)
 2826              	 .loc 3 806 0
 2827 0010 3B68     	 ldr r3,[r7]
 2828 0012 B3F5003F 	 cmp r3,#131072
 2829 0016 03D1     	 bne .L193
 807:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 808:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2830              	 .loc 3 808 0
 2831 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2832 001c 7860     	 str r0,[r7,#4]
 2833 001e 0CE0     	 b .L194
 2834              	.L193:
 809:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 810:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_OFI)
 2835              	 .loc 3 810 0
 2836 0020 3B68     	 ldr r3,[r7]
 2837 0022 002B     	 cmp r3,#0
 2838 0024 02D1     	 bne .L195
 811:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 812:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OFI_FREQUENCY;
 2839              	 .loc 3 812 0
 2840 0026 0A4B     	 ldr r3,.L197
 2841 0028 7B60     	 str r3,[r7,#4]
 2842 002a 06E0     	 b .L194
 2843              	.L195:
 813:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 814:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_WDTCLKSRC_STDBY)
 2844              	 .loc 3 814 0
 2845 002c 3B68     	 ldr r3,[r7]
 2846 002e B3F5803F 	 cmp r3,#65536
 2847 0032 02D1     	 bne .L194
 815:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 816:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = OSI_FREQUENCY;
 2848              	 .loc 3 816 0
 2849 0034 4FF40043 	 mov r3,#32768
 2850 0038 7B60     	 str r3,[r7,#4]
 2851              	.L194:
 817:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 818:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 819:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 820:../Libraries/XMCLib/src/xmc4_scu.c **** 
 821:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 822:../Libraries/XMCLib/src/xmc4_scu.c **** 
 823:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)((frequency / (((SCU_CLK->WDTCLKCR & SCU_CLK_WDTCLKCR_WDTDIV_Msk) >>
 2852              	 .loc 3 823 0
 2853 003a 064B     	 ldr r3,.L197+4
 2854 003c 5B6A     	 ldr r3,[r3,#36]
 2855 003e DBB2     	 uxtb r3,r3
 824:../Libraries/XMCLib/src/xmc4_scu.c ****                                     SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 2856              	 .loc 3 824 0
 2857 0040 0133     	 adds r3,r3,#1
 823:../Libraries/XMCLib/src/xmc4_scu.c ****                                     SCU_CLK_WDTCLKCR_WDTDIV_Pos) + 1UL)));
 2858              	 .loc 3 823 0
 2859 0042 7A68     	 ldr r2,[r7,#4]
 2860 0044 B2FBF3F3 	 udiv r3,r2,r3
 825:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2861              	 .loc 3 825 0
 2862 0048 1846     	 mov r0,r3
 2863 004a 0837     	 adds r7,r7,#8
 2864              	.LCFI265:
 2865              	 .cfi_def_cfa_offset 8
 2866 004c BD46     	 mov sp,r7
 2867              	.LCFI266:
 2868              	 .cfi_def_cfa_register 13
 2869              	 
 2870 004e 80BD     	 pop {r7,pc}
 2871              	.L198:
 2872              	 .align 2
 2873              	.L197:
 2874 0050 00366E01 	 .word 24000000
 2875 0054 00460050 	 .word 1342195200
 2876              	 .cfi_endproc
 2877              	.LFE203:
 2879              	 .section .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency,"ax",%progbits
 2880              	 .align 2
 2881              	 .global XMC_SCU_CLOCK_GetExternalOutputClockFrequency
 2882              	 .thumb
 2883              	 .thumb_func
 2885              	XMC_SCU_CLOCK_GetExternalOutputClockFrequency:
 2886              	.LFB204:
 826:../Libraries/XMCLib/src/xmc4_scu.c **** 
 827:../Libraries/XMCLib/src/xmc4_scu.c **** /**
 828:../Libraries/XMCLib/src/xmc4_scu.c ****  * @brief API to retrieve EXTERNAL-OUT clock frequency
 829:../Libraries/XMCLib/src/xmc4_scu.c ****  * @retval Clock frequency
 830:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 831:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetExternalOutputClockFrequency(void)
 832:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2887              	 .loc 3 832 0
 2888              	 .cfi_startproc
 2889              	 
 2890              	 
 2891 0000 80B5     	 push {r7,lr}
 2892              	.LCFI267:
 2893              	 .cfi_def_cfa_offset 8
 2894              	 .cfi_offset 7,-8
 2895              	 .cfi_offset 14,-4
 2896 0002 82B0     	 sub sp,sp,#8
 2897              	.LCFI268:
 2898              	 .cfi_def_cfa_offset 16
 2899 0004 00AF     	 add r7,sp,#0
 2900              	.LCFI269:
 2901              	 .cfi_def_cfa_register 7
 833:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t frequency = 0UL;
 2902              	 .loc 3 833 0
 2903 0006 0023     	 movs r3,#0
 2904 0008 7B60     	 str r3,[r7,#4]
 834:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_EXTOUTCLKSRC_t clksrc;
 835:../Libraries/XMCLib/src/xmc4_scu.c **** 
 836:../Libraries/XMCLib/src/xmc4_scu.c ****   clksrc = XMC_SCU_CLOCK_GetExternalOutputClockSource();
 2905              	 .loc 3 836 0
 2906 000a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetExternalOutputClockSource
 2907 000e 0346     	 mov r3,r0
 2908 0010 FB70     	 strb r3,[r7,#3]
 837:../Libraries/XMCLib/src/xmc4_scu.c **** 
 838:../Libraries/XMCLib/src/xmc4_scu.c ****   if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_PLL)
 2909              	 .loc 3 838 0
 2910 0012 FB78     	 ldrb r3,[r7,#3]
 2911 0014 032B     	 cmp r3,#3
 2912 0016 0DD1     	 bne .L200
 839:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 840:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemPllClockFrequency();
 2913              	 .loc 3 840 0
 2914 0018 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemPllClockFrequency
 2915 001c 7860     	 str r0,[r7,#4]
 841:../Libraries/XMCLib/src/xmc4_scu.c ****     
 842:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 2916              	 .loc 3 842 0
 2917 001e 134B     	 ldr r3,.L204
 2918 0020 9A6A     	 ldr r2,[r3,#40]
 2919 0022 134B     	 ldr r3,.L204+4
 2920 0024 1340     	 ands r3,r3,r2
 2921 0026 1B0C     	 lsrs r3,r3,#16
 843:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 2922              	 .loc 3 843 0
 2923 0028 0133     	 adds r3,r3,#1
 842:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 2924              	 .loc 3 842 0
 2925 002a 7A68     	 ldr r2,[r7,#4]
 2926 002c B2FBF3F3 	 udiv r3,r2,r3
 2927 0030 7B60     	 str r3,[r7,#4]
 2928 0032 16E0     	 b .L201
 2929              	.L200:
 844:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 845:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_SYS)
 2930              	 .loc 3 845 0
 2931 0034 FB78     	 ldrb r3,[r7,#3]
 2932 0036 002B     	 cmp r3,#0
 2933 0038 03D1     	 bne .L202
 846:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 847:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetSystemClockFrequency();
 2934              	 .loc 3 847 0
 2935 003a FFF7FEFF 	 bl XMC_SCU_CLOCK_GetSystemClockFrequency
 2936 003e 7860     	 str r0,[r7,#4]
 2937 0040 0FE0     	 b .L201
 2938              	.L202:
 848:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 849:../Libraries/XMCLib/src/xmc4_scu.c ****   else if (clksrc == XMC_SCU_CLOCK_EXTOUTCLKSRC_USB)
 2939              	 .loc 3 849 0
 2940 0042 FB78     	 ldrb r3,[r7,#3]
 2941 0044 022B     	 cmp r3,#2
 2942 0046 0CD1     	 bne .L201
 850:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 851:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = XMC_SCU_CLOCK_GetUsbPllClockFrequency();
 2943              	 .loc 3 851 0
 2944 0048 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetUsbPllClockFrequency
 2945 004c 7860     	 str r0,[r7,#4]
 852:../Libraries/XMCLib/src/xmc4_scu.c ****     
 853:../Libraries/XMCLib/src/xmc4_scu.c ****     frequency = (uint32_t)((frequency / ((((SCU_CLK->EXTCLKCR) & SCU_CLK_EXTCLKCR_ECKDIV_Msk) >>
 2946              	 .loc 3 853 0
 2947 004e 074B     	 ldr r3,.L204
 2948 0050 9A6A     	 ldr r2,[r3,#40]
 2949 0052 074B     	 ldr r3,.L204+4
 2950 0054 1340     	 ands r3,r3,r2
 2951 0056 1B0C     	 lsrs r3,r3,#16
 854:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 2952              	 .loc 3 854 0
 2953 0058 0133     	 adds r3,r3,#1
 853:../Libraries/XMCLib/src/xmc4_scu.c ****                  SCU_CLK_EXTCLKCR_ECKDIV_Pos)+ 1UL)));
 2954              	 .loc 3 853 0
 2955 005a 7A68     	 ldr r2,[r7,#4]
 2956 005c B2FBF3F3 	 udiv r3,r2,r3
 2957 0060 7B60     	 str r3,[r7,#4]
 2958              	.L201:
 855:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 856:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 857:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 858:../Libraries/XMCLib/src/xmc4_scu.c **** 
 859:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 860:../Libraries/XMCLib/src/xmc4_scu.c **** 
 861:../Libraries/XMCLib/src/xmc4_scu.c ****   return (frequency);
 2959              	 .loc 3 861 0
 2960 0062 7B68     	 ldr r3,[r7,#4]
 862:../Libraries/XMCLib/src/xmc4_scu.c **** }
 2961              	 .loc 3 862 0
 2962 0064 1846     	 mov r0,r3
 2963 0066 0837     	 adds r7,r7,#8
 2964              	.LCFI270:
 2965              	 .cfi_def_cfa_offset 8
 2966 0068 BD46     	 mov sp,r7
 2967              	.LCFI271:
 2968              	 .cfi_def_cfa_register 13
 2969              	 
 2970 006a 80BD     	 pop {r7,pc}
 2971              	.L205:
 2972              	 .align 2
 2973              	.L204:
 2974 006c 00460050 	 .word 1342195200
 2975 0070 0000FF01 	 .word 33488896
 2976              	 .cfi_endproc
 2977              	.LFE204:
 2979              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 2980              	 .align 2
 2981              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 2982              	 .thumb
 2983              	 .thumb_func
 2985              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 2986              	.LFB205:
 863:../Libraries/XMCLib/src/xmc4_scu.c **** 
 864:../Libraries/XMCLib/src/xmc4_scu.c **** /*
 865:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 866:../Libraries/XMCLib/src/xmc4_scu.c ****  */
 867:../Libraries/XMCLib/src/xmc4_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 868:../Libraries/XMCLib/src/xmc4_scu.c **** {
 2987              	 .loc 3 868 0
 2988              	 .cfi_startproc
 2989              	 
 2990              	 
 2991 0000 80B5     	 push {r7,lr}
 2992              	.LCFI272:
 2993              	 .cfi_def_cfa_offset 8
 2994              	 .cfi_offset 7,-8
 2995              	 .cfi_offset 14,-4
 2996 0002 00AF     	 add r7,sp,#0
 2997              	.LCFI273:
 2998              	 .cfi_def_cfa_register 7
 869:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 2999              	 .loc 3 869 0
 3000 0004 FFF7FEFF 	 bl XMC_SCU_CLOCK_GetCpuClockFrequency
 3001 0008 0246     	 mov r2,r0
 870:../Libraries/XMCLib/src/xmc4_scu.c ****          ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 3002              	 .loc 3 870 0
 3003 000a 044B     	 ldr r3,.L208
 3004 000c 5B69     	 ldr r3,[r3,#20]
 869:../Libraries/XMCLib/src/xmc4_scu.c ****   return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 3005              	 .loc 3 869 0
 3006 000e 03F00103 	 and r3,r3,#1
 3007 0012 22FA03F3 	 lsr r3,r2,r3
 871:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3008              	 .loc 3 871 0
 3009 0016 1846     	 mov r0,r3
 3010 0018 80BD     	 pop {r7,pc}
 3011              	.L209:
 3012 001a 00BF     	 .align 2
 3013              	.L208:
 3014 001c 00460050 	 .word 1342195200
 3015              	 .cfi_endproc
 3016              	.LFE205:
 3018              	 .section .text.XMC_SCU_CLOCK_SetSystemClockSource,"ax",%progbits
 3019              	 .align 2
 3020              	 .global XMC_SCU_CLOCK_SetSystemClockSource
 3021              	 .thumb
 3022              	 .thumb_func
 3024              	XMC_SCU_CLOCK_SetSystemClockSource:
 3025              	.LFB206:
 872:../Libraries/XMCLib/src/xmc4_scu.c **** 
 873:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSYS */
 874:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
 875:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3026              	 .loc 3 875 0
 3027              	 .cfi_startproc
 3028              	 
 3029              	 
 3030              	 
 3031 0000 80B4     	 push {r7}
 3032              	.LCFI274:
 3033              	 .cfi_def_cfa_offset 4
 3034              	 .cfi_offset 7,-4
 3035 0002 83B0     	 sub sp,sp,#12
 3036              	.LCFI275:
 3037              	 .cfi_def_cfa_offset 16
 3038 0004 00AF     	 add r7,sp,#0
 3039              	.LCFI276:
 3040              	 .cfi_def_cfa_register 7
 3041 0006 7860     	 str r0,[r7,#4]
 876:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 3042              	 .loc 3 876 0
 3043 0008 0649     	 ldr r1,.L211
 3044 000a 064B     	 ldr r3,.L211
 3045 000c DB68     	 ldr r3,[r3,#12]
 3046 000e 23F48032 	 bic r2,r3,#65536
 3047 0012 7B68     	 ldr r3,[r7,#4]
 3048 0014 1343     	 orrs r3,r3,r2
 3049 0016 CB60     	 str r3,[r1,#12]
 877:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 878:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3050              	 .loc 3 878 0
 3051 0018 0C37     	 adds r7,r7,#12
 3052              	.LCFI277:
 3053              	 .cfi_def_cfa_offset 4
 3054 001a BD46     	 mov sp,r7
 3055              	.LCFI278:
 3056              	 .cfi_def_cfa_register 13
 3057              	 
 3058 001c 5DF8047B 	 ldr r7,[sp],#4
 3059              	.LCFI279:
 3060              	 .cfi_restore 7
 3061              	 .cfi_def_cfa_offset 0
 3062 0020 7047     	 bx lr
 3063              	.L212:
 3064 0022 00BF     	 .align 2
 3065              	.L211:
 3066 0024 00460050 	 .word 1342195200
 3067              	 .cfi_endproc
 3068              	.LFE206:
 3070              	 .section .text.XMC_SCU_CLOCK_SetUsbClockSource,"ax",%progbits
 3071              	 .align 2
 3072              	 .global XMC_SCU_CLOCK_SetUsbClockSource
 3073              	 .thumb
 3074              	 .thumb_func
 3076              	XMC_SCU_CLOCK_SetUsbClockSource:
 3077              	.LFB207:
 879:../Libraries/XMCLib/src/xmc4_scu.c **** 
 880:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fUSB */
 881:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
 882:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3078              	 .loc 3 882 0
 3079              	 .cfi_startproc
 3080              	 
 3081              	 
 3082              	 
 3083 0000 80B4     	 push {r7}
 3084              	.LCFI280:
 3085              	 .cfi_def_cfa_offset 4
 3086              	 .cfi_offset 7,-4
 3087 0002 83B0     	 sub sp,sp,#12
 3088              	.LCFI281:
 3089              	 .cfi_def_cfa_offset 16
 3090 0004 00AF     	 add r7,sp,#0
 3091              	.LCFI282:
 3092              	 .cfi_def_cfa_register 7
 3093 0006 7860     	 str r0,[r7,#4]
 883:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 3094              	 .loc 3 883 0
 3095 0008 0649     	 ldr r1,.L214
 3096 000a 064B     	 ldr r3,.L214
 3097 000c 9B69     	 ldr r3,[r3,#24]
 3098 000e 23F48032 	 bic r2,r3,#65536
 3099 0012 7B68     	 ldr r3,[r7,#4]
 3100 0014 1343     	 orrs r3,r3,r2
 3101 0016 8B61     	 str r3,[r1,#24]
 884:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 885:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3102              	 .loc 3 885 0
 3103 0018 0C37     	 adds r7,r7,#12
 3104              	.LCFI283:
 3105              	 .cfi_def_cfa_offset 4
 3106 001a BD46     	 mov sp,r7
 3107              	.LCFI284:
 3108              	 .cfi_def_cfa_register 13
 3109              	 
 3110 001c 5DF8047B 	 ldr r7,[sp],#4
 3111              	.LCFI285:
 3112              	 .cfi_restore 7
 3113              	 .cfi_def_cfa_offset 0
 3114 0020 7047     	 bx lr
 3115              	.L215:
 3116 0022 00BF     	 .align 2
 3117              	.L214:
 3118 0024 00460050 	 .word 1342195200
 3119              	 .cfi_endproc
 3120              	.LFE207:
 3122              	 .section .text.XMC_SCU_CLOCK_SetWdtClockSource,"ax",%progbits
 3123              	 .align 2
 3124              	 .global XMC_SCU_CLOCK_SetWdtClockSource
 3125              	 .thumb
 3126              	 .thumb_func
 3128              	XMC_SCU_CLOCK_SetWdtClockSource:
 3129              	.LFB208:
 886:../Libraries/XMCLib/src/xmc4_scu.c **** 
 887:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fWDT */
 888:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
 889:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3130              	 .loc 3 889 0
 3131              	 .cfi_startproc
 3132              	 
 3133              	 
 3134              	 
 3135 0000 80B4     	 push {r7}
 3136              	.LCFI286:
 3137              	 .cfi_def_cfa_offset 4
 3138              	 .cfi_offset 7,-4
 3139 0002 83B0     	 sub sp,sp,#12
 3140              	.LCFI287:
 3141              	 .cfi_def_cfa_offset 16
 3142 0004 00AF     	 add r7,sp,#0
 3143              	.LCFI288:
 3144              	 .cfi_def_cfa_register 7
 3145 0006 7860     	 str r0,[r7,#4]
 890:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 3146              	 .loc 3 890 0
 3147 0008 0649     	 ldr r1,.L217
 3148 000a 064B     	 ldr r3,.L217
 3149 000c 5B6A     	 ldr r3,[r3,#36]
 3150 000e 23F44032 	 bic r2,r3,#196608
 3151 0012 7B68     	 ldr r3,[r7,#4]
 3152 0014 1343     	 orrs r3,r3,r2
 3153 0016 4B62     	 str r3,[r1,#36]
 891:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 892:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3154              	 .loc 3 892 0
 3155 0018 0C37     	 adds r7,r7,#12
 3156              	.LCFI289:
 3157              	 .cfi_def_cfa_offset 4
 3158 001a BD46     	 mov sp,r7
 3159              	.LCFI290:
 3160              	 .cfi_def_cfa_register 13
 3161              	 
 3162 001c 5DF8047B 	 ldr r7,[sp],#4
 3163              	.LCFI291:
 3164              	 .cfi_restore 7
 3165              	 .cfi_def_cfa_offset 0
 3166 0020 7047     	 bx lr
 3167              	.L218:
 3168 0022 00BF     	 .align 2
 3169              	.L217:
 3170 0024 00460050 	 .word 1342195200
 3171              	 .cfi_endproc
 3172              	.LFE208:
 3174              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockSource,"ax",%progbits
 3175              	 .align 2
 3176              	 .global XMC_SCU_CLOCK_SetExternalOutputClockSource
 3177              	 .thumb
 3178              	 .thumb_func
 3180              	XMC_SCU_CLOCK_SetExternalOutputClockSource:
 3181              	.LFB209:
 893:../Libraries/XMCLib/src/xmc4_scu.c **** 
 894:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fEXT */
 895:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockSource(const XMC_SCU_CLOCK_EXTOUTCLKSRC_t source)
 896:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3182              	 .loc 3 896 0
 3183              	 .cfi_startproc
 3184              	 
 3185              	 
 3186              	 
 3187 0000 80B4     	 push {r7}
 3188              	.LCFI292:
 3189              	 .cfi_def_cfa_offset 4
 3190              	 .cfi_offset 7,-4
 3191 0002 83B0     	 sub sp,sp,#12
 3192              	.LCFI293:
 3193              	 .cfi_def_cfa_offset 16
 3194 0004 00AF     	 add r7,sp,#0
 3195              	.LCFI294:
 3196              	 .cfi_def_cfa_register 7
 3197 0006 0346     	 mov r3,r0
 3198 0008 FB71     	 strb r3,[r7,#7]
 897:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 3199              	 .loc 3 897 0
 3200 000a 0649     	 ldr r1,.L220
 3201 000c 054B     	 ldr r3,.L220
 3202 000e 9B6A     	 ldr r3,[r3,#40]
 3203 0010 23F00302 	 bic r2,r3,#3
 898:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)source);
 3204              	 .loc 3 898 0
 3205 0014 FB79     	 ldrb r3,[r7,#7]
 897:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKSEL_Msk)) |
 3206              	 .loc 3 897 0
 3207 0016 1343     	 orrs r3,r3,r2
 3208 0018 8B62     	 str r3,[r1,#40]
 899:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3209              	 .loc 3 899 0
 3210 001a 0C37     	 adds r7,r7,#12
 3211              	.LCFI295:
 3212              	 .cfi_def_cfa_offset 4
 3213 001c BD46     	 mov sp,r7
 3214              	.LCFI296:
 3215              	 .cfi_def_cfa_register 13
 3216              	 
 3217 001e 5DF8047B 	 ldr r7,[sp],#4
 3218              	.LCFI297:
 3219              	 .cfi_restore 7
 3220              	 .cfi_def_cfa_offset 0
 3221 0022 7047     	 bx lr
 3222              	.L221:
 3223              	 .align 2
 3224              	.L220:
 3225 0024 00460050 	 .word 1342195200
 3226              	 .cfi_endproc
 3227              	.LFE209:
 3229              	 .section .text.XMC_SCU_CLOCK_SetSystemPllClockSource,"ax",%progbits
 3230              	 .align 2
 3231              	 .global XMC_SCU_CLOCK_SetSystemPllClockSource
 3232              	 .thumb
 3233              	 .thumb_func
 3235              	XMC_SCU_CLOCK_SetSystemPllClockSource:
 3236              	.LFB210:
 900:../Libraries/XMCLib/src/xmc4_scu.c **** 
 901:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fPLL */
 902:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
 903:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3237              	 .loc 3 903 0
 3238              	 .cfi_startproc
 3239              	 
 3240              	 
 3241              	 
 3242 0000 80B4     	 push {r7}
 3243              	.LCFI298:
 3244              	 .cfi_def_cfa_offset 4
 3245              	 .cfi_offset 7,-4
 3246 0002 83B0     	 sub sp,sp,#12
 3247              	.LCFI299:
 3248              	 .cfi_def_cfa_offset 16
 3249 0004 00AF     	 add r7,sp,#0
 3250              	.LCFI300:
 3251              	 .cfi_def_cfa_register 7
 3252 0006 0346     	 mov r3,r0
 3253 0008 FB80     	 strh r3,[r7,#6]
 904:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Check input clock */
 905:../Libraries/XMCLib/src/xmc4_scu.c ****   if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 3254              	 .loc 3 905 0
 3255 000a FB88     	 ldrh r3,[r7,#6]
 3256 000c 002B     	 cmp r3,#0
 3257 000e 08D1     	 bne .L223
 906:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 907:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 3258              	 .loc 3 907 0
 3259 0010 0A4A     	 ldr r2,.L225
 3260 0012 0A4B     	 ldr r3,.L225
 3261 0014 DB68     	 ldr r3,[r3,#12]
 3262 0016 23F48073 	 bic r3,r3,#256
 3263 001a 23F00103 	 bic r3,r3,#1
 3264 001e D360     	 str r3,[r2,#12]
 3265 0020 07E0     	 b .L222
 3266              	.L223:
 908:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 909:../Libraries/XMCLib/src/xmc4_scu.c ****   else
 910:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 911:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 3267              	 .loc 3 911 0
 3268 0022 064A     	 ldr r2,.L225
 3269 0024 054B     	 ldr r3,.L225
 3270 0026 DB68     	 ldr r3,[r3,#12]
 3271 0028 43F48073 	 orr r3,r3,#256
 3272 002c 43F00103 	 orr r3,r3,#1
 3273 0030 D360     	 str r3,[r2,#12]
 3274              	.L222:
 912:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 913:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3275              	 .loc 3 913 0
 3276 0032 0C37     	 adds r7,r7,#12
 3277              	.LCFI301:
 3278              	 .cfi_def_cfa_offset 4
 3279 0034 BD46     	 mov sp,r7
 3280              	.LCFI302:
 3281              	 .cfi_def_cfa_register 13
 3282              	 
 3283 0036 5DF8047B 	 ldr r7,[sp],#4
 3284              	.LCFI303:
 3285              	 .cfi_restore 7
 3286              	 .cfi_def_cfa_offset 0
 3287 003a 7047     	 bx lr
 3288              	.L226:
 3289              	 .align 2
 3290              	.L225:
 3291 003c 10470050 	 .word 1342195472
 3292              	 .cfi_endproc
 3293              	.LFE210:
 3295              	 .section .text.XMC_SCU_HIB_SetRtcClockSource,"ax",%progbits
 3296              	 .align 2
 3297              	 .global XMC_SCU_HIB_SetRtcClockSource
 3298              	 .thumb
 3299              	 .thumb_func
 3301              	XMC_SCU_HIB_SetRtcClockSource:
 3302              	.LFB211:
 914:../Libraries/XMCLib/src/xmc4_scu.c **** 
 915:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fRTC */
 916:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
 917:../Libraries/XMCLib/src/xmc4_scu.c **** { 
 3303              	 .loc 3 917 0
 3304              	 .cfi_startproc
 3305              	 
 3306              	 
 3307              	 
 3308 0000 80B4     	 push {r7}
 3309              	.LCFI304:
 3310              	 .cfi_def_cfa_offset 4
 3311              	 .cfi_offset 7,-4
 3312 0002 83B0     	 sub sp,sp,#12
 3313              	.LCFI305:
 3314              	 .cfi_def_cfa_offset 16
 3315 0004 00AF     	 add r7,sp,#0
 3316              	.LCFI306:
 3317              	 .cfi_def_cfa_register 7
 3318 0006 0346     	 mov r3,r0
 3319 0008 FB71     	 strb r3,[r7,#7]
 918:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Wait until the update of HDCR register in hibernate domain is completed */
 919:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3320              	 .loc 3 919 0
 3321 000a 00BF     	 nop
 3322              	.L228:
 3323              	 .loc 3 919 0 is_stmt 0 discriminator 1
 3324 000c 094B     	 ldr r3,.L229
 3325 000e D3F8C430 	 ldr r3,[r3,#196]
 3326 0012 03F00803 	 and r3,r3,#8
 3327 0016 002B     	 cmp r3,#0
 3328 0018 F8D1     	 bne .L228
 920:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 921:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 922:../Libraries/XMCLib/src/xmc4_scu.c **** 
 923:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 3329              	 .loc 3 923 0 is_stmt 1
 3330 001a 0749     	 ldr r1,.L229+4
 3331 001c 064B     	 ldr r3,.L229+4
 3332 001e DB68     	 ldr r3,[r3,#12]
 3333 0020 23F04002 	 bic r2,r3,#64
 924:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3334              	 .loc 3 924 0
 3335 0024 FB79     	 ldrb r3,[r7,#7]
 923:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3336              	 .loc 3 923 0
 3337 0026 1343     	 orrs r3,r3,r2
 3338 0028 CB60     	 str r3,[r1,#12]
 925:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3339              	 .loc 3 925 0
 3340 002a 0C37     	 adds r7,r7,#12
 3341              	.LCFI307:
 3342              	 .cfi_def_cfa_offset 4
 3343 002c BD46     	 mov sp,r7
 3344              	.LCFI308:
 3345              	 .cfi_def_cfa_register 13
 3346              	 
 3347 002e 5DF8047B 	 ldr r7,[sp],#4
 3348              	.LCFI309:
 3349              	 .cfi_restore 7
 3350              	 .cfi_def_cfa_offset 0
 3351 0032 7047     	 bx lr
 3352              	.L230:
 3353              	 .align 2
 3354              	.L229:
 3355 0034 00400050 	 .word 1342193664
 3356 0038 00430050 	 .word 1342194432
 3357              	 .cfi_endproc
 3358              	.LFE211:
 3360              	 .section .text.XMC_SCU_HIB_SetStandbyClockSource,"ax",%progbits
 3361              	 .align 2
 3362              	 .global XMC_SCU_HIB_SetStandbyClockSource
 3363              	 .thumb
 3364              	 .thumb_func
 3366              	XMC_SCU_HIB_SetStandbyClockSource:
 3367              	.LFB212:
 926:../Libraries/XMCLib/src/xmc4_scu.c **** 
 927:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to select fSTDBY */
 928:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
 929:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3368              	 .loc 3 929 0
 3369              	 .cfi_startproc
 3370              	 
 3371              	 
 3372              	 
 3373 0000 80B4     	 push {r7}
 3374              	.LCFI310:
 3375              	 .cfi_def_cfa_offset 4
 3376              	 .cfi_offset 7,-4
 3377 0002 83B0     	 sub sp,sp,#12
 3378              	.LCFI311:
 3379              	 .cfi_def_cfa_offset 16
 3380 0004 00AF     	 add r7,sp,#0
 3381              	.LCFI312:
 3382              	 .cfi_def_cfa_register 7
 3383 0006 0346     	 mov r3,r0
 3384 0008 FB71     	 strb r3,[r7,#7]
 930:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 3385              	 .loc 3 930 0
 3386 000a 00BF     	 nop
 3387              	.L232:
 3388              	 .loc 3 930 0 is_stmt 0 discriminator 1
 3389 000c 094B     	 ldr r3,.L233
 3390 000e D3F8C430 	 ldr r3,[r3,#196]
 3391 0012 03F00803 	 and r3,r3,#8
 3392 0016 002B     	 cmp r3,#0
 3393 0018 F8D1     	 bne .L232
 931:../Libraries/XMCLib/src/xmc4_scu.c ****   {
 932:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
 933:../Libraries/XMCLib/src/xmc4_scu.c ****   }
 934:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 3394              	 .loc 3 934 0 is_stmt 1
 3395 001a 0749     	 ldr r1,.L233+4
 3396 001c 064B     	 ldr r3,.L233+4
 3397 001e DB68     	 ldr r3,[r3,#12]
 3398 0020 23F08002 	 bic r2,r3,#128
 935:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3399              	 .loc 3 935 0
 3400 0024 FB79     	 ldrb r3,[r7,#7]
 934:../Libraries/XMCLib/src/xmc4_scu.c ****                         ((uint32_t)source);
 3401              	 .loc 3 934 0
 3402 0026 1343     	 orrs r3,r3,r2
 3403 0028 CB60     	 str r3,[r1,#12]
 936:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3404              	 .loc 3 936 0
 3405 002a 0C37     	 adds r7,r7,#12
 3406              	.LCFI313:
 3407              	 .cfi_def_cfa_offset 4
 3408 002c BD46     	 mov sp,r7
 3409              	.LCFI314:
 3410              	 .cfi_def_cfa_register 13
 3411              	 
 3412 002e 5DF8047B 	 ldr r7,[sp],#4
 3413              	.LCFI315:
 3414              	 .cfi_restore 7
 3415              	 .cfi_def_cfa_offset 0
 3416 0032 7047     	 bx lr
 3417              	.L234:
 3418              	 .align 2
 3419              	.L233:
 3420 0034 00400050 	 .word 1342193664
 3421 0038 00430050 	 .word 1342194432
 3422              	 .cfi_endproc
 3423              	.LFE212:
 3425              	 .section .text.XMC_SCU_CLOCK_SetSystemClockDivider,"ax",%progbits
 3426              	 .align 2
 3427              	 .global XMC_SCU_CLOCK_SetSystemClockDivider
 3428              	 .thumb
 3429              	 .thumb_func
 3431              	XMC_SCU_CLOCK_SetSystemClockDivider:
 3432              	.LFB213:
 937:../Libraries/XMCLib/src/xmc4_scu.c **** 
 938:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsys and its parent */
 939:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
 940:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3433              	 .loc 3 940 0
 3434              	 .cfi_startproc
 3435              	 
 3436              	 
 3437              	 
 3438 0000 80B4     	 push {r7}
 3439              	.LCFI316:
 3440              	 .cfi_def_cfa_offset 4
 3441              	 .cfi_offset 7,-4
 3442 0002 83B0     	 sub sp,sp,#12
 3443              	.LCFI317:
 3444              	 .cfi_def_cfa_offset 16
 3445 0004 00AF     	 add r7,sp,#0
 3446              	.LCFI318:
 3447              	 .cfi_def_cfa_register 7
 3448 0006 7860     	 str r0,[r7,#4]
 941:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
 942:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );
 943:../Libraries/XMCLib/src/xmc4_scu.c **** 
 944:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 3449              	 .loc 3 944 0
 3450 0008 0649     	 ldr r1,.L236
 3451 000a 064B     	 ldr r3,.L236
 3452 000c DB68     	 ldr r3,[r3,#12]
 3453 000e 23F0FF02 	 bic r2,r3,#255
 945:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 3454              	 .loc 3 945 0
 3455 0012 7B68     	 ldr r3,[r7,#4]
 3456 0014 013B     	 subs r3,r3,#1
 944:../Libraries/XMCLib/src/xmc4_scu.c ****                       ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 3457              	 .loc 3 944 0
 3458 0016 1343     	 orrs r3,r3,r2
 3459 0018 CB60     	 str r3,[r1,#12]
 946:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3460              	 .loc 3 946 0
 3461 001a 0C37     	 adds r7,r7,#12
 3462              	.LCFI319:
 3463              	 .cfi_def_cfa_offset 4
 3464 001c BD46     	 mov sp,r7
 3465              	.LCFI320:
 3466              	 .cfi_def_cfa_register 13
 3467              	 
 3468 001e 5DF8047B 	 ldr r7,[sp],#4
 3469              	.LCFI321:
 3470              	 .cfi_restore 7
 3471              	 .cfi_def_cfa_offset 0
 3472 0022 7047     	 bx lr
 3473              	.L237:
 3474              	 .align 2
 3475              	.L236:
 3476 0024 00460050 	 .word 1342195200
 3477              	 .cfi_endproc
 3478              	.LFE213:
 3480              	 .section .text.XMC_SCU_CLOCK_SetCcuClockDivider,"ax",%progbits
 3481              	 .align 2
 3482              	 .global XMC_SCU_CLOCK_SetCcuClockDivider
 3483              	 .thumb
 3484              	 .thumb_func
 3486              	XMC_SCU_CLOCK_SetCcuClockDivider:
 3487              	.LFB214:
 947:../Libraries/XMCLib/src/xmc4_scu.c **** 
 948:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fccu and its parent */
 949:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
 950:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3488              	 .loc 3 950 0
 3489              	 .cfi_startproc
 3490              	 
 3491              	 
 3492              	 
 3493 0000 80B4     	 push {r7}
 3494              	.LCFI322:
 3495              	 .cfi_def_cfa_offset 4
 3496              	 .cfi_offset 7,-4
 3497 0002 83B0     	 sub sp,sp,#12
 3498              	.LCFI323:
 3499              	 .cfi_def_cfa_offset 16
 3500 0004 00AF     	 add r7,sp,#0
 3501              	.LCFI324:
 3502              	 .cfi_def_cfa_register 7
 3503 0006 7860     	 str r0,[r7,#4]
 951:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );
 952:../Libraries/XMCLib/src/xmc4_scu.c **** 
 953:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 3504              	 .loc 3 953 0
 3505 0008 0649     	 ldr r1,.L239
 3506 000a 064B     	 ldr r3,.L239
 3507 000c 1B6A     	 ldr r3,[r3,#32]
 3508 000e 23F00102 	 bic r2,r3,#1
 954:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 3509              	 .loc 3 954 0
 3510 0012 7B68     	 ldr r3,[r7,#4]
 3511 0014 013B     	 subs r3,r3,#1
 953:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 3512              	 .loc 3 953 0
 3513 0016 1343     	 orrs r3,r3,r2
 3514 0018 0B62     	 str r3,[r1,#32]
 955:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3515              	 .loc 3 955 0
 3516 001a 0C37     	 adds r7,r7,#12
 3517              	.LCFI325:
 3518              	 .cfi_def_cfa_offset 4
 3519 001c BD46     	 mov sp,r7
 3520              	.LCFI326:
 3521              	 .cfi_def_cfa_register 13
 3522              	 
 3523 001e 5DF8047B 	 ldr r7,[sp],#4
 3524              	.LCFI327:
 3525              	 .cfi_restore 7
 3526              	 .cfi_def_cfa_offset 0
 3527 0022 7047     	 bx lr
 3528              	.L240:
 3529              	 .align 2
 3530              	.L239:
 3531 0024 00460050 	 .word 1342195200
 3532              	 .cfi_endproc
 3533              	.LFE214:
 3535              	 .section .text.XMC_SCU_CLOCK_SetCpuClockDivider,"ax",%progbits
 3536              	 .align 2
 3537              	 .global XMC_SCU_CLOCK_SetCpuClockDivider
 3538              	 .thumb
 3539              	 .thumb_func
 3541              	XMC_SCU_CLOCK_SetCpuClockDivider:
 3542              	.LFB215:
 956:../Libraries/XMCLib/src/xmc4_scu.c **** 
 957:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fcpu and its parent */
 958:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
 959:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3543              	 .loc 3 959 0
 3544              	 .cfi_startproc
 3545              	 
 3546              	 
 3547              	 
 3548 0000 80B4     	 push {r7}
 3549              	.LCFI328:
 3550              	 .cfi_def_cfa_offset 4
 3551              	 .cfi_offset 7,-4
 3552 0002 83B0     	 sub sp,sp,#12
 3553              	.LCFI329:
 3554              	 .cfi_def_cfa_offset 16
 3555 0004 00AF     	 add r7,sp,#0
 3556              	.LCFI330:
 3557              	 .cfi_def_cfa_register 7
 3558 0006 7860     	 str r0,[r7,#4]
 960:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );
 961:../Libraries/XMCLib/src/xmc4_scu.c **** 
 962:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 3559              	 .loc 3 962 0
 3560 0008 0649     	 ldr r1,.L242
 3561 000a 064B     	 ldr r3,.L242
 3562 000c 1B69     	 ldr r3,[r3,#16]
 3563 000e 23F00102 	 bic r2,r3,#1
 963:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 3564              	 .loc 3 963 0
 3565 0012 7B68     	 ldr r3,[r7,#4]
 3566 0014 013B     	 subs r3,r3,#1
 962:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 3567              	 .loc 3 962 0
 3568 0016 1343     	 orrs r3,r3,r2
 3569 0018 0B61     	 str r3,[r1,#16]
 964:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3570              	 .loc 3 964 0
 3571 001a 0C37     	 adds r7,r7,#12
 3572              	.LCFI331:
 3573              	 .cfi_def_cfa_offset 4
 3574 001c BD46     	 mov sp,r7
 3575              	.LCFI332:
 3576              	 .cfi_def_cfa_register 13
 3577              	 
 3578 001e 5DF8047B 	 ldr r7,[sp],#4
 3579              	.LCFI333:
 3580              	 .cfi_restore 7
 3581              	 .cfi_def_cfa_offset 0
 3582 0022 7047     	 bx lr
 3583              	.L243:
 3584              	 .align 2
 3585              	.L242:
 3586 0024 00460050 	 .word 1342195200
 3587              	 .cfi_endproc
 3588              	.LFE215:
 3590              	 .section .text.XMC_SCU_CLOCK_SetPeripheralClockDivider,"ax",%progbits
 3591              	 .align 2
 3592              	 .global XMC_SCU_CLOCK_SetPeripheralClockDivider
 3593              	 .thumb
 3594              	 .thumb_func
 3596              	XMC_SCU_CLOCK_SetPeripheralClockDivider:
 3597              	.LFB216:
 965:../Libraries/XMCLib/src/xmc4_scu.c **** 
 966:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fperiph and its parent */
 967:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
 968:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3598              	 .loc 3 968 0
 3599              	 .cfi_startproc
 3600              	 
 3601              	 
 3602              	 
 3603 0000 80B4     	 push {r7}
 3604              	.LCFI334:
 3605              	 .cfi_def_cfa_offset 4
 3606              	 .cfi_offset 7,-4
 3607 0002 83B0     	 sub sp,sp,#12
 3608              	.LCFI335:
 3609              	 .cfi_def_cfa_offset 16
 3610 0004 00AF     	 add r7,sp,#0
 3611              	.LCFI336:
 3612              	 .cfi_def_cfa_register 7
 3613 0006 7860     	 str r0,[r7,#4]
 969:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) 
 970:../Libraries/XMCLib/src/xmc4_scu.c **** 
 971:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 3614              	 .loc 3 971 0
 3615 0008 0649     	 ldr r1,.L245
 3616 000a 064B     	 ldr r3,.L245
 3617 000c 5B69     	 ldr r3,[r3,#20]
 3618 000e 23F00102 	 bic r2,r3,#1
 972:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 3619              	 .loc 3 972 0
 3620 0012 7B68     	 ldr r3,[r7,#4]
 3621 0014 013B     	 subs r3,r3,#1
 971:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 3622              	 .loc 3 971 0
 3623 0016 1343     	 orrs r3,r3,r2
 3624 0018 4B61     	 str r3,[r1,#20]
 973:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3625              	 .loc 3 973 0
 3626 001a 0C37     	 adds r7,r7,#12
 3627              	.LCFI337:
 3628              	 .cfi_def_cfa_offset 4
 3629 001c BD46     	 mov sp,r7
 3630              	.LCFI338:
 3631              	 .cfi_def_cfa_register 13
 3632              	 
 3633 001e 5DF8047B 	 ldr r7,[sp],#4
 3634              	.LCFI339:
 3635              	 .cfi_restore 7
 3636              	 .cfi_def_cfa_offset 0
 3637 0022 7047     	 bx lr
 3638              	.L246:
 3639              	 .align 2
 3640              	.L245:
 3641 0024 00460050 	 .word 1342195200
 3642              	 .cfi_endproc
 3643              	.LFE216:
 3645              	 .section .text.XMC_SCU_CLOCK_SetUsbClockDivider,"ax",%progbits
 3646              	 .align 2
 3647              	 .global XMC_SCU_CLOCK_SetUsbClockDivider
 3648              	 .thumb
 3649              	 .thumb_func
 3651              	XMC_SCU_CLOCK_SetUsbClockDivider:
 3652              	.LFB217:
 974:../Libraries/XMCLib/src/xmc4_scu.c **** 
 975:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fsdmmc and its parent */
 976:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
 977:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3653              	 .loc 3 977 0
 3654              	 .cfi_startproc
 3655              	 
 3656              	 
 3657              	 
 3658 0000 80B4     	 push {r7}
 3659              	.LCFI340:
 3660              	 .cfi_def_cfa_offset 4
 3661              	 .cfi_offset 7,-4
 3662 0002 83B0     	 sub sp,sp,#12
 3663              	.LCFI341:
 3664              	 .cfi_def_cfa_offset 16
 3665 0004 00AF     	 add r7,sp,#0
 3666              	.LCFI342:
 3667              	 .cfi_def_cfa_register 7
 3668 0006 7860     	 str r0,[r7,#4]
 978:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
 979:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );
 980:../Libraries/XMCLib/src/xmc4_scu.c **** 
 981:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 3669              	 .loc 3 981 0
 3670 0008 0649     	 ldr r1,.L248
 3671 000a 064B     	 ldr r3,.L248
 3672 000c 9B69     	 ldr r3,[r3,#24]
 3673 000e 23F00702 	 bic r2,r3,#7
 982:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 3674              	 .loc 3 982 0
 3675 0012 7B68     	 ldr r3,[r7,#4]
 3676 0014 013B     	 subs r3,r3,#1
 981:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 3677              	 .loc 3 981 0
 3678 0016 1343     	 orrs r3,r3,r2
 3679 0018 8B61     	 str r3,[r1,#24]
 983:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3680              	 .loc 3 983 0
 3681 001a 0C37     	 adds r7,r7,#12
 3682              	.LCFI343:
 3683              	 .cfi_def_cfa_offset 4
 3684 001c BD46     	 mov sp,r7
 3685              	.LCFI344:
 3686              	 .cfi_def_cfa_register 13
 3687              	 
 3688 001e 5DF8047B 	 ldr r7,[sp],#4
 3689              	.LCFI345:
 3690              	 .cfi_restore 7
 3691              	 .cfi_def_cfa_offset 0
 3692 0022 7047     	 bx lr
 3693              	.L249:
 3694              	 .align 2
 3695              	.L248:
 3696 0024 00460050 	 .word 1342195200
 3697              	 .cfi_endproc
 3698              	.LFE217:
 3700              	 .section .text.XMC_SCU_CLOCK_SetEbuClockDivider,"ax",%progbits
 3701              	 .align 2
 3702              	 .global XMC_SCU_CLOCK_SetEbuClockDivider
 3703              	 .thumb
 3704              	 .thumb_func
 3706              	XMC_SCU_CLOCK_SetEbuClockDivider:
 3707              	.LFB218:
 984:../Libraries/XMCLib/src/xmc4_scu.c **** 
 985:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(EBU)
 986:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between febu and its parent */
 987:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
 988:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3708              	 .loc 3 988 0
 3709              	 .cfi_startproc
 3710              	 
 3711              	 
 3712              	 
 3713 0000 80B4     	 push {r7}
 3714              	.LCFI346:
 3715              	 .cfi_def_cfa_offset 4
 3716              	 .cfi_offset 7,-4
 3717 0002 83B0     	 sub sp,sp,#12
 3718              	.LCFI347:
 3719              	 .cfi_def_cfa_offset 16
 3720 0004 00AF     	 add r7,sp,#0
 3721              	.LCFI348:
 3722              	 .cfi_def_cfa_register 7
 3723 0006 7860     	 str r0,[r7,#4]
 989:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
 990:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );
 991:../Libraries/XMCLib/src/xmc4_scu.c **** 
 992:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 3724              	 .loc 3 992 0
 3725 0008 0649     	 ldr r1,.L251
 3726 000a 064B     	 ldr r3,.L251
 3727 000c DB69     	 ldr r3,[r3,#28]
 3728 000e 23F03F02 	 bic r2,r3,#63
 993:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 3729              	 .loc 3 993 0
 3730 0012 7B68     	 ldr r3,[r7,#4]
 3731 0014 013B     	 subs r3,r3,#1
 992:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 3732              	 .loc 3 992 0
 3733 0016 1343     	 orrs r3,r3,r2
 3734 0018 CB61     	 str r3,[r1,#28]
 994:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3735              	 .loc 3 994 0
 3736 001a 0C37     	 adds r7,r7,#12
 3737              	.LCFI349:
 3738              	 .cfi_def_cfa_offset 4
 3739 001c BD46     	 mov sp,r7
 3740              	.LCFI350:
 3741              	 .cfi_def_cfa_register 13
 3742              	 
 3743 001e 5DF8047B 	 ldr r7,[sp],#4
 3744              	.LCFI351:
 3745              	 .cfi_restore 7
 3746              	 .cfi_def_cfa_offset 0
 3747 0022 7047     	 bx lr
 3748              	.L252:
 3749              	 .align 2
 3750              	.L251:
 3751 0024 00460050 	 .word 1342195200
 3752              	 .cfi_endproc
 3753              	.LFE218:
 3755              	 .section .text.XMC_SCU_CLOCK_SetWdtClockDivider,"ax",%progbits
 3756              	 .align 2
 3757              	 .global XMC_SCU_CLOCK_SetWdtClockDivider
 3758              	 .thumb
 3759              	 .thumb_func
 3761              	XMC_SCU_CLOCK_SetWdtClockDivider:
 3762              	.LFB219:
 995:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
 996:../Libraries/XMCLib/src/xmc4_scu.c **** 
 997:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fwdt and its parent */
 998:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
 999:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3763              	 .loc 3 999 0
 3764              	 .cfi_startproc
 3765              	 
 3766              	 
 3767              	 
 3768 0000 80B4     	 push {r7}
 3769              	.LCFI352:
 3770              	 .cfi_def_cfa_offset 4
 3771              	 .cfi_offset 7,-4
 3772 0002 83B0     	 sub sp,sp,#12
 3773              	.LCFI353:
 3774              	 .cfi_def_cfa_offset 16
 3775 0004 00AF     	 add r7,sp,#0
 3776              	.LCFI354:
 3777              	 .cfi_def_cfa_register 7
 3778 0006 7860     	 str r0,[r7,#4]
1000:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
1001:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );
1002:../Libraries/XMCLib/src/xmc4_scu.c **** 
1003:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 3779              	 .loc 3 1003 0
 3780 0008 0649     	 ldr r1,.L254
 3781 000a 064B     	 ldr r3,.L254
 3782 000c 5B6A     	 ldr r3,[r3,#36]
 3783 000e 23F0FF02 	 bic r2,r3,#255
1004:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 3784              	 .loc 3 1004 0
 3785 0012 7B68     	 ldr r3,[r7,#4]
 3786 0014 013B     	 subs r3,r3,#1
1003:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 3787              	 .loc 3 1003 0
 3788 0016 1343     	 orrs r3,r3,r2
 3789 0018 4B62     	 str r3,[r1,#36]
1005:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3790              	 .loc 3 1005 0
 3791 001a 0C37     	 adds r7,r7,#12
 3792              	.LCFI355:
 3793              	 .cfi_def_cfa_offset 4
 3794 001c BD46     	 mov sp,r7
 3795              	.LCFI356:
 3796              	 .cfi_def_cfa_register 13
 3797              	 
 3798 001e 5DF8047B 	 ldr r7,[sp],#4
 3799              	.LCFI357:
 3800              	 .cfi_restore 7
 3801              	 .cfi_def_cfa_offset 0
 3802 0022 7047     	 bx lr
 3803              	.L255:
 3804              	 .align 2
 3805              	.L254:
 3806 0024 00460050 	 .word 1342195200
 3807              	 .cfi_endproc
 3808              	.LFE219:
 3810              	 .section .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider,"ax",%progbits
 3811              	 .align 2
 3812              	 .global XMC_SCU_CLOCK_SetExternalOutputClockDivider
 3813              	 .thumb
 3814              	 .thumb_func
 3816              	XMC_SCU_CLOCK_SetExternalOutputClockDivider:
 3817              	.LFB220:
1006:../Libraries/XMCLib/src/xmc4_scu.c **** 
1007:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to program the divider placed between fext and its parent */
1008:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetExternalOutputClockDivider(const uint32_t divider)
1009:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3818              	 .loc 3 1009 0
 3819              	 .cfi_startproc
 3820              	 
 3821              	 
 3822              	 
 3823 0000 80B4     	 push {r7}
 3824              	.LCFI358:
 3825              	 .cfi_def_cfa_offset 4
 3826              	 .cfi_offset 7,-4
 3827 0002 83B0     	 sub sp,sp,#12
 3828              	.LCFI359:
 3829              	 .cfi_def_cfa_offset 16
 3830 0004 00AF     	 add r7,sp,#0
 3831              	.LCFI360:
 3832              	 .cfi_def_cfa_register 7
 3833 0006 7860     	 str r0,[r7,#4]
1010:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetExternalOutputClockDivider:Wrong clock divider value",
1011:../Libraries/XMCLib/src/xmc4_scu.c ****               (divider <= (SCU_CLK_EXTCLKCR_ECKDIV_Msk + 1UL) ) );
1012:../Libraries/XMCLib/src/xmc4_scu.c **** 
1013:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->EXTCLKCR = (SCU_CLK->EXTCLKCR & ((uint32_t)~SCU_CLK_EXTCLKCR_ECKDIV_Msk)) |
 3834              	 .loc 3 1013 0
 3835 0008 0849     	 ldr r1,.L257
 3836 000a 084B     	 ldr r3,.L257
 3837 000c 9B6A     	 ldr r3,[r3,#40]
 3838 000e 23F0FF73 	 bic r3,r3,#33423360
 3839 0012 23F48033 	 bic r3,r3,#65536
1014:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 3840              	 .loc 3 1014 0
 3841 0016 7A68     	 ldr r2,[r7,#4]
 3842 0018 013A     	 subs r2,r2,#1
 3843 001a 1204     	 lsls r2,r2,#16
1013:../Libraries/XMCLib/src/xmc4_scu.c ****                       (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
 3844              	 .loc 3 1013 0
 3845 001c 1343     	 orrs r3,r3,r2
 3846 001e 8B62     	 str r3,[r1,#40]
1015:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3847              	 .loc 3 1015 0
 3848 0020 0C37     	 adds r7,r7,#12
 3849              	.LCFI361:
 3850              	 .cfi_def_cfa_offset 4
 3851 0022 BD46     	 mov sp,r7
 3852              	.LCFI362:
 3853              	 .cfi_def_cfa_register 13
 3854              	 
 3855 0024 5DF8047B 	 ldr r7,[sp],#4
 3856              	.LCFI363:
 3857              	 .cfi_restore 7
 3858              	 .cfi_def_cfa_offset 0
 3859 0028 7047     	 bx lr
 3860              	.L258:
 3861 002a 00BF     	 .align 2
 3862              	.L257:
 3863 002c 00460050 	 .word 1342195200
 3864              	 .cfi_endproc
 3865              	.LFE220:
 3867              	 .section .text.XMC_SCU_CLOCK_EnableClock,"ax",%progbits
 3868              	 .align 2
 3869              	 .global XMC_SCU_CLOCK_EnableClock
 3870              	 .thumb
 3871              	 .thumb_func
 3873              	XMC_SCU_CLOCK_EnableClock:
 3874              	.LFB221:
1016:../Libraries/XMCLib/src/xmc4_scu.c **** 
1017:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(ECAT0)
1018:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the ECAT clock by setting the clock divider for the ECAT clock source */
1019:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetECATClockDivider(const uint32_t divider)
1020:../Libraries/XMCLib/src/xmc4_scu.c **** {
1021:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->ECATCLKCR = (SCU_CLK->ECATCLKCR & ~SCU_CLK_ECATCLKCR_ECADIV_Msk) |
1022:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_ECATCLKCR_ECADIV_Pos);
1023:../Libraries/XMCLib/src/xmc4_scu.c **** }
1024:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1025:../Libraries/XMCLib/src/xmc4_scu.c **** 
1026:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable a given module clock */
1027:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
1028:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3875              	 .loc 3 1028 0
 3876              	 .cfi_startproc
 3877              	 
 3878              	 
 3879              	 
 3880 0000 80B4     	 push {r7}
 3881              	.LCFI364:
 3882              	 .cfi_def_cfa_offset 4
 3883              	 .cfi_offset 7,-4
 3884 0002 83B0     	 sub sp,sp,#12
 3885              	.LCFI365:
 3886              	 .cfi_def_cfa_offset 16
 3887 0004 00AF     	 add r7,sp,#0
 3888              	.LCFI366:
 3889              	 .cfi_def_cfa_register 7
 3890 0006 0346     	 mov r3,r0
 3891 0008 FB71     	 strb r3,[r7,#7]
1029:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKSET = ((uint32_t)clock);
 3892              	 .loc 3 1029 0
 3893 000a 044A     	 ldr r2,.L260
 3894 000c FB79     	 ldrb r3,[r7,#7]
 3895 000e 5360     	 str r3,[r2,#4]
1030:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3896              	 .loc 3 1030 0
 3897 0010 0C37     	 adds r7,r7,#12
 3898              	.LCFI367:
 3899              	 .cfi_def_cfa_offset 4
 3900 0012 BD46     	 mov sp,r7
 3901              	.LCFI368:
 3902              	 .cfi_def_cfa_register 13
 3903              	 
 3904 0014 5DF8047B 	 ldr r7,[sp],#4
 3905              	.LCFI369:
 3906              	 .cfi_restore 7
 3907              	 .cfi_def_cfa_offset 0
 3908 0018 7047     	 bx lr
 3909              	.L261:
 3910 001a 00BF     	 .align 2
 3911              	.L260:
 3912 001c 00460050 	 .word 1342195200
 3913              	 .cfi_endproc
 3914              	.LFE221:
 3916              	 .section .text.XMC_SCU_CLOCK_DisableClock,"ax",%progbits
 3917              	 .align 2
 3918              	 .global XMC_SCU_CLOCK_DisableClock
 3919              	 .thumb
 3920              	 .thumb_func
 3922              	XMC_SCU_CLOCK_DisableClock:
 3923              	.LFB222:
1031:../Libraries/XMCLib/src/xmc4_scu.c **** 
1032:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable a given module clock */
1033:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableClock(const XMC_SCU_CLOCK_t clock)
1034:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3924              	 .loc 3 1034 0
 3925              	 .cfi_startproc
 3926              	 
 3927              	 
 3928              	 
 3929 0000 80B4     	 push {r7}
 3930              	.LCFI370:
 3931              	 .cfi_def_cfa_offset 4
 3932              	 .cfi_offset 7,-4
 3933 0002 83B0     	 sub sp,sp,#12
 3934              	.LCFI371:
 3935              	 .cfi_def_cfa_offset 16
 3936 0004 00AF     	 add r7,sp,#0
 3937              	.LCFI372:
 3938              	 .cfi_def_cfa_register 7
 3939 0006 0346     	 mov r3,r0
 3940 0008 FB71     	 strb r3,[r7,#7]
1035:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_CLK->CLKCLR = ((uint32_t)clock);
 3941              	 .loc 3 1035 0
 3942 000a 044A     	 ldr r2,.L263
 3943 000c FB79     	 ldrb r3,[r7,#7]
 3944 000e 9360     	 str r3,[r2,#8]
1036:../Libraries/XMCLib/src/xmc4_scu.c **** }
 3945              	 .loc 3 1036 0
 3946 0010 0C37     	 adds r7,r7,#12
 3947              	.LCFI373:
 3948              	 .cfi_def_cfa_offset 4
 3949 0012 BD46     	 mov sp,r7
 3950              	.LCFI374:
 3951              	 .cfi_def_cfa_register 13
 3952              	 
 3953 0014 5DF8047B 	 ldr r7,[sp],#4
 3954              	.LCFI375:
 3955              	 .cfi_restore 7
 3956              	 .cfi_def_cfa_offset 0
 3957 0018 7047     	 bx lr
 3958              	.L264:
 3959 001a 00BF     	 .align 2
 3960              	.L263:
 3961 001c 00460050 	 .word 1342195200
 3962              	 .cfi_endproc
 3963              	.LFE222:
 3965              	 .section .text.XMC_SCU_CLOCK_IsClockEnabled,"ax",%progbits
 3966              	 .align 2
 3967              	 .global XMC_SCU_CLOCK_IsClockEnabled
 3968              	 .thumb
 3969              	 .thumb_func
 3971              	XMC_SCU_CLOCK_IsClockEnabled:
 3972              	.LFB223:
1037:../Libraries/XMCLib/src/xmc4_scu.c **** 
1038:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to determine if module clock of the given peripheral is enabled */
1039:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsClockEnabled(const XMC_SCU_CLOCK_t clock)
1040:../Libraries/XMCLib/src/xmc4_scu.c **** {
 3973              	 .loc 3 1040 0
 3974              	 .cfi_startproc
 3975              	 
 3976              	 
 3977              	 
 3978 0000 80B4     	 push {r7}
 3979              	.LCFI376:
 3980              	 .cfi_def_cfa_offset 4
 3981              	 .cfi_offset 7,-4
 3982 0002 83B0     	 sub sp,sp,#12
 3983              	.LCFI377:
 3984              	 .cfi_def_cfa_offset 16
 3985 0004 00AF     	 add r7,sp,#0
 3986              	.LCFI378:
 3987              	 .cfi_def_cfa_register 7
 3988 0006 0346     	 mov r3,r0
 3989 0008 FB71     	 strb r3,[r7,#7]
1041:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)(SCU_CLK->CLKSTAT & ((uint32_t)clock));
 3990              	 .loc 3 1041 0
 3991 000a 074B     	 ldr r3,.L267
 3992 000c 1A68     	 ldr r2,[r3]
 3993 000e FB79     	 ldrb r3,[r7,#7]
 3994 0010 1340     	 ands r3,r3,r2
 3995 0012 002B     	 cmp r3,#0
 3996 0014 14BF     	 ite ne
 3997 0016 0123     	 movne r3,#1
 3998 0018 0023     	 moveq r3,#0
 3999 001a DBB2     	 uxtb r3,r3
1042:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4000              	 .loc 3 1042 0
 4001 001c 1846     	 mov r0,r3
 4002 001e 0C37     	 adds r7,r7,#12
 4003              	.LCFI379:
 4004              	 .cfi_def_cfa_offset 4
 4005 0020 BD46     	 mov sp,r7
 4006              	.LCFI380:
 4007              	 .cfi_def_cfa_register 13
 4008              	 
 4009 0022 5DF8047B 	 ldr r7,[sp],#4
 4010              	.LCFI381:
 4011              	 .cfi_restore 7
 4012              	 .cfi_def_cfa_offset 0
 4013 0026 7047     	 bx lr
 4014              	.L268:
 4015              	 .align 2
 4016              	.L267:
 4017 0028 00460050 	 .word 1342195200
 4018              	 .cfi_endproc
 4019              	.LFE223:
 4021              	 .section .text.XMC_SCU_POWER_GetEVR13Voltage,"ax",%progbits
 4022              	 .align 2
 4023              	 .global XMC_SCU_POWER_GetEVR13Voltage
 4024              	 .thumb
 4025              	 .thumb_func
 4027              	XMC_SCU_POWER_GetEVR13Voltage:
 4028              	.LFB224:
1043:../Libraries/XMCLib/src/xmc4_scu.c **** 
1044:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(CLOCK_GATING_SUPPORTED)
1045:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to gate a given module clock */
1046:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1047:../Libraries/XMCLib/src/xmc4_scu.c **** {
1048:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (peripheral & 0xf0000000UL) >> 28UL;
1049:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1050:../Libraries/XMCLib/src/xmc4_scu.c **** 
1051:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
1052:../Libraries/XMCLib/src/xmc4_scu.c **** }
1053:../Libraries/XMCLib/src/xmc4_scu.c **** 
1054:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1055:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1056:../Libraries/XMCLib/src/xmc4_scu.c **** {
1057:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
1058:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1059:../Libraries/XMCLib/src/xmc4_scu.c **** 
1060:../Libraries/XMCLib/src/xmc4_scu.c ****   *(uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
1061:../Libraries/XMCLib/src/xmc4_scu.c **** }
1062:../Libraries/XMCLib/src/xmc4_scu.c **** 
1063:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to ungate a given module clock */
1064:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
1065:../Libraries/XMCLib/src/xmc4_scu.c **** {
1066:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
1067:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
1068:../Libraries/XMCLib/src/xmc4_scu.c **** 
1069:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((*(uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
1070:../Libraries/XMCLib/src/xmc4_scu.c **** }
1071:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1072:../Libraries/XMCLib/src/xmc4_scu.c **** 
1073:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR13Voltage(void)
1074:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4029              	 .loc 3 1074 0
 4030              	 .cfi_startproc
 4031              	 
 4032              	 
 4033              	 
 4034 0000 80B4     	 push {r7}
 4035              	.LCFI382:
 4036              	 .cfi_def_cfa_offset 4
 4037              	 .cfi_offset 7,-4
 4038 0002 00AF     	 add r7,sp,#0
 4039              	.LCFI383:
 4040              	 .cfi_def_cfa_register 7
1075:../Libraries/XMCLib/src/xmc4_scu.c ****   return (SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC13V_Msk) * XMC_SCU_POWER_LSB13V;
 4041              	 .loc 3 1075 0
 4042 0004 084B     	 ldr r3,.L271
 4043 0006 5B69     	 ldr r3,[r3,#20]
 4044 0008 DBB2     	 uxtb r3,r3
 4045 000a 07EE903A 	 fmsr s15,r3
 4046 000e F8EE677A 	 fuitos s15,s15
 4047 0012 9FED067A 	 flds s14,.L271+4
 4048 0016 67EE877A 	 fmuls s15,s15,s14
 4049 001a 17EE903A 	 fmrs r3,s15
1076:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4050              	 .loc 3 1076 0
 4051 001e 1846     	 mov r0,r3
 4052 0020 BD46     	 mov sp,r7
 4053              	.LCFI384:
 4054              	 .cfi_def_cfa_register 13
 4055              	 
 4056 0022 5DF8047B 	 ldr r7,[sp],#4
 4057              	.LCFI385:
 4058              	 .cfi_restore 7
 4059              	 .cfi_def_cfa_offset 0
 4060 0026 7047     	 bx lr
 4061              	.L272:
 4062              	 .align 2
 4063              	.L271:
 4064 0028 00420050 	 .word 1342194176
 4065 002c ED0DBE3B 	 .word 1002311149
 4066              	 .cfi_endproc
 4067              	.LFE224:
 4069              	 .section .text.XMC_SCU_POWER_GetEVR33Voltage,"ax",%progbits
 4070              	 .align 2
 4071              	 .global XMC_SCU_POWER_GetEVR33Voltage
 4072              	 .thumb
 4073              	 .thumb_func
 4075              	XMC_SCU_POWER_GetEVR33Voltage:
 4076              	.LFB225:
1077:../Libraries/XMCLib/src/xmc4_scu.c **** 
1078:../Libraries/XMCLib/src/xmc4_scu.c **** float XMC_SCU_POWER_GetEVR33Voltage(void)
1079:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4077              	 .loc 3 1079 0
 4078              	 .cfi_startproc
 4079              	 
 4080              	 
 4081              	 
 4082 0000 80B4     	 push {r7}
 4083              	.LCFI386:
 4084              	 .cfi_def_cfa_offset 4
 4085              	 .cfi_offset 7,-4
 4086 0002 00AF     	 add r7,sp,#0
 4087              	.LCFI387:
 4088              	 .cfi_def_cfa_register 7
1080:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VAD
 4089              	 .loc 3 1080 0
 4090 0004 094B     	 ldr r3,.L275
 4091 0006 5B69     	 ldr r3,[r3,#20]
 4092 0008 03F47F43 	 and r3,r3,#65280
 4093 000c 1B0A     	 lsrs r3,r3,#8
 4094 000e 07EE903A 	 fmsr s15,r3
 4095 0012 F8EE677A 	 fuitos s15,s15
 4096 0016 9FED067A 	 flds s14,.L275+4
 4097 001a 67EE877A 	 fmuls s15,s15,s14
 4098 001e 17EE903A 	 fmrs r3,s15
1081:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4099              	 .loc 3 1081 0
 4100 0022 1846     	 mov r0,r3
 4101 0024 BD46     	 mov sp,r7
 4102              	.LCFI388:
 4103              	 .cfi_def_cfa_register 13
 4104              	 
 4105 0026 5DF8047B 	 ldr r7,[sp],#4
 4106              	.LCFI389:
 4107              	 .cfi_restore 7
 4108              	 .cfi_def_cfa_offset 0
 4109 002a 7047     	 bx lr
 4110              	.L276:
 4111              	 .align 2
 4112              	.L275:
 4113 002c 00420050 	 .word 1342194176
 4114 0030 EC51B83C 	 .word 1018712556
 4115              	 .cfi_endproc
 4116              	.LFE225:
 4118              	 .section .text.XMC_SCU_CLOCK_EnableUsbPll,"ax",%progbits
 4119              	 .align 2
 4120              	 .global XMC_SCU_CLOCK_EnableUsbPll
 4121              	 .thumb
 4122              	 .thumb_func
 4124              	XMC_SCU_CLOCK_EnableUsbPll:
 4125              	.LFB226:
1082:../Libraries/XMCLib/src/xmc4_scu.c **** 
1083:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB PLL for USB clock */
1084:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableUsbPll(void)
1085:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4126              	 .loc 3 1085 0
 4127              	 .cfi_startproc
 4128              	 
 4129              	 
 4130              	 
 4131 0000 80B4     	 push {r7}
 4132              	.LCFI390:
 4133              	 .cfi_def_cfa_offset 4
 4134              	 .cfi_offset 7,-4
 4135 0002 00AF     	 add r7,sp,#0
 4136              	.LCFI391:
 4137              	 .cfi_def_cfa_register 7
1086:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 4138              	 .loc 3 1086 0
 4139 0004 054A     	 ldr r2,.L278
 4140 0006 054B     	 ldr r3,.L278
 4141 0008 5B69     	 ldr r3,[r3,#20]
 4142 000a 23F48033 	 bic r3,r3,#65536
 4143 000e 23F00203 	 bic r3,r3,#2
 4144 0012 5361     	 str r3,[r2,#20]
1087:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4145              	 .loc 3 1087 0
 4146 0014 BD46     	 mov sp,r7
 4147              	.LCFI392:
 4148              	 .cfi_def_cfa_register 13
 4149              	 
 4150 0016 5DF8047B 	 ldr r7,[sp],#4
 4151              	.LCFI393:
 4152              	 .cfi_restore 7
 4153              	 .cfi_def_cfa_offset 0
 4154 001a 7047     	 bx lr
 4155              	.L279:
 4156              	 .align 2
 4157              	.L278:
 4158 001c 10470050 	 .word 1342195472
 4159              	 .cfi_endproc
 4160              	.LFE226:
 4162              	 .section .text.XMC_SCU_CLOCK_DisableUsbPll,"ax",%progbits
 4163              	 .align 2
 4164              	 .global XMC_SCU_CLOCK_DisableUsbPll
 4165              	 .thumb
 4166              	 .thumb_func
 4168              	XMC_SCU_CLOCK_DisableUsbPll:
 4169              	.LFB227:
1088:../Libraries/XMCLib/src/xmc4_scu.c **** 
1089:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL for USB clock */
1090:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableUsbPll(void)
1091:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4170              	 .loc 3 1091 0
 4171              	 .cfi_startproc
 4172              	 
 4173              	 
 4174              	 
 4175 0000 80B4     	 push {r7}
 4176              	.LCFI394:
 4177              	 .cfi_def_cfa_offset 4
 4178              	 .cfi_offset 7,-4
 4179 0002 00AF     	 add r7,sp,#0
 4180              	.LCFI395:
 4181              	 .cfi_def_cfa_register 7
1092:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 4182              	 .loc 3 1092 0
 4183 0004 054A     	 ldr r2,.L281
 4184 0006 054B     	 ldr r3,.L281
 4185 0008 5B69     	 ldr r3,[r3,#20]
 4186 000a 43F48033 	 orr r3,r3,#65536
 4187 000e 43F00203 	 orr r3,r3,#2
 4188 0012 5361     	 str r3,[r2,#20]
1093:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4189              	 .loc 3 1093 0
 4190 0014 BD46     	 mov sp,r7
 4191              	.LCFI396:
 4192              	 .cfi_def_cfa_register 13
 4193              	 
 4194 0016 5DF8047B 	 ldr r7,[sp],#4
 4195              	.LCFI397:
 4196              	 .cfi_restore 7
 4197              	 .cfi_def_cfa_offset 0
 4198 001a 7047     	 bx lr
 4199              	.L282:
 4200              	 .align 2
 4201              	.L281:
 4202 001c 10470050 	 .word 1342195472
 4203              	 .cfi_endproc
 4204              	.LFE227:
 4206              	 .section .text.XMC_SCU_CLOCK_StartUsbPll,"ax",%progbits
 4207              	 .align 2
 4208              	 .global XMC_SCU_CLOCK_StartUsbPll
 4209              	 .thumb
 4210              	 .thumb_func
 4212              	XMC_SCU_CLOCK_StartUsbPll:
 4213              	.LFB228:
1094:../Libraries/XMCLib/src/xmc4_scu.c **** 
1095:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure USB PLL */
1096:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
1097:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4214              	 .loc 3 1097 0
 4215              	 .cfi_startproc
 4216              	 
 4217              	 
 4218              	 
 4219 0000 80B4     	 push {r7}
 4220              	.LCFI398:
 4221              	 .cfi_def_cfa_offset 4
 4222              	 .cfi_offset 7,-4
 4223 0002 83B0     	 sub sp,sp,#12
 4224              	.LCFI399:
 4225              	 .cfi_def_cfa_offset 16
 4226 0004 00AF     	 add r7,sp,#0
 4227              	.LCFI400:
 4228              	 .cfi_def_cfa_register 7
 4229 0006 7860     	 str r0,[r7,#4]
 4230 0008 3960     	 str r1,[r7]
1098:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Go to bypass the USB PLL */
1099:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 4231              	 .loc 3 1099 0
 4232 000a 194A     	 ldr r2,.L285
 4233 000c 184B     	 ldr r3,.L285
 4234 000e 5B69     	 ldr r3,[r3,#20]
 4235 0010 43F00103 	 orr r3,r3,#1
 4236 0014 5361     	 str r3,[r2,#20]
1100:../Libraries/XMCLib/src/xmc4_scu.c **** 
1101:../Libraries/XMCLib/src/xmc4_scu.c ****   /* disconnect Oscillator from USB PLL */
1102:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 4237              	 .loc 3 1102 0
 4238 0016 164A     	 ldr r2,.L285
 4239 0018 154B     	 ldr r3,.L285
 4240 001a 5B69     	 ldr r3,[r3,#20]
 4241 001c 43F01003 	 orr r3,r3,#16
 4242 0020 5361     	 str r3,[r2,#20]
1103:../Libraries/XMCLib/src/xmc4_scu.c **** 
1104:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Setup Divider settings for USB PLL */
1105:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 4243              	 .loc 3 1105 0
 4244 0022 1349     	 ldr r1,.L285
 4245 0024 3B68     	 ldr r3,[r7]
 4246 0026 013B     	 subs r3,r3,#1
 4247 0028 1A02     	 lsls r2,r3,#8
1106:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 4248              	 .loc 3 1106 0
 4249 002a 7B68     	 ldr r3,[r7,#4]
 4250 002c 013B     	 subs r3,r3,#1
 4251 002e 1B06     	 lsls r3,r3,#24
1105:../Libraries/XMCLib/src/xmc4_scu.c ****                        (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 4252              	 .loc 3 1105 0
 4253 0030 1343     	 orrs r3,r3,r2
 4254 0032 4B61     	 str r3,[r1,#20]
1107:../Libraries/XMCLib/src/xmc4_scu.c **** 
1108:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Set OSCDISCDIS */
1109:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 4255              	 .loc 3 1109 0
 4256 0034 0E4A     	 ldr r2,.L285
 4257 0036 0E4B     	 ldr r3,.L285
 4258 0038 5B69     	 ldr r3,[r3,#20]
 4259 003a 43F04003 	 orr r3,r3,#64
 4260 003e 5361     	 str r3,[r2,#20]
1110:../Libraries/XMCLib/src/xmc4_scu.c **** 
1111:../Libraries/XMCLib/src/xmc4_scu.c ****   /* connect Oscillator to USB PLL */
1112:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 4261              	 .loc 3 1112 0
 4262 0040 0B4A     	 ldr r2,.L285
 4263 0042 0B4B     	 ldr r3,.L285
 4264 0044 5B69     	 ldr r3,[r3,#20]
 4265 0046 23F01003 	 bic r3,r3,#16
 4266 004a 5361     	 str r3,[r2,#20]
1113:../Libraries/XMCLib/src/xmc4_scu.c **** 
1114:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart PLL Lock detection */
1115:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 4267              	 .loc 3 1115 0
 4268 004c 084A     	 ldr r2,.L285
 4269 004e 084B     	 ldr r3,.L285
 4270 0050 5B69     	 ldr r3,[r3,#20]
 4271 0052 43F48023 	 orr r3,r3,#262144
 4272 0056 5361     	 str r3,[r2,#20]
1116:../Libraries/XMCLib/src/xmc4_scu.c **** 
1117:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 4273              	 .loc 3 1117 0
 4274 0058 00BF     	 nop
 4275              	.L284:
 4276              	 .loc 3 1117 0 is_stmt 0 discriminator 1
 4277 005a 054B     	 ldr r3,.L285
 4278 005c 1B69     	 ldr r3,[r3,#16]
 4279 005e 03F00403 	 and r3,r3,#4
 4280 0062 002B     	 cmp r3,#0
 4281 0064 F9D0     	 beq .L284
1118:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1119:../Libraries/XMCLib/src/xmc4_scu.c ****     /* wait for PLL Lock */
1120:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1121:../Libraries/XMCLib/src/xmc4_scu.c **** 
1122:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4282              	 .loc 3 1122 0 is_stmt 1
 4283 0066 0C37     	 adds r7,r7,#12
 4284              	.LCFI401:
 4285              	 .cfi_def_cfa_offset 4
 4286 0068 BD46     	 mov sp,r7
 4287              	.LCFI402:
 4288              	 .cfi_def_cfa_register 13
 4289              	 
 4290 006a 5DF8047B 	 ldr r7,[sp],#4
 4291              	.LCFI403:
 4292              	 .cfi_restore 7
 4293              	 .cfi_def_cfa_offset 0
 4294 006e 7047     	 bx lr
 4295              	.L286:
 4296              	 .align 2
 4297              	.L285:
 4298 0070 10470050 	 .word 1342195472
 4299              	 .cfi_endproc
 4300              	.LFE228:
 4302              	 .section .text.XMC_SCU_CLOCK_StopUsbPll,"ax",%progbits
 4303              	 .align 2
 4304              	 .global XMC_SCU_CLOCK_StopUsbPll
 4305              	 .thumb
 4306              	 .thumb_func
 4308              	XMC_SCU_CLOCK_StopUsbPll:
 4309              	.LFB229:
1123:../Libraries/XMCLib/src/xmc4_scu.c **** 
1124:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable USB PLL operation */
1125:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopUsbPll(void)
1126:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4310              	 .loc 3 1126 0
 4311              	 .cfi_startproc
 4312              	 
 4313              	 
 4314              	 
 4315 0000 80B4     	 push {r7}
 4316              	.LCFI404:
 4317              	 .cfi_def_cfa_offset 4
 4318              	 .cfi_offset 7,-4
 4319 0002 00AF     	 add r7,sp,#0
 4320              	.LCFI405:
 4321              	 .cfi_def_cfa_register 7
1127:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
 4322              	 .loc 3 1127 0
 4323 0004 034B     	 ldr r3,.L288
 4324 0006 044A     	 ldr r2,.L288+4
 4325 0008 5A61     	 str r2,[r3,#20]
1128:../Libraries/XMCLib/src/xmc4_scu.c ****                                   SCU_PLL_USBPLLCON_VCOBYP_Msk);
1129:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4326              	 .loc 3 1129 0
 4327 000a BD46     	 mov sp,r7
 4328              	.LCFI406:
 4329              	 .cfi_def_cfa_register 13
 4330              	 
 4331 000c 5DF8047B 	 ldr r7,[sp],#4
 4332              	.LCFI407:
 4333              	 .cfi_restore 7
 4334              	 .cfi_def_cfa_offset 0
 4335 0010 7047     	 bx lr
 4336              	.L289:
 4337 0012 00BF     	 .align 2
 4338              	.L288:
 4339 0014 10470050 	 .word 1342195472
 4340 0018 03000100 	 .word 65539
 4341              	 .cfi_endproc
 4342              	.LFE229:
 4344              	 .section .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode,"ax",%progbits
 4345              	 .align 2
 4346              	 .global XMC_SCU_CLOCK_SetBackupClockCalibrationMode
 4347              	 .thumb
 4348              	 .thumb_func
 4350              	XMC_SCU_CLOCK_SetBackupClockCalibrationMode:
 4351              	.LFB230:
1130:../Libraries/XMCLib/src/xmc4_scu.c **** 
1131:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to onfigure the calibration mode for internal oscillator */
1132:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
1133:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4352              	 .loc 3 1133 0
 4353              	 .cfi_startproc
 4354              	 
 4355              	 
 4356 0000 80B5     	 push {r7,lr}
 4357              	.LCFI408:
 4358              	 .cfi_def_cfa_offset 8
 4359              	 .cfi_offset 7,-8
 4360              	 .cfi_offset 14,-4
 4361 0002 82B0     	 sub sp,sp,#8
 4362              	.LCFI409:
 4363              	 .cfi_def_cfa_offset 16
 4364 0004 00AF     	 add r7,sp,#0
 4365              	.LCFI410:
 4366              	 .cfi_def_cfa_register 7
 4367 0006 0346     	 mov r3,r0
 4368 0008 FB71     	 strb r3,[r7,#7]
1134:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Enable factory calibration based trimming */
1135:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 4369              	 .loc 3 1135 0
 4370 000a 0F4A     	 ldr r2,.L292
 4371 000c 0E4B     	 ldr r3,.L292
 4372 000e 5B68     	 ldr r3,[r3,#4]
 4373 0010 43F48013 	 orr r3,r3,#1048576
 4374 0014 5360     	 str r3,[r2,#4]
1136:../Libraries/XMCLib/src/xmc4_scu.c **** 
1137:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 4375              	 .loc 3 1137 0
 4376 0016 FB79     	 ldrb r3,[r7,#7]
 4377 0018 012B     	 cmp r3,#1
 4378 001a 0ED1     	 bne .L291
1138:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1139:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Disable factory calibration based trimming */
1140:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 4379              	 .loc 3 1140 0
 4380 001c 0A4A     	 ldr r2,.L292
 4381 001e 0A4B     	 ldr r3,.L292
 4382 0020 5B68     	 ldr r3,[r3,#4]
 4383 0022 23F48013 	 bic r3,r3,#1048576
 4384 0026 5360     	 str r3,[r2,#4]
1141:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_lDelay(100UL);
 4385              	 .loc 3 1141 0
 4386 0028 6420     	 movs r0,#100
 4387 002a FFF7FEFF 	 bl XMC_SCU_lDelay
1142:../Libraries/XMCLib/src/xmc4_scu.c **** 
1143:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Enable automatic calibration */
1144:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 4388              	 .loc 3 1144 0
 4389 002e 064A     	 ldr r2,.L292
 4390 0030 054B     	 ldr r3,.L292
 4391 0032 5B68     	 ldr r3,[r3,#4]
 4392 0034 43F40023 	 orr r3,r3,#524288
 4393 0038 5360     	 str r3,[r2,#4]
 4394              	.L291:
1145:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1146:../Libraries/XMCLib/src/xmc4_scu.c **** 
1147:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(100UL);
 4395              	 .loc 3 1147 0
 4396 003a 6420     	 movs r0,#100
 4397 003c FFF7FEFF 	 bl XMC_SCU_lDelay
1148:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4398              	 .loc 3 1148 0
 4399 0040 0837     	 adds r7,r7,#8
 4400              	.LCFI411:
 4401              	 .cfi_def_cfa_offset 8
 4402 0042 BD46     	 mov sp,r7
 4403              	.LCFI412:
 4404              	 .cfi_def_cfa_register 13
 4405              	 
 4406 0044 80BD     	 pop {r7,pc}
 4407              	.L293:
 4408 0046 00BF     	 .align 2
 4409              	.L292:
 4410 0048 10470050 	 .word 1342195472
 4411              	 .cfi_endproc
 4412              	.LFE230:
 4414              	 .section .text.XMC_SCU_POWER_EnableUsb,"ax",%progbits
 4415              	 .align 2
 4416              	 .global XMC_SCU_POWER_EnableUsb
 4417              	 .thumb
 4418              	 .thumb_func
 4420              	XMC_SCU_POWER_EnableUsb:
 4421              	.LFB231:
1149:../Libraries/XMCLib/src/xmc4_scu.c **** 
1150:../Libraries/XMCLib/src/xmc4_scu.c **** 
1151:../Libraries/XMCLib/src/xmc4_scu.c **** 
1152:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable USB Phy and comparator */
1153:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_EnableUsb(void)
1154:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4422              	 .loc 3 1154 0
 4423              	 .cfi_startproc
 4424              	 
 4425              	 
 4426              	 
 4427 0000 80B4     	 push {r7}
 4428              	.LCFI413:
 4429              	 .cfi_def_cfa_offset 4
 4430              	 .cfi_offset 7,-4
 4431 0002 00AF     	 add r7,sp,#0
 4432              	.LCFI414:
 4433              	 .cfi_def_cfa_register 7
1155:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1156:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 4434              	 .loc 3 1156 0
 4435 0004 034B     	 ldr r3,.L295
 4436 0006 4FF44032 	 mov r2,#196608
 4437 000a 5A60     	 str r2,[r3,#4]
1157:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1158:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_USBPHYPDQ_Msk;
1159:../Libraries/XMCLib/src/xmc4_scu.c **** #endif
1160:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4438              	 .loc 3 1160 0
 4439 000c BD46     	 mov sp,r7
 4440              	.LCFI415:
 4441              	 .cfi_def_cfa_register 13
 4442              	 
 4443 000e 5DF8047B 	 ldr r7,[sp],#4
 4444              	.LCFI416:
 4445              	 .cfi_restore 7
 4446              	 .cfi_def_cfa_offset 0
 4447 0012 7047     	 bx lr
 4448              	.L296:
 4449              	 .align 2
 4450              	.L295:
 4451 0014 00420050 	 .word 1342194176
 4452              	 .cfi_endproc
 4453              	.LFE231:
 4455              	 .section .text.XMC_SCU_POWER_DisableUsb,"ax",%progbits
 4456              	 .align 2
 4457              	 .global XMC_SCU_POWER_DisableUsb
 4458              	 .thumb
 4459              	 .thumb_func
 4461              	XMC_SCU_POWER_DisableUsb:
 4462              	.LFB232:
1161:../Libraries/XMCLib/src/xmc4_scu.c **** 
1162:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down USB Phy and comparator */
1163:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_POWER_DisableUsb(void)
1164:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4463              	 .loc 3 1164 0
 4464              	 .cfi_startproc
 4465              	 
 4466              	 
 4467              	 
 4468 0000 80B4     	 push {r7}
 4469              	.LCFI417:
 4470              	 .cfi_def_cfa_offset 4
 4471              	 .cfi_offset 7,-4
 4472 0002 00AF     	 add r7,sp,#0
 4473              	.LCFI418:
 4474              	 .cfi_def_cfa_register 7
1165:../Libraries/XMCLib/src/xmc4_scu.c **** #if defined(USB_OTG_SUPPORTED)
1166:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)(SCU_POWER_PWRCLR_USBOTGEN_Msk | SCU_POWER_PWRSET_USBPHYPDQ_Msk);
 4475              	 .loc 3 1166 0
 4476 0004 034B     	 ldr r3,.L298
 4477 0006 4FF44032 	 mov r2,#196608
 4478 000a 9A60     	 str r2,[r3,#8]
1167:../Libraries/XMCLib/src/xmc4_scu.c **** #else
1168:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_USBPHYPDQ_Msk;
1169:../Libraries/XMCLib/src/xmc4_scu.c **** #endif    
1170:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4479              	 .loc 3 1170 0
 4480 000c BD46     	 mov sp,r7
 4481              	.LCFI419:
 4482              	 .cfi_def_cfa_register 13
 4483              	 
 4484 000e 5DF8047B 	 ldr r7,[sp],#4
 4485              	.LCFI420:
 4486              	 .cfi_restore 7
 4487              	 .cfi_def_cfa_offset 0
 4488 0012 7047     	 bx lr
 4489              	.L299:
 4490              	 .align 2
 4491              	.L298:
 4492 0014 00420050 	 .word 1342194176
 4493              	 .cfi_endproc
 4494              	.LFE232:
 4496              	 .section .text.XMC_SCU_CLOCK_IsUsbPllLocked,"ax",%progbits
 4497              	 .align 2
 4498              	 .global XMC_SCU_CLOCK_IsUsbPllLocked
 4499              	 .thumb
 4500              	 .thumb_func
 4502              	XMC_SCU_CLOCK_IsUsbPllLocked:
 4503              	.LFB233:
1171:../Libraries/XMCLib/src/xmc4_scu.c **** 
1172:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check USB PLL is locked or not */
1173:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsUsbPllLocked(void)
1174:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4504              	 .loc 3 1174 0
 4505              	 .cfi_startproc
 4506              	 
 4507              	 
 4508              	 
 4509 0000 80B4     	 push {r7}
 4510              	.LCFI421:
 4511              	 .cfi_def_cfa_offset 4
 4512              	 .cfi_offset 7,-4
 4513 0002 00AF     	 add r7,sp,#0
 4514              	.LCFI422:
 4515              	 .cfi_def_cfa_register 7
1175:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
 4516              	 .loc 3 1175 0
 4517 0004 064B     	 ldr r3,.L302
 4518 0006 1B69     	 ldr r3,[r3,#16]
 4519 0008 03F00403 	 and r3,r3,#4
 4520 000c 002B     	 cmp r3,#0
 4521 000e 14BF     	 ite ne
 4522 0010 0123     	 movne r3,#1
 4523 0012 0023     	 moveq r3,#0
 4524 0014 DBB2     	 uxtb r3,r3
1176:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4525              	 .loc 3 1176 0
 4526 0016 1846     	 mov r0,r3
 4527 0018 BD46     	 mov sp,r7
 4528              	.LCFI423:
 4529              	 .cfi_def_cfa_register 13
 4530              	 
 4531 001a 5DF8047B 	 ldr r7,[sp],#4
 4532              	.LCFI424:
 4533              	 .cfi_restore 7
 4534              	 .cfi_def_cfa_offset 0
 4535 001e 7047     	 bx lr
 4536              	.L303:
 4537              	 .align 2
 4538              	.L302:
 4539 0020 10470050 	 .word 1342195472
 4540              	 .cfi_endproc
 4541              	.LFE233:
 4543              	 .section .text.XMC_SCU_HIB_EnableHibernateDomain,"ax",%progbits
 4544              	 .align 2
 4545              	 .global XMC_SCU_HIB_EnableHibernateDomain
 4546              	 .thumb
 4547              	 .thumb_func
 4549              	XMC_SCU_HIB_EnableHibernateDomain:
 4550              	.LFB234:
1177:../Libraries/XMCLib/src/xmc4_scu.c **** 
1178:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power up the hibernation domain */
1179:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableHibernateDomain(void)
1180:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4551              	 .loc 3 1180 0
 4552              	 .cfi_startproc
 4553              	 
 4554              	 
 4555              	 
 4556 0000 80B4     	 push {r7}
 4557              	.LCFI425:
 4558              	 .cfi_def_cfa_offset 4
 4559              	 .cfi_offset 7,-4
 4560 0002 00AF     	 add r7,sp,#0
 4561              	.LCFI426:
 4562              	 .cfi_def_cfa_register 7
1181:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Power up HIB domain if and only if it is currently powered down */
1182:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 4563              	 .loc 3 1182 0
 4564 0004 124B     	 ldr r3,.L309
 4565 0006 1B68     	 ldr r3,[r3]
 4566 0008 03F00103 	 and r3,r3,#1
 4567 000c 002B     	 cmp r3,#0
 4568 000e 09D1     	 bne .L305
1183:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1184:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 4569              	 .loc 3 1184 0
 4570 0010 0F4B     	 ldr r3,.L309
 4571 0012 0122     	 movs r2,#1
 4572 0014 5A60     	 str r2,[r3,#4]
1185:../Libraries/XMCLib/src/xmc4_scu.c ****     
1186:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 4573              	 .loc 3 1186 0
 4574 0016 00BF     	 nop
 4575              	.L306:
 4576              	 .loc 3 1186 0 is_stmt 0 discriminator 1
 4577 0018 0D4B     	 ldr r3,.L309
 4578 001a 1B68     	 ldr r3,[r3]
 4579 001c 03F00103 	 and r3,r3,#1
 4580 0020 002B     	 cmp r3,#0
 4581 0022 F9D0     	 beq .L306
 4582              	.L305:
1187:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1188:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1189:../Libraries/XMCLib/src/xmc4_scu.c ****     }    
1190:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1191:../Libraries/XMCLib/src/xmc4_scu.c ****   
1192:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Remove the reset only if HIB domain were in a state of reset */
1193:../Libraries/XMCLib/src/xmc4_scu.c ****   if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 4583              	 .loc 3 1193 0 is_stmt 1
 4584 0024 0B4B     	 ldr r3,.L309+4
 4585 0026 1B68     	 ldr r3,[r3]
 4586 0028 03F40073 	 and r3,r3,#512
 4587 002c 002B     	 cmp r3,#0
 4588 002e 0AD0     	 beq .L304
1194:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1195:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 4589              	 .loc 3 1195 0
 4590 0030 084B     	 ldr r3,.L309+4
 4591 0032 4FF40072 	 mov r2,#512
 4592 0036 9A60     	 str r2,[r3,#8]
1196:../Libraries/XMCLib/src/xmc4_scu.c ****     while((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 4593              	 .loc 3 1196 0
 4594 0038 00BF     	 nop
 4595              	.L308:
 4596              	 .loc 3 1196 0 is_stmt 0 discriminator 1
 4597 003a 064B     	 ldr r3,.L309+4
 4598 003c 1B68     	 ldr r3,[r3]
 4599 003e 03F40073 	 and r3,r3,#512
 4600 0042 002B     	 cmp r3,#0
 4601 0044 F9D1     	 bne .L308
 4602              	.L304:
1197:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1198:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait until HIB domain is enabled */
1199:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1200:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1201:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4603              	 .loc 3 1201 0 is_stmt 1
 4604 0046 BD46     	 mov sp,r7
 4605              	.LCFI427:
 4606              	 .cfi_def_cfa_register 13
 4607              	 
 4608 0048 5DF8047B 	 ldr r7,[sp],#4
 4609              	.LCFI428:
 4610              	 .cfi_restore 7
 4611              	 .cfi_def_cfa_offset 0
 4612 004c 7047     	 bx lr
 4613              	.L310:
 4614 004e 00BF     	 .align 2
 4615              	.L309:
 4616 0050 00420050 	 .word 1342194176
 4617 0054 00440050 	 .word 1342194688
 4618              	 .cfi_endproc
 4619              	.LFE234:
 4621              	 .section .text.XMC_SCU_HIB_DisableHibernateDomain,"ax",%progbits
 4622              	 .align 2
 4623              	 .global XMC_SCU_HIB_DisableHibernateDomain
 4624              	 .thumb
 4625              	 .thumb_func
 4627              	XMC_SCU_HIB_DisableHibernateDomain:
 4628              	.LFB235:
1202:../Libraries/XMCLib/src/xmc4_scu.c **** 
1203:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to power down the hibernation domain */
1204:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableHibernateDomain(void)
1205:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4629              	 .loc 3 1205 0
 4630              	 .cfi_startproc
 4631              	 
 4632              	 
 4633              	 
 4634 0000 80B4     	 push {r7}
 4635              	.LCFI429:
 4636              	 .cfi_def_cfa_offset 4
 4637              	 .cfi_offset 7,-4
 4638 0002 00AF     	 add r7,sp,#0
 4639              	.LCFI430:
 4640              	 .cfi_def_cfa_register 7
1206:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Disable hibernate domain */   
1207:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_POWER->PWRCLR = (uint32_t)SCU_POWER_PWRCLR_HIB_Msk;
 4641              	 .loc 3 1207 0
 4642 0004 054B     	 ldr r3,.L312
 4643 0006 0122     	 movs r2,#1
 4644 0008 9A60     	 str r2,[r3,#8]
1208:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Reset of hibernate domain reset */  
1209:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
 4645              	 .loc 3 1209 0
 4646 000a 054B     	 ldr r3,.L312+4
 4647 000c 4FF40072 	 mov r2,#512
 4648 0010 5A60     	 str r2,[r3,#4]
1210:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4649              	 .loc 3 1210 0
 4650 0012 BD46     	 mov sp,r7
 4651              	.LCFI431:
 4652              	 .cfi_def_cfa_register 13
 4653              	 
 4654 0014 5DF8047B 	 ldr r7,[sp],#4
 4655              	.LCFI432:
 4656              	 .cfi_restore 7
 4657              	 .cfi_def_cfa_offset 0
 4658 0018 7047     	 bx lr
 4659              	.L313:
 4660 001a 00BF     	 .align 2
 4661              	.L312:
 4662 001c 00420050 	 .word 1342194176
 4663 0020 00440050 	 .word 1342194688
 4664              	 .cfi_endproc
 4665              	.LFE235:
 4667              	 .section .text.XMC_SCU_HIB_IsHibernateDomainEnabled,"ax",%progbits
 4668              	 .align 2
 4669              	 .global XMC_SCU_HIB_IsHibernateDomainEnabled
 4670              	 .thumb
 4671              	 .thumb_func
 4673              	XMC_SCU_HIB_IsHibernateDomainEnabled:
 4674              	.LFB236:
1211:../Libraries/XMCLib/src/xmc4_scu.c **** 
1212:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check the hibernation domain is enabled or not */
1213:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
1214:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4675              	 .loc 3 1214 0
 4676              	 .cfi_startproc
 4677              	 
 4678              	 
 4679              	 
 4680 0000 80B4     	 push {r7}
 4681              	.LCFI433:
 4682              	 .cfi_def_cfa_offset 4
 4683              	 .cfi_offset 7,-4
 4684 0002 00AF     	 add r7,sp,#0
 4685              	.LCFI434:
 4686              	 .cfi_def_cfa_register 7
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4687              	 .loc 3 1215 0
 4688 0004 0B4B     	 ldr r3,.L318
 4689 0006 1B68     	 ldr r3,[r3]
 4690 0008 03F00103 	 and r3,r3,#1
 4691 000c 002B     	 cmp r3,#0
 4692 000e 07D0     	 beq .L315
1216:../Libraries/XMCLib/src/xmc4_scu.c ****           !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 4693              	 .loc 3 1216 0 discriminator 1
 4694 0010 094B     	 ldr r3,.L318+4
 4695 0012 1B68     	 ldr r3,[r3]
 4696 0014 03F40073 	 and r3,r3,#512
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4697              	 .loc 3 1215 0 discriminator 1
 4698 0018 002B     	 cmp r3,#0
 4699 001a 01D1     	 bne .L315
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4700              	 .loc 3 1215 0 is_stmt 0 discriminator 3
 4701 001c 0123     	 movs r3,#1
 4702 001e 00E0     	 b .L316
 4703              	.L315:
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4704              	 .loc 3 1215 0 discriminator 4
 4705 0020 0023     	 movs r3,#0
 4706              	.L316:
1215:../Libraries/XMCLib/src/xmc4_scu.c ****   return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) && 
 4707              	 .loc 3 1215 0 discriminator 6
 4708 0022 03F00103 	 and r3,r3,#1
 4709 0026 DBB2     	 uxtb r3,r3
1217:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4710              	 .loc 3 1217 0 is_stmt 1 discriminator 6
 4711 0028 1846     	 mov r0,r3
 4712 002a BD46     	 mov sp,r7
 4713              	.LCFI435:
 4714              	 .cfi_def_cfa_register 13
 4715              	 
 4716 002c 5DF8047B 	 ldr r7,[sp],#4
 4717              	.LCFI436:
 4718              	 .cfi_restore 7
 4719              	 .cfi_def_cfa_offset 0
 4720 0030 7047     	 bx lr
 4721              	.L319:
 4722 0032 00BF     	 .align 2
 4723              	.L318:
 4724 0034 00420050 	 .word 1342194176
 4725 0038 00440050 	 .word 1342194688
 4726              	 .cfi_endproc
 4727              	.LFE236:
 4729              	 .section .text.XMC_SCU_HIB_EnableInternalSlowClock,"ax",%progbits
 4730              	 .align 2
 4731              	 .global XMC_SCU_HIB_EnableInternalSlowClock
 4732              	 .thumb
 4733              	 .thumb_func
 4735              	XMC_SCU_HIB_EnableInternalSlowClock:
 4736              	.LFB237:
1218:../Libraries/XMCLib/src/xmc4_scu.c **** 
1219:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1220:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableInternalSlowClock(void)
1221:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4737              	 .loc 3 1221 0
 4738              	 .cfi_startproc
 4739              	 
 4740              	 
 4741              	 
 4742 0000 80B4     	 push {r7}
 4743              	.LCFI437:
 4744              	 .cfi_def_cfa_offset 4
 4745              	 .cfi_offset 7,-4
 4746 0002 00AF     	 add r7,sp,#0
 4747              	.LCFI438:
 4748              	 .cfi_def_cfa_register 7
1222:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 4749              	 .loc 3 1222 0
 4750 0004 00BF     	 nop
 4751              	.L321:
 4752              	 .loc 3 1222 0 is_stmt 0 discriminator 1
 4753 0006 084B     	 ldr r3,.L322
 4754 0008 D3F8C430 	 ldr r3,[r3,#196]
 4755 000c 03F02003 	 and r3,r3,#32
 4756 0010 002B     	 cmp r3,#0
 4757 0012 F8D1     	 bne .L321
1223:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1224:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1225:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1226:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL &= (uint32_t)~(SCU_HIBERNATE_OSCSICTRL_PWD_Msk);
 4758              	 .loc 3 1226 0 is_stmt 1
 4759 0014 054A     	 ldr r2,.L322+4
 4760 0016 054B     	 ldr r3,.L322+4
 4761 0018 5B69     	 ldr r3,[r3,#20]
 4762 001a 23F00103 	 bic r3,r3,#1
 4763 001e 5361     	 str r3,[r2,#20]
1227:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4764              	 .loc 3 1227 0
 4765 0020 BD46     	 mov sp,r7
 4766              	.LCFI439:
 4767              	 .cfi_def_cfa_register 13
 4768              	 
 4769 0022 5DF8047B 	 ldr r7,[sp],#4
 4770              	.LCFI440:
 4771              	 .cfi_restore 7
 4772              	 .cfi_def_cfa_offset 0
 4773 0026 7047     	 bx lr
 4774              	.L323:
 4775              	 .align 2
 4776              	.L322:
 4777 0028 00400050 	 .word 1342193664
 4778 002c 00430050 	 .word 1342194432
 4779              	 .cfi_endproc
 4780              	.LFE237:
 4782              	 .section .text.XMC_SCU_HIB_DisableInternalSlowClock,"ax",%progbits
 4783              	 .align 2
 4784              	 .global XMC_SCU_HIB_DisableInternalSlowClock
 4785              	 .thumb
 4786              	 .thumb_func
 4788              	XMC_SCU_HIB_DisableInternalSlowClock:
 4789              	.LFB238:
1228:../Libraries/XMCLib/src/xmc4_scu.c **** 
1229:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable internal slow clock - fOSI (32.768kHz) in hibernate domain */
1230:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableInternalSlowClock(void)
1231:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4790              	 .loc 3 1231 0
 4791              	 .cfi_startproc
 4792              	 
 4793              	 
 4794              	 
 4795 0000 80B4     	 push {r7}
 4796              	.LCFI441:
 4797              	 .cfi_def_cfa_offset 4
 4798              	 .cfi_offset 7,-4
 4799 0002 00AF     	 add r7,sp,#0
 4800              	.LCFI442:
 4801              	 .cfi_def_cfa_register 7
1232:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCSICTRL_Msk)
 4802              	 .loc 3 1232 0
 4803 0004 00BF     	 nop
 4804              	.L325:
 4805              	 .loc 3 1232 0 is_stmt 0 discriminator 1
 4806 0006 084B     	 ldr r3,.L326
 4807 0008 D3F8C430 	 ldr r3,[r3,#196]
 4808 000c 03F02003 	 and r3,r3,#32
 4809 0010 002B     	 cmp r3,#0
 4810 0012 F8D1     	 bne .L325
1233:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1234:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCSICTRL register in hibernate domain is ready to accept a write */  
1235:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1236:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCSICTRL |= (uint32_t)SCU_HIBERNATE_OSCSICTRL_PWD_Msk;
 4811              	 .loc 3 1236 0 is_stmt 1
 4812 0014 054A     	 ldr r2,.L326+4
 4813 0016 054B     	 ldr r3,.L326+4
 4814 0018 5B69     	 ldr r3,[r3,#20]
 4815 001a 43F00103 	 orr r3,r3,#1
 4816 001e 5361     	 str r3,[r2,#20]
1237:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4817              	 .loc 3 1237 0
 4818 0020 BD46     	 mov sp,r7
 4819              	.LCFI443:
 4820              	 .cfi_def_cfa_register 13
 4821              	 
 4822 0022 5DF8047B 	 ldr r7,[sp],#4
 4823              	.LCFI444:
 4824              	 .cfi_restore 7
 4825              	 .cfi_def_cfa_offset 0
 4826 0026 7047     	 bx lr
 4827              	.L327:
 4828              	 .align 2
 4829              	.L326:
 4830 0028 00400050 	 .word 1342193664
 4831 002c 00430050 	 .word 1342194432
 4832              	 .cfi_endproc
 4833              	.LFE238:
 4835              	 .section .text.XMC_SCU_HIB_ClearEventStatus,"ax",%progbits
 4836              	 .align 2
 4837              	 .global XMC_SCU_HIB_ClearEventStatus
 4838              	 .thumb
 4839              	 .thumb_func
 4841              	XMC_SCU_HIB_ClearEventStatus:
 4842              	.LFB239:
1238:../Libraries/XMCLib/src/xmc4_scu.c **** 
1239:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1240:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1241:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1242:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_ClearEventStatus(int32_t event)
1243:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4843              	 .loc 3 1243 0
 4844              	 .cfi_startproc
 4845              	 
 4846              	 
 4847              	 
 4848 0000 80B4     	 push {r7}
 4849              	.LCFI445:
 4850              	 .cfi_def_cfa_offset 4
 4851              	 .cfi_offset 7,-4
 4852 0002 83B0     	 sub sp,sp,#12
 4853              	.LCFI446:
 4854              	 .cfi_def_cfa_offset 16
 4855 0004 00AF     	 add r7,sp,#0
 4856              	.LCFI447:
 4857              	 .cfi_def_cfa_register 7
 4858 0006 7860     	 str r0,[r7,#4]
1244:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 4859              	 .loc 3 1244 0
 4860 0008 00BF     	 nop
 4861              	.L329:
 4862              	 .loc 3 1244 0 is_stmt 0 discriminator 1
 4863 000a 074B     	 ldr r3,.L330
 4864 000c D3F8C430 	 ldr r3,[r3,#196]
 4865 0010 03F00203 	 and r3,r3,#2
 4866 0014 002B     	 cmp r3,#0
 4867 0016 F8D1     	 bne .L329
1245:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1246:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCLR register in hibernate domain is ready to accept a write */  
1247:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1248:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCLR = event;
 4868              	 .loc 3 1248 0 is_stmt 1
 4869 0018 044A     	 ldr r2,.L330+4
 4870 001a 7B68     	 ldr r3,[r7,#4]
 4871 001c 5360     	 str r3,[r2,#4]
1249:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4872              	 .loc 3 1249 0
 4873 001e 0C37     	 adds r7,r7,#12
 4874              	.LCFI448:
 4875              	 .cfi_def_cfa_offset 4
 4876 0020 BD46     	 mov sp,r7
 4877              	.LCFI449:
 4878              	 .cfi_def_cfa_register 13
 4879              	 
 4880 0022 5DF8047B 	 ldr r7,[sp],#4
 4881              	.LCFI450:
 4882              	 .cfi_restore 7
 4883              	 .cfi_def_cfa_offset 0
 4884 0026 7047     	 bx lr
 4885              	.L331:
 4886              	 .align 2
 4887              	.L330:
 4888 0028 00400050 	 .word 1342193664
 4889 002c 00430050 	 .word 1342194432
 4890              	 .cfi_endproc
 4891              	.LFE239:
 4893              	 .section .text.XMC_SCU_HIB_TriggerEvent,"ax",%progbits
 4894              	 .align 2
 4895              	 .global XMC_SCU_HIB_TriggerEvent
 4896              	 .thumb
 4897              	 .thumb_func
 4899              	XMC_SCU_HIB_TriggerEvent:
 4900              	.LFB240:
1250:../Libraries/XMCLib/src/xmc4_scu.c **** 
1251:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1252:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1253:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1254:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_TriggerEvent(int32_t event)
1255:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4901              	 .loc 3 1255 0
 4902              	 .cfi_startproc
 4903              	 
 4904              	 
 4905              	 
 4906 0000 80B4     	 push {r7}
 4907              	.LCFI451:
 4908              	 .cfi_def_cfa_offset 4
 4909              	 .cfi_offset 7,-4
 4910 0002 83B0     	 sub sp,sp,#12
 4911              	.LCFI452:
 4912              	 .cfi_def_cfa_offset 16
 4913 0004 00AF     	 add r7,sp,#0
 4914              	.LCFI453:
 4915              	 .cfi_def_cfa_register 7
 4916 0006 7860     	 str r0,[r7,#4]
1256:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDSET_Msk)
 4917              	 .loc 3 1256 0
 4918 0008 00BF     	 nop
 4919              	.L333:
 4920              	 .loc 3 1256 0 is_stmt 0 discriminator 1
 4921 000a 074B     	 ldr r3,.L334
 4922 000c D3F8C430 	 ldr r3,[r3,#196]
 4923 0010 03F00403 	 and r3,r3,#4
 4924 0014 002B     	 cmp r3,#0
 4925 0016 F8D1     	 bne .L333
1257:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1258:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDSET register in hibernate domain is ready to accept a write */    
1259:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1260:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDSET = event;
 4926              	 .loc 3 1260 0 is_stmt 1
 4927 0018 044A     	 ldr r2,.L334+4
 4928 001a 7B68     	 ldr r3,[r7,#4]
 4929 001c 9360     	 str r3,[r2,#8]
1261:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4930              	 .loc 3 1261 0
 4931 001e 0C37     	 adds r7,r7,#12
 4932              	.LCFI454:
 4933              	 .cfi_def_cfa_offset 4
 4934 0020 BD46     	 mov sp,r7
 4935              	.LCFI455:
 4936              	 .cfi_def_cfa_register 13
 4937              	 
 4938 0022 5DF8047B 	 ldr r7,[sp],#4
 4939              	.LCFI456:
 4940              	 .cfi_restore 7
 4941              	 .cfi_def_cfa_offset 0
 4942 0026 7047     	 bx lr
 4943              	.L335:
 4944              	 .align 2
 4945              	.L334:
 4946 0028 00400050 	 .word 1342193664
 4947 002c 00430050 	 .word 1342194432
 4948              	 .cfi_endproc
 4949              	.LFE240:
 4951              	 .section .text.XMC_SCU_HIB_EnableEvent,"ax",%progbits
 4952              	 .align 2
 4953              	 .global XMC_SCU_HIB_EnableEvent
 4954              	 .thumb
 4955              	 .thumb_func
 4957              	XMC_SCU_HIB_EnableEvent:
 4958              	.LFB241:
1262:../Libraries/XMCLib/src/xmc4_scu.c **** 
1263:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1264:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1265:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1266:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnableEvent(int32_t event)
1267:../Libraries/XMCLib/src/xmc4_scu.c **** {
 4959              	 .loc 3 1267 0
 4960              	 .cfi_startproc
 4961              	 
 4962              	 
 4963              	 
 4964 0000 80B4     	 push {r7}
 4965              	.LCFI457:
 4966              	 .cfi_def_cfa_offset 4
 4967              	 .cfi_offset 7,-4
 4968 0002 83B0     	 sub sp,sp,#12
 4969              	.LCFI458:
 4970              	 .cfi_def_cfa_offset 16
 4971 0004 00AF     	 add r7,sp,#0
 4972              	.LCFI459:
 4973              	 .cfi_def_cfa_register 7
 4974 0006 7860     	 str r0,[r7,#4]
1268:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 4975              	 .loc 3 1268 0
 4976 0008 00BF     	 nop
 4977              	.L337:
 4978              	 .loc 3 1268 0 is_stmt 0 discriminator 1
 4979 000a 094B     	 ldr r3,.L338
 4980 000c D3F8C430 	 ldr r3,[r3,#196]
 4981 0010 03F00803 	 and r3,r3,#8
 4982 0014 002B     	 cmp r3,#0
 4983 0016 F8D1     	 bne .L337
1269:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1270:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1271:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1272:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= event;
 4984              	 .loc 3 1272 0 is_stmt 1
 4985 0018 0649     	 ldr r1,.L338+4
 4986 001a 064B     	 ldr r3,.L338+4
 4987 001c DA68     	 ldr r2,[r3,#12]
 4988 001e 7B68     	 ldr r3,[r7,#4]
 4989 0020 1343     	 orrs r3,r3,r2
 4990 0022 CB60     	 str r3,[r1,#12]
1273:../Libraries/XMCLib/src/xmc4_scu.c **** }
 4991              	 .loc 3 1273 0
 4992 0024 0C37     	 adds r7,r7,#12
 4993              	.LCFI460:
 4994              	 .cfi_def_cfa_offset 4
 4995 0026 BD46     	 mov sp,r7
 4996              	.LCFI461:
 4997              	 .cfi_def_cfa_register 13
 4998              	 
 4999 0028 5DF8047B 	 ldr r7,[sp],#4
 5000              	.LCFI462:
 5001              	 .cfi_restore 7
 5002              	 .cfi_def_cfa_offset 0
 5003 002c 7047     	 bx lr
 5004              	.L339:
 5005 002e 00BF     	 .align 2
 5006              	.L338:
 5007 0030 00400050 	 .word 1342193664
 5008 0034 00430050 	 .word 1342194432
 5009              	 .cfi_endproc
 5010              	.LFE241:
 5012              	 .section .text.XMC_SCU_HIB_DisableEvent,"ax",%progbits
 5013              	 .align 2
 5014              	 .global XMC_SCU_HIB_DisableEvent
 5015              	 .thumb
 5016              	 .thumb_func
 5018              	XMC_SCU_HIB_DisableEvent:
 5019              	.LFB242:
1274:../Libraries/XMCLib/src/xmc4_scu.c **** 
1275:../Libraries/XMCLib/src/xmc4_scu.c **** /** TODO
1276:../Libraries/XMCLib/src/xmc4_scu.c ****  *
1277:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1278:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_DisableEvent(int32_t event)
1279:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5020              	 .loc 3 1279 0
 5021              	 .cfi_startproc
 5022              	 
 5023              	 
 5024              	 
 5025 0000 80B4     	 push {r7}
 5026              	.LCFI463:
 5027              	 .cfi_def_cfa_offset 4
 5028              	 .cfi_offset 7,-4
 5029 0002 83B0     	 sub sp,sp,#12
 5030              	.LCFI464:
 5031              	 .cfi_def_cfa_offset 16
 5032 0004 00AF     	 add r7,sp,#0
 5033              	.LCFI465:
 5034              	 .cfi_def_cfa_register 7
 5035 0006 7860     	 str r0,[r7,#4]
1280:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5036              	 .loc 3 1280 0
 5037 0008 00BF     	 nop
 5038              	.L341:
 5039              	 .loc 3 1280 0 is_stmt 0 discriminator 1
 5040 000a 094B     	 ldr r3,.L342
 5041 000c D3F8C430 	 ldr r3,[r3,#196]
 5042 0010 03F00803 	 and r3,r3,#8
 5043 0014 002B     	 cmp r3,#0
 5044 0016 F8D1     	 bne .L341
1281:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1282:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1283:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1284:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR &= ~event;
 5045              	 .loc 3 1284 0 is_stmt 1
 5046 0018 0649     	 ldr r1,.L342+4
 5047 001a 064B     	 ldr r3,.L342+4
 5048 001c DB68     	 ldr r3,[r3,#12]
 5049 001e 7A68     	 ldr r2,[r7,#4]
 5050 0020 D243     	 mvns r2,r2
 5051 0022 1340     	 ands r3,r3,r2
 5052 0024 CB60     	 str r3,[r1,#12]
1285:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5053              	 .loc 3 1285 0
 5054 0026 0C37     	 adds r7,r7,#12
 5055              	.LCFI466:
 5056              	 .cfi_def_cfa_offset 4
 5057 0028 BD46     	 mov sp,r7
 5058              	.LCFI467:
 5059              	 .cfi_def_cfa_register 13
 5060              	 
 5061 002a 5DF8047B 	 ldr r7,[sp],#4
 5062              	.LCFI468:
 5063              	 .cfi_restore 7
 5064              	 .cfi_def_cfa_offset 0
 5065 002e 7047     	 bx lr
 5066              	.L343:
 5067              	 .align 2
 5068              	.L342:
 5069 0030 00400050 	 .word 1342193664
 5070 0034 00430050 	 .word 1342194432
 5071              	 .cfi_endproc
 5072              	.LFE242:
 5074              	 .section .text.XMC_SCU_HIB_EnterHibernateState,"ax",%progbits
 5075              	 .align 2
 5076              	 .global XMC_SCU_HIB_EnterHibernateState
 5077              	 .thumb
 5078              	 .thumb_func
 5080              	XMC_SCU_HIB_EnterHibernateState:
 5081              	.LFB243:
1286:../Libraries/XMCLib/src/xmc4_scu.c **** 
1287:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_EnterHibernateState(void) 
1288:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5082              	 .loc 3 1288 0
 5083              	 .cfi_startproc
 5084              	 
 5085              	 
 5086              	 
 5087 0000 80B4     	 push {r7}
 5088              	.LCFI469:
 5089              	 .cfi_def_cfa_offset 4
 5090              	 .cfi_offset 7,-4
 5091 0002 00AF     	 add r7,sp,#0
 5092              	.LCFI470:
 5093              	 .cfi_def_cfa_register 7
1289:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5094              	 .loc 3 1289 0
 5095 0004 00BF     	 nop
 5096              	.L345:
 5097              	 .loc 3 1289 0 is_stmt 0 discriminator 1
 5098 0006 084B     	 ldr r3,.L346
 5099 0008 D3F8C430 	 ldr r3,[r3,#196]
 5100 000c 03F00803 	 and r3,r3,#8
 5101 0010 002B     	 cmp r3,#0
 5102 0012 F8D1     	 bne .L345
1290:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1291:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1292:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1293:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_HIB_Msk;
 5103              	 .loc 3 1293 0 is_stmt 1
 5104 0014 054A     	 ldr r2,.L346+4
 5105 0016 054B     	 ldr r3,.L346+4
 5106 0018 DB68     	 ldr r3,[r3,#12]
 5107 001a 43F01003 	 orr r3,r3,#16
 5108 001e D360     	 str r3,[r2,#12]
1294:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5109              	 .loc 3 1294 0
 5110 0020 BD46     	 mov sp,r7
 5111              	.LCFI471:
 5112              	 .cfi_def_cfa_register 13
 5113              	 
 5114 0022 5DF8047B 	 ldr r7,[sp],#4
 5115              	.LCFI472:
 5116              	 .cfi_restore 7
 5117              	 .cfi_def_cfa_offset 0
 5118 0026 7047     	 bx lr
 5119              	.L347:
 5120              	 .align 2
 5121              	.L346:
 5122 0028 00400050 	 .word 1342193664
 5123 002c 00430050 	 .word 1342194432
 5124              	 .cfi_endproc
 5125              	.LFE243:
 5127              	 .section .text.XMC_SCU_HIB_SetWakeupTriggerInput,"ax",%progbits
 5128              	 .align 2
 5129              	 .global XMC_SCU_HIB_SetWakeupTriggerInput
 5130              	 .thumb
 5131              	 .thumb_func
 5133              	XMC_SCU_HIB_SetWakeupTriggerInput:
 5134              	.LFB244:
1295:../Libraries/XMCLib/src/xmc4_scu.c **** 
1296:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetWakeupTriggerInput(XMC_SCU_HIB_IO_t pin)
1297:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5135              	 .loc 3 1297 0
 5136              	 .cfi_startproc
 5137              	 
 5138              	 
 5139              	 
 5140 0000 80B4     	 push {r7}
 5141              	.LCFI473:
 5142              	 .cfi_def_cfa_offset 4
 5143              	 .cfi_offset 7,-4
 5144 0002 83B0     	 sub sp,sp,#12
 5145              	.LCFI474:
 5146              	 .cfi_def_cfa_offset 16
 5147 0004 00AF     	 add r7,sp,#0
 5148              	.LCFI475:
 5149              	 .cfi_def_cfa_register 7
 5150 0006 0346     	 mov r3,r0
 5151 0008 FB71     	 strb r3,[r7,#7]
1298:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5152              	 .loc 3 1298 0
 5153 000a 00BF     	 nop
 5154              	.L349:
 5155              	 .loc 3 1298 0 is_stmt 0 discriminator 1
 5156 000c 0D4B     	 ldr r3,.L352
 5157 000e D3F8C430 	 ldr r3,[r3,#196]
 5158 0012 03F00803 	 and r3,r3,#8
 5159 0016 002B     	 cmp r3,#0
 5160 0018 F8D1     	 bne .L349
1299:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1300:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1301:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1302:../Libraries/XMCLib/src/xmc4_scu.c **** 
1303:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
 5161              	 .loc 3 1303 0 is_stmt 1
 5162 001a FB79     	 ldrb r3,[r7,#7]
 5163 001c 002B     	 cmp r3,#0
 5164 001e 06D1     	 bne .L350
1304:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1305:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_WKUPSEL_Msk;
 5165              	 .loc 3 1305 0
 5166 0020 094A     	 ldr r2,.L352+4
 5167 0022 094B     	 ldr r3,.L352+4
 5168 0024 DB68     	 ldr r3,[r3,#12]
 5169 0026 43F48073 	 orr r3,r3,#256
 5170 002a D360     	 str r3,[r2,#12]
 5171 002c 05E0     	 b .L348
 5172              	.L350:
1306:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1307:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1308:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1309:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_WKUPSEL_Msk; 
 5173              	 .loc 3 1309 0
 5174 002e 064A     	 ldr r2,.L352+4
 5175 0030 054B     	 ldr r3,.L352+4
 5176 0032 DB68     	 ldr r3,[r3,#12]
 5177 0034 23F48073 	 bic r3,r3,#256
 5178 0038 D360     	 str r3,[r2,#12]
 5179              	.L348:
1310:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1311:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5180              	 .loc 3 1311 0
 5181 003a 0C37     	 adds r7,r7,#12
 5182              	.LCFI476:
 5183              	 .cfi_def_cfa_offset 4
 5184 003c BD46     	 mov sp,r7
 5185              	.LCFI477:
 5186              	 .cfi_def_cfa_register 13
 5187              	 
 5188 003e 5DF8047B 	 ldr r7,[sp],#4
 5189              	.LCFI478:
 5190              	 .cfi_restore 7
 5191              	 .cfi_def_cfa_offset 0
 5192 0042 7047     	 bx lr
 5193              	.L353:
 5194              	 .align 2
 5195              	.L352:
 5196 0044 00400050 	 .word 1342193664
 5197 0048 00430050 	 .word 1342194432
 5198              	 .cfi_endproc
 5199              	.LFE244:
 5201              	 .section .text.XMC_SCU_HIB_SetPinMode,"ax",%progbits
 5202              	 .align 2
 5203              	 .global XMC_SCU_HIB_SetPinMode
 5204              	 .thumb
 5205              	 .thumb_func
 5207              	XMC_SCU_HIB_SetPinMode:
 5208              	.LFB245:
1312:../Libraries/XMCLib/src/xmc4_scu.c **** 
1313:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinMode(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_PIN_MODE_t mode)
1314:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5209              	 .loc 3 1314 0
 5210              	 .cfi_startproc
 5211              	 
 5212              	 
 5213              	 
 5214 0000 80B4     	 push {r7}
 5215              	.LCFI479:
 5216              	 .cfi_def_cfa_offset 4
 5217              	 .cfi_offset 7,-4
 5218 0002 83B0     	 sub sp,sp,#12
 5219              	.LCFI480:
 5220              	 .cfi_def_cfa_offset 16
 5221 0004 00AF     	 add r7,sp,#0
 5222              	.LCFI481:
 5223              	 .cfi_def_cfa_register 7
 5224 0006 0346     	 mov r3,r0
 5225 0008 3960     	 str r1,[r7]
 5226 000a FB71     	 strb r3,[r7,#7]
1315:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5227              	 .loc 3 1315 0
 5228 000c 00BF     	 nop
 5229              	.L355:
 5230              	 .loc 3 1315 0 is_stmt 0 discriminator 1
 5231 000e 0F4B     	 ldr r3,.L356
 5232 0010 D3F8C430 	 ldr r3,[r3,#196]
 5233 0014 03F00803 	 and r3,r3,#8
 5234 0018 002B     	 cmp r3,#0
 5235 001a F8D1     	 bne .L355
1316:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1317:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1318:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1319:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0SEL_Msk << (SCU_HIBERNATE
 5236              	 .loc 3 1319 0 is_stmt 1
 5237 001c 0C49     	 ldr r1,.L356+4
 5238 001e 0C4B     	 ldr r3,.L356+4
 5239 0020 DA68     	 ldr r2,[r3,#12]
 5240 0022 FB79     	 ldrb r3,[r7,#7]
 5241 0024 9B00     	 lsls r3,r3,#2
 5242 0026 1846     	 mov r0,r3
 5243 0028 4FF47023 	 mov r3,#983040
 5244 002c 8340     	 lsls r3,r3,r0
 5245 002e DB43     	 mvns r3,r3
 5246 0030 1A40     	 ands r2,r2,r3
1320:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 5247              	 .loc 3 1320 0
 5248 0032 FB79     	 ldrb r3,[r7,#7]
 5249 0034 9B00     	 lsls r3,r3,#2
1319:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 5250              	 .loc 3 1319 0
 5251 0036 1846     	 mov r0,r3
 5252              	 .loc 3 1320 0
 5253 0038 3B68     	 ldr r3,[r7]
 5254 003a 8340     	 lsls r3,r3,r0
1319:../Libraries/XMCLib/src/xmc4_scu.c ****                         (mode << (SCU_HIBERNATE_HDCR_HIBIOSEL_Size * pin));
 5255              	 .loc 3 1319 0
 5256 003c 1343     	 orrs r3,r3,r2
 5257 003e CB60     	 str r3,[r1,#12]
1321:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5258              	 .loc 3 1321 0
 5259 0040 0C37     	 adds r7,r7,#12
 5260              	.LCFI482:
 5261              	 .cfi_def_cfa_offset 4
 5262 0042 BD46     	 mov sp,r7
 5263              	.LCFI483:
 5264              	 .cfi_def_cfa_register 13
 5265              	 
 5266 0044 5DF8047B 	 ldr r7,[sp],#4
 5267              	.LCFI484:
 5268              	 .cfi_restore 7
 5269              	 .cfi_def_cfa_offset 0
 5270 0048 7047     	 bx lr
 5271              	.L357:
 5272 004a 00BF     	 .align 2
 5273              	.L356:
 5274 004c 00400050 	 .word 1342193664
 5275 0050 00430050 	 .word 1342194432
 5276              	 .cfi_endproc
 5277              	.LFE245:
 5279              	 .section .text.XMC_SCU_HIB_SetPinOutputLevel,"ax",%progbits
 5280              	 .align 2
 5281              	 .global XMC_SCU_HIB_SetPinOutputLevel
 5282              	 .thumb
 5283              	 .thumb_func
 5285              	XMC_SCU_HIB_SetPinOutputLevel:
 5286              	.LFB246:
1322:../Libraries/XMCLib/src/xmc4_scu.c **** 
1323:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetPinOutputLevel(XMC_SCU_HIB_IO_t pin, XMC_SCU_HIB_IO_OUTPUT_LEVEL_t level)
1324:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5287              	 .loc 3 1324 0
 5288              	 .cfi_startproc
 5289              	 
 5290              	 
 5291              	 
 5292 0000 80B4     	 push {r7}
 5293              	.LCFI485:
 5294              	 .cfi_def_cfa_offset 4
 5295              	 .cfi_offset 7,-4
 5296 0002 83B0     	 sub sp,sp,#12
 5297              	.LCFI486:
 5298              	 .cfi_def_cfa_offset 16
 5299 0004 00AF     	 add r7,sp,#0
 5300              	.LCFI487:
 5301              	 .cfi_def_cfa_register 7
 5302 0006 0346     	 mov r3,r0
 5303 0008 0A46     	 mov r2,r1
 5304 000a FB71     	 strb r3,[r7,#7]
 5305 000c 1346     	 mov r3,r2
 5306 000e BB80     	 strh r3,[r7,#4]
1325:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5307              	 .loc 3 1325 0
 5308 0010 00BF     	 nop
 5309              	.L359:
 5310              	 .loc 3 1325 0 is_stmt 0 discriminator 1
 5311 0012 0E4B     	 ldr r3,.L360
 5312 0014 D3F8C430 	 ldr r3,[r3,#196]
 5313 0018 03F00803 	 and r3,r3,#8
 5314 001c 002B     	 cmp r3,#0
 5315 001e F8D1     	 bne .L359
1326:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1327:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1328:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1329:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ~(SCU_HIBERNATE_HDCR_HIBIO0POL_Msk << pin)) |
 5316              	 .loc 3 1329 0 is_stmt 1
 5317 0020 0B48     	 ldr r0,.L360+4
 5318 0022 0B4B     	 ldr r3,.L360+4
 5319 0024 DA68     	 ldr r2,[r3,#12]
 5320 0026 FB79     	 ldrb r3,[r7,#7]
 5321 0028 4FF48051 	 mov r1,#4096
 5322 002c 01FA03F3 	 lsl r3,r1,r3
 5323 0030 DB43     	 mvns r3,r3
 5324 0032 1340     	 ands r3,r3,r2
1330:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 5325              	 .loc 3 1330 0
 5326 0034 B988     	 ldrh r1,[r7,#4]
 5327 0036 FA79     	 ldrb r2,[r7,#7]
 5328 0038 01FA02F2 	 lsl r2,r1,r2
1329:../Libraries/XMCLib/src/xmc4_scu.c ****                         (level << pin);
 5329              	 .loc 3 1329 0
 5330 003c 1343     	 orrs r3,r3,r2
 5331 003e C360     	 str r3,[r0,#12]
1331:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5332              	 .loc 3 1331 0
 5333 0040 0C37     	 adds r7,r7,#12
 5334              	.LCFI488:
 5335              	 .cfi_def_cfa_offset 4
 5336 0042 BD46     	 mov sp,r7
 5337              	.LCFI489:
 5338              	 .cfi_def_cfa_register 13
 5339              	 
 5340 0044 5DF8047B 	 ldr r7,[sp],#4
 5341              	.LCFI490:
 5342              	 .cfi_restore 7
 5343              	 .cfi_def_cfa_offset 0
 5344 0048 7047     	 bx lr
 5345              	.L361:
 5346 004a 00BF     	 .align 2
 5347              	.L360:
 5348 004c 00400050 	 .word 1342193664
 5349 0050 00430050 	 .word 1342194432
 5350              	 .cfi_endproc
 5351              	.LFE246:
 5353              	 .section .text.XMC_SCU_HIB_SetInput0,"ax",%progbits
 5354              	 .align 2
 5355              	 .global XMC_SCU_HIB_SetInput0
 5356              	 .thumb
 5357              	 .thumb_func
 5359              	XMC_SCU_HIB_SetInput0:
 5360              	.LFB247:
1332:../Libraries/XMCLib/src/xmc4_scu.c **** 
1333:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_HIB_SetInput0(XMC_SCU_HIB_IO_t pin)
1334:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5361              	 .loc 3 1334 0
 5362              	 .cfi_startproc
 5363              	 
 5364              	 
 5365              	 
 5366 0000 80B4     	 push {r7}
 5367              	.LCFI491:
 5368              	 .cfi_def_cfa_offset 4
 5369              	 .cfi_offset 7,-4
 5370 0002 83B0     	 sub sp,sp,#12
 5371              	.LCFI492:
 5372              	 .cfi_def_cfa_offset 16
 5373 0004 00AF     	 add r7,sp,#0
 5374              	.LCFI493:
 5375              	 .cfi_def_cfa_register 7
 5376 0006 0346     	 mov r3,r0
 5377 0008 FB71     	 strb r3,[r7,#7]
1335:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5378              	 .loc 3 1335 0
 5379 000a 00BF     	 nop
 5380              	.L363:
 5381              	 .loc 3 1335 0 is_stmt 0 discriminator 1
 5382 000c 0D4B     	 ldr r3,.L366
 5383 000e D3F8C430 	 ldr r3,[r3,#196]
 5384 0012 03F00803 	 and r3,r3,#8
 5385 0016 002B     	 cmp r3,#0
 5386 0018 F8D1     	 bne .L363
1336:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1337:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until HDCR register in hibernate domain is ready to accept a write */    
1338:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1339:../Libraries/XMCLib/src/xmc4_scu.c **** 
1340:../Libraries/XMCLib/src/xmc4_scu.c ****   if (pin == XMC_SCU_HIB_IO_0)
 5387              	 .loc 3 1340 0 is_stmt 1
 5388 001a FB79     	 ldrb r3,[r7,#7]
 5389 001c 002B     	 cmp r3,#0
 5390 001e 06D1     	 bne .L364
1341:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1342:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR |= SCU_HIBERNATE_HDCR_GPI0SEL_Msk;
 5391              	 .loc 3 1342 0
 5392 0020 094A     	 ldr r2,.L366+4
 5393 0022 094B     	 ldr r3,.L366+4
 5394 0024 DB68     	 ldr r3,[r3,#12]
 5395 0026 43F48063 	 orr r3,r3,#1024
 5396 002a D360     	 str r3,[r2,#12]
 5397 002c 05E0     	 b .L362
 5398              	.L364:
1343:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1344:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1345:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1346:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCR &= ~SCU_HIBERNATE_HDCR_GPI0SEL_Msk; 
 5399              	 .loc 3 1346 0
 5400 002e 064A     	 ldr r2,.L366+4
 5401 0030 054B     	 ldr r3,.L366+4
 5402 0032 DB68     	 ldr r3,[r3,#12]
 5403 0034 23F48063 	 bic r3,r3,#1024
 5404 0038 D360     	 str r3,[r2,#12]
 5405              	.L362:
1347:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1348:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5406              	 .loc 3 1348 0
 5407 003a 0C37     	 adds r7,r7,#12
 5408              	.LCFI494:
 5409              	 .cfi_def_cfa_offset 4
 5410 003c BD46     	 mov sp,r7
 5411              	.LCFI495:
 5412              	 .cfi_def_cfa_register 13
 5413              	 
 5414 003e 5DF8047B 	 ldr r7,[sp],#4
 5415              	.LCFI496:
 5416              	 .cfi_restore 7
 5417              	 .cfi_def_cfa_offset 0
 5418 0042 7047     	 bx lr
 5419              	.L367:
 5420              	 .align 2
 5421              	.L366:
 5422 0044 00400050 	 .word 1342193664
 5423 0048 00430050 	 .word 1342194432
 5424              	 .cfi_endproc
 5425              	.LFE247:
 5427              	 .section .text.XMC_SCU_CLOCK_EnableLowPowerOscillator,"ax",%progbits
 5428              	 .align 2
 5429              	 .global XMC_SCU_CLOCK_EnableLowPowerOscillator
 5430              	 .thumb
 5431              	 .thumb_func
 5433              	XMC_SCU_CLOCK_EnableLowPowerOscillator:
 5434              	.LFB248:
1349:../Libraries/XMCLib/src/xmc4_scu.c **** 
1350:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1351:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
1352:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5435              	 .loc 3 1352 0
 5436              	 .cfi_startproc
 5437              	 
 5438              	 
 5439 0000 80B5     	 push {r7,lr}
 5440              	.LCFI497:
 5441              	 .cfi_def_cfa_offset 8
 5442              	 .cfi_offset 7,-8
 5443              	 .cfi_offset 14,-4
 5444 0002 00AF     	 add r7,sp,#0
 5445              	.LCFI498:
 5446              	 .cfi_def_cfa_register 7
1353:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 5447              	 .loc 3 1353 0
 5448 0004 00BF     	 nop
 5449              	.L369:
 5450              	 .loc 3 1353 0 is_stmt 0 discriminator 1
 5451 0006 194B     	 ldr r3,.L373
 5452 0008 D3F8C430 	 ldr r3,[r3,#196]
 5453 000c 03F08003 	 and r3,r3,#128
 5454 0010 002B     	 cmp r3,#0
 5455 0012 F8D1     	 bne .L369
1354:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1355:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
1356:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1357:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 5456              	 .loc 3 1357 0 is_stmt 1
 5457 0014 164A     	 ldr r2,.L373+4
 5458 0016 164B     	 ldr r3,.L373+4
 5459 0018 DB69     	 ldr r3,[r3,#28]
 5460 001a 23F03003 	 bic r3,r3,#48
 5461 001e D361     	 str r3,[r2,#28]
1358:../Libraries/XMCLib/src/xmc4_scu.c **** 
1359:../Libraries/XMCLib/src/xmc4_scu.c ****   /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
1360:../Libraries/XMCLib/src/xmc4_scu.c ****   while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 5462              	 .loc 3 1360 0
 5463 0020 00BF     	 nop
 5464              	.L370:
 5465              	 .loc 3 1360 0 is_stmt 0 discriminator 1
 5466 0022 124B     	 ldr r3,.L373
 5467 0024 D3F8C430 	 ldr r3,[r3,#196]
 5468 0028 03F00803 	 and r3,r3,#8
 5469 002c 002B     	 cmp r3,#0
 5470 002e F8D1     	 bne .L370
1361:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1362:../Libraries/XMCLib/src/xmc4_scu.c ****     /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
1363:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1364:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 5471              	 .loc 3 1364 0 is_stmt 1
 5472 0030 0F4A     	 ldr r2,.L373+4
 5473 0032 0F4B     	 ldr r3,.L373+4
 5474 0034 DB68     	 ldr r3,[r3,#12]
 5475 0036 43F00803 	 orr r3,r3,#8
 5476 003a D360     	 str r3,[r2,#12]
 5477              	.L372:
1365:../Libraries/XMCLib/src/xmc4_scu.c **** 
1366:../Libraries/XMCLib/src/xmc4_scu.c ****   /* wait till clock is stable */
1367:../Libraries/XMCLib/src/xmc4_scu.c ****   do
1368:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1369:../Libraries/XMCLib/src/xmc4_scu.c ****     while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 5478              	 .loc 3 1369 0
 5479 003c 00BF     	 nop
 5480              	.L371:
 5481              	 .loc 3 1369 0 is_stmt 0 discriminator 1
 5482 003e 0B4B     	 ldr r3,.L373
 5483 0040 D3F8C430 	 ldr r3,[r3,#196]
 5484 0044 03F00203 	 and r3,r3,#2
 5485 0048 002B     	 cmp r3,#0
 5486 004a F8D1     	 bne .L371
1370:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1371:../Libraries/XMCLib/src/xmc4_scu.c ****       /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
1372:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1373:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 5487              	 .loc 3 1373 0 is_stmt 1
 5488 004c 084A     	 ldr r2,.L373+4
 5489 004e 084B     	 ldr r3,.L373+4
 5490 0050 5B68     	 ldr r3,[r3,#4]
 5491 0052 43F00803 	 orr r3,r3,#8
 5492 0056 5360     	 str r3,[r2,#4]
1374:../Libraries/XMCLib/src/xmc4_scu.c **** 
1375:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_lDelay(50U);
 5493              	 .loc 3 1375 0
 5494 0058 3220     	 movs r0,#50
 5495 005a FFF7FEFF 	 bl XMC_SCU_lDelay
1376:../Libraries/XMCLib/src/xmc4_scu.c **** 
1377:../Libraries/XMCLib/src/xmc4_scu.c ****   } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 5496              	 .loc 3 1377 0
 5497 005e 044B     	 ldr r3,.L373+4
 5498 0060 1B68     	 ldr r3,[r3]
 5499 0062 03F00803 	 and r3,r3,#8
 5500 0066 002B     	 cmp r3,#0
 5501 0068 E8D1     	 bne .L372
1378:../Libraries/XMCLib/src/xmc4_scu.c **** 
1379:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5502              	 .loc 3 1379 0
 5503 006a 80BD     	 pop {r7,pc}
 5504              	.L374:
 5505              	 .align 2
 5506              	.L373:
 5507 006c 00400050 	 .word 1342193664
 5508 0070 00430050 	 .word 1342194432
 5509              	 .cfi_endproc
 5510              	.LFE248:
 5512              	 .section .text.XMC_SCU_CLOCK_DisableLowPowerOscillator,"ax",%progbits
 5513              	 .align 2
 5514              	 .global XMC_SCU_CLOCK_DisableLowPowerOscillator
 5515              	 .thumb
 5516              	 .thumb_func
 5518              	XMC_SCU_CLOCK_DisableLowPowerOscillator:
 5519              	.LFB249:
1380:../Libraries/XMCLib/src/xmc4_scu.c **** 
1381:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure the 32khz Ultra Low Power oscillator */
1382:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableLowPowerOscillator(void)
1383:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5520              	 .loc 3 1383 0
 5521              	 .cfi_startproc
 5522              	 
 5523              	 
 5524              	 
 5525 0000 80B4     	 push {r7}
 5526              	.LCFI499:
 5527              	 .cfi_def_cfa_offset 4
 5528              	 .cfi_offset 7,-4
 5529 0002 00AF     	 add r7,sp,#0
 5530              	.LCFI500:
 5531              	 .cfi_def_cfa_register 7
1384:../Libraries/XMCLib/src/xmc4_scu.c ****   while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 5532              	 .loc 3 1384 0
 5533 0004 00BF     	 nop
 5534              	.L376:
 5535              	 .loc 3 1384 0 is_stmt 0 discriminator 1
 5536 0006 084B     	 ldr r3,.L377
 5537 0008 D3F8C430 	 ldr r3,[r3,#196]
 5538 000c 03F08003 	 and r3,r3,#128
 5539 0010 002B     	 cmp r3,#0
 5540 0012 F8D1     	 bne .L376
1385:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1386:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Wait until OSCULCTRL register in hibernate domain is ready to accept a write */    
1387:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1388:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_HIBERNATE->OSCULCTRL |= (uint32_t)SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 5541              	 .loc 3 1388 0 is_stmt 1
 5542 0014 054A     	 ldr r2,.L377+4
 5543 0016 054B     	 ldr r3,.L377+4
 5544 0018 DB69     	 ldr r3,[r3,#28]
 5545 001a 43F03003 	 orr r3,r3,#48
 5546 001e D361     	 str r3,[r2,#28]
1389:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5547              	 .loc 3 1389 0
 5548 0020 BD46     	 mov sp,r7
 5549              	.LCFI501:
 5550              	 .cfi_def_cfa_register 13
 5551              	 
 5552 0022 5DF8047B 	 ldr r7,[sp],#4
 5553              	.LCFI502:
 5554              	 .cfi_restore 7
 5555              	 .cfi_def_cfa_offset 0
 5556 0026 7047     	 bx lr
 5557              	.L378:
 5558              	 .align 2
 5559              	.L377:
 5560 0028 00400050 	 .word 1342193664
 5561 002c 00430050 	 .word 1342194432
 5562              	 .cfi_endproc
 5563              	.LFE249:
 5565              	 .section .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator,"ax",%progbits
 5566              	 .align 2
 5567              	 .global XMC_SCU_CLOCK_EnableHighPerformanceOscillator
 5568              	 .thumb
 5569              	 .thumb_func
 5571              	XMC_SCU_CLOCK_EnableHighPerformanceOscillator:
 5572              	.LFB250:
1390:../Libraries/XMCLib/src/xmc4_scu.c **** 
1391:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable High Precision High Speed oscillator */
1392:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
1393:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5573              	 .loc 3 1393 0
 5574              	 .cfi_startproc
 5575              	 
 5576              	 
 5577 0000 B0B5     	 push {r4,r5,r7,lr}
 5578              	.LCFI503:
 5579              	 .cfi_def_cfa_offset 16
 5580              	 .cfi_offset 4,-16
 5581              	 .cfi_offset 5,-12
 5582              	 .cfi_offset 7,-8
 5583              	 .cfi_offset 14,-4
 5584 0002 00AF     	 add r7,sp,#0
 5585              	.LCFI504:
 5586              	 .cfi_def_cfa_register 7
1394:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 5587              	 .loc 3 1394 0
 5588 0004 134A     	 ldr r2,.L381
 5589 0006 134B     	 ldr r3,.L381
 5590 0008 5B68     	 ldr r3,[r3,#4]
 5591 000a 23F48033 	 bic r3,r3,#65536
 5592 000e 5360     	 str r3,[r2,#4]
1395:../Libraries/XMCLib/src/xmc4_scu.c **** 
1396:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCH
 5593              	 .loc 3 1396 0
 5594 0010 114D     	 ldr r5,.L381+4
 5595 0012 114B     	 ldr r3,.L381+4
 5596 0014 5B68     	 ldr r3,[r3,#4]
 5597 0016 23F47024 	 bic r4,r3,#983040
 5598 001a 24F03004 	 bic r4,r4,#48
1397:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 5599              	 .loc 3 1397 0
 5600 001e FFF7FEFF 	 bl OSCHP_GetFrequency
 5601 0022 0246     	 mov r2,r0
 5602 0024 0D4B     	 ldr r3,.L381+8
 5603 0026 A3FB0223 	 umull r2,r3,r3,r2
 5604 002a 1B0D     	 lsrs r3,r3,#20
 5605 002c 013B     	 subs r3,r3,#1
 5606 002e 1B04     	 lsls r3,r3,#16
1396:../Libraries/XMCLib/src/xmc4_scu.c ****                                   (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OS
 5607              	 .loc 3 1396 0
 5608 0030 2343     	 orrs r3,r3,r4
 5609 0032 6B60     	 str r3,[r5,#4]
1398:../Libraries/XMCLib/src/xmc4_scu.c **** 
1399:../Libraries/XMCLib/src/xmc4_scu.c ****   /* restart OSC Watchdog */
1400:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 5610              	 .loc 3 1400 0
 5611 0034 074A     	 ldr r2,.L381
 5612 0036 074B     	 ldr r3,.L381
 5613 0038 5B68     	 ldr r3,[r3,#4]
 5614 003a 23F40033 	 bic r3,r3,#131072
 5615 003e 5360     	 str r3,[r2,#4]
1401:../Libraries/XMCLib/src/xmc4_scu.c **** 
1402:../Libraries/XMCLib/src/xmc4_scu.c ****   while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 5616              	 .loc 3 1402 0
 5617 0040 00BF     	 nop
 5618              	.L380:
 5619              	 .loc 3 1402 0 is_stmt 0 discriminator 1
 5620 0042 044B     	 ldr r3,.L381
 5621 0044 1B68     	 ldr r3,[r3]
 5622 0046 03F46073 	 and r3,r3,#896
 5623 004a B3F5607F 	 cmp r3,#896
 5624 004e F8D1     	 bne .L380
1403:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1404:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait till OSC_HP output frequency is usable */
1405:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1406:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5625              	 .loc 3 1406 0 is_stmt 1
 5626 0050 B0BD     	 pop {r4,r5,r7,pc}
 5627              	.L382:
 5628 0052 00BF     	 .align 2
 5629              	.L381:
 5630 0054 10470050 	 .word 1342195472
 5631 0058 00470050 	 .word 1342195456
 5632 005c 6BCA5F6B 	 .word 1801439851
 5633              	 .cfi_endproc
 5634              	.LFE250:
 5636              	 .section .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator,"ax",%progbits
 5637              	 .align 2
 5638              	 .global XMC_SCU_CLOCK_DisableHighPerformanceOscillator
 5639              	 .thumb
 5640              	 .thumb_func
 5642              	XMC_SCU_CLOCK_DisableHighPerformanceOscillator:
 5643              	.LFB251:
1407:../Libraries/XMCLib/src/xmc4_scu.c **** 
1408:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable High Precision High Speed oscillator */
1409:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableHighPerformanceOscillator(void)
1410:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5644              	 .loc 3 1410 0
 5645              	 .cfi_startproc
 5646              	 
 5647              	 
 5648              	 
 5649 0000 80B4     	 push {r7}
 5650              	.LCFI505:
 5651              	 .cfi_def_cfa_offset 4
 5652              	 .cfi_offset 7,-4
 5653 0002 00AF     	 add r7,sp,#0
 5654              	.LCFI506:
 5655              	 .cfi_def_cfa_register 7
1411:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
 5656              	 .loc 3 1411 0
 5657 0004 044A     	 ldr r2,.L384
 5658 0006 044B     	 ldr r3,.L384
 5659 0008 5B68     	 ldr r3,[r3,#4]
 5660 000a 43F03003 	 orr r3,r3,#48
 5661 000e 5360     	 str r3,[r2,#4]
1412:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5662              	 .loc 3 1412 0
 5663 0010 BD46     	 mov sp,r7
 5664              	.LCFI507:
 5665              	 .cfi_def_cfa_register 13
 5666              	 
 5667 0012 5DF8047B 	 ldr r7,[sp],#4
 5668              	.LCFI508:
 5669              	 .cfi_restore 7
 5670              	 .cfi_def_cfa_offset 0
 5671 0016 7047     	 bx lr
 5672              	.L385:
 5673              	 .align 2
 5674              	.L384:
 5675 0018 00470050 	 .word 1342195456
 5676              	 .cfi_endproc
 5677              	.LFE251:
 5679              	 .section .text.XMC_SCU_CLOCK_EnableSystemPll,"ax",%progbits
 5680              	 .align 2
 5681              	 .global XMC_SCU_CLOCK_EnableSystemPll
 5682              	 .thumb
 5683              	 .thumb_func
 5685              	XMC_SCU_CLOCK_EnableSystemPll:
 5686              	.LFB252:
1413:../Libraries/XMCLib/src/xmc4_scu.c **** 
1414:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to enable main PLL */
1415:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_EnableSystemPll(void)
1416:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5687              	 .loc 3 1416 0
 5688              	 .cfi_startproc
 5689              	 
 5690              	 
 5691              	 
 5692 0000 80B4     	 push {r7}
 5693              	.LCFI509:
 5694              	 .cfi_def_cfa_offset 4
 5695              	 .cfi_offset 7,-4
 5696 0002 00AF     	 add r7,sp,#0
 5697              	.LCFI510:
 5698              	 .cfi_def_cfa_register 7
1417:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 5699              	 .loc 3 1417 0
 5700 0004 054A     	 ldr r2,.L387
 5701 0006 054B     	 ldr r3,.L387
 5702 0008 5B68     	 ldr r3,[r3,#4]
 5703 000a 23F48033 	 bic r3,r3,#65536
 5704 000e 23F00203 	 bic r3,r3,#2
 5705 0012 5360     	 str r3,[r2,#4]
1418:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5706              	 .loc 3 1418 0
 5707 0014 BD46     	 mov sp,r7
 5708              	.LCFI511:
 5709              	 .cfi_def_cfa_register 13
 5710              	 
 5711 0016 5DF8047B 	 ldr r7,[sp],#4
 5712              	.LCFI512:
 5713              	 .cfi_restore 7
 5714              	 .cfi_def_cfa_offset 0
 5715 001a 7047     	 bx lr
 5716              	.L388:
 5717              	 .align 2
 5718              	.L387:
 5719 001c 10470050 	 .word 1342195472
 5720              	 .cfi_endproc
 5721              	.LFE252:
 5723              	 .section .text.XMC_SCU_CLOCK_DisableSystemPll,"ax",%progbits
 5724              	 .align 2
 5725              	 .global XMC_SCU_CLOCK_DisableSystemPll
 5726              	 .thumb
 5727              	 .thumb_func
 5729              	XMC_SCU_CLOCK_DisableSystemPll:
 5730              	.LFB253:
1419:../Libraries/XMCLib/src/xmc4_scu.c **** 
1420:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to disable main PLL */
1421:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_DisableSystemPll(void)
1422:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5731              	 .loc 3 1422 0
 5732              	 .cfi_startproc
 5733              	 
 5734              	 
 5735              	 
 5736 0000 80B4     	 push {r7}
 5737              	.LCFI513:
 5738              	 .cfi_def_cfa_offset 4
 5739              	 .cfi_offset 7,-4
 5740 0002 00AF     	 add r7,sp,#0
 5741              	.LCFI514:
 5742              	 .cfi_def_cfa_register 7
1423:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 5743              	 .loc 3 1423 0
 5744 0004 054A     	 ldr r2,.L390
 5745 0006 054B     	 ldr r3,.L390
 5746 0008 5B68     	 ldr r3,[r3,#4]
 5747 000a 43F48033 	 orr r3,r3,#65536
 5748 000e 43F00203 	 orr r3,r3,#2
 5749 0012 5360     	 str r3,[r2,#4]
1424:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5750              	 .loc 3 1424 0
 5751 0014 BD46     	 mov sp,r7
 5752              	.LCFI515:
 5753              	 .cfi_def_cfa_register 13
 5754              	 
 5755 0016 5DF8047B 	 ldr r7,[sp],#4
 5756              	.LCFI516:
 5757              	 .cfi_restore 7
 5758              	 .cfi_def_cfa_offset 0
 5759 001a 7047     	 bx lr
 5760              	.L391:
 5761              	 .align 2
 5762              	.L390:
 5763 001c 10470050 	 .word 1342195472
 5764              	 .cfi_endproc
 5765              	.LFE253:
 5767              	 .section .text.XMC_SCU_CLOCK_StartSystemPll,"ax",%progbits
 5768              	 .align 2
 5769              	 .global XMC_SCU_CLOCK_StartSystemPll
 5770              	 .thumb
 5771              	 .thumb_func
 5773              	XMC_SCU_CLOCK_StartSystemPll:
 5774              	.LFB254:
1425:../Libraries/XMCLib/src/xmc4_scu.c **** 
1426:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to configure main PLL */
1427:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
1428:../Libraries/XMCLib/src/xmc4_scu.c ****                                   XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
1429:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t pdiv,
1430:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t ndiv,
1431:../Libraries/XMCLib/src/xmc4_scu.c ****                                   uint32_t kdiv)
1432:../Libraries/XMCLib/src/xmc4_scu.c **** {
 5775              	 .loc 3 1432 0
 5776              	 .cfi_startproc
 5777              	 
 5778              	 
 5779 0000 80B5     	 push {r7,lr}
 5780              	.LCFI517:
 5781              	 .cfi_def_cfa_offset 8
 5782              	 .cfi_offset 7,-8
 5783              	 .cfi_offset 14,-4
 5784 0002 86B0     	 sub sp,sp,#24
 5785              	.LCFI518:
 5786              	 .cfi_def_cfa_offset 32
 5787 0004 00AF     	 add r7,sp,#0
 5788              	.LCFI519:
 5789              	 .cfi_def_cfa_register 7
 5790 0006 BA60     	 str r2,[r7,#8]
 5791 0008 7B60     	 str r3,[r7,#4]
 5792 000a 0346     	 mov r3,r0
 5793 000c FB81     	 strh r3,[r7,#14]
 5794 000e 0B46     	 mov r3,r1
 5795 0010 7B73     	 strb r3,[r7,#13]
1433:../Libraries/XMCLib/src/xmc4_scu.c **** 
1434:../Libraries/XMCLib/src/xmc4_scu.c ****   float vco_frequency;
1435:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t kdiv_temp;
1436:../Libraries/XMCLib/src/xmc4_scu.c **** 
1437:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 5796              	 .loc 3 1437 0
 5797 0012 FB89     	 ldrh r3,[r7,#14]
 5798 0014 1846     	 mov r0,r3
 5799 0016 FFF7FEFF 	 bl XMC_SCU_CLOCK_SetSystemPllClockSource
1438:../Libraries/XMCLib/src/xmc4_scu.c **** 
1439:../Libraries/XMCLib/src/xmc4_scu.c ****   if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 5800              	 .loc 3 1439 0
 5801 001a 7B7B     	 ldrb r3,[r7,#13]
 5802 001c 012B     	 cmp r3,#1
 5803 001e 40F09980 	 bne .L393
1440:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1441:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Calculate initial step to be close to fOFI */
1442:../Libraries/XMCLib/src/xmc4_scu.c ****     if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 5804              	 .loc 3 1442 0
 5805 0022 FB89     	 ldrh r3,[r7,#14]
 5806 0024 002B     	 cmp r3,#0
 5807 0026 08D1     	 bne .L394
1443:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1444:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (float)OSCHP_GetFrequency();
 5808              	 .loc 3 1444 0
 5809 0028 FFF7FEFF 	 bl OSCHP_GetFrequency
 5810 002c 07EE900A 	 fmsr s15,r0
 5811 0030 F8EE677A 	 fuitos s15,s15
 5812 0034 C7ED057A 	 fsts s15,[r7,#20]
 5813 0038 01E0     	 b .L395
 5814              	.L394:
1445:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1446:../Libraries/XMCLib/src/xmc4_scu.c ****     else
1447:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1448:../Libraries/XMCLib/src/xmc4_scu.c ****       vco_frequency = (float)OFI_FREQUENCY;
 5815              	 .loc 3 1448 0
 5816 003a 534B     	 ldr r3,.L402
 5817 003c 7B61     	 str r3,[r7,#20]
 5818              	.L395:
1449:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1450:../Libraries/XMCLib/src/xmc4_scu.c ****     vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 5819              	 .loc 3 1450 0
 5820 003e 7B68     	 ldr r3,[r7,#4]
 5821 0040 07EE903A 	 fmsr s15,r3
 5822 0044 B8EE677A 	 fuitos s14,s15
 5823 0048 D7ED057A 	 flds s15,[r7,#20]
 5824 004c 27EE277A 	 fmuls s14,s14,s15
 5825 0050 BB68     	 ldr r3,[r7,#8]
 5826 0052 07EE903A 	 fmsr s15,r3
 5827 0056 F8EE677A 	 fuitos s15,s15
 5828 005a C7EE277A 	 fdivs s15,s14,s15
 5829 005e C7ED057A 	 fsts s15,[r7,#20]
1451:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 5830              	 .loc 3 1451 0
 5831 0062 D7ED057A 	 flds s15,[r7,#20]
 5832 0066 FCEEE77A 	 ftouizs s15,s15
 5833 006a 17EE902A 	 fmrs r2,s15
 5834 006e 474B     	 ldr r3,.L402+4
 5835 0070 A3FB0223 	 umull r2,r3,r3,r2
 5836 0074 5B0D     	 lsrs r3,r3,#21
 5837 0076 3B61     	 str r3,[r7,#16]
1452:../Libraries/XMCLib/src/xmc4_scu.c **** 
1453:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1454:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 5838              	 .loc 3 1454 0
 5839 0078 454A     	 ldr r2,.L402+8
 5840 007a 454B     	 ldr r3,.L402+8
 5841 007c 5B68     	 ldr r3,[r3,#4]
 5842 007e 43F00103 	 orr r3,r3,#1
 5843 0082 5360     	 str r3,[r2,#4]
1455:../Libraries/XMCLib/src/xmc4_scu.c **** 
1456:../Libraries/XMCLib/src/xmc4_scu.c ****     /* disconnect Oscillator from PLL */
1457:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 5844              	 .loc 3 1457 0
 5845 0084 424A     	 ldr r2,.L402+8
 5846 0086 424B     	 ldr r3,.L402+8
 5847 0088 5B68     	 ldr r3,[r3,#4]
 5848 008a 43F01003 	 orr r3,r3,#16
 5849 008e 5360     	 str r3,[r2,#4]
1458:../Libraries/XMCLib/src/xmc4_scu.c **** 
1459:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Setup divider settings for main PLL */
1460:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_
 5850              	 .loc 3 1460 0
 5851 0090 3F49     	 ldr r1,.L402+8
 5852 0092 3F4B     	 ldr r3,.L402+8
 5853 0094 9A68     	 ldr r2,[r3,#8]
 5854 0096 3F4B     	 ldr r3,.L402+12
 5855 0098 1340     	 ands r3,r3,r2
1461:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 5856              	 .loc 3 1461 0
 5857 009a 7A68     	 ldr r2,[r7,#4]
 5858 009c 013A     	 subs r2,r2,#1
 5859 009e 1202     	 lsls r2,r2,#8
 5860 00a0 1A43     	 orrs r2,r2,r3
1462:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 5861              	 .loc 3 1462 0
 5862 00a2 3B69     	 ldr r3,[r7,#16]
 5863 00a4 013B     	 subs r3,r3,#1
 5864 00a6 1B04     	 lsls r3,r3,#16
1461:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 5865              	 .loc 3 1461 0
 5866 00a8 1A43     	 orrs r2,r2,r3
1463:../Libraries/XMCLib/src/xmc4_scu.c ****                                    ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 5867              	 .loc 3 1463 0
 5868 00aa BB68     	 ldr r3,[r7,#8]
 5869 00ac 013B     	 subs r3,r3,#1
 5870 00ae 1B06     	 lsls r3,r3,#24
1460:../Libraries/XMCLib/src/xmc4_scu.c ****                                    SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_ND
 5871              	 .loc 3 1460 0
 5872 00b0 1343     	 orrs r3,r3,r2
 5873 00b2 8B60     	 str r3,[r1,#8]
1464:../Libraries/XMCLib/src/xmc4_scu.c **** 
1465:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
1466:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 5874              	 .loc 3 1466 0
 5875 00b4 364A     	 ldr r2,.L402+8
 5876 00b6 364B     	 ldr r3,.L402+8
 5877 00b8 5B68     	 ldr r3,[r3,#4]
 5878 00ba 43F04003 	 orr r3,r3,#64
 5879 00be 5360     	 str r3,[r2,#4]
1467:../Libraries/XMCLib/src/xmc4_scu.c **** 
1468:../Libraries/XMCLib/src/xmc4_scu.c ****     /* connect Oscillator to PLL */
1469:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 5880              	 .loc 3 1469 0
 5881 00c0 334A     	 ldr r2,.L402+8
 5882 00c2 334B     	 ldr r3,.L402+8
 5883 00c4 5B68     	 ldr r3,[r3,#4]
 5884 00c6 23F01003 	 bic r3,r3,#16
 5885 00ca 5360     	 str r3,[r2,#4]
1470:../Libraries/XMCLib/src/xmc4_scu.c **** 
1471:../Libraries/XMCLib/src/xmc4_scu.c ****     /* restart PLL Lock detection */
1472:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 5886              	 .loc 3 1472 0
 5887 00cc 304A     	 ldr r2,.L402+8
 5888 00ce 304B     	 ldr r3,.L402+8
 5889 00d0 5B68     	 ldr r3,[r3,#4]
 5890 00d2 43F48023 	 orr r3,r3,#262144
 5891 00d6 5360     	 str r3,[r2,#4]
1473:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 5892              	 .loc 3 1473 0
 5893 00d8 00BF     	 nop
 5894              	.L396:
 5895              	 .loc 3 1473 0 is_stmt 0 discriminator 1
 5896 00da 2D4B     	 ldr r3,.L402+8
 5897 00dc 1B68     	 ldr r3,[r3]
 5898 00de 03F00403 	 and r3,r3,#4
 5899 00e2 002B     	 cmp r3,#0
 5900 00e4 F9D0     	 beq .L396
1474:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1475:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for PLL Lock */
1476:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1477:../Libraries/XMCLib/src/xmc4_scu.c **** 
1478:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to normal mode */
1479:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 5901              	 .loc 3 1479 0 is_stmt 1
 5902 00e6 2A4A     	 ldr r2,.L402+8
 5903 00e8 294B     	 ldr r3,.L402+8
 5904 00ea 5B68     	 ldr r3,[r3,#4]
 5905 00ec 23F00103 	 bic r3,r3,#1
 5906 00f0 5360     	 str r3,[r2,#4]
1480:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 5907              	 .loc 3 1480 0
 5908 00f2 00BF     	 nop
 5909              	.L397:
 5910              	 .loc 3 1480 0 is_stmt 0 discriminator 1
 5911 00f4 264B     	 ldr r3,.L402+8
 5912 00f6 1B68     	 ldr r3,[r3]
 5913 00f8 03F00103 	 and r3,r3,#1
 5914 00fc 002B     	 cmp r3,#0
 5915 00fe F9D1     	 bne .L397
1481:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1482:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for normal mode */
1483:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1484:../Libraries/XMCLib/src/xmc4_scu.c **** 
1485:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Ramp up PLL frequency in steps */
1486:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 5916              	 .loc 3 1486 0 is_stmt 1
 5917 0100 D7ED057A 	 flds s15,[r7,#20]
 5918 0104 FCEEE77A 	 ftouizs s15,s15
 5919 0108 17EE903A 	 fmrs r3,s15
 5920 010c 1B0A     	 lsrs r3,r3,#8
 5921 010e 224A     	 ldr r2,.L402+16
 5922 0110 A2FB0323 	 umull r2,r3,r2,r3
 5923 0114 9B0A     	 lsrs r3,r3,#10
 5924 0116 3B61     	 str r3,[r7,#16]
1487:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 5925              	 .loc 3 1487 0
 5926 0118 3A6A     	 ldr r2,[r7,#32]
 5927 011a 3B69     	 ldr r3,[r7,#16]
 5928 011c 9A42     	 cmp r2,r3
 5929 011e 02D2     	 bcs .L398
1488:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1489:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 5930              	 .loc 3 1489 0
 5931 0120 3869     	 ldr r0,[r7,#16]
 5932 0122 FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 5933              	.L398:
1490:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1491:../Libraries/XMCLib/src/xmc4_scu.c **** 
1492:../Libraries/XMCLib/src/xmc4_scu.c ****     kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 5934              	 .loc 3 1492 0
 5935 0126 D7ED057A 	 flds s15,[r7,#20]
 5936 012a FCEEE77A 	 ftouizs s15,s15
 5937 012e 17EE903A 	 fmrs r3,s15
 5938 0132 DB09     	 lsrs r3,r3,#7
 5939 0134 194A     	 ldr r2,.L402+20
 5940 0136 A2FB0323 	 umull r2,r3,r2,r3
 5941 013a DB0A     	 lsrs r3,r3,#11
 5942 013c 3B61     	 str r3,[r7,#16]
1493:../Libraries/XMCLib/src/xmc4_scu.c ****     if (kdiv < kdiv_temp)
 5943              	 .loc 3 1493 0
 5944 013e 3A6A     	 ldr r2,[r7,#32]
 5945 0140 3B69     	 ldr r3,[r7,#16]
 5946 0142 9A42     	 cmp r2,r3
 5947 0144 02D2     	 bcs .L399
1494:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1495:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 5948              	 .loc 3 1495 0
 5949 0146 3869     	 ldr r0,[r7,#16]
 5950 0148 FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 5951              	.L399:
1496:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1497:../Libraries/XMCLib/src/xmc4_scu.c **** 
1498:../Libraries/XMCLib/src/xmc4_scu.c ****     XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 5952              	 .loc 3 1498 0
 5953 014c 386A     	 ldr r0,[r7,#32]
 5954 014e FFF7FEFF 	 bl XMC_SCU_CLOCK_StepSystemPllFrequency
 5955 0152 15E0     	 b .L392
 5956              	.L393:
1499:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1500:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1501:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1502:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 5957              	 .loc 3 1502 0
 5958 0154 0E49     	 ldr r1,.L402+8
 5959 0156 0E4B     	 ldr r3,.L402+8
 5960 0158 9B68     	 ldr r3,[r3,#8]
 5961 015a 23F07F02 	 bic r2,r3,#127
1503:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 5962              	 .loc 3 1503 0
 5963 015e 3B6A     	 ldr r3,[r7,#32]
 5964 0160 013B     	 subs r3,r3,#1
1502:../Libraries/XMCLib/src/xmc4_scu.c ****                        ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 5965              	 .loc 3 1502 0
 5966 0162 1343     	 orrs r3,r3,r2
 5967 0164 8B60     	 str r3,[r1,#8]
1504:../Libraries/XMCLib/src/xmc4_scu.c **** 
1505:../Libraries/XMCLib/src/xmc4_scu.c ****     /* Switch to prescaler mode */
1506:../Libraries/XMCLib/src/xmc4_scu.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 5968              	 .loc 3 1506 0
 5969 0166 0A4A     	 ldr r2,.L402+8
 5970 0168 094B     	 ldr r3,.L402+8
 5971 016a 5B68     	 ldr r3,[r3,#4]
 5972 016c 43F00103 	 orr r3,r3,#1
 5973 0170 5360     	 str r3,[r2,#4]
1507:../Libraries/XMCLib/src/xmc4_scu.c **** 
1508:../Libraries/XMCLib/src/xmc4_scu.c ****     while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 5974              	 .loc 3 1508 0
 5975 0172 00BF     	 nop
 5976              	.L401:
 5977              	 .loc 3 1508 0 is_stmt 0 discriminator 1
 5978 0174 064B     	 ldr r3,.L402+8
 5979 0176 1B68     	 ldr r3,[r3]
 5980 0178 03F00103 	 and r3,r3,#1
 5981 017c 002B     	 cmp r3,#0
 5982 017e F9D0     	 beq .L401
 5983              	.L392:
1509:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1510:../Libraries/XMCLib/src/xmc4_scu.c ****       /* wait for prescaler mode */
1511:../Libraries/XMCLib/src/xmc4_scu.c ****     }
1512:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1513:../Libraries/XMCLib/src/xmc4_scu.c **** }
 5984              	 .loc 3 1513 0 is_stmt 1
 5985 0180 1837     	 adds r7,r7,#24
 5986              	.LCFI520:
 5987              	 .cfi_def_cfa_offset 8
 5988 0182 BD46     	 mov sp,r7
 5989              	.LCFI521:
 5990              	 .cfi_def_cfa_register 13
 5991              	 
 5992 0184 80BD     	 pop {r7,pc}
 5993              	.L403:
 5994 0186 00BF     	 .align 2
 5995              	.L402:
 5996 0188 001BB74B 	 .word 1270291200
 5997 018c 819F5E16 	 .word 375299969
 5998 0190 10470050 	 .word 1342195472
 5999 0194 FF8080F0 	 .word -260013825
 6000 0198 C7541E01 	 .word 18764999
 6001 019c 2FE3BE00 	 .word 12509999
 6002              	 .cfi_endproc
 6003              	.LFE254:
 6005              	 .section .text.XMC_SCU_CLOCK_StopSystemPll,"ax",%progbits
 6006              	 .align 2
 6007              	 .global XMC_SCU_CLOCK_StopSystemPll
 6008              	 .thumb
 6009              	 .thumb_func
 6011              	XMC_SCU_CLOCK_StopSystemPll:
 6012              	.LFB255:
1514:../Libraries/XMCLib/src/xmc4_scu.c **** 
1515:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to stop main PLL operation */
1516:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StopSystemPll(void)
1517:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6013              	 .loc 3 1517 0
 6014              	 .cfi_startproc
 6015              	 
 6016              	 
 6017              	 
 6018 0000 80B4     	 push {r7}
 6019              	.LCFI522:
 6020              	 .cfi_def_cfa_offset 4
 6021              	 .cfi_offset 7,-4
 6022 0002 00AF     	 add r7,sp,#0
 6023              	.LCFI523:
 6024              	 .cfi_def_cfa_register 7
1518:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
 6025              	 .loc 3 1518 0
 6026 0004 044A     	 ldr r2,.L405
 6027 0006 044B     	 ldr r3,.L405
 6028 0008 5B68     	 ldr r3,[r3,#4]
 6029 000a 43F48033 	 orr r3,r3,#65536
 6030 000e 5360     	 str r3,[r2,#4]
1519:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6031              	 .loc 3 1519 0
 6032 0010 BD46     	 mov sp,r7
 6033              	.LCFI524:
 6034              	 .cfi_def_cfa_register 13
 6035              	 
 6036 0012 5DF8047B 	 ldr r7,[sp],#4
 6037              	.LCFI525:
 6038              	 .cfi_restore 7
 6039              	 .cfi_def_cfa_offset 0
 6040 0016 7047     	 bx lr
 6041              	.L406:
 6042              	 .align 2
 6043              	.L405:
 6044 0018 10470050 	 .word 1342195472
 6045              	 .cfi_endproc
 6046              	.LFE255:
 6048              	 .section .text.XMC_SCU_CLOCK_StepSystemPllFrequency,"ax",%progbits
 6049              	 .align 2
 6050              	 .global XMC_SCU_CLOCK_StepSystemPllFrequency
 6051              	 .thumb
 6052              	 .thumb_func
 6054              	XMC_SCU_CLOCK_StepSystemPllFrequency:
 6055              	.LFB256:
1520:../Libraries/XMCLib/src/xmc4_scu.c **** 
1521:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to step up/down the main PLL frequency */
1522:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
1523:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6056              	 .loc 3 1523 0
 6057              	 .cfi_startproc
 6058              	 
 6059              	 
 6060 0000 80B5     	 push {r7,lr}
 6061              	.LCFI526:
 6062              	 .cfi_def_cfa_offset 8
 6063              	 .cfi_offset 7,-8
 6064              	 .cfi_offset 14,-4
 6065 0002 82B0     	 sub sp,sp,#8
 6066              	.LCFI527:
 6067              	 .cfi_def_cfa_offset 16
 6068 0004 00AF     	 add r7,sp,#0
 6069              	.LCFI528:
 6070              	 .cfi_def_cfa_register 7
 6071 0006 7860     	 str r0,[r7,#4]
1524:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 6072              	 .loc 3 1524 0
 6073 0008 0749     	 ldr r1,.L408
 6074 000a 074B     	 ldr r3,.L408
 6075 000c 9B68     	 ldr r3,[r3,#8]
 6076 000e 23F4FE02 	 bic r2,r3,#8323072
1525:../Libraries/XMCLib/src/xmc4_scu.c ****                      ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 6077              	 .loc 3 1525 0
 6078 0012 7B68     	 ldr r3,[r7,#4]
 6079 0014 013B     	 subs r3,r3,#1
 6080 0016 1B04     	 lsls r3,r3,#16
1524:../Libraries/XMCLib/src/xmc4_scu.c ****   SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 6081              	 .loc 3 1524 0
 6082 0018 1343     	 orrs r3,r3,r2
 6083 001a 8B60     	 str r3,[r1,#8]
1526:../Libraries/XMCLib/src/xmc4_scu.c **** 
1527:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_lDelay(50U);
 6084              	 .loc 3 1527 0
 6085 001c 3220     	 movs r0,#50
 6086 001e FFF7FEFF 	 bl XMC_SCU_lDelay
1528:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6087              	 .loc 3 1528 0
 6088 0022 0837     	 adds r7,r7,#8
 6089              	.LCFI529:
 6090              	 .cfi_def_cfa_offset 8
 6091 0024 BD46     	 mov sp,r7
 6092              	.LCFI530:
 6093              	 .cfi_def_cfa_register 13
 6094              	 
 6095 0026 80BD     	 pop {r7,pc}
 6096              	.L409:
 6097              	 .align 2
 6098              	.L408:
 6099 0028 10470050 	 .word 1342195472
 6100              	 .cfi_endproc
 6101              	.LFE256:
 6103              	 .section .text.XMC_SCU_CLOCK_IsSystemPllLocked,"ax",%progbits
 6104              	 .align 2
 6105              	 .global XMC_SCU_CLOCK_IsSystemPllLocked
 6106              	 .thumb
 6107              	 .thumb_func
 6109              	XMC_SCU_CLOCK_IsSystemPllLocked:
 6110              	.LFB257:
1529:../Libraries/XMCLib/src/xmc4_scu.c **** 
1530:../Libraries/XMCLib/src/xmc4_scu.c **** /* API to check main PLL is locked or not */
1531:../Libraries/XMCLib/src/xmc4_scu.c **** bool XMC_SCU_CLOCK_IsSystemPllLocked(void)
1532:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6111              	 .loc 3 1532 0
 6112              	 .cfi_startproc
 6113              	 
 6114              	 
 6115              	 
 6116 0000 80B4     	 push {r7}
 6117              	.LCFI531:
 6118              	 .cfi_def_cfa_offset 4
 6119              	 .cfi_offset 7,-4
 6120 0002 00AF     	 add r7,sp,#0
 6121              	.LCFI532:
 6122              	 .cfi_def_cfa_register 7
1533:../Libraries/XMCLib/src/xmc4_scu.c ****   return (bool)((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) != 0UL);
 6123              	 .loc 3 1533 0
 6124 0004 064B     	 ldr r3,.L412
 6125 0006 1B68     	 ldr r3,[r3]
 6126 0008 03F00403 	 and r3,r3,#4
 6127 000c 002B     	 cmp r3,#0
 6128 000e 14BF     	 ite ne
 6129 0010 0123     	 movne r3,#1
 6130 0012 0023     	 moveq r3,#0
 6131 0014 DBB2     	 uxtb r3,r3
1534:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6132              	 .loc 3 1534 0
 6133 0016 1846     	 mov r0,r3
 6134 0018 BD46     	 mov sp,r7
 6135              	.LCFI533:
 6136              	 .cfi_def_cfa_register 13
 6137              	 
 6138 001a 5DF8047B 	 ldr r7,[sp],#4
 6139              	.LCFI534:
 6140              	 .cfi_restore 7
 6141              	 .cfi_def_cfa_offset 0
 6142 001e 7047     	 bx lr
 6143              	.L413:
 6144              	 .align 2
 6145              	.L412:
 6146 0020 10470050 	 .word 1342195472
 6147              	 .cfi_endproc
 6148              	.LFE257:
 6150              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 6151              	 .align 2
 6152              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 6153              	 .thumb
 6154              	 .thumb_func
 6156              	XMC_SCU_INTERRUPT_SetEventHandler:
 6157              	.LFB258:
1535:../Libraries/XMCLib/src/xmc4_scu.c **** 
1536:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1537:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event.
1538:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1539:../Libraries/XMCLib/src/xmc4_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(const XMC_SCU_INTERRUPT_EVENT_t event,
1540:../Libraries/XMCLib/src/xmc4_scu.c ****                                                    const XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
1541:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6158              	 .loc 3 1541 0
 6159              	 .cfi_startproc
 6160              	 
 6161              	 
 6162              	 
 6163 0000 80B4     	 push {r7}
 6164              	.LCFI535:
 6165              	 .cfi_def_cfa_offset 4
 6166              	 .cfi_offset 7,-4
 6167 0002 85B0     	 sub sp,sp,#20
 6168              	.LCFI536:
 6169              	 .cfi_def_cfa_offset 24
 6170 0004 00AF     	 add r7,sp,#0
 6171              	.LCFI537:
 6172              	 .cfi_def_cfa_register 7
 6173 0006 7860     	 str r0,[r7,#4]
 6174 0008 3960     	 str r1,[r7]
1542:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1543:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_STATUS_t status;
1544:../Libraries/XMCLib/src/xmc4_scu.c ****   
1545:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
 6175              	 .loc 3 1545 0
 6176 000a 0023     	 movs r3,#0
 6177 000c FB60     	 str r3,[r7,#12]
1546:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 6178              	 .loc 3 1546 0
 6179 000e 02E0     	 b .L415
 6180              	.L417:
1547:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1548:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;
 6181              	 .loc 3 1548 0
 6182 0010 FB68     	 ldr r3,[r7,#12]
 6183 0012 0133     	 adds r3,r3,#1
 6184 0014 FB60     	 str r3,[r7,#12]
 6185              	.L415:
1546:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 6186              	 .loc 3 1546 0
 6187 0016 FB68     	 ldr r3,[r7,#12]
 6188 0018 7A68     	 ldr r2,[r7,#4]
 6189 001a 22FA03F3 	 lsr r3,r2,r3
 6190 001e 03F00103 	 and r3,r3,#1
 6191 0022 002B     	 cmp r3,#0
 6192 0024 02D1     	 bne .L416
1546:../Libraries/XMCLib/src/xmc4_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 6193              	 .loc 3 1546 0 is_stmt 0 discriminator 1
 6194 0026 FB68     	 ldr r3,[r7,#12]
 6195 0028 1F2B     	 cmp r3,#31
 6196 002a F1D9     	 bls .L417
 6197              	.L416:
1549:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1550:../Libraries/XMCLib/src/xmc4_scu.c ****   
1551:../Libraries/XMCLib/src/xmc4_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 6198              	 .loc 3 1551 0 is_stmt 1
 6199 002c FB68     	 ldr r3,[r7,#12]
 6200 002e 202B     	 cmp r3,#32
 6201 0030 02D1     	 bne .L418
1552:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1553:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 6202              	 .loc 3 1553 0
 6203 0032 0123     	 movs r3,#1
 6204 0034 FB72     	 strb r3,[r7,#11]
 6205 0036 06E0     	 b .L419
 6206              	.L418:
1554:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1555:../Libraries/XMCLib/src/xmc4_scu.c ****   else
1556:../Libraries/XMCLib/src/xmc4_scu.c ****   {
1557:../Libraries/XMCLib/src/xmc4_scu.c ****     event_handler_list[index] = handler;
 6207              	 .loc 3 1557 0
 6208 0038 0649     	 ldr r1,.L421
 6209 003a FB68     	 ldr r3,[r7,#12]
 6210 003c 3A68     	 ldr r2,[r7]
 6211 003e 41F82320 	 str r2,[r1,r3,lsl#2]
1558:../Libraries/XMCLib/src/xmc4_scu.c ****     status = XMC_SCU_STATUS_OK;      
 6212              	 .loc 3 1558 0
 6213 0042 0023     	 movs r3,#0
 6214 0044 FB72     	 strb r3,[r7,#11]
 6215              	.L419:
1559:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1560:../Libraries/XMCLib/src/xmc4_scu.c ****   
1561:../Libraries/XMCLib/src/xmc4_scu.c ****   return (status);
 6216              	 .loc 3 1561 0
 6217 0046 FB7A     	 ldrb r3,[r7,#11]
1562:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6218              	 .loc 3 1562 0
 6219 0048 1846     	 mov r0,r3
 6220 004a 1437     	 adds r7,r7,#20
 6221              	.LCFI538:
 6222              	 .cfi_def_cfa_offset 4
 6223 004c BD46     	 mov sp,r7
 6224              	.LCFI539:
 6225              	 .cfi_def_cfa_register 13
 6226              	 
 6227 004e 5DF8047B 	 ldr r7,[sp],#4
 6228              	.LCFI540:
 6229              	 .cfi_restore 7
 6230              	 .cfi_def_cfa_offset 0
 6231 0052 7047     	 bx lr
 6232              	.L422:
 6233              	 .align 2
 6234              	.L421:
 6235 0054 00000000 	 .word event_handler_list
 6236              	 .cfi_endproc
 6237              	.LFE258:
 6239              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 6240              	 .align 2
 6241              	 .global XMC_SCU_IRQHandler
 6242              	 .thumb
 6243              	 .thumb_func
 6245              	XMC_SCU_IRQHandler:
 6246              	.LFB259:
1563:../Libraries/XMCLib/src/xmc4_scu.c **** 
1564:../Libraries/XMCLib/src/xmc4_scu.c **** /*
1565:../Libraries/XMCLib/src/xmc4_scu.c ****  * API to execute callback functions for multiple events.
1566:../Libraries/XMCLib/src/xmc4_scu.c ****  */
1567:../Libraries/XMCLib/src/xmc4_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
1568:../Libraries/XMCLib/src/xmc4_scu.c **** {
 6247              	 .loc 3 1568 0
 6248              	 .cfi_startproc
 6249              	 
 6250              	 
 6251 0000 80B5     	 push {r7,lr}
 6252              	.LCFI541:
 6253              	 .cfi_def_cfa_offset 8
 6254              	 .cfi_offset 7,-8
 6255              	 .cfi_offset 14,-4
 6256 0002 86B0     	 sub sp,sp,#24
 6257              	.LCFI542:
 6258              	 .cfi_def_cfa_offset 32
 6259 0004 00AF     	 add r7,sp,#0
 6260              	.LCFI543:
 6261              	 .cfi_def_cfa_register 7
 6262 0006 7860     	 str r0,[r7,#4]
1569:../Libraries/XMCLib/src/xmc4_scu.c ****   uint32_t index;
1570:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
1571:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
1572:../Libraries/XMCLib/src/xmc4_scu.c ****   
1573:../Libraries/XMCLib/src/xmc4_scu.c ****   XMC_UNUSED_ARG(sr_num);
1574:../Libraries/XMCLib/src/xmc4_scu.c ****   
1575:../Libraries/XMCLib/src/xmc4_scu.c ****   index = 0U;
 6263              	 .loc 3 1575 0
 6264 0008 0023     	 movs r3,#0
 6265 000a 7B61     	 str r3,[r7,#20]
1576:../Libraries/XMCLib/src/xmc4_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus();
 6266              	 .loc 3 1576 0
 6267 000c FFF7FEFF 	 bl XMC_SCU_INTERUPT_GetEventStatus
 6268 0010 3861     	 str r0,[r7,#16]
1577:../Libraries/XMCLib/src/xmc4_scu.c ****   while (index < XMC_SCU_INTERRUPT_EVENT_MAX)
 6269              	 .loc 3 1577 0
 6270 0012 1CE0     	 b .L424
 6271              	.L428:
1578:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
1579:../Libraries/XMCLib/src/xmc4_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 6272              	 .loc 3 1579 0
 6273 0014 7B69     	 ldr r3,[r7,#20]
 6274 0016 3A69     	 ldr r2,[r7,#16]
 6275 0018 22FA03F3 	 lsr r3,r2,r3
 6276 001c 03F00103 	 and r3,r3,#1
 6277 0020 002B     	 cmp r3,#0
 6278 0022 11D0     	 beq .L425
1580:../Libraries/XMCLib/src/xmc4_scu.c ****     {
1581:../Libraries/XMCLib/src/xmc4_scu.c ****       event_handler = event_handler_list[index];
 6279              	 .loc 3 1581 0
 6280 0024 0D4A     	 ldr r2,.L429
 6281 0026 7B69     	 ldr r3,[r7,#20]
 6282 0028 52F82330 	 ldr r3,[r2,r3,lsl#2]
 6283 002c FB60     	 str r3,[r7,#12]
1582:../Libraries/XMCLib/src/xmc4_scu.c ****       if (event_handler != NULL)
 6284              	 .loc 3 1582 0
 6285 002e FB68     	 ldr r3,[r7,#12]
 6286 0030 002B     	 cmp r3,#0
 6287 0032 01D0     	 beq .L426
1583:../Libraries/XMCLib/src/xmc4_scu.c ****       {
1584:../Libraries/XMCLib/src/xmc4_scu.c ****           (event_handler)();
 6288              	 .loc 3 1584 0
 6289 0034 FB68     	 ldr r3,[r7,#12]
 6290 0036 9847     	 blx r3
 6291              	.L426:
1585:../Libraries/XMCLib/src/xmc4_scu.c ****       }
1586:../Libraries/XMCLib/src/xmc4_scu.c ****       
1587:../Libraries/XMCLib/src/xmc4_scu.c ****       XMC_SCU_INTERRUPT_ClearEventStatus((uint32_t)(1UL << index));
 6292              	 .loc 3 1587 0
 6293 0038 7B69     	 ldr r3,[r7,#20]
 6294 003a 0122     	 movs r2,#1
 6295 003c 02FA03F3 	 lsl r3,r2,r3
 6296 0040 1846     	 mov r0,r3
 6297 0042 FFF7FEFF 	 bl XMC_SCU_INTERRUPT_ClearEventStatus
1588:../Libraries/XMCLib/src/xmc4_scu.c ****       
1589:../Libraries/XMCLib/src/xmc4_scu.c ****       break;
 6298              	 .loc 3 1589 0
 6299 0046 05E0     	 b .L423
 6300              	.L425:
1590:../Libraries/XMCLib/src/xmc4_scu.c ****     }   
1591:../Libraries/XMCLib/src/xmc4_scu.c ****     index++;    
 6301              	 .loc 3 1591 0
 6302 0048 7B69     	 ldr r3,[r7,#20]
 6303 004a 0133     	 adds r3,r3,#1
 6304 004c 7B61     	 str r3,[r7,#20]
 6305              	.L424:
1577:../Libraries/XMCLib/src/xmc4_scu.c ****   {    
 6306              	 .loc 3 1577 0
 6307 004e 7B69     	 ldr r3,[r7,#20]
 6308 0050 1F2B     	 cmp r3,#31
 6309 0052 DFD9     	 bls .L428
 6310              	.L423:
1592:../Libraries/XMCLib/src/xmc4_scu.c ****   }
1593:../Libraries/XMCLib/src/xmc4_scu.c **** }
 6311              	 .loc 3 1593 0
 6312 0054 1837     	 adds r7,r7,#24
 6313              	.LCFI544:
 6314              	 .cfi_def_cfa_offset 8
 6315 0056 BD46     	 mov sp,r7
 6316              	.LCFI545:
 6317              	 .cfi_def_cfa_register 13
 6318              	 
 6319 0058 80BD     	 pop {r7,pc}
 6320              	.L430:
 6321 005a 00BF     	 .align 2
 6322              	.L429:
 6323 005c 00000000 	 .word event_handler_list
 6324              	 .cfi_endproc
 6325              	.LFE259:
 6327              	 .text
 6328              	.Letext0:
 6329              	 .file 5 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 6330              	 .file 6 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 6331              	 .file 7 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 6332              	 .file 8 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Include/core_cm4.h"
 6333              	 .file 9 "D:\\Bachelorarbeit\\Dave\\Basisstation\\hghg/Libraries/CMSIS/Infineon/XMC4500_series/Include/system_XMC4500.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc4_scu.c
    {standard input}:20     .text.XMC_SCU_CLOCK_GetUsbClockSource:00000000 $t
    {standard input}:24     .text.XMC_SCU_CLOCK_GetUsbClockSource:00000000 XMC_SCU_CLOCK_GetUsbClockSource
    {standard input}:57     .text.XMC_SCU_CLOCK_GetUsbClockSource:00000018 $d
    {standard input}:62     .text.XMC_SCU_CLOCK_GetWdtClockSource:00000000 $t
    {standard input}:66     .text.XMC_SCU_CLOCK_GetWdtClockSource:00000000 XMC_SCU_CLOCK_GetWdtClockSource
    {standard input}:98     .text.XMC_SCU_CLOCK_GetWdtClockSource:00000018 $d
    {standard input}:103    .text.XMC_SCU_CLOCK_GetExternalOutputClockSource:00000000 $t
    {standard input}:107    .text.XMC_SCU_CLOCK_GetExternalOutputClockSource:00000000 XMC_SCU_CLOCK_GetExternalOutputClockSource
    {standard input}:141    .text.XMC_SCU_CLOCK_GetExternalOutputClockSource:0000001c $d
    {standard input}:146    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 $t
    {standard input}:150    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemClockFrequency
    {standard input}:185    .text.XMC_SCU_CLOCK_GetSystemClockFrequency:00000020 $d
    {standard input}:191    .text.XMC_SCU_CLOCK_GetCpuClockFrequency:00000000 $t
    {standard input}:195    .text.XMC_SCU_CLOCK_GetCpuClockFrequency:00000000 XMC_SCU_CLOCK_GetCpuClockFrequency
    {standard input}:227    .text.XMC_SCU_CLOCK_GetCpuClockFrequency:00000014 $d
                            *COM*:00000080 event_handler_list
    {standard input}:233    .text.XMC_SCU_lDelay:00000000 $t
    {standard input}:237    .text.XMC_SCU_lDelay:00000000 XMC_SCU_lDelay
    {standard input}:304    .text.XMC_SCU_lDelay:0000003c $d
    {standard input}:310    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:315    .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:356    .text.XMC_SCU_INTERRUPT_EnableEvent:00000020 $d
    {standard input}:361    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:366    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:408    .text.XMC_SCU_INTERRUPT_DisableEvent:00000020 $d
    {standard input}:413    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:418    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:459    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000020 $d
    {standard input}:464    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:469    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:500    .text.XMC_SCU_INTERUPT_GetEventStatus:00000014 $d
    {standard input}:505    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:510    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:548    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000018 $d
    {standard input}:553    .text.XMC_SCU_GetBootMode:00000000 $t
    {standard input}:558    .text.XMC_SCU_GetBootMode:00000000 XMC_SCU_GetBootMode
    {standard input}:590    .text.XMC_SCU_GetBootMode:00000018 $d
    {standard input}:595    .text.XMC_SCU_SetBootMode:00000000 $t
    {standard input}:600    .text.XMC_SCU_SetBootMode:00000000 XMC_SCU_SetBootMode
    {standard input}:639    .text.XMC_SCU_SetBootMode:0000001c $d
    {standard input}:644    .text.XMC_SCU_ReadGPR:00000000 $t
    {standard input}:649    .text.XMC_SCU_ReadGPR:00000000 XMC_SCU_ReadGPR
    {standard input}:691    .text.XMC_SCU_ReadGPR:00000020 $d
    {standard input}:696    .text.XMC_SCU_WriteGPR:00000000 $t
    {standard input}:701    .text.XMC_SCU_WriteGPR:00000000 XMC_SCU_WriteGPR
    {standard input}:744    .text.XMC_SCU_WriteGPR:00000024 $d
    {standard input}:749    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 $t
    {standard input}:754    .text.XMC_SCU_EnableOutOfRangeComparator:00000000 XMC_SCU_EnableOutOfRangeComparator
    {standard input}:802    .text.XMC_SCU_EnableOutOfRangeComparator:00000034 $d
    {standard input}:807    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 $t
    {standard input}:812    .text.XMC_SCU_DisableOutOfRangeComparator:00000000 XMC_SCU_DisableOutOfRangeComparator
    {standard input}:861    .text.XMC_SCU_DisableOutOfRangeComparator:00000034 $d
    {standard input}:866    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 $t
    {standard input}:871    .text.XMC_SCU_CalibrateTemperatureSensor:00000000 XMC_SCU_CalibrateTemperatureSensor
    {standard input}:919    .text.XMC_SCU_CalibrateTemperatureSensor:00000028 $d
    {standard input}:924    .text.XMC_SCU_EnableTemperatureSensor:00000000 $t
    {standard input}:929    .text.XMC_SCU_EnableTemperatureSensor:00000000 XMC_SCU_EnableTemperatureSensor
    {standard input}:962    .text.XMC_SCU_EnableTemperatureSensor:0000001c $d
    {standard input}:967    .text.XMC_SCU_DisableTemperatureSensor:00000000 $t
    {standard input}:972    .text.XMC_SCU_DisableTemperatureSensor:00000000 XMC_SCU_DisableTemperatureSensor
    {standard input}:1005   .text.XMC_SCU_DisableTemperatureSensor:0000001c $d
    {standard input}:1010   .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 $t
    {standard input}:1015   .text.XMC_SCU_IsTemperatureSensorEnabled:00000000 XMC_SCU_IsTemperatureSensorEnabled
    {standard input}:1052   .text.XMC_SCU_IsTemperatureSensorEnabled:00000024 $d
    {standard input}:1057   .text.XMC_SCU_IsTemperatureSensorReady:00000000 $t
    {standard input}:1062   .text.XMC_SCU_IsTemperatureSensorReady:00000000 XMC_SCU_IsTemperatureSensorReady
    {standard input}:1099   .text.XMC_SCU_IsTemperatureSensorReady:00000024 $d
    {standard input}:1104   .text.XMC_SCU_StartTemperatureMeasurement:00000000 $t
    {standard input}:1109   .text.XMC_SCU_StartTemperatureMeasurement:00000000 XMC_SCU_StartTemperatureMeasurement
    {standard input}:1240   .text.XMC_SCU_IsTemperatureSensorBusy:00000000 XMC_SCU_IsTemperatureSensorBusy
    {standard input}:1170   .text.XMC_SCU_StartTemperatureMeasurement:00000048 $d
    {standard input}:1175   .text.XMC_SCU_GetTemperatureMeasurement:00000000 $t
    {standard input}:1180   .text.XMC_SCU_GetTemperatureMeasurement:00000000 XMC_SCU_GetTemperatureMeasurement
    {standard input}:1230   .text.XMC_SCU_GetTemperatureMeasurement:00000034 $d
    {standard input}:1235   .text.XMC_SCU_IsTemperatureSensorBusy:00000000 $t
    {standard input}:1277   .text.XMC_SCU_IsTemperatureSensorBusy:00000024 $d
    {standard input}:1282   .text.XMC_SCU_WriteToRetentionMemory:00000000 $t
    {standard input}:1287   .text.XMC_SCU_WriteToRetentionMemory:00000000 XMC_SCU_WriteToRetentionMemory
    {standard input}:1348   .text.XMC_SCU_WriteToRetentionMemory:00000048 $d
    {standard input}:1353   .text.XMC_SCU_ReadFromRetentionMemory:00000000 $t
    {standard input}:1358   .text.XMC_SCU_ReadFromRetentionMemory:00000000 XMC_SCU_ReadFromRetentionMemory
    {standard input}:1418   .text.XMC_SCU_ReadFromRetentionMemory:00000044 $d
    {standard input}:1423   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:1428   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:3024   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 XMC_SCU_CLOCK_SetSystemClockSource
    {standard input}:4549   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 XMC_SCU_HIB_EnableHibernateDomain
    {standard input}:5433   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 XMC_SCU_CLOCK_EnableLowPowerOscillator
    {standard input}:3366   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 XMC_SCU_HIB_SetStandbyClockSource
    {standard input}:4350   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 XMC_SCU_CLOCK_SetBackupClockCalibrationMode
    {standard input}:3431   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 XMC_SCU_CLOCK_SetSystemClockDivider
    {standard input}:3541   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 XMC_SCU_CLOCK_SetCpuClockDivider
    {standard input}:3486   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 XMC_SCU_CLOCK_SetCcuClockDivider
    {standard input}:3596   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 XMC_SCU_CLOCK_SetPeripheralClockDivider
    {standard input}:5571   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_EnableHighPerformanceOscillator
    {standard input}:5729   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 XMC_SCU_CLOCK_DisableSystemPll
    {standard input}:5685   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 XMC_SCU_CLOCK_EnableSystemPll
    {standard input}:5773   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 XMC_SCU_CLOCK_StartSystemPll
    {standard input}:1560   .text.XMC_SCU_TRAP_Enable:00000000 $t
    {standard input}:1565   .text.XMC_SCU_TRAP_Enable:00000000 XMC_SCU_TRAP_Enable
    {standard input}:1607   .text.XMC_SCU_TRAP_Enable:00000020 $d
    {standard input}:1612   .text.XMC_SCU_TRAP_Disable:00000000 $t
    {standard input}:1617   .text.XMC_SCU_TRAP_Disable:00000000 XMC_SCU_TRAP_Disable
    {standard input}:1658   .text.XMC_SCU_TRAP_Disable:00000020 $d
    {standard input}:1663   .text.XMC_SCU_TRAP_GetStatus:00000000 $t
    {standard input}:1668   .text.XMC_SCU_TRAP_GetStatus:00000000 XMC_SCU_TRAP_GetStatus
    {standard input}:1699   .text.XMC_SCU_TRAP_GetStatus:00000014 $d
    {standard input}:1704   .text.XMC_SCU_TRAP_Trigger:00000000 $t
    {standard input}:1709   .text.XMC_SCU_TRAP_Trigger:00000000 XMC_SCU_TRAP_Trigger
    {standard input}:1747   .text.XMC_SCU_TRAP_Trigger:00000018 $d
    {standard input}:1752   .text.XMC_SCU_TRAP_ClearStatus:00000000 $t
    {standard input}:1757   .text.XMC_SCU_TRAP_ClearStatus:00000000 XMC_SCU_TRAP_ClearStatus
    {standard input}:1795   .text.XMC_SCU_TRAP_ClearStatus:00000018 $d
    {standard input}:1800   .text.XMC_SCU_PARITY_ClearStatus:00000000 $t
    {standard input}:1805   .text.XMC_SCU_PARITY_ClearStatus:00000000 XMC_SCU_PARITY_ClearStatus
    {standard input}:1846   .text.XMC_SCU_PARITY_ClearStatus:00000020 $d
    {standard input}:1851   .text.XMC_SCU_PARITY_GetStatus:00000000 $t
    {standard input}:1856   .text.XMC_SCU_PARITY_GetStatus:00000000 XMC_SCU_PARITY_GetStatus
    {standard input}:1887   .text.XMC_SCU_PARITY_GetStatus:00000014 $d
    {standard input}:1892   .text.XMC_SCU_PARITY_Enable:00000000 $t
    {standard input}:1897   .text.XMC_SCU_PARITY_Enable:00000000 XMC_SCU_PARITY_Enable
    {standard input}:1938   .text.XMC_SCU_PARITY_Enable:00000020 $d
    {standard input}:1943   .text.XMC_SCU_PARITY_Disable:00000000 $t
    {standard input}:1948   .text.XMC_SCU_PARITY_Disable:00000000 XMC_SCU_PARITY_Disable
    {standard input}:1990   .text.XMC_SCU_PARITY_Disable:00000020 $d
    {standard input}:1995   .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 $t
    {standard input}:2000   .text.XMC_SCU_PARITY_EnableTrapGeneration:00000000 XMC_SCU_PARITY_EnableTrapGeneration
    {standard input}:2041   .text.XMC_SCU_PARITY_EnableTrapGeneration:00000020 $d
    {standard input}:2046   .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 $t
    {standard input}:2051   .text.XMC_SCU_PARITY_DisableTrapGeneration:00000000 XMC_SCU_PARITY_DisableTrapGeneration
    {standard input}:2093   .text.XMC_SCU_PARITY_DisableTrapGeneration:00000020 $d
    {standard input}:2098   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 $t
    {standard input}:2103   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000000 XMC_SCU_INTERRUPT_EnableNmiRequest
    {standard input}:2144   .text.XMC_SCU_INTERRUPT_EnableNmiRequest:00000020 $d
    {standard input}:2149   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 $t
    {standard input}:2154   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000000 XMC_SCU_INTERRUPT_DisableNmiRequest
    {standard input}:2196   .text.XMC_SCU_INTERRUPT_DisableNmiRequest:00000020 $d
    {standard input}:2201   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 $t
    {standard input}:2206   .text.XMC_SCU_RESET_AssertPeripheralReset:00000000 XMC_SCU_RESET_AssertPeripheralReset
    {standard input}:2259   .text.XMC_SCU_RESET_AssertPeripheralReset:00000034 $d
    {standard input}:2264   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 $t
    {standard input}:2269   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000000 XMC_SCU_RESET_DeassertPeripheralReset
    {standard input}:2322   .text.XMC_SCU_RESET_DeassertPeripheralReset:00000034 $d
    {standard input}:2327   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 $t
    {standard input}:2332   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000000 XMC_SCU_RESET_IsPeripheralResetAsserted
    {standard input}:2392   .text.XMC_SCU_RESET_IsPeripheralResetAsserted:00000044 $d
    {standard input}:2397   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 $t
    {standard input}:2402   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockFrequency
    {standard input}:2495   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency
    {standard input}:2485   .text.XMC_SCU_CLOCK_GetSystemPllClockFrequency:00000078 $d
    {standard input}:2490   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000000 $t
    {standard input}:2542   .text.XMC_SCU_CLOCK_GetSystemPllClockSourceFrequency:00000028 $d
    {standard input}:2548   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 $t
    {standard input}:2553   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbPllClockFrequency
    {standard input}:2617   .text.XMC_SCU_CLOCK_GetUsbPllClockFrequency:00000050 $d
    {standard input}:2622   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 $t
    {standard input}:2627   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000000 XMC_SCU_CLOCK_GetCcuClockFrequency
    {standard input}:2669   .text.XMC_SCU_CLOCK_GetCcuClockFrequency:00000028 $d
    {standard input}:2674   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 $t
    {standard input}:2679   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000000 XMC_SCU_CLOCK_GetUsbClockFrequency
    {standard input}:2741   .text.XMC_SCU_CLOCK_GetUsbClockFrequency:00000044 $d
    {standard input}:2746   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000000 $t
    {standard input}:2751   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000000 XMC_SCU_CLOCK_GetEbuClockFrequency
    {standard input}:2793   .text.XMC_SCU_CLOCK_GetEbuClockFrequency:00000024 $d
    {standard input}:2798   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 $t
    {standard input}:2803   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000000 XMC_SCU_CLOCK_GetWdtClockFrequency
    {standard input}:2874   .text.XMC_SCU_CLOCK_GetWdtClockFrequency:00000050 $d
    {standard input}:2880   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 $t
    {standard input}:2885   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:00000000 XMC_SCU_CLOCK_GetExternalOutputClockFrequency
    {standard input}:2974   .text.XMC_SCU_CLOCK_GetExternalOutputClockFrequency:0000006c $d
    {standard input}:2980   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:2985   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:3014   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:0000001c $d
    {standard input}:3019   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000000 $t
    {standard input}:3066   .text.XMC_SCU_CLOCK_SetSystemClockSource:00000024 $d
    {standard input}:3071   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 $t
    {standard input}:3076   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000000 XMC_SCU_CLOCK_SetUsbClockSource
    {standard input}:3118   .text.XMC_SCU_CLOCK_SetUsbClockSource:00000024 $d
    {standard input}:3123   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 $t
    {standard input}:3128   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000000 XMC_SCU_CLOCK_SetWdtClockSource
    {standard input}:3170   .text.XMC_SCU_CLOCK_SetWdtClockSource:00000024 $d
    {standard input}:3175   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 $t
    {standard input}:3180   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000000 XMC_SCU_CLOCK_SetExternalOutputClockSource
    {standard input}:3225   .text.XMC_SCU_CLOCK_SetExternalOutputClockSource:00000024 $d
    {standard input}:3230   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 $t
    {standard input}:3235   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:00000000 XMC_SCU_CLOCK_SetSystemPllClockSource
    {standard input}:3291   .text.XMC_SCU_CLOCK_SetSystemPllClockSource:0000003c $d
    {standard input}:3296   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 $t
    {standard input}:3301   .text.XMC_SCU_HIB_SetRtcClockSource:00000000 XMC_SCU_HIB_SetRtcClockSource
    {standard input}:3355   .text.XMC_SCU_HIB_SetRtcClockSource:00000034 $d
    {standard input}:3361   .text.XMC_SCU_HIB_SetStandbyClockSource:00000000 $t
    {standard input}:3420   .text.XMC_SCU_HIB_SetStandbyClockSource:00000034 $d
    {standard input}:3426   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000000 $t
    {standard input}:3476   .text.XMC_SCU_CLOCK_SetSystemClockDivider:00000024 $d
    {standard input}:3481   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000000 $t
    {standard input}:3531   .text.XMC_SCU_CLOCK_SetCcuClockDivider:00000024 $d
    {standard input}:3536   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000000 $t
    {standard input}:3586   .text.XMC_SCU_CLOCK_SetCpuClockDivider:00000024 $d
    {standard input}:3591   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000000 $t
    {standard input}:3641   .text.XMC_SCU_CLOCK_SetPeripheralClockDivider:00000024 $d
    {standard input}:3646   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 $t
    {standard input}:3651   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000000 XMC_SCU_CLOCK_SetUsbClockDivider
    {standard input}:3696   .text.XMC_SCU_CLOCK_SetUsbClockDivider:00000024 $d
    {standard input}:3701   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000000 $t
    {standard input}:3706   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000000 XMC_SCU_CLOCK_SetEbuClockDivider
    {standard input}:3751   .text.XMC_SCU_CLOCK_SetEbuClockDivider:00000024 $d
    {standard input}:3756   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 $t
    {standard input}:3761   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000000 XMC_SCU_CLOCK_SetWdtClockDivider
    {standard input}:3806   .text.XMC_SCU_CLOCK_SetWdtClockDivider:00000024 $d
    {standard input}:3811   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 $t
    {standard input}:3816   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:00000000 XMC_SCU_CLOCK_SetExternalOutputClockDivider
    {standard input}:3863   .text.XMC_SCU_CLOCK_SetExternalOutputClockDivider:0000002c $d
    {standard input}:3868   .text.XMC_SCU_CLOCK_EnableClock:00000000 $t
    {standard input}:3873   .text.XMC_SCU_CLOCK_EnableClock:00000000 XMC_SCU_CLOCK_EnableClock
    {standard input}:3912   .text.XMC_SCU_CLOCK_EnableClock:0000001c $d
    {standard input}:3917   .text.XMC_SCU_CLOCK_DisableClock:00000000 $t
    {standard input}:3922   .text.XMC_SCU_CLOCK_DisableClock:00000000 XMC_SCU_CLOCK_DisableClock
    {standard input}:3961   .text.XMC_SCU_CLOCK_DisableClock:0000001c $d
    {standard input}:3966   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 $t
    {standard input}:3971   .text.XMC_SCU_CLOCK_IsClockEnabled:00000000 XMC_SCU_CLOCK_IsClockEnabled
    {standard input}:4017   .text.XMC_SCU_CLOCK_IsClockEnabled:00000028 $d
    {standard input}:4022   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 $t
    {standard input}:4027   .text.XMC_SCU_POWER_GetEVR13Voltage:00000000 XMC_SCU_POWER_GetEVR13Voltage
    {standard input}:4064   .text.XMC_SCU_POWER_GetEVR13Voltage:00000028 $d
    {standard input}:4070   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 $t
    {standard input}:4075   .text.XMC_SCU_POWER_GetEVR33Voltage:00000000 XMC_SCU_POWER_GetEVR33Voltage
    {standard input}:4113   .text.XMC_SCU_POWER_GetEVR33Voltage:0000002c $d
    {standard input}:4119   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 $t
    {standard input}:4124   .text.XMC_SCU_CLOCK_EnableUsbPll:00000000 XMC_SCU_CLOCK_EnableUsbPll
    {standard input}:4158   .text.XMC_SCU_CLOCK_EnableUsbPll:0000001c $d
    {standard input}:4163   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 $t
    {standard input}:4168   .text.XMC_SCU_CLOCK_DisableUsbPll:00000000 XMC_SCU_CLOCK_DisableUsbPll
    {standard input}:4202   .text.XMC_SCU_CLOCK_DisableUsbPll:0000001c $d
    {standard input}:4207   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 $t
    {standard input}:4212   .text.XMC_SCU_CLOCK_StartUsbPll:00000000 XMC_SCU_CLOCK_StartUsbPll
    {standard input}:4298   .text.XMC_SCU_CLOCK_StartUsbPll:00000070 $d
    {standard input}:4303   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 $t
    {standard input}:4308   .text.XMC_SCU_CLOCK_StopUsbPll:00000000 XMC_SCU_CLOCK_StopUsbPll
    {standard input}:4339   .text.XMC_SCU_CLOCK_StopUsbPll:00000014 $d
    {standard input}:4345   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000000 $t
    {standard input}:4410   .text.XMC_SCU_CLOCK_SetBackupClockCalibrationMode:00000048 $d
    {standard input}:4415   .text.XMC_SCU_POWER_EnableUsb:00000000 $t
    {standard input}:4420   .text.XMC_SCU_POWER_EnableUsb:00000000 XMC_SCU_POWER_EnableUsb
    {standard input}:4451   .text.XMC_SCU_POWER_EnableUsb:00000014 $d
    {standard input}:4456   .text.XMC_SCU_POWER_DisableUsb:00000000 $t
    {standard input}:4461   .text.XMC_SCU_POWER_DisableUsb:00000000 XMC_SCU_POWER_DisableUsb
    {standard input}:4492   .text.XMC_SCU_POWER_DisableUsb:00000014 $d
    {standard input}:4497   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 $t
    {standard input}:4502   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000000 XMC_SCU_CLOCK_IsUsbPllLocked
    {standard input}:4539   .text.XMC_SCU_CLOCK_IsUsbPllLocked:00000020 $d
    {standard input}:4544   .text.XMC_SCU_HIB_EnableHibernateDomain:00000000 $t
    {standard input}:4616   .text.XMC_SCU_HIB_EnableHibernateDomain:00000050 $d
    {standard input}:4622   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 $t
    {standard input}:4627   .text.XMC_SCU_HIB_DisableHibernateDomain:00000000 XMC_SCU_HIB_DisableHibernateDomain
    {standard input}:4662   .text.XMC_SCU_HIB_DisableHibernateDomain:0000001c $d
    {standard input}:4668   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 $t
    {standard input}:4673   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000000 XMC_SCU_HIB_IsHibernateDomainEnabled
    {standard input}:4724   .text.XMC_SCU_HIB_IsHibernateDomainEnabled:00000034 $d
    {standard input}:4730   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 $t
    {standard input}:4735   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000000 XMC_SCU_HIB_EnableInternalSlowClock
    {standard input}:4777   .text.XMC_SCU_HIB_EnableInternalSlowClock:00000028 $d
    {standard input}:4783   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 $t
    {standard input}:4788   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000000 XMC_SCU_HIB_DisableInternalSlowClock
    {standard input}:4830   .text.XMC_SCU_HIB_DisableInternalSlowClock:00000028 $d
    {standard input}:4836   .text.XMC_SCU_HIB_ClearEventStatus:00000000 $t
    {standard input}:4841   .text.XMC_SCU_HIB_ClearEventStatus:00000000 XMC_SCU_HIB_ClearEventStatus
    {standard input}:4888   .text.XMC_SCU_HIB_ClearEventStatus:00000028 $d
    {standard input}:4894   .text.XMC_SCU_HIB_TriggerEvent:00000000 $t
    {standard input}:4899   .text.XMC_SCU_HIB_TriggerEvent:00000000 XMC_SCU_HIB_TriggerEvent
    {standard input}:4946   .text.XMC_SCU_HIB_TriggerEvent:00000028 $d
    {standard input}:4952   .text.XMC_SCU_HIB_EnableEvent:00000000 $t
    {standard input}:4957   .text.XMC_SCU_HIB_EnableEvent:00000000 XMC_SCU_HIB_EnableEvent
    {standard input}:5007   .text.XMC_SCU_HIB_EnableEvent:00000030 $d
    {standard input}:5013   .text.XMC_SCU_HIB_DisableEvent:00000000 $t
    {standard input}:5018   .text.XMC_SCU_HIB_DisableEvent:00000000 XMC_SCU_HIB_DisableEvent
    {standard input}:5069   .text.XMC_SCU_HIB_DisableEvent:00000030 $d
    {standard input}:5075   .text.XMC_SCU_HIB_EnterHibernateState:00000000 $t
    {standard input}:5080   .text.XMC_SCU_HIB_EnterHibernateState:00000000 XMC_SCU_HIB_EnterHibernateState
    {standard input}:5122   .text.XMC_SCU_HIB_EnterHibernateState:00000028 $d
    {standard input}:5128   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 $t
    {standard input}:5133   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000000 XMC_SCU_HIB_SetWakeupTriggerInput
    {standard input}:5196   .text.XMC_SCU_HIB_SetWakeupTriggerInput:00000044 $d
    {standard input}:5202   .text.XMC_SCU_HIB_SetPinMode:00000000 $t
    {standard input}:5207   .text.XMC_SCU_HIB_SetPinMode:00000000 XMC_SCU_HIB_SetPinMode
    {standard input}:5274   .text.XMC_SCU_HIB_SetPinMode:0000004c $d
    {standard input}:5280   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 $t
    {standard input}:5285   .text.XMC_SCU_HIB_SetPinOutputLevel:00000000 XMC_SCU_HIB_SetPinOutputLevel
    {standard input}:5348   .text.XMC_SCU_HIB_SetPinOutputLevel:0000004c $d
    {standard input}:5354   .text.XMC_SCU_HIB_SetInput0:00000000 $t
    {standard input}:5359   .text.XMC_SCU_HIB_SetInput0:00000000 XMC_SCU_HIB_SetInput0
    {standard input}:5422   .text.XMC_SCU_HIB_SetInput0:00000044 $d
    {standard input}:5428   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:00000000 $t
    {standard input}:5507   .text.XMC_SCU_CLOCK_EnableLowPowerOscillator:0000006c $d
    {standard input}:5513   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 $t
    {standard input}:5518   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000000 XMC_SCU_CLOCK_DisableLowPowerOscillator
    {standard input}:5560   .text.XMC_SCU_CLOCK_DisableLowPowerOscillator:00000028 $d
    {standard input}:5566   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000000 $t
    {standard input}:5630   .text.XMC_SCU_CLOCK_EnableHighPerformanceOscillator:00000054 $d
    {standard input}:5637   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 $t
    {standard input}:5642   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000000 XMC_SCU_CLOCK_DisableHighPerformanceOscillator
    {standard input}:5675   .text.XMC_SCU_CLOCK_DisableHighPerformanceOscillator:00000018 $d
    {standard input}:5680   .text.XMC_SCU_CLOCK_EnableSystemPll:00000000 $t
    {standard input}:5719   .text.XMC_SCU_CLOCK_EnableSystemPll:0000001c $d
    {standard input}:5724   .text.XMC_SCU_CLOCK_DisableSystemPll:00000000 $t
    {standard input}:5763   .text.XMC_SCU_CLOCK_DisableSystemPll:0000001c $d
    {standard input}:5768   .text.XMC_SCU_CLOCK_StartSystemPll:00000000 $t
    {standard input}:6054   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 XMC_SCU_CLOCK_StepSystemPllFrequency
    {standard input}:5996   .text.XMC_SCU_CLOCK_StartSystemPll:00000188 $d
    {standard input}:6006   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 $t
    {standard input}:6011   .text.XMC_SCU_CLOCK_StopSystemPll:00000000 XMC_SCU_CLOCK_StopSystemPll
    {standard input}:6044   .text.XMC_SCU_CLOCK_StopSystemPll:00000018 $d
    {standard input}:6049   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000000 $t
    {standard input}:6099   .text.XMC_SCU_CLOCK_StepSystemPllFrequency:00000028 $d
    {standard input}:6104   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 $t
    {standard input}:6109   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000000 XMC_SCU_CLOCK_IsSystemPllLocked
    {standard input}:6146   .text.XMC_SCU_CLOCK_IsSystemPllLocked:00000020 $d
    {standard input}:6151   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:6156   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:6235   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000054 $d
    {standard input}:6240   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:6245   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:6323   .text.XMC_SCU_IRQHandler:0000005c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClock
SystemCoreClockUpdate
OSCHP_GetFrequency
